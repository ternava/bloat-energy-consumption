        -:    0:Source:chisel_gzip-1.3_p0.2train.c
        -:    0:Graph:chisel_gzip-1.3_p0.2train.gcno
        -:    0:Data:chisel_gzip-1.3_p0.2train.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Generated by CIL v. 1.7.3 */
        -:    2:/* print_CIL_Input is true */
        -:    3:
        -:    4:struct option {
        -:    5:   char const   *name ;
        -:    6:   int has_arg ;
        -:    7:   int *flag ;
        -:    8:   int val ;
        -:    9:};
        -:   10:typedef void *voidp;
        -:   11:typedef unsigned long size_t;
        -:   12:typedef unsigned long __dev_t;
        -:   13:typedef unsigned int __uid_t;
        -:   14:typedef unsigned int __gid_t;
        -:   15:typedef unsigned long __ino_t;
        -:   16:typedef unsigned int __mode_t;
        -:   17:typedef unsigned long __nlink_t;
        -:   18:typedef long __off_t;
        -:   19:typedef long __off64_t;
        -:   20:typedef long __time_t;
        -:   21:typedef long __blksize_t;
        -:   22:typedef long __blkcnt_t;
        -:   23:typedef long __ssize_t;
        -:   24:typedef long __syscall_slong_t;
        -:   25:struct _IO_FILE;
        -:   26:struct _IO_FILE;
        -:   27:typedef struct _IO_FILE FILE;
        -:   28:typedef void _IO_lock_t;
        -:   29:struct _IO_marker {
        -:   30:   struct _IO_marker *_next ;
        -:   31:   struct _IO_FILE *_sbuf ;
        -:   32:   int _pos ;
        -:   33:};
        -:   34:struct _IO_FILE {
        -:   35:   int _flags ;
        -:   36:   char *_IO_read_ptr ;
        -:   37:   char *_IO_read_end ;
        -:   38:   char *_IO_read_base ;
        -:   39:   char *_IO_write_base ;
        -:   40:   char *_IO_write_ptr ;
        -:   41:   char *_IO_write_end ;
        -:   42:   char *_IO_buf_base ;
        -:   43:   char *_IO_buf_end ;
        -:   44:   char *_IO_save_base ;
        -:   45:   char *_IO_backup_base ;
        -:   46:   char *_IO_save_end ;
        -:   47:   struct _IO_marker *_markers ;
        -:   48:   struct _IO_FILE *_chain ;
        -:   49:   int _fileno ;
        -:   50:   int _flags2 ;
        -:   51:   __off_t _old_offset ;
        -:   52:   unsigned short _cur_column ;
        -:   53:   signed char _vtable_offset ;
        -:   54:   char _shortbuf[1] ;
        -:   55:   _IO_lock_t *_lock ;
        -:   56:   __off64_t _offset ;
        -:   57:   void *__pad1 ;
        -:   58:   void *__pad2 ;
        -:   59:   void *__pad3 ;
        -:   60:   void *__pad4 ;
        -:   61:   size_t __pad5 ;
        -:   62:   int _mode ;
        -:   63:   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t )] ;
        -:   64:};
        -:   65:typedef struct _IO_FILE _IO_FILE;
        -:   66:typedef __off_t off_t;
        -:   67:typedef __ssize_t ssize_t;
        -:   68:typedef __time_t time_t;
        -:   69:struct timespec {
        -:   70:   __time_t tv_sec ;
        -:   71:   __syscall_slong_t tv_nsec ;
        -:   72:};
        -:   73:typedef unsigned char uch;
        -:   74:typedef unsigned short ush;
        -:   75:typedef unsigned long ulg;
        -:   76:typedef int file_t;
        -:   77:struct stat {
        -:   78:   __dev_t st_dev ;
        -:   79:   __ino_t st_ino ;
        -:   80:   __nlink_t st_nlink ;
        -:   81:   __mode_t st_mode ;
        -:   82:   __uid_t st_uid ;
        -:   83:   __gid_t st_gid ;
        -:   84:   int __pad0 ;
        -:   85:   __dev_t st_rdev ;
        -:   86:   __off_t st_size ;
        -:   87:   __blksize_t st_blksize ;
        -:   88:   __blkcnt_t st_blocks ;
        -:   89:   struct timespec st_atim ;
        -:   90:   struct timespec st_mtim ;
        -:   91:   struct timespec st_ctim ;
        -:   92:   __syscall_slong_t __glibc_reserved[3] ;
        -:   93:};
        -:   94:typedef void (*__sighandler_t)(int  );
        -:   95:typedef ush Pos;
        -:   96:typedef unsigned int IPos;
        -:   97:struct config {
        -:   98:   ush good_length ;
        -:   99:   ush max_lazy ;
        -:  100:   ush nice_length ;
        -:  101:   ush max_chain ;
        -:  102:};
        -:  103:typedef struct config config;
        -:  104:struct huft;
        -:  105:union __anonunion_v_51 {
        -:  106:   ush n ;
        -:  107:   struct huft *t ;
        -:  108:};
        -:  109:struct huft {
        -:  110:   uch e ;
        -:  111:   uch b ;
        -:  112:   union __anonunion_v_51 v ;
        -:  113:};
        -:  114:union __anonunion_fc_52 {
        -:  115:   ush freq ;
        -:  116:   ush code ;
        -:  117:};
        -:  118:union __anonunion_dl_53 {
        -:  119:   ush dad ;
        -:  120:   ush len ;
        -:  121:};
        -:  122:struct ct_data {
        -:  123:   union __anonunion_fc_52 fc ;
        -:  124:   union __anonunion_dl_53 dl ;
        -:  125:};
        -:  126:typedef struct ct_data ct_data;
        -:  127:struct tree_desc {
        -:  128:   ct_data *dyn_tree ;
        -:  129:   ct_data *static_tree ;
        -:  130:   int *extra_bits ;
        -:  131:   int extra_base ;
        -:  132:   int elems ;
        -:  133:   int max_length ;
        -:  134:   int max_code ;
        -:  135:};
        -:  136:typedef struct tree_desc tree_desc;
        -:  137:typedef unsigned char char_type;
        -:  138:typedef long code_int;
        -:  139:typedef unsigned long cmp_code_int;
        -:  140:struct dirent {
        -:  141:   __ino_t d_ino ;
        -:  142:   __off_t d_off ;
        -:  143:   unsigned short d_reclen ;
        -:  144:   unsigned char d_type ;
        -:  145:   char d_name[256] ;
        -:  146:};
        -:  147:struct __dirstream;
        -:  148:struct __dirstream;
        -:  149:typedef struct __dirstream DIR;
        -:  150:struct utimbuf {
        -:  151:   __time_t actime ;
        -:  152:   __time_t modtime ;
        -:  153:};
        -:  154:#pragma merger("0","/tmp/cil-ZS5KSGrl.i","")
        -:  155:extern char *optarg ;
        -:  156:extern int optind ;
        -:  157:extern int getopt_long(int __argc , char * const  *__argv , char const   *__shortopts ,
        -:  158:                       struct option  const  *__longopts , int *__longind ) ;
        -:  159:extern int _IO_putc(int __c , _IO_FILE *__fp ) ;
        -:  160:extern struct _IO_FILE *stdin ;
        -:  161:extern struct _IO_FILE *stdout ;
        -:  162:extern struct _IO_FILE *stderr ;
        -:  163:extern int fflush(FILE *__stream ) ;
        -:  164:extern int fprintf(FILE * __restrict  __stream , char const   * __restrict  __format 
        -:  165:                   , ...) ;
        -:  166:extern int printf(char const   * __restrict  __format  , ...) ;
        -:  167:extern char *fgets(char * __restrict  __s , int __n , FILE * __restrict  __stream ) ;
        -:  168:extern void perror(char const   *__s ) ;
        -:  169:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) fileno)(FILE *__stream ) ;
        -:  170:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1,2), __leaf__)) memcpy)(void * __restrict  __dest ,
        -:  171:                                                                                                 void const   * __restrict  __src ,
        -:  172:                                                                                                 size_t __n ) ;
        -:  173:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1), __leaf__)) memset)(void *__s ,
        -:  174:                                                                                               int __c ,
        -:  175:                                                                                               size_t __n ) ;
        -:  176:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) memcmp)(void const   *__s1 ,
        -:  177:                                                                                               void const   *__s2 ,
        -:  178:                                                                                               size_t __n )  __attribute__((__pure__)) ;
        -:  179:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2), __leaf__)) strcpy)(char * __restrict  __dest ,
        -:  180:                                                                                                 char const   * __restrict  __src ) ;
        -:  181:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2), __leaf__)) strcat)(char * __restrict  __dest ,
        -:  182:                                                                                                 char const   * __restrict  __src ) ;
        -:  183:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) strcmp)(char const   *__s1 ,
        -:  184:                                                                                               char const   *__s2 )  __attribute__((__pure__)) ;
        -:  185:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) strncmp)(char const   *__s1 ,
        -:  186:                                                                                                char const   *__s2 ,
        -:  187:                                                                                                size_t __n )  __attribute__((__pure__)) ;
        -:  188:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1), __leaf__)) strrchr)(char const   *__s ,
        -:  189:                                                                                                int __c )  __attribute__((__pure__)) ;
        -:  190:extern  __attribute__((__nothrow__)) size_t ( __attribute__((__nonnull__(1,2), __leaf__)) strcspn)(char const   *__s ,
        -:  191:                                                                                                   char const   *__reject )  __attribute__((__pure__)) ;
        -:  192:extern  __attribute__((__nothrow__)) size_t ( __attribute__((__nonnull__(1,2), __leaf__)) strspn)(char const   *__s ,
        -:  193:                                                                                                  char const   *__accept )  __attribute__((__pure__)) ;
        -:  194:extern  __attribute__((__nothrow__)) size_t ( __attribute__((__nonnull__(1), __leaf__)) strlen)(char const   *__s )  __attribute__((__pure__)) ;
        -:  195:int method ;
        -:  196:uch inbuf[32832]  ;
        -:  197:uch outbuf[18432]  ;
        -:  198:ush d_buf[32768]  ;
        -:  199:uch window[65536L]  ;
        -:  200:ush prev[1L << 16]  ;
        -:  201:unsigned int insize  ;
        -:  202:unsigned int inptr  ;
        -:  203:unsigned int outcnt  ;
        -:  204:off_t bytes_in  ;
        -:  205:off_t bytes_out  ;
        -:  206:off_t header_bytes  ;
        -:  207:int ifd  ;
        -:  208:int ofd  ;
        -:  209:char ifname[1024]  ;
        -:  210:char ofname[1024]  ;
        -:  211:char *progname  ;
        -:  212:time_t time_stamp  ;
        -:  213:off_t ifile_size  ;
        -:  214:int decrypt  ;
        -:  215:int exit_code ;
        -:  216:             
        -:  217:int quiet ;
        -:  218:int level ;
        -:  219:int test ;
        -:  220:int to_stdout ;
        -:  221:int save_orig_name  ;
        -:  222:int zip(int in , int out ) ;
        -:  223:int file_read(char *buf , unsigned int size ) ;
        -:  224:int unzip(int in , int out ) ;
        -:  225:int check_zipfile(int in ) ;
        -:  226:int unpack(int in , int out ) ;
        -:  227:int unlzh(int in , int out ) ;
        -:  228:void abort_gzip(void) ;
        -:  229:void lm_init(int pack_level , ush *flags___0 ) ;
        -:  230:off_t deflate(void) ;
        -:  231:void ct_init(ush *attr , int *methodp ) ;
        -:  232:int ct_tally(int dist , int lc ) ;
        -:  233:off_t flush_block(char *buf , ulg stored_len , int eof ) ;
        -:  234:void bi_init(file_t zipfile ) ;
        -:  235:void send_bits(int value , int length ) ;
        -:  236:unsigned int bi_reverse(unsigned int code , int len ) ;
        -:  237:void bi_windup(void) ;
        -:  238:void copy_block(char *buf , unsigned int len , int header ) ;
        -:  239:int (*read_buf)(char *buf , unsigned int size )  ;
        -:  240:int copy(int in , int out ) ;
        -:  241:ulg updcrc(uch *s , unsigned int n ) ;
        -:  242:void clear_bufs(void) ;
        -:  243:int fill_inbuf(int eof_ok ) ;
        -:  244:void flush_outbuf(void) ;
        -:  245:void flush_window(void) ;
        -:  246:void write_buf(int fd , voidp buf , unsigned int cnt ) ;
        -:  247:char *strlwr(char *s ) ;
        -:  248:char *base_name(char *fname ) ;
        -:  249:int xunlink(char *filename ) ;
        -:  250:void make_simple_name(char *name ) ;
        -:  251:char *add_envopt(int *argcp , char ***argvp , char *env___0 ) ;
        -:  252:void error(char *m ) ;
        -:  253:void warning(char *m ) ;
        -:  254:void read_error(void) ;
        -:  255:void write_error(void) ;
        -:  256:void display_ratio(off_t num , off_t den , FILE *file ) ;
        -:  257:void fprint_off(FILE *file , off_t offset , int width ) ;
        -:  258:voidp xmalloc(unsigned int size ) ;
        -:  259:int inflate(void) ;
        -:  260:int maxbits ;
        -:  261:                
        -:  262:int lzw(int in , int out ) ;
        -:  263:int unlzw(int in , int out ) ;
        -:  264:extern  __attribute__((__nothrow__)) unsigned short const   **( __attribute__((__leaf__)) __ctype_b_loc)(void)  __attribute__((__const__)) ;
        -:  265:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) tolower)(int __c ) ;
        -:  266:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) stat)(char const   * __restrict  __file ,
        -:  267:                                                                                             struct stat * __restrict  __buf ) ;
        -:  268:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(2), __leaf__)) fstat)(int __fd ,
        -:  269:                                                                                            struct stat *__buf ) ;
        -:  270:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) chmod)(char const   *__file ,
        -:  271:                                                                                            __mode_t __mode ) ;
        -:  272:extern  __attribute__((__nothrow__)) int *( __attribute__((__leaf__)) __errno_location)(void)  __attribute__((__const__)) ;
        -:  273:extern  __attribute__((__nothrow__)) __sighandler_t ( __attribute__((__leaf__)) signal)(int __sig ,
        -:  274:                                                                                        void (*__handler)(int  ) ) ;
        -:  275:static file_t zfile  ;
        -:  276:static unsigned short bi_buf  ;
        -:  277:static int bi_valid  ;
        1:  278:void bi_init(file_t zipfile ) 
        -:  279:{ 
        -:  280:
        -:  281:
        -:  282:   
        -:  283:
        -:  284:                  
        -:  285:                             
        -:  286:               
        -:  287:                   {
        1:  288:    read_buf = & file_read;
        -:  289:  }
        -:  290:         
        -:  291: 
        -:  292:
        1:  293:}
    16572:  294:void send_bits(int value , int length ) 
        -:  295:{ 
        -:  296:  unsigned int tmp ;
        -:  297:  unsigned int tmp___0 ;
        -:  298:  unsigned int tmp___1 ;
        -:  299:  unsigned int tmp___2 ;
        -:  300:
        -:  301:  {
    16572:  302:  if (bi_valid > (int )(16UL * sizeof(char )) - length) {
     6013:  303:    bi_buf = (unsigned short )((int )bi_buf | (value << bi_valid));
        -:  304:                         {
     6013:  305:      tmp = outcnt;
     6013:  306:      outcnt ++;
     6013:  307:      outbuf[tmp] = (uch )((int )bi_buf & 255);
     6013:  308:      tmp___0 = outcnt;
     6013:  309:      outcnt ++;
     6013:  310:      outbuf[tmp___0] = (uch )((int )bi_buf >> 8);
        -:  311:    }       
        -:  312:                       
        -:  313:                
        -:  314:                                                   
        -:  315:                             
        -:  316:         
        -:  317:
        -:  318:                       
        -:  319:         
        -:  320:
        -:  321:       
        -:  322:                       
        -:  323:                
        -:  324:                                                  
        -:  325:                             
        -:  326:         
        -:  327:
        -:  328:                       
        -:  329:         
        -:  330:
        -:  331:       
        -:  332:     
     6013:  333:    bi_buf = (unsigned short )((int )((ush )value) >> (16UL * sizeof(char ) - (unsigned long )bi_valid));
     6013:  334:    bi_valid = (int )((unsigned long )bi_valid + ((unsigned long )length - 16UL * sizeof(char )));
     6013:  335:  } else {
    10559:  336:    bi_buf = (unsigned short )((int )bi_buf | (value << bi_valid));
    10559:  337:    bi_valid += length;
        -:  338:  }
        -:  339:         
        -:  340:}
    16572:  341:}
      623:  342:unsigned int bi_reverse(unsigned int code , int len ) 
        -:  343:{ 
        -:  344:  register unsigned int res ;
        -:  345:
        -:  346:  {
      623:  347:  res = 0U;
        -:  348:  {
     3231:  349:  while (1) {
        -:  350:                                     ;
     3231:  351:    res |= code & 1U;
     3231:  352:    code >>= 1;
     3231:  353:    res <<= 1;
     3231:  354:    len --;
     3231:  355:    if (! (len > 0)) {
      623:  356:      goto while_break;
        -:  357:    }
        -:  358:  }
        -:  359:  while_break: /* CIL Label */ ;
        -:  360:  }
      623:  361:  return (res >> 1);
        -:  362:}
        -:  363:}
        1:  364:void bi_windup(void) 
        -:  365:{ 
        -:  366:  unsigned int tmp ;
        -:  367:  unsigned int tmp___0 ;
        -:  368:  unsigned int tmp___1 ;
        -:  369:  unsigned int tmp___2 ;
        -:  370:  unsigned int tmp___3 ;
        -:  371:
        -:  372:  {
        1:  373:  if (bi_valid > 8) {
        -:  374:                         {
        1:  375:      tmp = outcnt;
        1:  376:      outcnt ++;
        1:  377:      outbuf[tmp] = (uch )((int )bi_buf & 255);
        1:  378:      tmp___0 = outcnt;
        1:  379:      outcnt ++;
        1:  380:      outbuf[tmp___0] = (uch )((int )bi_buf >> 8);
        -:  381:    }       
        -:  382:                       
        -:  383:                
        -:  384:                                                   
        -:  385:                             
        -:  386:         
        -:  387:
        -:  388:                       
        -:  389:         
        -:  390:
        -:  391:       
        -:  392:                       
        -:  393:                
        -:  394:                                                  
        -:  395:                             
        -:  396:         
        -:  397:
        -:  398:                       
        -:  399:         
        -:  400:
        -:  401:       
        -:  402:     
        1:  403:  } else { //Added block
        -:  404:                    {
    #####:  405:    tmp___3 = outcnt;
    #####:  406:    outcnt ++;
    #####:  407:    outbuf[tmp___3] = (uch )bi_buf;
        -:  408:                           
        -:  409:       
        -:  410:
        -:  411:                     
        -:  412:       
        -:  413:
        -:  414:     
        -:  415:  }
        -:  416:  }
        -:  417:                             
        -:  418:               
        -:  419:         
        -:  420:}
        1:  421:}
    #####:  422:void copy_block(char *buf , unsigned int len , int header ) 
        -:  423:{ 
        -:  424:  unsigned int tmp ;
        -:  425:  unsigned int tmp___0 ;
        -:  426:  unsigned int tmp___1 ;
        -:  427:  unsigned int tmp___2 ;
        -:  428:  unsigned int tmp___3 ;
        -:  429:  unsigned int tmp___4 ;
        -:  430:  unsigned int tmp___5 ;
        -:  431:  unsigned int tmp___6 ;
        -:  432:  unsigned int tmp___7 ;
        -:  433:  char *tmp___8 ;
        -:  434:  unsigned int tmp___9 ;
        -:  435:
        -:  436:   
        -:  437:   
        -:  438:              
        -:  439:   
        -:  440:               
        -:  441:                          
        -:  442:                   
        -:  443:                
        -:  444:                                                    
        -:  445:                       
        -:  446:                
        -:  447:                                                       
        -:  448:            
        -:  449:                       
        -:  450:                
        -:  451:                                                        
        -:  452:                             
        -:  453:         
        -:  454:
        -:  455:                       
        -:  456:         
        -:  457:
        -:  458:       
        -:  459:                       
        -:  460:                
        -:  461:                                                       
        -:  462:                             
        -:  463:         
        -:  464:
        -:  465:                       
        -:  466:         
        -:  467:
        -:  468:       
        -:  469:     
        -:  470:                          
        -:  471:                       
        -:  472:                
        -:  473:                                                            
        -:  474:                       
        -:  475:                
        -:  476:                                                           
        -:  477:            
        -:  478:                       
        -:  479:                
        -:  480:                                                            
        -:  481:                             
        -:  482:         
        -:  483:
        -:  484:                       
        -:  485:         
        -:  486:
        -:  487:       
        -:  488:                       
        -:  489:                
        -:  490:                                                           
        -:  491:                             
        -:  492:         
        -:  493:
        -:  494:                       
        -:  495:         
        -:  496:
        -:  497:       
        -:  498:     
        -:  499:   
        -:  500:   
        -:  501:             
        -:  502:                                      
        -:  503:                  
        -:  504:           
        -:  505:                    
        -:  506:                       
        -:  507:     
        -:  508:                     
        -:  509:              
        -:  510:                  
        -:  511:           
        -:  512:                                     
        -:  513:                           
        -:  514:       
        -:  515:
        -:  516:                     
        -:  517:       
        -:  518:
        -:  519:     
        -:  520:   
        -:  521:                                
        -:  522:   
        -:  523:         
        -:  524: 
    #####:  525:}
        -:  526:ulg window_size  =    65536UL;
        -:  527:long block_start  ;
        -:  528:static unsigned int ins_h  ;
        -:  529:unsigned int prev_length  ;
        -:  530:unsigned int strstart  ;
        -:  531:unsigned int match_start  ;
        -:  532:static int eofile  ;
        -:  533:static unsigned int lookahead  ;
        -:  534:unsigned int max_chain_length  ;
        -:  535:static unsigned int max_lazy_match  ;
        -:  536:static int compr_level  ;
        -:  537:unsigned int good_match  ;
        -:  538:int nice_match  ;
        -:  539:static config configuration_table[10]  = 
        -:  540:  {      {(ush )0, (ush )0, (ush )0, (ush )0}, 
        -:  541:        {(ush )4, (ush )4, (ush )8, (ush )4}, 
        -:  542:        {(ush )4, (ush )5, (ush )16, (ush )8}, 
        -:  543:        {(ush )4, (ush )6, (ush )32, (ush )32}, 
        -:  544:        {(ush )4, (ush )4, (ush )16, (ush )16}, 
        -:  545:        {(ush )8, (ush )16, (ush )32, (ush )32}, 
        -:  546:        {(ush )8, (ush )16, (ush )128, (ush )128}, 
        -:  547:        {(ush )8, (ush )32, (ush )128, (ush )256}, 
        -:  548:        {(ush )32, (ush )128, (ush )258, (ush )1024}, 
        -:  549:        {(ush )32, (ush )258, (ush )258, (ush )4096}};
        -:  550:static void fill_window(void) ;
        -:  551:static off_t deflate_fast(void) ;
        -:  552:int longest_match(IPos cur_match ) ;
        1:  553:void lm_init(int pack_level , ush *flags___0 ) 
        -:  554:{ 
        -:  555:  register unsigned int j___0 ;
        -:  556:  unsigned int tmp ;
        -:  557:  int tmp___0 ;
        -:  558:
        -:  559:  {
        -:  560:                       
        -:  561:     
        -:  562:
        -:  563:                                    
        -:  564:     
        -:  565:
        -:  566:                        
        -:  567:                       
        -:  568:     
        -:  569:
        -:  570:                                    
        -:  571:     
        -:  572:
        -:  573:   
        -:  574:   
        -:  575:  {
        1:  576:  compr_level = pack_level;
        -:  577:                                                                                                                    
        1:  578:  max_lazy_match = (unsigned int )configuration_table[pack_level].max_lazy;
        1:  579:  good_match = (unsigned int )configuration_table[pack_level].good_length;
        1:  580:  nice_match = (int )configuration_table[pack_level].nice_length;
        1:  581:  max_chain_length = (unsigned int )configuration_table[pack_level].max_chain;
        -:  582:  }
        1:  583:  if (pack_level == 1) {
    #####:  584:    *flags___0 = (ush )((int )*flags___0 | 4);
    #####:  585:  } else { //Added block
        1:  586:  if (pack_level == 9) {
    #####:  587:    *flags___0 = (ush )((int )*flags___0 | 2);
    #####:  588:  }
        -:  589:  }
        -:  590:                
        -:  591:                   
        -:  592:                           {
        1:  593:    tmp = 32768U;
        -:  594:  }       
        -:  595:                 
        -:  596:   
        -:  597:  {
        1:  598:  tmp___0 = (*read_buf)((char *)(window), tmp);
        1:  599:  lookahead = (unsigned int )tmp___0;
        -:  600:  }
        -:  601:                        
        -:  602:               
        -:  603:                   
        -:  604:           
        -:  605:                        
        -:  606:                                 
        -:  607:               
        -:  608:                   
        -:  609:           
        -:  610:   
        -:  611:   
        -:  612:             
        -:  613:   
        -:  614:             
        -:  615:                                      
        -:  616:                           
        -:  617:                         
        -:  618:                         
        -:  619:       
        -:  620:            
        -:  621:                       
        -:  622:     
        -:  623:     
        -:  624:                  
        -:  625:     
        -:  626:   
        -:  627:                                
        -:  628:   
        -:  629:             
        -:  630:             
        -:  631:   
        -:  632:             
        -:  633:                                          
        -:  634:                         
        -:  635:                           
        -:  636:     
        -:  637:                                                                                            
        -:  638:             
        -:  639:   
        -:  640:                                    
        -:  641:   
        -:  642:         
        -:  643:}
        1:  644:}
     9037:  645:int longest_match(IPos cur_match ) 
        -:  646:{ 
        -:  647:  unsigned int chain_length ;
        -:  648:  register uch *scan ;
        -:  649:  register uch *match ;
        -:  650:  register int len ;
        -:  651:  int best_len ;
        -:  652:  IPos limit ;
        -:  653:  unsigned int tmp ;
        -:  654:  register uch *strend ;
        -:  655:  register uch scan_end1 ;
        -:  656:  register uch scan_end ;
        -:  657:
        -:  658:  {
     9037:  659:  chain_length = max_chain_length;
     9037:  660:  scan = window + strstart;
     9037:  661:  best_len = (int )prev_length;
     9037:  662:  if (strstart > 32506U) {
      391:  663:    tmp = strstart - 32506U;
      391:  664:  } else {
     8646:  665:    tmp = 0U;
        -:  666:  }
     9037:  667:  limit = tmp;
     9037:  668:  strend = (window + strstart) + 258;
     9037:  669:  scan_end1 = *(scan + (best_len - 1));
     9037:  670:  scan_end = *(scan + best_len);
     9037:  671:  if (prev_length >= good_match) {
     1279:  672:    chain_length >>= 2;
     1279:  673:  }
        -:  674:  {
   211931:  675:  while (1) {
        -:  676:                                     ;
   211931:  677:    match = window + cur_match;
        -:  678:                                                      
        -:  679:                  
        -:  680:           { //Added block
        -:  681:                                                             
        -:  682:                  
        -:  683:           { //Added block
   211931:  684:    if ((int )*match != (int )*scan) {
    15367:  685:      goto __Cont;
        -:  686:    } else {
   196564:  687:      match ++;
   196564:  688:      if ((int )*match != (int )*(scan + 1)) {
      163:  689:        goto __Cont;
        -:  690:      }
        -:  691:    }
        -:  692:    }
        -:  693:    }
   196401:  694:    scan += 2;
   196401:  695:    match ++;
        -:  696:    {
   199680:  697:    while (1) {
        -:  698:                                           ;
   199680:  699:      scan ++;
   199680:  700:      match ++;
   199680:  701:      if ((int )*scan == (int )*match) {
   102369:  702:        scan ++;
   102369:  703:        match ++;
   102369:  704:        if ((int )*scan == (int )*match) {
    59425:  705:          scan ++;
    59425:  706:          match ++;
    59425:  707:          if ((int )*scan == (int )*match) {
    37666:  708:            scan ++;
    37666:  709:            match ++;
    37666:  710:            if ((int )*scan == (int )*match) {
    15398:  711:              scan ++;
    15398:  712:              match ++;
    15398:  713:              if ((int )*scan == (int )*match) {
    10446:  714:                scan ++;
    10446:  715:                match ++;
    10446:  716:                if ((int )*scan == (int )*match) {
     6846:  717:                  scan ++;
     6846:  718:                  match ++;
     6846:  719:                  if ((int )*scan == (int )*match) {
     4603:  720:                    scan ++;
     4603:  721:                    match ++;
     4603:  722:                    if ((int )*scan == (int )*match) {
     3280:  723:                      if (! ((unsigned long )scan < (unsigned long )strend)) {
        1:  724:                        goto while_break___0;
        -:  725:                      }
     3279:  726:                    } else {
     1323:  727:                      goto while_break___0;
        -:  728:                    }
     3279:  729:                  } else {
     2243:  730:                    goto while_break___0;
        -:  731:                  }
     3279:  732:                } else {
     3600:  733:                  goto while_break___0;
        -:  734:                }
     3279:  735:              } else {
     4952:  736:                goto while_break___0;
        -:  737:              }
     3279:  738:            } else {
    22268:  739:              goto while_break___0;
        -:  740:            }
     3279:  741:          } else {
    21759:  742:            goto while_break___0;
        -:  743:          }
     3279:  744:        } else {
    42944:  745:          goto while_break___0;
        -:  746:        }
     3279:  747:      } else {
    97311:  748:        goto while_break___0;
        -:  749:      }
        -:  750:    }
        -:  751:    while_break___0: /* CIL Label */ ;
        -:  752:    }
   196401:  753:    len = 258 - (int )(strend - scan);
   196401:  754:    scan = strend - 258;
   204089:  755:    if (len > best_len) {
     7690:  756:      match_start = cur_match;
     7690:  757:      best_len = len;
     7690:  758:      if (len >= nice_match) {
        2:  759:        goto while_break;
        -:  760:      }
     7688:  761:      scan_end1 = *(scan + (best_len - 1));
        -:  762:                                    
     7688:  763:    }
        -:  764:    __Cont: 
   211929:  765:    cur_match = (IPos )prev[cur_match & 32767U];
   211929:  766:    if (cur_match > limit) {
   203777:  767:      chain_length --;
   203777:  768:      if (! (chain_length != 0U)) {
      883:  769:        goto while_break;
        -:  770:      }
   202894:  771:    } else {
     8152:  772:      goto while_break;
        -:  773:    }
        -:  774:  }
        -:  775:  while_break: /* CIL Label */ ;
        -:  776:  }
     9037:  777:  return (best_len);
        -:  778:}
        -:  779:}
    11567:  780:static void fill_window(void) 
        -:  781:{ 
        -:  782:  register unsigned int n ;
        -:  783:  register unsigned int m ;
        -:  784:  unsigned int more ;
        -:  785:  unsigned int tmp ;
        -:  786:  unsigned int tmp___0 ;
        -:  787:  int tmp___1 ;
        -:  788:
        -:  789:  {
    11567:  790:  more = (unsigned int )((window_size - (ulg )lookahead) - (ulg )strstart);
        -:  791:                            
        -:  792:            
        -:  793:                        
        -:  794:                           
        -:  795:     
        -:  796:                                                                                                            
        -:  797:                            
        -:  798:                          
        -:  799:                       
        -:  800:                          
        -:  801:           
        -:  802:     
        -:  803:     
        -:  804:               
        -:  805:                                        
        -:  806:                                             
        -:  807:                         
        -:  808:       
        -:  809:                                               
        -:  810:                        
        -:  811:                         
        -:  812:              
        -:  813:                 
        -:  814:       
        -:  815:                                        
        -:  816:           
        -:  817:     
        -:  818:                                  
        -:  819:     
        -:  820:           
        -:  821:     
        -:  822:               
        -:  823:                                            
        -:  824:                           
        -:  825:                             
        -:  826:       
        -:  827:                                 
        -:  828:                        
        -:  829:                             
        -:  830:              
        -:  831:                     
        -:  832:       
        -:  833:                              
        -:  834:           
        -:  835:     
        -:  836:                                      
        -:  837:     
        -:  838:                   
        -:  839:   
        -:  840:   
        -:  841:                {
        -:  842:    {
    11567:  843:    tmp___1 = (*read_buf)(((char *)(window) + strstart) + lookahead, more);
    11567:  844:    n = (unsigned int )tmp___1;
        -:  845:    }
    11567:  846:    if (n == 0U) {
    11566:  847:      eofile = 1;
    11566:  848:    } else { //Added block
        -:  849:                           
        -:  850:                 
        -:  851:           {
        1:  852:      lookahead += n;
        -:  853:    }
        -:  854:    }
        -:  855:  }
        -:  856:         
        -:  857:}
    11567:  858:}
    #####:  859:static off_t deflate_fast(void) 
        -:  860:{ 
        -:  861:  IPos hash_head ;
        -:  862:  int flush ;
        -:  863:  unsigned int match_length ;
        -:  864:  int tmp ;
        -:  865:  char *tmp___0 ;
        -:  866:  char *tmp___1 ;
        -:  867:  off_t tmp___2 ;
        -:  868:
        -:  869:  {
        -:  870:                    
        -:  871:                   
        -:  872:  {
    #####:  873:  while (1) {
        -:  874:                                     ;
    #####:  875:    if (! (lookahead != 0U)) {
    #####:  876:      goto while_break;
        -:  877:    }
    #####:  878:    ins_h = ((ins_h << 5) ^ (unsigned int )window[(strstart + 3U) - 1U]) & ((unsigned int )(1 << 15) - 1U);
    #####:  879:    hash_head = (IPos )*((prev + 32768) + ins_h);
    #####:  880:    prev[strstart & 32767U] = (ush )hash_head;
    #####:  881:    *((prev + 32768) + ins_h) = (ush )strstart;
    #####:  882:    if (hash_head != 0U) {
    #####:  883:      if (strstart - hash_head <= 32506U) {
        -:  884:        {
    #####:  885:        tmp = longest_match(hash_head);
    #####:  886:        match_length = (unsigned int )tmp;
        -:  887:        }
        -:  888:                                       
        -:  889:                                   
        -:  890:         
    #####:  891:      }
    #####:  892:    }
    #####:  893:    if (match_length >= 3U) {
        -:  894:      {
    #####:  895:      flush = ct_tally((int )(strstart - match_start), (int )(match_length - 3U));
    #####:  896:      lookahead -= match_length;
        -:  897:      }
    #####:  898:      if (match_length <= max_lazy_match) {
    #####:  899:        match_length --;
        -:  900:        {
    #####:  901:        while (1) {
        -:  902:                                               ;
    #####:  903:          strstart ++;
    #####:  904:          ins_h = ((ins_h << 5) ^ (unsigned int )window[(strstart + 3U) - 1U]) & ((unsigned int )(1 << 15) - 1U);
    #####:  905:          hash_head = (IPos )*((prev + 32768) + ins_h);
    #####:  906:          prev[strstart & 32767U] = (ush )hash_head;
    #####:  907:          *((prev + 32768) + ins_h) = (ush )strstart;
    #####:  908:          match_length --;
    #####:  909:          if (! (match_length != 0U)) {
    #####:  910:            goto while_break___0;
        -:  911:          }
        -:  912:        }
        -:  913:        while_break___0: /* CIL Label */ ;
        -:  914:        }
    #####:  915:        strstart ++;
    #####:  916:      } else {
    #####:  917:        strstart += match_length;
    #####:  918:        match_length = 0U;
    #####:  919:        ins_h = (unsigned int )window[strstart];
    #####:  920:        ins_h = ((ins_h << 5) ^ (unsigned int )window[strstart + 1U]) & ((unsigned int )(1 << 15) - 1U);
        -:  921:      }
    #####:  922:    } else {
        -:  923:       
        -:  924:
    #####:  925:      flush = ct_tally(0, (int )window[strstart]);
    #####:  926:      lookahead --;
    #####:  927:      strstart ++;
        -:  928:       
        -:  929:
        -:  930:    }
        -:  931:                
        -:  932:                              
        -:  933:                                                                 
        -:  934:              
        -:  935:                                      
        -:  936:       
        -:  937:       
        -:  938:                                                                     
        -:  939:                                    
        -:  940:       
        -:  941:     
        -:  942:    {
        -:  943:              {
        -:  944:                                           ;
        -:  945:                             
        -:  946:                           
        -:  947:                               
        -:  948:         
        -:  949:              
        -:  950:                             
        -:  951:       
        -:  952:      {
    #####:  953:      fill_window();
        -:  954:      }
    #####:  955:    }
        -:  956:    while_break___1: /* CIL Label */ ;
        -:  957:    }
        -:  958:  }
        -:  959:  while_break: /* CIL Label */ ;
        -:  960:  }
        -:  961:                         {
    #####:  962:    tmp___1 = (char *)(& window[(unsigned int )block_start]);
        -:  963:  }       
        -:  964:                                  
        -:  965:   
        -:  966:  {
    #####:  967:  tmp___2 = flush_block(tmp___1, (ulg )((long )strstart - block_start), 1);
        -:  968:  }
    #####:  969:  return (tmp___2);
        -:  970:}
        -:  971:}
        1:  972:off_t deflate(void) 
        -:  973:{ 
        -:  974:  IPos hash_head ;
        -:  975:  IPos prev_match ;
        -:  976:  int flush ;
        -:  977:  int match_available ;
        -:  978:  register unsigned int match_length ;
        -:  979:  off_t tmp ;
        -:  980:  int tmp___0 ;
        -:  981:  char *tmp___1 ;
        -:  982:  char *tmp___2 ;
        -:  983:  int tmp___3 ;
        -:  984:  char *tmp___4 ;
        -:  985:  off_t tmp___5 ;
        -:  986:
        -:  987:  {
        1:  988:  match_available = 0;
        1:  989:  match_length = 2U;
        1:  990:  if (compr_level <= 3) {
        -:  991:    {
    #####:  992:    tmp = deflate_fast();
        -:  993:    }
    #####:  994:    return (tmp);
        -:  995:  }
        -:  996:  {
    11568:  997:  while (1) {
        -:  998:                                     ;
    11568:  999:    if (! (lookahead != 0U)) {
        1: 1000:      goto while_break;
        -: 1001:    }
    11567: 1002:    ins_h = ((ins_h << 5) ^ (unsigned int )window[(strstart + 3U) - 1U]) & ((unsigned int )(1 << 15) - 1U);
    11567: 1003:    hash_head = (IPos )*((prev + 32768) + ins_h);
    11567: 1004:    prev[strstart & 32767U] = (ush )hash_head;
    11567: 1005:    *((prev + 32768) + ins_h) = (ush )strstart;
    11567: 1006:    prev_length = match_length;
    11567: 1007:    prev_match = match_start;
        -: 1008:                      
    11567: 1009:    if (hash_head != 0U) {
     9271: 1010:      if (prev_length < max_lazy_match) {
        -: 1011:                                            {
        -: 1012:          {
     9037: 1013:          tmp___0 = longest_match(hash_head);
     9037: 1014:          match_length = (unsigned int )tmp___0;
        -: 1015:          }
        -: 1016:                                         
        -: 1017:                                     
        -: 1018:           
     9037: 1019:          if (match_length == 3U) {
     1232: 1020:            if (strstart - match_start > 4096U) {
      265: 1021:              match_length --;
      265: 1022:            }
     1232: 1023:          }
        -: 1024:        }
     9037: 1025:      }
     9271: 1026:    }
    11567: 1027:    if (prev_length >= 3U) {
     4784: 1028:      if (match_length <= prev_length) {
        -: 1029:        {
     4166: 1030:        flush = ct_tally((int )((strstart - 1U) - prev_match), (int )(prev_length - 3U));
     4166: 1031:        lookahead -= prev_length - 1U;
     4166: 1032:        prev_length -= 2U;
        -: 1033:        }
        -: 1034:        {
    22664: 1035:        while (1) {
        -: 1036:                                               ;
    22664: 1037:          strstart ++;
    22664: 1038:          ins_h = ((ins_h << 5) ^ (unsigned int )window[(strstart + 3U) - 1U]) & ((unsigned int )(1 << 15) - 1U);
    22664: 1039:          hash_head = (IPos )*((prev + 32768) + ins_h);
    22664: 1040:          prev[strstart & 32767U] = (ush )hash_head;
    22664: 1041:          *((prev + 32768) + ins_h) = (ush )strstart;
    22664: 1042:          prev_length --;
    22664: 1043:          if (! (prev_length != 0U)) {
     4166: 1044:            goto while_break___0;
        -: 1045:          }
        -: 1046:        }
        -: 1047:        while_break___0: /* CIL Label */ ;
        -: 1048:        }
     4166: 1049:        match_available = 0;
     4166: 1050:        match_length = 2U;
     4166: 1051:        strstart ++;
        -: 1052:                    
        -: 1053:                                  
        -: 1054:                                                                     
        -: 1055:                  
        -: 1056:                                          
        -: 1057:           
        -: 1058:           
        -: 1059:                                                                         
        -: 1060:                                        
        -: 1061:           
        -: 1062:         
     4166: 1063:      } else {
      618: 1064:        goto _L;
        -: 1065:      }
    10949: 1066:    } else { //Added block
        -: 1067:    _L: 
     7401: 1068:    if (match_available) {
        -: 1069:      {
     3234: 1070:      tmp___3 = ct_tally(0, (int )window[strstart - 1U]);
        -: 1071:      }
        -: 1072:                    
        -: 1073:                                
        -: 1074:                                                                   
        -: 1075:                
        -: 1076:                                        
        -: 1077:         
        -: 1078:         
        -: 1079:                                                                       
        -: 1080:                                      
        -: 1081:         
        -: 1082:       
     3234: 1083:      strstart ++;
     3234: 1084:      lookahead --;
     3234: 1085:    } else {
     4167: 1086:      match_available = 1;
     4167: 1087:      strstart ++;
     4167: 1088:      lookahead --;
        -: 1089:    }
        -: 1090:    }
        -: 1091:    {
        -: 1092:              {
        -: 1093:                                           ;
        -: 1094:                             
        -: 1095:                           
        -: 1096:                               
        -: 1097:         
        -: 1098:              
        -: 1099:                             
        -: 1100:       
        -: 1101:      {
    11567: 1102:      fill_window();
        -: 1103:      }
    11567: 1104:    }
        -: 1105:    while_break___1: /* CIL Label */ ;
        -: 1106:    }
        -: 1107:  }
        -: 1108:  while_break: /* CIL Label */ ;
        -: 1109:  }
        -: 1110:                       {
        -: 1111:     
        -: 1112:
        1: 1113:    ct_tally(0, (int )window[strstart - 1U]);
        -: 1114:     
        -: 1115:
        -: 1116:  }
        -: 1117:                         {
        1: 1118:    tmp___4 = (char *)(& window[(unsigned int )block_start]);
        -: 1119:  }       
        -: 1120:                                  
        -: 1121:   
        -: 1122:  {
        1: 1123:  tmp___5 = flush_block(tmp___4, (ulg )((long )strstart - block_start), 1);
        -: 1124:  }
        -: 1125:                   
        -: 1126:}
        1: 1127:}
        -: 1128:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) atoi)(char const   *__nptr )  __attribute__((__pure__)) ;
        -: 1129:extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) malloc)(size_t __size )  __attribute__((__malloc__)) ;
        -: 1130:extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) calloc)(size_t __nmemb ,
        -: 1131:                                                                               size_t __size )  __attribute__((__malloc__)) ;
        -: 1132:extern  __attribute__((__nothrow__)) void ( __attribute__((__leaf__)) free)(void *__ptr ) ;
        -: 1133:extern  __attribute__((__nothrow__, __noreturn__)) void ( __attribute__((__leaf__)) exit)(int __status ) ;
        -: 1134:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1), __leaf__)) getenv)(char const   *__name ) ;
        -: 1135:int huft_build(unsigned int *b , unsigned int n , unsigned int s , ush *d , ush *e ,
        -: 1136:               struct huft **t , int *m ) ;
        -: 1137:int huft_free(struct huft *t ) ;
        -: 1138:int inflate_codes(struct huft *tl , struct huft *td , int bl , int bd ) ;
        -: 1139:int inflate_stored(void) ;
        -: 1140:int inflate_fixed(void) ;
        -: 1141:int inflate_dynamic(void) ;
        -: 1142:int inflate_block(int *e ) ;
        -: 1143:static unsigned int border[19]  = 
        -: 1144:  {      16U,      17U,      18U,      0U, 
        -: 1145:        8U,      7U,      9U,      6U, 
        -: 1146:        10U,      5U,      11U,      4U, 
        -: 1147:        12U,      3U,      13U,      2U, 
        -: 1148:        14U,      1U,      15U};
        -: 1149:static ush cplens[31]  = 
        -: 1150:  {      (ush )3,      (ush )4,      (ush )5,      (ush )6, 
        -: 1151:        (ush )7,      (ush )8,      (ush )9,      (ush )10, 
        -: 1152:        (ush )11,      (ush )13,      (ush )15,      (ush )17, 
        -: 1153:        (ush )19,      (ush )23,      (ush )27,      (ush )31, 
        -: 1154:        (ush )35,      (ush )43,      (ush )51,      (ush )59, 
        -: 1155:        (ush )67,      (ush )83,      (ush )99,      (ush )115, 
        -: 1156:        (ush )131,      (ush )163,      (ush )195,      (ush )227, 
        -: 1157:        (ush )258,      (ush )0,      (ush )0};
        -: 1158:static ush cplext[31]  = 
        -: 1159:  {      (ush )0,      (ush )0,      (ush )0,      (ush )0, 
        -: 1160:        (ush )0,      (ush )0,      (ush )0,      (ush )0, 
        -: 1161:        (ush )1,      (ush )1,      (ush )1,      (ush )1, 
        -: 1162:        (ush )2,      (ush )2,      (ush )2,      (ush )2, 
        -: 1163:        (ush )3,      (ush )3,      (ush )3,      (ush )3, 
        -: 1164:        (ush )4,      (ush )4,      (ush )4,      (ush )4, 
        -: 1165:        (ush )5,      (ush )5,      (ush )5,      (ush )5, 
        -: 1166:        (ush )0,      (ush )99,      (ush )99};
        -: 1167:static ush cpdist[30]  = 
        -: 1168:  {      (ush )1,      (ush )2,      (ush )3,      (ush )4, 
        -: 1169:        (ush )5,      (ush )7,      (ush )9,      (ush )13, 
        -: 1170:        (ush )17,      (ush )25,      (ush )33,      (ush )49, 
        -: 1171:        (ush )65,      (ush )97,      (ush )129,      (ush )193, 
        -: 1172:        (ush )257,      (ush )385,      (ush )513,      (ush )769, 
        -: 1173:        (ush )1025,      (ush )1537,      (ush )2049,      (ush )3073, 
        -: 1174:        (ush )4097,      (ush )6145,      (ush )8193,      (ush )12289, 
        -: 1175:        (ush )16385,      (ush )24577};
        -: 1176:static ush cpdext[30]  = 
        -: 1177:  {      (ush )0,      (ush )0,      (ush )0,      (ush )0, 
        -: 1178:        (ush )1,      (ush )1,      (ush )2,      (ush )2, 
        -: 1179:        (ush )3,      (ush )3,      (ush )4,      (ush )4, 
        -: 1180:        (ush )5,      (ush )5,      (ush )6,      (ush )6, 
        -: 1181:        (ush )7,      (ush )7,      (ush )8,      (ush )8, 
        -: 1182:        (ush )9,      (ush )9,      (ush )10,      (ush )10, 
        -: 1183:        (ush )11,      (ush )11,      (ush )12,      (ush )12, 
        -: 1184:        (ush )13,      (ush )13};
        -: 1185:ulg bb  ;
        -: 1186:unsigned int bk  ;
        -: 1187:ush mask_bits[17]  = 
        -: 1188:  {      (ush )0,      (ush )1,      (ush )3,      (ush )7, 
        -: 1189:        (ush )15,      (ush )31,      (ush )63,      (ush )127, 
        -: 1190:        (ush )255,      (ush )511,      (ush )1023,      (ush )2047, 
        -: 1191:        (ush )4095,      (ush )8191,      (ush )16383,      (ush )32767, 
        -: 1192:        (ush )65535};
        -: 1193:int lbits  =    9;
        -: 1194:int dbits  =    6;
        -: 1195:unsigned int hufts  ;
    #####: 1196:int huft_build(unsigned int *b , unsigned int n , unsigned int s , ush *d , ush *e ,
        -: 1197:               struct huft **t , int *m ) 
        -: 1198:{ 
        -: 1199:  unsigned int a ;
        -: 1200:  unsigned int c[17] ;
        -: 1201:  unsigned int f ;
        -: 1202:  int g ;
        -: 1203:  int h ;
        -: 1204:  register unsigned int i___0 ;
        -: 1205:  register unsigned int j___0 ;
        -: 1206:  register int k ;
        -: 1207:  int l ;
        -: 1208:  register unsigned int *p ;
        -: 1209:  register struct huft *q ;
        -: 1210:  struct huft r ;
        -: 1211:  struct huft *u[16] ;
        -: 1212:  unsigned int v[288] ;
        -: 1213:  register int w ;
        -: 1214:  unsigned int x[17] ;
        -: 1215:  unsigned int *xp ;
        -: 1216:  int y ;
        -: 1217:  unsigned int z ;
        -: 1218:  unsigned int *tmp ;
        -: 1219:  unsigned int *tmp___0 ;
        -: 1220:  unsigned int tmp___1 ;
        -: 1221:  unsigned int *tmp___2 ;
        -: 1222:  void *tmp___3 ;
        -: 1223:  int tmp___4 ;
        -: 1224:  unsigned int *tmp___5 ;
        -: 1225:  unsigned int tmp___6 ;
        -: 1226:  int tmp___7 ;
        -: 1227:
        -: 1228:  {
        -: 1229:  {
    #####: 1230:  memset((voidp )(c), 0, sizeof(c));
    #####: 1231:  p = b;
    #####: 1232:  i___0 = n;
        -: 1233:  }
        -: 1234:  {
    #####: 1235:  while (1) {
        -: 1236:                                     ;
    #####: 1237:    (c[*p]) ++;
    #####: 1238:    p ++;
    #####: 1239:    i___0 --;
    #####: 1240:    if (! i___0) {
    #####: 1241:      goto while_break;
        -: 1242:    }
        -: 1243:  }
        -: 1244:  while_break: /* CIL Label */ ;
        -: 1245:  }
        -: 1246:                  
        -: 1247:                                    
        -: 1248:           
        -: 1249:               
        -: 1250:   
    #####: 1251:  l = *m;
    #####: 1252:  j___0 = 1U;
        -: 1253:   
        -: 1254:             
        -: 1255:                                          
        -: 1256:                           
        -: 1257:                           
        -: 1258:     
        -: 1259:                   
        -: 1260:                           
        -: 1261:     
        -: 1262:             
        -: 1263:   
        -: 1264:                                    
        -: 1265:   
    #####: 1266:  k = (int )j___0;
        -: 1267:                                 
        -: 1268:                    
        -: 1269:   
    #####: 1270:  i___0 = 16U;
        -: 1271:  {
    #####: 1272:  while (1) {
        -: 1273:                                         ;
        -: 1274:                  
        -: 1275:                           
        -: 1276:     
    #####: 1277:    if (c[i___0]) {
    #####: 1278:      goto while_break___1;
        -: 1279:    }
    #####: 1280:    i___0 --;
        -: 1281:  }
        -: 1282:  while_break___1: /* CIL Label */ ;
        -: 1283:  }
    #####: 1284:  g = (int )i___0;
        -: 1285:                                {
    #####: 1286:    l = (int )i___0;
        -: 1287:  }
    #####: 1288:  *m = l;
    #####: 1289:  y = 1 << j___0;
        -: 1290:  {
        -: 1291:            {
        -: 1292:                                         ;
        -: 1293:                            
        -: 1294:                           
        -: 1295:     
        -: 1296:                                            
        -: 1297:                
        -: 1298:                 
        -: 1299:     
        -: 1300:             
        -: 1301:            
    #####: 1302:  }
        -: 1303:  while_break___2: /* CIL Label */ ;
        -: 1304:  }
    #####: 1305:  y = (int )((unsigned int )y - c[i___0]);
        -: 1306:              
        -: 1307:               
        -: 1308:   
        -: 1309:                               
    #####: 1310:  j___0 = 0U;
        -: 1311:               
    #####: 1312:  p = c + 1;
    #####: 1313:  xp = x + 2;
        -: 1314:  {
    #####: 1315:  while (1) {
        -: 1316:                                         ;
    #####: 1317:    i___0 --;
    #####: 1318:    if (! i___0) {
    #####: 1319:      goto while_break___3;
        -: 1320:    }
    #####: 1321:    tmp = xp;
    #####: 1322:    xp ++;
    #####: 1323:    tmp___0 = p;
    #####: 1324:    p ++;
    #####: 1325:    j___0 += *tmp___0;
    #####: 1326:    *tmp = j___0;
        -: 1327:  }
        -: 1328:  while_break___3: /* CIL Label */ ;
        -: 1329:  }
    #####: 1330:  p = b;
        -: 1331:             
        -: 1332:  {
    #####: 1333:  while (1) {
        -: 1334:                                         ;
    #####: 1335:    tmp___2 = p;
    #####: 1336:    p ++;
    #####: 1337:    j___0 = *tmp___2;
    #####: 1338:    if (j___0 != 0U) {
    #####: 1339:      tmp___1 = x[j___0];
    #####: 1340:      (x[j___0]) ++;
    #####: 1341:      v[tmp___1] = i___0;
    #####: 1342:    }
    #####: 1343:    i___0 ++;
    #####: 1344:    if (! (i___0 < n)) {
    #####: 1345:      goto while_break___4;
        -: 1346:    }
        -: 1347:  }
        -: 1348:  while_break___4: /* CIL Label */ ;
        -: 1349:  }
        -: 1350:           
    #####: 1351:  i___0 = 0U;
    #####: 1352:  x[0] = i___0;
    #####: 1353:  p = v;
    #####: 1354:  h = -1;
    #####: 1355:  w = - l;
        -: 1356:                                    
        -: 1357:                                 
        -: 1358:         
        -: 1359:  {
    #####: 1360:  while (1) {
        -: 1361:                                         ;
    #####: 1362:    if (! (k <= g)) {
    #####: 1363:      goto while_break___5;
        -: 1364:    }
    #####: 1365:    a = c[k];
        -: 1366:    {
    #####: 1367:    while (1) {
        -: 1368:                                           ;
    #####: 1369:      tmp___6 = a;
    #####: 1370:      a --;
    #####: 1371:      if (! tmp___6) {
    #####: 1372:        goto while_break___6;
        -: 1373:      }
        -: 1374:      {
        -: 1375:                {
        -: 1376:                                             ;
    #####: 1377:        if (! (k > w + l)) {
    #####: 1378:          goto while_break___7;
        -: 1379:        }
        -: 1380:             
    #####: 1381:        w += l;
        -: 1382:                                   
        -: 1383:                                   
        -: 1384:                               
        -: 1385:                
        -: 1386:                
        -: 1387:         
        -: 1388:                                       
    #####: 1389:        f = (unsigned int )(1 << j___0);
    #####: 1390:        if (f > a + 1U) {
        -: 1391:                      
    #####: 1392:          xp = c + k;
        -: 1393:                         {
        -: 1394:             
        -: 1395:
    #####: 1396:            while (1) {
        -: 1397:                                                   ;
    #####: 1398:              j___0 ++;
        -: 1399:                                  
        -: 1400:                                     
        -: 1401:               
        -: 1402:                      
    #####: 1403:              xp ++;
    #####: 1404:              if (f <= *xp) {
    #####: 1405:                goto while_break___8;
        -: 1406:              }
        -: 1407:                       
        -: 1408:            }
        -: 1409:            while_break___8: /* CIL Label */ ;
        -: 1410:             
        -: 1411:
        -: 1412:          }
    #####: 1413:        }
        -: 1414:        {
    #####: 1415:        z = (unsigned int )(1 << j___0);
    #####: 1416:        tmp___3 = malloc((unsigned long )(z + 1U) * sizeof(struct huft ));
    #####: 1417:        q = (struct huft *)tmp___3;
        -: 1418:        }
        -: 1419:                                                                                
        -: 1420:                  
        -: 1421:             
        -: 1422:
        -: 1423:                            
        -: 1424:             
        -: 1425:
        -: 1426:           
        -: 1427:                     
        -: 1428:         
        -: 1429:                        
    #####: 1430:        *t = q + 1;
    #####: 1431:        t = & q->v.t;
    #####: 1432:        *t = (struct huft *)((void *)0);
    #####: 1433:        q ++;
        -: 1434:                 
        -: 1435:                
        -: 1436:                       
        -: 1437:                        
        -: 1438:                                    
        -: 1439:                    
        -: 1440:                                   
        -: 1441:                                  
        -: 1442:         
    #####: 1443:      }
        -: 1444:      while_break___7: /* CIL Label */ ;
        -: 1445:      }
    #####: 1446:      r.b = (uch )(k - w);
        -: 1447:                                                         
        -: 1448:                       
        -: 1449:             { //Added block
    #####: 1450:      if (*p < s) {
    #####: 1451:        if (*p < 256U) {
    #####: 1452:          tmp___4 = 16;
    #####: 1453:        } else {
    #####: 1454:          tmp___4 = 15;
        -: 1455:        }
    #####: 1456:        r.e = (uch )tmp___4;
    #####: 1457:        r.v.n = (ush )*p;
    #####: 1458:        p ++;
    #####: 1459:      } else {
    #####: 1460:        r.e = (uch )*(e + (*p - s));
    #####: 1461:        tmp___5 = p;
    #####: 1462:        p ++;
    #####: 1463:        r.v.n = *(d + (*tmp___5 - s));
        -: 1464:      }
        -: 1465:      }
    #####: 1466:      f = (unsigned int )(1 << (k - w));
    #####: 1467:      j___0 = i___0 >> w;
        -: 1468:      {
    #####: 1469:      while (1) {
        -: 1470:                                             ;
    #####: 1471:        if (! (j___0 < z)) {
    #####: 1472:          goto while_break___9;
        -: 1473:        }
    #####: 1474:        *(q + j___0) = r;
    #####: 1475:        j___0 += f;
        -: 1476:      }
        -: 1477:      while_break___9: /* CIL Label */ ;
        -: 1478:      }
    #####: 1479:      j___0 = (unsigned int )(1 << (k - 1));
        -: 1480:      {
    #####: 1481:      while (1) {
        -: 1482:                                              ;
    #####: 1483:        if (! (i___0 & j___0)) {
    #####: 1484:          goto while_break___10;
        -: 1485:        }
    #####: 1486:        i___0 ^= j___0;
    #####: 1487:        j___0 >>= 1;
        -: 1488:      }
        -: 1489:      while_break___10: /* CIL Label */ ;
        -: 1490:      }
    #####: 1491:      i___0 ^= j___0;
        -: 1492:       
        -: 1493:                 
        -: 1494:                                               
        -: 1495:                                                                  
        -: 1496:                                
        -: 1497:         
        -: 1498:             
        -: 1499:               
        -: 1500:       
        -: 1501:                                         
        -: 1502:       
        -: 1503:    }
        -: 1504:    while_break___6: /* CIL Label */ ;
        -: 1505:    }
    #####: 1506:    k ++;
        -: 1507:  }
        -: 1508:  while_break___5: /* CIL Label */ ;
        -: 1509:  }
        -: 1510:               
        -: 1511:                 
        -: 1512:                  
        -: 1513:            
        -: 1514:                  
        -: 1515:     
        -: 1516:         {
    #####: 1517:    tmp___7 = 0;
        -: 1518:  }
    #####: 1519:  return (tmp___7);
        -: 1520:}
        -: 1521:}
    #####: 1522:int huft_free(struct huft *t ) 
        -: 1523:{ 
        -: 1524:  register struct huft *p ;
        -: 1525:  register struct huft *q ;
        -: 1526:
        -: 1527:  {
    #####: 1528:  p = t;
        -: 1529:   
        -: 1530:             
        -: 1531:                                      
        -: 1532:                                                                                
        -: 1533:                       
        -: 1534:     
        -: 1535:     
        -: 1536:         
        -: 1537:               
        -: 1538:                              
        -: 1539:          
        -: 1540:     
        -: 1541:   
        -: 1542:                                
        -: 1543:   
    #####: 1544:  return (0);
        -: 1545:}
        -: 1546:}
    #####: 1547:int inflate_codes(struct huft *tl , struct huft *td , int bl , int bd ) 
        -: 1548:{ 
        -: 1549:  register unsigned int e ;
        -: 1550:  unsigned int n ;
        -: 1551:  unsigned int d ;
        -: 1552:  unsigned int w ;
        -: 1553:  struct huft *t ;
        -: 1554:  unsigned int ml ;
        -: 1555:  unsigned int md ;
        -: 1556:  register ulg b ;
        -: 1557:  register unsigned int k ;
        -: 1558:  unsigned int tmp ;
        -: 1559:  int tmp___0 ;
        -: 1560:  int tmp___1 ;
        -: 1561:  unsigned int tmp___2 ;
        -: 1562:  int tmp___3 ;
        -: 1563:  int tmp___4 ;
        -: 1564:  unsigned int tmp___5 ;
        -: 1565:  unsigned int tmp___6 ;
        -: 1566:  int tmp___7 ;
        -: 1567:  int tmp___8 ;
        -: 1568:  unsigned int tmp___9 ;
        -: 1569:  int tmp___10 ;
        -: 1570:  int tmp___11 ;
        -: 1571:  unsigned int tmp___12 ;
        -: 1572:  int tmp___13 ;
        -: 1573:  int tmp___14 ;
        -: 1574:  unsigned int tmp___15 ;
        -: 1575:  int tmp___16 ;
        -: 1576:  int tmp___17 ;
        -: 1577:  unsigned int tmp___19 ;
        -: 1578:  unsigned int tmp___20 ;
        -: 1579:  unsigned int tmp___21 ;
        -: 1580:
        -: 1581:  {
    #####: 1582:  b = bb;
    #####: 1583:  k = bk;
    #####: 1584:  w = outcnt;
    #####: 1585:  ml = (unsigned int )mask_bits[bl];
    #####: 1586:  md = (unsigned int )mask_bits[bd];
        -: 1587:  {
    #####: 1588:  while (1) {
        -: 1589:                                     ;
        -: 1590:    {
    #####: 1591:    while (1) {
        -: 1592:                                           ;
    #####: 1593:      if (! (k < (unsigned int )bl)) {
    #####: 1594:        goto while_break___0;
        -: 1595:      }
        -: 1596:                          {
    #####: 1597:        tmp = inptr;
    #####: 1598:        inptr ++;
    #####: 1599:        tmp___1 = (int )inbuf[tmp];
        -: 1600:      }       
        -: 1601:         
        -: 1602:
        -: 1603:                                
        -: 1604:                          
        -: 1605:         
        -: 1606:
        -: 1607:       
    #####: 1608:      b |= (ulg )((uch )tmp___1) << k;
    #####: 1609:      k += 8U;
        -: 1610:    }
        -: 1611:    while_break___0: /* CIL Label */ ;
        -: 1612:    }
    #####: 1613:    t = tl + ((unsigned int )b & ml);
    #####: 1614:    e = (unsigned int )t->e;
        -: 1615:                  
        -: 1616:       
        -: 1617:
        -: 1618:                 
        -: 1619:                                              
        -: 1620:                       
        -: 1621:                     
        -: 1622:         
        -: 1623:                         
        -: 1624:                                 
        -: 1625:                 
        -: 1626:         
        -: 1627:                   
        -: 1628:                                                
        -: 1629:                          
        -: 1630:                                 
        -: 1631:           
        -: 1632:                               
        -: 1633:                            
        -: 1634:                     
        -: 1635:                                           
        -: 1636:                  
        -: 1637:             
        -: 1638:
        -: 1639:                                    
        -: 1640:                              
        -: 1641:             
        -: 1642:
        -: 1643:           
        -: 1644:                                          
        -: 1645:                  
        -: 1646:         
        -: 1647:                                          
        -: 1648:         
        -: 1649:                                                                      
        -: 1650:                                
        -: 1651:                          
        -: 1652:                               
        -: 1653:         
        -: 1654:       
        -: 1655:                                        
        -: 1656:       
        -: 1657:
        -: 1658:     
    #####: 1659:    b >>= (int )t->b;
    #####: 1660:    k -= (unsigned int )t->b;
    #####: 1661:    if (e == 16U) {
    #####: 1662:      tmp___5 = w;
    #####: 1663:      w ++;
    #####: 1664:      window[tmp___5] = (uch )t->v.n;
    #####: 1665:      if (w == 32768U) {
        -: 1666:         
        -: 1667:
    #####: 1668:        outcnt = w;
    #####: 1669:        flush_window();
    #####: 1670:        w = 0U;
        -: 1671:         
        -: 1672:
    #####: 1673:      }
    #####: 1674:    } else {
    #####: 1675:      if (e == 15U) {
    #####: 1676:        goto while_break;
        -: 1677:      }
        -: 1678:      {
        -: 1679:                {
        -: 1680:                                             ;
        -: 1681:                        
        -: 1682:                               
        -: 1683:         
    #####: 1684:        if (inptr < insize) {
    #####: 1685:          tmp___6 = inptr;
    #####: 1686:          inptr ++;
    #####: 1687:          tmp___8 = (int )inbuf[tmp___6];
    #####: 1688:        } else {
        -: 1689:           
        -: 1690:
        -: 1691:                                  
        -: 1692:                            
        -: 1693:           
        -: 1694:
        -: 1695:        }
    #####: 1696:        b |= (ulg )((uch )tmp___8) << k;
    #####: 1697:        k += 8U;
    #####: 1698:      }
        -: 1699:      while_break___3: /* CIL Label */ ;
        -: 1700:      }
    #####: 1701:      n = (unsigned int )t->v.n + ((unsigned int )b & (unsigned int )mask_bits[e]);
    #####: 1702:      b >>= e;
    #####: 1703:      k -= e;
        -: 1704:      {
    #####: 1705:      while (1) {
        -: 1706:                                             ;
    #####: 1707:        if (! (k < (unsigned int )bd)) {
    #####: 1708:          goto while_break___4;
        -: 1709:        }
    #####: 1710:        if (inptr < insize) {
    #####: 1711:          tmp___9 = inptr;
    #####: 1712:          inptr ++;
    #####: 1713:          tmp___11 = (int )inbuf[tmp___9];
    #####: 1714:        } else {
        -: 1715:           
        -: 1716:
    #####: 1717:          tmp___10 = fill_inbuf(0);
    #####: 1718:          tmp___11 = tmp___10;
        -: 1719:           
        -: 1720:
        -: 1721:        }
    #####: 1722:        b |= (ulg )((uch )tmp___11) << k;
    #####: 1723:        k += 8U;
        -: 1724:      }
        -: 1725:      while_break___4: /* CIL Label */ ;
        -: 1726:      }
    #####: 1727:      t = td + ((unsigned int )b & md);
    #####: 1728:      e = (unsigned int )t->e;
    #####: 1729:      if (e > 16U) {
        -: 1730:         
        -: 1731:
    #####: 1732:        while (1) {
        -: 1733:                                               ;
    #####: 1734:          if (e == 99U) {
        -: 1735:                       
    #####: 1736:          }
        -: 1737:                           
        -: 1738:                                   
        -: 1739:                   
        -: 1740:           
        -: 1741:                     
        -: 1742:                                                  
        -: 1743:                            
        -: 1744:                                   
        -: 1745:             
        -: 1746:                                 
        -: 1747:                               
        -: 1748:                       
        -: 1749:                                               
        -: 1750:                    
        -: 1751:               
        -: 1752:
        -: 1753:                                       
        -: 1754:                                  
        -: 1755:               
        -: 1756:
        -: 1757:             
        -: 1758:                                             
        -: 1759:                    
        -: 1760:           
        -: 1761:                                            
        -: 1762:           
        -: 1763:                                                                        
        -: 1764:                                  
        -: 1765:                            
        -: 1766:                                 
        -: 1767:           
        -: 1768:        }
        -: 1769:        while_break___5: /* CIL Label */ ;
        -: 1770:         
        -: 1771:
    #####: 1772:      }
    #####: 1773:      b >>= (int )t->b;
    #####: 1774:      k -= (unsigned int )t->b;
        -: 1775:      {
    #####: 1776:      while (1) {
        -: 1777:                                             ;
    #####: 1778:        if (! (k < e)) {
    #####: 1779:          goto while_break___7;
        -: 1780:        }
        -: 1781:                            {
    #####: 1782:          tmp___15 = inptr;
    #####: 1783:          inptr ++;
    #####: 1784:          tmp___17 = (int )inbuf[tmp___15];
        -: 1785:        }       
        -: 1786:           
        -: 1787:
        -: 1788:                                   
        -: 1789:                              
        -: 1790:           
        -: 1791:
        -: 1792:         
    #####: 1793:        b |= (ulg )((uch )tmp___17) << k;
    #####: 1794:        k += 8U;
        -: 1795:      }
        -: 1796:      while_break___7: /* CIL Label */ ;
        -: 1797:      }
    #####: 1798:      d = (w - (unsigned int )t->v.n) - ((unsigned int )b & (unsigned int )mask_bits[e]);
    #####: 1799:      b >>= e;
    #####: 1800:      k -= e;
        -: 1801:      {
    #####: 1802:      while (1) {
        -: 1803:                                             ;
    #####: 1804:        d &= 32767U;
    #####: 1805:        if (d > w) {
    #####: 1806:          tmp___19 = d;
    #####: 1807:        } else {
    #####: 1808:          tmp___19 = w;
        -: 1809:        }
    #####: 1810:        e = 32768U - tmp___19;
    #####: 1811:        if (e > n) {
    #####: 1812:          e = n;
    #####: 1813:        } else {
    #####: 1814:          e = e;
        -: 1815:        }
    #####: 1816:        n -= e;
    #####: 1817:        if (w - d >= e) {
        -: 1818:           
        -: 1819:
    #####: 1820:          memcpy((void * __restrict  )(window + w), (void const   * __restrict  )(window + d),
    #####: 1821:                 (size_t )e);
    #####: 1822:          w += e;
    #####: 1823:          d += e;
        -: 1824:           
        -: 1825:
    #####: 1826:        } else {
        -: 1827:           
        -: 1828:
    #####: 1829:          while (1) {
        -: 1830:                                                 ;
    #####: 1831:            tmp___20 = w;
    #####: 1832:            w ++;
    #####: 1833:            tmp___21 = d;
    #####: 1834:            d ++;
    #####: 1835:            window[tmp___20] = window[tmp___21];
    #####: 1836:            e --;
    #####: 1837:            if (! e) {
    #####: 1838:              goto while_break___9;
        -: 1839:            }
        -: 1840:          }
        -: 1841:          while_break___9: /* CIL Label */ ;
        -: 1842:           
        -: 1843:
        -: 1844:        }
    #####: 1845:        if (w == 32768U) {
        -: 1846:           
        -: 1847:
    #####: 1848:          outcnt = w;
    #####: 1849:          flush_window();
    #####: 1850:          w = 0U;
        -: 1851:           
        -: 1852:
    #####: 1853:        }
    #####: 1854:        if (! n) {
    #####: 1855:          goto while_break___8;
        -: 1856:        }
        -: 1857:      }
        -: 1858:      while_break___8: /* CIL Label */ ;
        -: 1859:      }
        -: 1860:    }
        -: 1861:  }
        -: 1862:  while_break: /* CIL Label */ ;
        -: 1863:  }
    #####: 1864:  outcnt = w;
    #####: 1865:  bb = b;
    #####: 1866:  bk = k;
    #####: 1867:  return (0);
        -: 1868:}
        -: 1869:}
    #####: 1870:int inflate_stored(void) 
        -: 1871:{ 
        -: 1872:  unsigned int n ;
        -: 1873:  unsigned int w ;
        -: 1874:  register ulg b ;
        -: 1875:  register unsigned int k ;
        -: 1876:  unsigned int tmp ;
        -: 1877:  int tmp___0 ;
        -: 1878:  int tmp___1 ;
        -: 1879:  unsigned int tmp___2 ;
        -: 1880:  int tmp___3 ;
        -: 1881:  int tmp___4 ;
        -: 1882:  unsigned int tmp___5 ;
        -: 1883:  int tmp___6 ;
        -: 1884:  int tmp___7 ;
        -: 1885:  unsigned int tmp___8 ;
        -: 1886:  unsigned int tmp___9 ;
        -: 1887:
        -: 1888:  {
        -: 1889:         
        -: 1890:         
    #####: 1891:  w = outcnt;
    #####: 1892:  n = k & 7U;
    #####: 1893:  b >>= n;
    #####: 1894:  k -= n;
        -: 1895:  {
    #####: 1896:  while (1) {
        -: 1897:                                     ;
    #####: 1898:    if (! (k < 16U)) {
    #####: 1899:      goto while_break;
        -: 1900:    }
        -: 1901:                        {
    #####: 1902:      tmp = inptr;
    #####: 1903:      inptr ++;
    #####: 1904:      tmp___1 = (int )inbuf[tmp];
        -: 1905:    }       
        -: 1906:       
        -: 1907:
        -: 1908:                              
        -: 1909:                        
        -: 1910:       
        -: 1911:
        -: 1912:     
    #####: 1913:    b |= (ulg )((uch )tmp___1) << k;
    #####: 1914:    k += 8U;
        -: 1915:  }
        -: 1916:  while_break: /* CIL Label */ ;
        -: 1917:  }
    #####: 1918:  n = (unsigned int )b & 65535U;
    #####: 1919:  b >>= 16;
    #####: 1920:  k -= 16U;
        -: 1921:  {
    #####: 1922:  while (1) {
        -: 1923:                                         ;
    #####: 1924:    if (! (k < 16U)) {
    #####: 1925:      goto while_break___0;
        -: 1926:    }
        -: 1927:                        {
    #####: 1928:      tmp___2 = inptr;
    #####: 1929:      inptr ++;
    #####: 1930:      tmp___4 = (int )inbuf[tmp___2];
        -: 1931:    }       
        -: 1932:       
        -: 1933:
        -: 1934:                              
        -: 1935:                        
        -: 1936:       
        -: 1937:
        -: 1938:     
    #####: 1939:    b |= (ulg )((uch )tmp___4) << k;
    #####: 1940:    k += 8U;
        -: 1941:  }
        -: 1942:  while_break___0: /* CIL Label */ ;
        -: 1943:  }
    #####: 1944:  if (n != (unsigned int )(~ b & 65535UL)) {
    #####: 1945:    return (1);
        -: 1946:  }
    #####: 1947:  b >>= 16;
    #####: 1948:  k -= 16U;
        -: 1949:  {
    #####: 1950:  while (1) {
        -: 1951:                                         ;
    #####: 1952:    tmp___9 = n;
    #####: 1953:    n --;
    #####: 1954:    if (! tmp___9) {
    #####: 1955:      goto while_break___1;
        -: 1956:    }
        -: 1957:    {
    #####: 1958:    while (1) {
        -: 1959:                                           ;
    #####: 1960:      if (! (k < 8U)) {
    #####: 1961:        goto while_break___2;
        -: 1962:      }
    #####: 1963:      if (inptr < insize) {
    #####: 1964:        tmp___5 = inptr;
    #####: 1965:        inptr ++;
    #####: 1966:        tmp___7 = (int )inbuf[tmp___5];
    #####: 1967:      } else {
        -: 1968:         
        -: 1969:
    #####: 1970:        tmp___6 = fill_inbuf(0);
    #####: 1971:        tmp___7 = tmp___6;
        -: 1972:         
        -: 1973:
        -: 1974:      }
    #####: 1975:      b |= (ulg )((uch )tmp___7) << k;
    #####: 1976:      k += 8U;
        -: 1977:    }
        -: 1978:    while_break___2: /* CIL Label */ ;
        -: 1979:    }
    #####: 1980:    tmp___8 = w;
    #####: 1981:    w ++;
    #####: 1982:    window[tmp___8] = (uch )b;
        -: 1983:                      
        -: 1984:       
        -: 1985:
        -: 1986:                 
        -: 1987:                     
        -: 1988:             
        -: 1989:       
        -: 1990:
        -: 1991:     
    #####: 1992:    b >>= 8;
    #####: 1993:    k -= 8U;
        -: 1994:  }
        -: 1995:  while_break___1: /* CIL Label */ ;
        -: 1996:  }
    #####: 1997:  outcnt = w;
    #####: 1998:  bb = b;
    #####: 1999:  bk = k;
        -: 2000:             
        -: 2001:}
    #####: 2002:}
    #####: 2003:int inflate_fixed(void) 
        -: 2004:{ 
        -: 2005:  int i___0 ;
        -: 2006:  struct huft *tl ;
        -: 2007:  struct huft *td ;
        -: 2008:  int bl ;
        -: 2009:  int bd ;
        -: 2010:  unsigned int l[288] ;
        -: 2011:  int tmp ;
        -: 2012:
        -: 2013:  {
        -: 2014:            
        -: 2015:   
        -: 2016:             
        -: 2017:                                      
        -: 2018:                          
        -: 2019:                       
        -: 2020:     
        -: 2021:                  
        -: 2022:             
        -: 2023:   
        -: 2024:                                
        -: 2025:   
        -: 2026:   
        -: 2027:             
        -: 2028:                                          
        -: 2029:                          
        -: 2030:                           
        -: 2031:     
        -: 2032:                  
        -: 2033:             
        -: 2034:   
        -: 2035:                                    
        -: 2036:   
        -: 2037:   
        -: 2038:             
        -: 2039:                                          
        -: 2040:                          
        -: 2041:                           
        -: 2042:     
        -: 2043:                  
        -: 2044:             
        -: 2045:   
        -: 2046:                                    
        -: 2047:   
        -: 2048:   
        -: 2049:             
        -: 2050:                                          
        -: 2051:                          
        -: 2052:                           
        -: 2053:     
        -: 2054:                  
        -: 2055:             
        -: 2056:   
        -: 2057:                                    
        -: 2058:   
        -: 2059:   
        -: 2060:         
        -: 2061:                                                                
        -: 2062:   
        -: 2063:                  {
    #####: 2064:    return (i___0);
        -: 2065:  }
        -: 2066:  i___0 = 0;
        -: 2067:   
        -: 2068:             
        -: 2069:                                          
        -: 2070:                         
        -: 2071:                           
        -: 2072:     
        -: 2073:                  
        -: 2074:             
        -: 2075:   
        -: 2076:                                    
        -: 2077:   
        -: 2078:   
        -: 2079:         
        -: 2080:                                                             
        -: 2081:   
        -: 2082:                  
        -: 2083:     
        -: 2084:                  
        -: 2085:     
        -: 2086:                   
        -: 2087:   
        -: 2088:   
        -: 2089:                                      
        -: 2090:   
        -: 2091:            
        -: 2092:               
        -: 2093:   
        -: 2094:   
        -: 2095:                
        -: 2096:                
        -: 2097:   
        -: 2098:             
        -: 2099:}
        -: 2100:}
    #####: 2101:int inflate_dynamic(void) 
        -: 2102:{ 
        -: 2103:  int i___0 ;
        -: 2104:  unsigned int j___0 ;
        -: 2105:  unsigned int l ;
        -: 2106:  unsigned int m ;
        -: 2107:  unsigned int n ;
        -: 2108:  struct huft *tl ;
        -: 2109:  struct huft *td ;
        -: 2110:  int bl ;
        -: 2111:  int bd ;
        -: 2112:  unsigned int nb ;
        -: 2113:  unsigned int nl ;
        -: 2114:  unsigned int nd ;
        -: 2115:  unsigned int ll[316] ;
        -: 2116:  register ulg b ;
        -: 2117:  register unsigned int k ;
        -: 2118:  unsigned int tmp ;
        -: 2119:  int tmp___0 ;
        -: 2120:  int tmp___1 ;
        -: 2121:  unsigned int tmp___2 ;
        -: 2122:  int tmp___3 ;
        -: 2123:  int tmp___4 ;
        -: 2124:  unsigned int tmp___5 ;
        -: 2125:  int tmp___6 ;
        -: 2126:  int tmp___7 ;
        -: 2127:  unsigned int tmp___8 ;
        -: 2128:  int tmp___9 ;
        -: 2129:  int tmp___10 ;
        -: 2130:  unsigned int tmp___11 ;
        -: 2131:  int tmp___12 ;
        -: 2132:  int tmp___13 ;
        -: 2133:  int tmp___14 ;
        -: 2134:  unsigned int tmp___15 ;
        -: 2135:  int tmp___16 ;
        -: 2136:  int tmp___17 ;
        -: 2137:  int tmp___18 ;
        -: 2138:  unsigned int tmp___19 ;
        -: 2139:  unsigned int tmp___20 ;
        -: 2140:  int tmp___21 ;
        -: 2141:  int tmp___22 ;
        -: 2142:  int tmp___23 ;
        -: 2143:  unsigned int tmp___24 ;
        -: 2144:  unsigned int tmp___25 ;
        -: 2145:  int tmp___26 ;
        -: 2146:  int tmp___27 ;
        -: 2147:  int tmp___28 ;
        -: 2148:  unsigned int tmp___29 ;
        -: 2149:  int tmp___30 ;
        -: 2150:
        -: 2151:  {
    #####: 2152:  b = bb;
    #####: 2153:  k = bk;
        -: 2154:   
        -: 2155:             
        -: 2156:                                      
        -: 2157:                     
        -: 2158:                       
        -: 2159:     
        -: 2160:                         
        -: 2161:                  
        -: 2162:               
        -: 2163:                                 
        -: 2164:            
        -: 2165:       
        -: 2166:
        -: 2167:                              
        -: 2168:                        
        -: 2169:       
        -: 2170:
        -: 2171:     
        -: 2172:                                    
        -: 2173:            
        -: 2174:   
        -: 2175:                                
        -: 2176:   
    #####: 2177:  nl = 257U + ((unsigned int )b & 31U);
    #####: 2178:  b >>= 5;
    #####: 2179:  k -= 5U;
        -: 2180:  {
    #####: 2181:  while (1) {
        -: 2182:                                         ;
    #####: 2183:    if (! (k < 5U)) {
    #####: 2184:      goto while_break___0;
        -: 2185:    }
    #####: 2186:    if (inptr < insize) {
    #####: 2187:      tmp___2 = inptr;
    #####: 2188:      inptr ++;
    #####: 2189:      tmp___4 = (int )inbuf[tmp___2];
    #####: 2190:    } else {
        -: 2191:       
        -: 2192:
    #####: 2193:      tmp___3 = fill_inbuf(0);
    #####: 2194:      tmp___4 = tmp___3;
        -: 2195:       
        -: 2196:
        -: 2197:    }
    #####: 2198:    b |= (ulg )((uch )tmp___4) << k;
    #####: 2199:    k += 8U;
        -: 2200:  }
        -: 2201:  while_break___0: /* CIL Label */ ;
        -: 2202:  }
    #####: 2203:  nd = 1U + ((unsigned int )b & 31U);
    #####: 2204:  b >>= 5;
    #####: 2205:  k -= 5U;
        -: 2206:  {
    #####: 2207:  while (1) {
        -: 2208:                                         ;
    #####: 2209:    if (! (k < 4U)) {
    #####: 2210:      goto while_break___1;
        -: 2211:    }
        -: 2212:                        {
    #####: 2213:      tmp___5 = inptr;
    #####: 2214:      inptr ++;
    #####: 2215:      tmp___7 = (int )inbuf[tmp___5];
        -: 2216:    }       
        -: 2217:       
        -: 2218:
        -: 2219:                              
        -: 2220:                        
        -: 2221:       
        -: 2222:
        -: 2223:     
    #####: 2224:    b |= (ulg )((uch )tmp___7) << k;
    #####: 2225:    k += 8U;
        -: 2226:  }
        -: 2227:  while_break___1: /* CIL Label */ ;
        -: 2228:  }
    #####: 2229:  nb = 4U + ((unsigned int )b & 15U);
    #####: 2230:  b >>= 4;
    #####: 2231:  k -= 4U;
    #####: 2232:  if (nl > 286U) {
        -: 2233:               
    #####: 2234:  } else { //Added block
        -: 2235:                 
        -: 2236:               
        -: 2237:   
        -: 2238:  }
    #####: 2239:  j___0 = 0U;
        -: 2240:  {
    #####: 2241:  while (1) {
        -: 2242:                                         ;
    #####: 2243:    if (! (j___0 < nb)) {
    #####: 2244:      goto while_break___2;
        -: 2245:    }
        -: 2246:    {
        -: 2247:              {
        -: 2248:                                           ;
    #####: 2249:      if (! (k < 3U)) {
    #####: 2250:        goto while_break___3;
        -: 2251:      }
        -: 2252:                          {
    #####: 2253:        tmp___8 = inptr;
    #####: 2254:        inptr ++;
    #####: 2255:        tmp___10 = (int )inbuf[tmp___8];
        -: 2256:      }       
        -: 2257:         
        -: 2258:
        -: 2259:                                
        -: 2260:                           
        -: 2261:         
        -: 2262:
        -: 2263:       
    #####: 2264:      b |= (ulg )((uch )tmp___10) << k;
    #####: 2265:      k += 8U;
    #####: 2266:    }
        -: 2267:    while_break___3: /* CIL Label */ ;
        -: 2268:    }
    #####: 2269:    ll[border[j___0]] = (unsigned int )b & 7U;
    #####: 2270:    b >>= 3;
    #####: 2271:    k -= 3U;
    #####: 2272:    j___0 ++;
        -: 2273:  }
        -: 2274:  while_break___2: /* CIL Label */ ;
        -: 2275:  }
        -: 2276:  {
    #####: 2277:  while (1) {
        -: 2278:                                         ;
    #####: 2279:    if (! (j___0 < 19U)) {
    #####: 2280:      goto while_break___4;
        -: 2281:    }
    #####: 2282:    ll[border[j___0]] = 0U;
    #####: 2283:    j___0 ++;
        -: 2284:  }
        -: 2285:  while_break___4: /* CIL Label */ ;
        -: 2286:  }
        -: 2287:  {
    #####: 2288:  bl = 7;
    #####: 2289:  i___0 = huft_build(ll, 19U, 19U, (ush *)((void *)0), (ush *)((void *)0), & tl, & bl);
        -: 2290:  }
    #####: 2291:  if (i___0 != 0) {
        -: 2292:                    {
        -: 2293:       
        -: 2294:
        -: 2295:                    
        -: 2296:       
        -: 2297:
        -: 2298:    }
        -: 2299:                   
    #####: 2300:  }
        -: 2301:                                                          
        -: 2302:               
        -: 2303:   
    #####: 2304:  n = nl + nd;
    #####: 2305:  m = (unsigned int )mask_bits[bl];
    #####: 2306:  l = 0U;
    #####: 2307:  i___0 = (int )l;
        -: 2308:  {
    #####: 2309:  while (1) {
        -: 2310:                                         ;
    #####: 2311:    if (! ((unsigned int )i___0 < n)) {
    #####: 2312:      goto while_break___5;
        -: 2313:    }
        -: 2314:    {
    #####: 2315:    while (1) {
        -: 2316:                                           ;
    #####: 2317:      if (! (k < (unsigned int )bl)) {
    #####: 2318:        goto while_break___6;
        -: 2319:      }
    #####: 2320:      if (inptr < insize) {
    #####: 2321:        tmp___11 = inptr;
    #####: 2322:        inptr ++;
    #####: 2323:        tmp___13 = (int )inbuf[tmp___11];
    #####: 2324:      } else {
        -: 2325:         
        -: 2326:
    #####: 2327:        tmp___12 = fill_inbuf(0);
    #####: 2328:        tmp___13 = tmp___12;
        -: 2329:         
        -: 2330:
        -: 2331:      }
    #####: 2332:      b |= (ulg )((uch )tmp___13) << k;
    #####: 2333:      k += 8U;
        -: 2334:    }
        -: 2335:    while_break___6: /* CIL Label */ ;
        -: 2336:    }
    #####: 2337:    td = tl + ((unsigned int )b & m);
    #####: 2338:    j___0 = (unsigned int )td->b;
    #####: 2339:    b >>= j___0;
    #####: 2340:    k -= j___0;
    #####: 2341:    j___0 = (unsigned int )td->v.n;
    #####: 2342:    if (j___0 < 16U) {
    #####: 2343:      tmp___14 = i___0;
    #####: 2344:      i___0 ++;
    #####: 2345:      l = j___0;
    #####: 2346:      ll[tmp___14] = l;
    #####: 2347:    } else { //Added block
    #####: 2348:    if (j___0 == 16U) {
        -: 2349:      {
        -: 2350:                 
        -: 2351:                                              
        -: 2352:                         
        -: 2353:                               
        -: 2354:         
        -: 2355:                             
        -: 2356:                           
        -: 2357:                   
        -: 2358:                                           
        -: 2359:                
        -: 2360:           
        -: 2361:
        -: 2362:                                   
        -: 2363:                              
        -: 2364:           
        -: 2365:
        -: 2366:         
        -: 2367:                                         
        -: 2368:                
        -: 2369:       
        -: 2370:                                        
        -: 2371:      }
    #####: 2372:      j___0 = 3U + ((unsigned int )b & 3U);
    #####: 2373:      b >>= 2;
    #####: 2374:      k -= 2U;
        -: 2375:                                             
        -: 2376:                   
        -: 2377:       
        -: 2378:      {
    #####: 2379:      while (1) {
        -: 2380:                                             ;
    #####: 2381:        tmp___19 = j___0;
    #####: 2382:        j___0 --;
    #####: 2383:        if (! tmp___19) {
    #####: 2384:          goto while_break___8;
        -: 2385:        }
    #####: 2386:        tmp___18 = i___0;
    #####: 2387:        i___0 ++;
    #####: 2388:        ll[tmp___18] = l;
        -: 2389:      }
        -: 2390:      while_break___8: /* CIL Label */ ;
        -: 2391:      }
    #####: 2392:    } else { //Added block
    #####: 2393:    if (j___0 == 17U) {
        -: 2394:      {
        -: 2395:                {
        -: 2396:                                             ;
    #####: 2397:        if (! (k < 3U)) {
    #####: 2398:          goto while_break___9;
        -: 2399:        }
    #####: 2400:        if (inptr < insize) {
    #####: 2401:          tmp___20 = inptr;
    #####: 2402:          inptr ++;
    #####: 2403:          tmp___22 = (int )inbuf[tmp___20];
    #####: 2404:        } else {
        -: 2405:           
        -: 2406:
    #####: 2407:          tmp___21 = fill_inbuf(0);
    #####: 2408:          tmp___22 = tmp___21;
        -: 2409:           
        -: 2410:
        -: 2411:        }
    #####: 2412:        b |= (ulg )((uch )tmp___22) << k;
    #####: 2413:        k += 8U;
    #####: 2414:      }
        -: 2415:      while_break___9: /* CIL Label */ ;
        -: 2416:      }
    #####: 2417:      j___0 = 3U + ((unsigned int )b & 7U);
    #####: 2418:      b >>= 3;
    #####: 2419:      k -= 3U;
        -: 2420:                                             
        -: 2421:                   
        -: 2422:       
        -: 2423:      {
    #####: 2424:      while (1) {
        -: 2425:                                              ;
    #####: 2426:        tmp___24 = j___0;
    #####: 2427:        j___0 --;
    #####: 2428:        if (! tmp___24) {
    #####: 2429:          goto while_break___10;
        -: 2430:        }
    #####: 2431:        tmp___23 = i___0;
    #####: 2432:        i___0 ++;
    #####: 2433:        ll[tmp___23] = 0U;
        -: 2434:      }
        -: 2435:      while_break___10: /* CIL Label */ ;
        -: 2436:      }
    #####: 2437:      l = 0U;
    #####: 2438:    } else {
        -: 2439:      {
        -: 2440:                {
        -: 2441:                                              ;
    #####: 2442:        if (! (k < 7U)) {
    #####: 2443:          goto while_break___11;
        -: 2444:        }
        -: 2445:                            {
    #####: 2446:          tmp___25 = inptr;
    #####: 2447:          inptr ++;
    #####: 2448:          tmp___27 = (int )inbuf[tmp___25];
        -: 2449:        }       
        -: 2450:           
        -: 2451:
        -: 2452:                                   
        -: 2453:                              
        -: 2454:           
        -: 2455:
        -: 2456:         
    #####: 2457:        b |= (ulg )((uch )tmp___27) << k;
    #####: 2458:        k += 8U;
    #####: 2459:      }
        -: 2460:      while_break___11: /* CIL Label */ ;
        -: 2461:      }
    #####: 2462:      j___0 = 11U + ((unsigned int )b & 127U);
    #####: 2463:      b >>= 7;
    #####: 2464:      k -= 7U;
        -: 2465:                                             
        -: 2466:                   
        -: 2467:       
        -: 2468:      {
    #####: 2469:      while (1) {
        -: 2470:                                              ;
    #####: 2471:        tmp___29 = j___0;
    #####: 2472:        j___0 --;
    #####: 2473:        if (! tmp___29) {
    #####: 2474:          goto while_break___12;
        -: 2475:        }
    #####: 2476:        tmp___28 = i___0;
    #####: 2477:        i___0 ++;
    #####: 2478:        ll[tmp___28] = 0U;
        -: 2479:      }
        -: 2480:      while_break___12: /* CIL Label */ ;
        -: 2481:      }
    #####: 2482:      l = 0U;
        -: 2483:    }
        -: 2484:    }
        -: 2485:    }
        -: 2486:  }
        -: 2487:  while_break___5: /* CIL Label */ ;
        -: 2488:  }
        -: 2489:  {
    #####: 2490:  huft_free(tl);
    #####: 2491:  bb = b;
    #####: 2492:  bk = k;
        -: 2493:             
    #####: 2494:  i___0 = huft_build(ll, nl, 257U, cplens, cplext, & tl, & bl);
        -: 2495:  }
    #####: 2496:  if (i___0 != 0) {
    #####: 2497:    if (i___0 == 1) {
        -: 2498:       
        -: 2499:
        -: 2500:                                                                                                      
    #####: 2501:      huft_free(tl);
        -: 2502:       
        -: 2503:
    #####: 2504:    }
        -: 2505:                   
    #####: 2506:  }
        -: 2507:  {
        -: 2508:             
    #####: 2509:  i___0 = huft_build(ll + nl, nd, 0U, cpdist, cpdext, & td, & bd);
        -: 2510:  }
    #####: 2511:  if (i___0 != 0) {
        -: 2512:                     
        -: 2513:       
        -: 2514:
        -: 2515:                                                                                                       
        -: 2516:                    
        -: 2517:       
        -: 2518:
        -: 2519:     
        -: 2520:     
        -: 2521:                  
        -: 2522:     
        -: 2523:                   
    #####: 2524:  }
        -: 2525:  {
    #####: 2526:  tmp___30 = inflate_codes(tl, td, bl, bd);
        -: 2527:  }
        -: 2528:                 
        -: 2529:               
        -: 2530:   
        -: 2531:   
        -: 2532:                
        -: 2533:                
        -: 2534:   
    #####: 2535:  return (0);
        -: 2536:}
        -: 2537:}
    #####: 2538:int inflate_block(int *e ) 
        -: 2539:{ 
        -: 2540:  unsigned int t ;
        -: 2541:  register ulg b ;
        -: 2542:  register unsigned int k ;
        -: 2543:  unsigned int tmp ;
        -: 2544:  int tmp___0 ;
        -: 2545:  int tmp___1 ;
        -: 2546:  unsigned int tmp___2 ;
        -: 2547:  int tmp___3 ;
        -: 2548:  int tmp___4 ;
        -: 2549:  int tmp___5 ;
        -: 2550:  int tmp___6 ;
        -: 2551:  int tmp___7 ;
        -: 2552:
        -: 2553:  {
    #####: 2554:  b = bb;
    #####: 2555:  k = bk;
        -: 2556:  {
    #####: 2557:  while (1) {
        -: 2558:                                     ;
    #####: 2559:    if (! (k < 1U)) {
    #####: 2560:      goto while_break;
        -: 2561:    }
    #####: 2562:    if (inptr < insize) {
    #####: 2563:      tmp = inptr;
    #####: 2564:      inptr ++;
    #####: 2565:      tmp___1 = (int )inbuf[tmp];
    #####: 2566:    } else {
        -: 2567:       
        -: 2568:
    #####: 2569:      tmp___0 = fill_inbuf(0);
        -: 2570:                        
        -: 2571:       
        -: 2572:
        -: 2573:    }
    #####: 2574:    b |= (ulg )((uch )tmp___1) << k;
    #####: 2575:    k += 8U;
        -: 2576:  }
        -: 2577:  while_break: /* CIL Label */ ;
        -: 2578:  }
    #####: 2579:  *e = (int )b & 1;
    #####: 2580:  b >>= 1;
    #####: 2581:  k --;
        -: 2582:  {
    #####: 2583:  while (1) {
        -: 2584:                                         ;
    #####: 2585:    if (! (k < 2U)) {
    #####: 2586:      goto while_break___0;
        -: 2587:    }
        -: 2588:                        {
    #####: 2589:      tmp___2 = inptr;
    #####: 2590:      inptr ++;
    #####: 2591:      tmp___4 = (int )inbuf[tmp___2];
        -: 2592:    }       
        -: 2593:       
        -: 2594:
        -: 2595:                              
        -: 2596:                        
        -: 2597:       
        -: 2598:
        -: 2599:     
    #####: 2600:    b |= (ulg )((uch )tmp___4) << k;
    #####: 2601:    k += 8U;
        -: 2602:  }
        -: 2603:  while_break___0: /* CIL Label */ ;
        -: 2604:  }
    #####: 2605:  t = (unsigned int )b & 3U;
    #####: 2606:  b >>= 2;
    #####: 2607:  k -= 2U;
    #####: 2608:  bb = b;
    #####: 2609:  bk = k;
    #####: 2610:  if (t == 2U) {
        -: 2611:    {
    #####: 2612:    tmp___5 = inflate_dynamic();
        -: 2613:    }
    #####: 2614:    return (tmp___5);
        -: 2615:  }
        -: 2616:               {
        -: 2617:    {
    #####: 2618:    tmp___6 = inflate_stored();
        -: 2619:    }
    #####: 2620:    return (tmp___6);
        -: 2621:  }
        -: 2622:  if (t == 1U) {
        -: 2623:    {
        -: 2624:    tmp___7 = inflate_fixed();
        -: 2625:    }
        -: 2626:    return (tmp___7);
        -: 2627:  }
        -: 2628:  return (2);
        -: 2629:}
    #####: 2630:}
    #####: 2631:int inflate(void) 
        -: 2632:{ 
        -: 2633:  int e ;
        -: 2634:  int r ;
        -: 2635:  unsigned int h ;
        -: 2636:
        -: 2637:  {
    #####: 2638:  outcnt = 0U;
    #####: 2639:  bk = 0U;
        -: 2640:               
        -: 2641:         
        -: 2642:  {
    #####: 2643:  while (1) {
        -: 2644:                                     ;
        -: 2645:    {
    #####: 2646:    hufts = 0U;
    #####: 2647:    r = inflate_block(& e);
        -: 2648:    }
        -: 2649:                 
        -: 2650:                 
        -: 2651:     
        -: 2652:                    
        -: 2653:                
        -: 2654:     
    #####: 2655:    if (! (! e)) {
    #####: 2656:      goto while_break;
        -: 2657:    }
        -: 2658:  }
        -: 2659:  while_break: /* CIL Label */ ;
        -: 2660:  }
    #####: 2661:  {
        -: 2662:             
        -: 2663:                                          
        -: 2664:                       
        -: 2665:                           
        -: 2666:     
        -: 2667:             
        -: 2668:             
        -: 2669:   
        -: 2670:  while_break___0: /* CIL Label */ ;
        -: 2671:  }
        -: 2672:  {
        -: 2673:                  
    #####: 2674:  flush_window();
        -: 2675:  }
    #####: 2676:  return (0);
        -: 2677:}
        -: 2678:}
        -: 2679:static int msg_done  =    0;
    #####: 2680:int lzw(int in , int out ) 
        -: 2681:{ 
        -: 2682:
        -: 2683:
        -: 2684:   
        -: 2685:
        -: 2686:                {
    #####: 2687:    return (1);
        -: 2688:  }
        -: 2689:  {
        -: 2690:  msg_done = 1;
        -: 2691:  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"output in compress .Z format not supported\n");
        -: 2692:  }
        -: 2693:                  
        -: 2694:                  
        -: 2695:   
        -: 2696:             
        -: 2697: 
        -: 2698:
        -: 2699:}
        -: 2700:static int extra_lbits[29]  = 
        -: 2701:  {      0,      0,      0,      0, 
        -: 2702:        0,      0,      0,      0, 
        -: 2703:        1,      1,      1,      1, 
        -: 2704:        2,      2,      2,      2, 
        -: 2705:        3,      3,      3,      3, 
        -: 2706:        4,      4,      4,      4, 
        -: 2707:        5,      5,      5,      5, 
        -: 2708:        0};
        -: 2709:static int extra_dbits[30]  = 
        -: 2710:  {      0,      0,      0,      0, 
        -: 2711:        1,      1,      2,      2, 
        -: 2712:        3,      3,      4,      4, 
        -: 2713:        5,      5,      6,      6, 
        -: 2714:        7,      7,      8,      8, 
        -: 2715:        9,      9,      10,      10, 
        -: 2716:        11,      11,      12,      12, 
        -: 2717:        13,      13};
        -: 2718:static int extra_blbits[19]  = 
        -: 2719:  {      0,      0,      0,      0, 
        -: 2720:        0,      0,      0,      0, 
        -: 2721:        0,      0,      0,      0, 
        -: 2722:        0,      0,      0,      0, 
        -: 2723:        2,      3,      7};
        -: 2724:static ct_data dyn_ltree[573]  ;
        -: 2725:static ct_data dyn_dtree[61]  ;
        -: 2726:static ct_data static_ltree[288]  ;
        -: 2727:static ct_data static_dtree[30]  ;
        -: 2728:static ct_data bl_tree[39]  ;
        -: 2729:static tree_desc l_desc  =    {dyn_ltree, static_ltree, extra_lbits, 257, 286, 15, 0};
        -: 2730:static tree_desc d_desc  =    {dyn_dtree, static_dtree, extra_dbits, 0, 30, 15, 0};
        -: 2731:static tree_desc bl_desc  =    {bl_tree, (ct_data *)0, extra_blbits, 0, 19, 7, 0};
        -: 2732:static ush bl_count[16]  ;
        -: 2733:static uch bl_order[19]  = 
        -: 2734:  {      (uch )16,      (uch )17,      (uch )18,      (uch )0, 
        -: 2735:        (uch )8,      (uch )7,      (uch )9,      (uch )6, 
        -: 2736:        (uch )10,      (uch )5,      (uch )11,      (uch )4, 
        -: 2737:        (uch )12,      (uch )3,      (uch )13,      (uch )2, 
        -: 2738:        (uch )14,      (uch )1,      (uch )15};
        -: 2739:static int heap[573]  ;
        -: 2740:static int heap_len  ;
        -: 2741:static int heap_max  ;
        -: 2742:static uch depth[573]  ;
        -: 2743:static uch length_code[256]  ;
        -: 2744:static uch dist_code[512]  ;
        -: 2745:static int base_length[29]  ;
        -: 2746:static int base_dist[30]  ;
        -: 2747:static uch flag_buf[4096]  ;
        -: 2748:static unsigned int last_lit  ;
        -: 2749:static unsigned int last_dist  ;
        -: 2750:static unsigned int last_flags  ;
        -: 2751:static uch flags  ;
        -: 2752:static uch flag_bit  ;
        -: 2753:static ulg opt_len  ;
        -: 2754:static ulg static_len  ;
        -: 2755:static off_t compressed_len  ;
        -: 2756:static off_t input_len  ;
        -: 2757:ush *file_type  ;
        -: 2758:int *file_method  ;
        -: 2759:static void init_block(void) ;
        -: 2760:static void pqdownheap(ct_data *tree , int k ) ;
        -: 2761:static void gen_bitlen(tree_desc *desc ) ;
        -: 2762:static void gen_codes(ct_data *tree , int max_code ) ;
        -: 2763:static void build_tree(tree_desc *desc ) ;
        -: 2764:static void scan_tree(ct_data *tree , int max_code ) ;
        -: 2765:static void send_tree(ct_data *tree , int max_code ) ;
        -: 2766:static int build_bl_tree(void) ;
        -: 2767:static void send_all_trees(int lcodes , int dcodes , int blcodes ) ;
        -: 2768:static void compress_block(ct_data *ltree , ct_data *dtree ) ;
        -: 2769:static void set_file_type(void) ;
        1: 2770:void ct_init(ush *attr , int *methodp ) 
        -: 2771:{ 
        -: 2772:  int n ;
        -: 2773:  int bits ;
        -: 2774:  int length ;
        -: 2775:  int code ;
        -: 2776:  int dist ;
        -: 2777:  int tmp ;
        -: 2778:  int tmp___0 ;
        -: 2779:  int tmp___1 ;
        -: 2780:  int tmp___2 ;
        -: 2781:  int tmp___3 ;
        -: 2782:  int tmp___4 ;
        -: 2783:  int tmp___5 ;
        -: 2784:  unsigned int tmp___6 ;
        -: 2785:
        -: 2786:  {
        1: 2787:  file_type = attr;
        1: 2788:  file_method = methodp;
        -: 2789:                 
        -: 2790:                             
        -: 2791:                                          
        -: 2792:           
        -: 2793:   
        -: 2794:             
        1: 2795:  code = 0;
        -: 2796:  {
       29: 2797:  while (1) {
        -: 2798:                                     ;
       29: 2799:    if (! (code < 28)) {
        1: 2800:      goto while_break;
        -: 2801:    }
       28: 2802:    base_length[code] = length;
       28: 2803:    n = 0;
        -: 2804:    {
      284: 2805:    while (1) {
        -: 2806:                                           ;
      284: 2807:      if (! (n < 1 << extra_lbits[code])) {
       28: 2808:        goto while_break___0;
        -: 2809:      }
      256: 2810:      tmp = length;
      256: 2811:      length ++;
      256: 2812:      length_code[tmp] = (uch )code;
      256: 2813:      n ++;
        -: 2814:    }
        -: 2815:    while_break___0: /* CIL Label */ ;
        -: 2816:    }
       28: 2817:    code ++;
        -: 2818:  }
        -: 2819:  while_break: /* CIL Label */ ;
        -: 2820:  }
        1: 2821:  length_code[length - 1] = (uch )code;
        1: 2822:  dist = 0;
        1: 2823:  code = 0;
        -: 2824:  {
       17: 2825:  while (1) {
        -: 2826:                                         ;
       17: 2827:    if (! (code < 16)) {
        1: 2828:      goto while_break___1;
        -: 2829:    }
       16: 2830:    base_dist[code] = dist;
       16: 2831:    n = 0;
        -: 2832:    {
      272: 2833:    while (1) {
        -: 2834:                                           ;
      272: 2835:      if (! (n < 1 << extra_dbits[code])) {
       16: 2836:        goto while_break___2;
        -: 2837:      }
      256: 2838:      tmp___0 = dist;
      256: 2839:      dist ++;
      256: 2840:      dist_code[tmp___0] = (uch )code;
      256: 2841:      n ++;
        -: 2842:    }
        -: 2843:    while_break___2: /* CIL Label */ ;
        -: 2844:    }
       16: 2845:    code ++;
        -: 2846:  }
        -: 2847:  while_break___1: /* CIL Label */ ;
        -: 2848:  }
        1: 2849:  dist >>= 7;
        -: 2850:  {
       15: 2851:  while (1) {
        -: 2852:                                         ;
       15: 2853:    if (! (code < 30)) {
        1: 2854:      goto while_break___3;
        -: 2855:    }
       14: 2856:    base_dist[code] = dist << 7;
       14: 2857:    n = 0;
        -: 2858:    {
      268: 2859:    while (1) {
        -: 2860:                                           ;
      268: 2861:      if (! (n < 1 << (extra_dbits[code] - 7))) {
       14: 2862:        goto while_break___4;
        -: 2863:      }
      254: 2864:      tmp___1 = dist;
      254: 2865:      dist ++;
      254: 2866:      dist_code[256 + tmp___1] = (uch )code;
      254: 2867:      n ++;
        -: 2868:    }
        -: 2869:    while_break___4: /* CIL Label */ ;
        -: 2870:    }
       14: 2871:    code ++;
        -: 2872:  }
        -: 2873:  while_break___3: /* CIL Label */ ;
        -: 2874:  }
        -: 2875:           
        -: 2876:   
        -: 2877:             
        -: 2878:                                          
        -: 2879:                         
        -: 2880:                           
        -: 2881:     
        -: 2882:                             
        -: 2883:            
        -: 2884:   
        -: 2885:                                    
        -: 2886:   
        -: 2887:        
        -: 2888:   
        -: 2889:             
        -: 2890:                                          
        -: 2891:                       
        -: 2892:                           
        -: 2893:     
        -: 2894:                
        -: 2895:         
        -: 2896:                                           
        -: 2897:                                                
        -: 2898:   
        -: 2899:                                    
        -: 2900:   
        -: 2901:   
        -: 2902:             
        -: 2903:                                          
        -: 2904:                       
        -: 2905:                           
        -: 2906:     
        -: 2907:                
        -: 2908:         
        -: 2909:                                           
        -: 2910:                                                
        -: 2911:   
        -: 2912:                                    
        -: 2913:   
        1: 2914:  {
        -: 2915:             
        -: 2916:                                          
        -: 2917:                       
        -: 2918:                           
        -: 2919:     
        -: 2920:                
        -: 2921:         
        -: 2922:                                           
        -: 2923:                                                
        -: 2924:   
        -: 2925:  while_break___8: /* CIL Label */ ;
        -: 2926:  }
        -: 2927:  {
      225: 2928:  while (1) {
        -: 2929:                                         ;
      225: 2930:    if (! (n <= 287)) {
        1: 2931:      goto while_break___9;
        -: 2932:    }
      224: 2933:    tmp___5 = n;
      224: 2934:    n ++;
      224: 2935:    static_ltree[tmp___5].dl.len = (ush )8;
        -: 2936:                                                
        -: 2937:  }
        -: 2938:  while_break___9: /* CIL Label */ ;
        -: 2939:  }
        -: 2940:  {
        1: 2941:  gen_codes(static_ltree, 287);
        1: 2942:  n = 0;
        -: 2943:  }
        -: 2944:  {
       31: 2945:  while (1) {
        -: 2946:                                          ;
       31: 2947:    if (! (n < 30)) {
        1: 2948:      goto while_break___10;
        -: 2949:    }
        -: 2950:    {
       30: 2951:    static_dtree[n].dl.len = (ush )5;
        -: 2952:                                              
        -: 2953:                                            
       30: 2954:    n ++;
        -: 2955:    }
        -: 2956:  }
        -: 2957:  while_break___10: /* CIL Label */ ;
        -: 2958:  }
        -: 2959:  {
        1: 2960:  init_block();
        -: 2961:  }
        1: 2962:  return;
        -: 2963:}
        -: 2964:}
        2: 2965:static void init_block(void) 
        -: 2966:{ 
        -: 2967:  int n ;
        -: 2968:
        -: 2969:  {
        -: 2970:        
        -: 2971:   
        -: 2972:             
        -: 2973:                                      
        -: 2974:                      
        -: 2975:                       
        -: 2976:     
        -: 2977:                                   
        -: 2978:         
        -: 2979:   
        -: 2980:                                
        -: 2981:   
        -: 2982:        
        -: 2983:   
        -: 2984:             
        -: 2985:                                          
        -: 2986:                     
        -: 2987:                           
        -: 2988:     
        -: 2989:                                   
        -: 2990:         
        -: 2991:   
        -: 2992:                                    
        -: 2993:   
        -: 2994:        
        -: 2995:   
        -: 2996:             
        -: 2997:                                          
        -: 2998:                     
        -: 2999:                           
        -: 3000:     
        -: 3001:                                 
        -: 3002:         
        -: 3003:   
        -: 3004:                                    
        -: 3005:   
        2: 3006:  dyn_ltree[256].fc.freq = (ush )1;
        2: 3007:  static_len = (ulg )0L;
        -: 3008:                       
        -: 3009:                  
        -: 3010:                         
        -: 3011:                       
        -: 3012:                  
        -: 3013:                     
        -: 3014:         
        -: 3015:}
        2: 3016:}
      641: 3017:static void pqdownheap(ct_data *tree , int k ) 
        -: 3018:{ 
        -: 3019:  int v ;
        -: 3020:  int j___0 ;
        -: 3021:
        -: 3022:  {
      641: 3023:  v = heap[k];
      641: 3024:  j___0 = k << 1;
        -: 3025:  {
     1787: 3026:  while (1) {
        -: 3027:                                     ;
     1787: 3028:    if (! (j___0 <= heap_len)) {
      502: 3029:      goto while_break;
        -: 3030:    }
     1285: 3031:    if (j___0 < heap_len) {
     1260: 3032:      if ((int )(tree + heap[j___0 + 1])->fc.freq < (int )(tree + heap[j___0])->fc.freq) {
      520: 3033:        j___0 ++;
      520: 3034:      } else { //Added block
      740: 3035:      if ((int )(tree + heap[j___0 + 1])->fc.freq == (int )(tree + heap[j___0])->fc.freq) {
      141: 3036:        if ((int )depth[heap[j___0 + 1]] <= (int )depth[heap[j___0]]) {
      104: 3037:          j___0 ++;
      104: 3038:        }
      141: 3039:      }
        -: 3040:      }
     1260: 3041:    }
     1285: 3042:    if ((int )(tree + v)->fc.freq < (int )(tree + heap[j___0])->fc.freq) {
      127: 3043:      goto while_break;
        -: 3044:    } else { //Added block
     1158: 3045:    if ((int )(tree + v)->fc.freq == (int )(tree + heap[j___0])->fc.freq) {
       30: 3046:      if ((int )depth[v] <= (int )depth[heap[j___0]]) {
       12: 3047:        goto while_break;
        -: 3048:      }
       18: 3049:    }
        -: 3050:    }
     1146: 3051:    heap[k] = heap[j___0];
     1146: 3052:    k = j___0;
     1146: 3053:    j___0 <<= 1;
        -: 3054:  }
        -: 3055:  while_break: /* CIL Label */ ;
        -: 3056:  }
      641: 3057:  heap[k] = v;
      641: 3058:  return;
        -: 3059:}
        -: 3060:}
        3: 3061:static void gen_bitlen(tree_desc *desc ) 
        -: 3062:{ 
        -: 3063:  ct_data *tree ;
        -: 3064:  int *extra ;
        -: 3065:  int base ;
        -: 3066:  int max_code ;
        -: 3067:  int max_length ;
        -: 3068:  ct_data *stree ;
        -: 3069:  int h ;
        -: 3070:  int n ;
        -: 3071:  int m ;
        -: 3072:  int bits ;
        -: 3073:  int xbits ;
        -: 3074:  ush f ;
        -: 3075:  int overflow ;
        -: 3076:
        -: 3077:  {
        3: 3078:  tree = desc->dyn_tree;
        3: 3079:  extra = desc->extra_bits;
        3: 3080:  base = desc->extra_base;
        3: 3081:  max_code = desc->max_code;
        3: 3082:  max_length = desc->max_length;
        3: 3083:  stree = desc->static_tree;
        3: 3084:  overflow = 0;
        3: 3085:  bits = 0;
        -: 3086:  {
       51: 3087:  while (1) {
        -: 3088:                                     ;
       51: 3089:    if (! (bits <= 15)) {
        3: 3090:      goto while_break;
        -: 3091:    }
       48: 3092:    bl_count[bits] = (ush )0;
       48: 3093:    bits ++;
        -: 3094:  }
        -: 3095:  while_break: /* CIL Label */ ;
        -: 3096:  }
        3: 3097:  (tree + heap[heap_max])->dl.len = (ush )0;
        3: 3098:  h = heap_max + 1;
        -: 3099:  {
      309: 3100:  while (1) {
        -: 3101:                                         ;
      309: 3102:    if (! (h < 573)) {
        3: 3103:      goto while_break___0;
        -: 3104:    }
      306: 3105:    n = heap[h];
      306: 3106:    bits = (int )(tree + (int )(tree + n)->dl.dad)->dl.len + 1;
      306: 3107:    if (bits > max_length) {
        -: 3108:                        
    #####: 3109:      overflow ++;
    #####: 3110:    }
      306: 3111:    (tree + n)->dl.len = (ush )bits;
      306: 3112:    if (n > max_code) {
      150: 3113:      goto __Cont;
        -: 3114:    }
      156: 3115:    bl_count[bits] = (ush )((int )bl_count[bits] + 1);
      156: 3116:    xbits = 0;
        -: 3117:                    
        -: 3118:                                    
        -: 3119:     
      156: 3120:    f = (tree + n)->fc.freq;
      156: 3121:    opt_len += (ulg )f * (ulg )(bits + xbits);
      297: 3122:    if (stree) {
      141: 3123:      static_len += (ulg )f * (ulg )((int )(stree + n)->dl.len + xbits);
      141: 3124:    }
        -: 3125:    __Cont: 
      306: 3126:    h ++;
        -: 3127:  }
        -: 3128:  while_break___0: /* CIL Label */ ;
        -: 3129:  }
        3: 3130:  if (overflow == 0) {
        3: 3131:    return;
        -: 3132:  }
        -: 3133:  {
        -: 3134:            {
        -: 3135:                                         ;
        -: 3136:                          
        -: 3137:     
        -: 3138:               
        -: 3139:                                            
        -: 3140:                                          
        -: 3141:                             
        -: 3142:       
        -: 3143:              
        -: 3144:     
        -: 3145:                                      
        -: 3146:     
        -: 3147:                                                      
        -: 3148:                                                              
        -: 3149:                                                                  
        -: 3150:                  
        -: 3151:                           
        -: 3152:                           
        -: 3153:     
    #####: 3154:  }
        -: 3155:  while_break___1: /* CIL Label */ ;
        -: 3156:  }
        -: 3157:                    
        -: 3158:   
        -: 3159:             
        -: 3160:                                          
        -: 3161:                        
        -: 3162:                           
        -: 3163:     
        -: 3164:                             
        -: 3165:     
        -: 3166:               
        -: 3167:                                           
        -: 3168:                       
        -: 3169:                             
        -: 3170:       
        -: 3171:           
        -: 3172:                  
        -: 3173:                         
        -: 3174:                                
        -: 3175:       
        -: 3176:                                                                     
        -: 3177:                                                                                                  
        -: 3178:                                        
        -: 3179:       
        -: 3180:           
        -: 3181:     
        -: 3182:                                      
        -: 3183:     
        -: 3184:            
        -: 3185:   
        -: 3186:                                    
        -: 3187:   
        -: 3188:         
        -: 3189:}
        3: 3190:}
        4: 3191:static void gen_codes(ct_data *tree , int max_code ) 
        -: 3192:{ 
        -: 3193:  ush next_code[16] ;
        -: 3194:  ush code ;
        -: 3195:  int bits ;
        -: 3196:  int n ;
        -: 3197:  int len ;
        -: 3198:  ush tmp ;
        -: 3199:  unsigned int tmp___0 ;
        -: 3200:
        -: 3201:  {
        -: 3202:                 
        4: 3203:  bits = 1;
        -: 3204:  {
       64: 3205:  while (1) {
        -: 3206:                                     ;
       64: 3207:    if (! (bits <= 15)) {
        4: 3208:      goto while_break;
        -: 3209:    }
       60: 3210:    code = (ush )(((int )code + (int )bl_count[bits - 1]) << 1);
       60: 3211:    next_code[bits] = code;
       60: 3212:    bits ++;
        -: 3213:  }
        -: 3214:  while_break: /* CIL Label */ ;
        -: 3215:  }
        4: 3216:  n = 0;
        -: 3217:  {
      627: 3218:  while (1) {
        -: 3219:                                         ;
      627: 3220:    if (! (n <= max_code)) {
        4: 3221:      goto while_break___0;
        -: 3222:    }
      623: 3223:    len = (int )(tree + n)->dl.len;
      623: 3224:    if (len == 0) {
        -: 3225:                  
      243: 3226:    }
        -: 3227:    {
      623: 3228:    tmp = next_code[len];
      623: 3229:    next_code[len] = (ush )((int )next_code[len] + 1);
      623: 3230:    tmp___0 = bi_reverse((unsigned int )tmp, len);
      623: 3231:    (tree + n)->fc.code = (ush )tmp___0;
      623: 3232:    }
        -: 3233:    __Cont: 
      623: 3234:    n ++;
        -: 3235:  }
        -: 3236:  while_break___0: /* CIL Label */ ;
        -: 3237:  }
        4: 3238:  return;
        -: 3239:}
        -: 3240:}
        3: 3241:static void build_tree(tree_desc *desc ) 
        -: 3242:{ 
        -: 3243:  ct_data *tree ;
        -: 3244:  ct_data *stree ;
        -: 3245:  int elems ;
        -: 3246:  int n ;
        -: 3247:  int m ;
        -: 3248:  int max_code ;
        -: 3249:  int node ;
        -: 3250:  int new ;
        -: 3251:  int tmp ;
        -: 3252:  int tmp___0 ;
        -: 3253:  int tmp___1 ;
        -: 3254:  ush tmp___2 ;
        -: 3255:  int tmp___3 ;
        -: 3256:
        -: 3257:  {
        3: 3258:  tree = desc->dyn_tree;
        3: 3259:  stree = desc->static_tree;
        3: 3260:  elems = desc->elems;
        3: 3261:  max_code = -1;
        3: 3262:  node = elems;
        3: 3263:  heap_len = 0;
        3: 3264:  heap_max = 573;
        3: 3265:  n = 0;
        -: 3266:  {
      338: 3267:  while (1) {
        -: 3268:                                     ;
      338: 3269:    if (! (n < elems)) {
        3: 3270:      goto while_break;
        -: 3271:    }
      335: 3272:    if ((int )(tree + n)->fc.freq != 0) {
      156: 3273:      heap_len ++;
      156: 3274:      max_code = n;
      156: 3275:      heap[heap_len] = max_code;
        -: 3276:                         
      156: 3277:    } else {
        -: 3278:                                   
        -: 3279:    }
      335: 3280:    n ++;
        -: 3281:  }
        -: 3282:  while_break: /* CIL Label */ ;
        -: 3283:  }
        -: 3284:  {
        3: 3285:  while (1) {
        -: 3286:                                         ;
        3: 3287:    if (! (heap_len < 2)) {
        3: 3288:      goto while_break___0;
        -: 3289:    }
        -: 3290:                
        -: 3291:                      {
    #####: 3292:      max_code ++;
    #####: 3293:      tmp = max_code;
        -: 3294:    }       
        -: 3295:              
        -: 3296:     
    #####: 3297:    heap[heap_len] = tmp;
        -: 3298:              
        -: 3299:                                    
        -: 3300:                         
        -: 3301:               
        -: 3302:                
        -: 3303:                                                
        -: 3304:     
        -: 3305:  }
        -: 3306:  while_break___0: /* CIL Label */ ;
        -: 3307:  }
        3: 3308:  desc->max_code = max_code;
        -: 3309:                   
        -: 3310:  {
      338: 3311:  while (1) {
        -: 3312:                                         ;
      338: 3313:    if (! (n >= 1)) {
        3: 3314:      goto while_break___1;
        -: 3315:    }
        -: 3316:    {
      335: 3317:    pqdownheap(tree, n);
      335: 3318:    n --;
        -: 3319:    }
        -: 3320:  }
        -: 3321:  while_break___1: /* CIL Label */ ;
        -: 3322:  }
        -: 3323:  {
      153: 3324:  while (1) {
        -: 3325:                                         ;
        -: 3326:    {
      153: 3327:    n = heap[1];
      153: 3328:    tmp___0 = heap_len;
      153: 3329:    heap_len --;
      153: 3330:    heap[1] = heap[tmp___0];
      153: 3331:    pqdownheap(tree, 1);
      153: 3332:    m = heap[1];
      153: 3333:    heap_max --;
      153: 3334:    heap[heap_max] = n;
      153: 3335:    heap_max --;
      153: 3336:    heap[heap_max] = m;
      153: 3337:    (tree + node)->fc.freq = (ush )((int )(tree + n)->fc.freq + (int )(tree + m)->fc.freq);
        -: 3338:    }
        -: 3339:                                          {
      153: 3340:      tmp___1 = (int )depth[n];
        -: 3341:    }       
        -: 3342:                               
        -: 3343:     
        -: 3344:    {
      153: 3345:    depth[node] = (uch )(tmp___1 + 1);
      153: 3346:    tmp___2 = (ush )node;
      153: 3347:    (tree + m)->dl.dad = tmp___2;
      153: 3348:    (tree + n)->dl.dad = tmp___2;
      153: 3349:    tmp___3 = node;
      153: 3350:    node ++;
      153: 3351:    heap[1] = tmp___3;
      153: 3352:    pqdownheap(tree, 1);
        -: 3353:    }
      153: 3354:    if (! (heap_len >= 2)) {
        3: 3355:      goto while_break___2;
        -: 3356:    }
        -: 3357:  }
        -: 3358:  while_break___2: /* CIL Label */ ;
        -: 3359:  }
        -: 3360:  {
        3: 3361:  heap_max --;
        3: 3362:  heap[heap_max] = heap[1];
        3: 3363:  gen_bitlen(desc);
        3: 3364:  gen_codes(tree, max_code);
        -: 3365:  }
        3: 3366:  return;
        -: 3367:}
        -: 3368:}
        2: 3369:static void scan_tree(ct_data *tree , int max_code ) 
        -: 3370:{ 
        -: 3371:  int n ;
        -: 3372:  int prevlen ;
        -: 3373:  int curlen ;
        -: 3374:  int nextlen ;
        -: 3375:  int count ;
        -: 3376:  int max_count ;
        -: 3377:  int min_count ;
        -: 3378:
        -: 3379:  {
        2: 3380:  prevlen = -1;
        2: 3381:  nextlen = (int )(tree + 0)->dl.len;
        2: 3382:  count = 0;
        -: 3383:                
        -: 3384:                
        -: 3385:                     
        -: 3386:                    
        -: 3387:                  
        -: 3388:   
        2: 3389:  (tree + (max_code + 1))->dl.len = (ush )65535;
        2: 3390:  n = 0;
        -: 3391:  {
      318: 3392:  while (1) {
        -: 3393:                                     ;
      318: 3394:    if (! (n <= max_code)) {
        2: 3395:      goto while_break;
        -: 3396:    }
      316: 3397:    curlen = nextlen;
      316: 3398:    nextlen = (int )(tree + (n + 1))->dl.len;
      316: 3399:    count ++;
      316: 3400:    if (count < max_count) {
      315: 3401:      if (curlen == nextlen) {
      205: 3402:        goto __Cont;
        -: 3403:      } else {
      110: 3404:        goto _L;
        -: 3405:      }
        1: 3406:    } else { //Added block
        -: 3407:    _L: 
      111: 3408:    if (count < min_count) {
      103: 3409:      bl_tree[curlen].fc.freq = (ush )((int )bl_tree[curlen].fc.freq + count);
      103: 3410:    } else { //Added block
        8: 3411:    if (curlen != 0) {
        -: 3412:                             {
        3: 3413:        bl_tree[curlen].fc.freq = (ush )((int )bl_tree[curlen].fc.freq + 1);
        -: 3414:      }
        3: 3415:      bl_tree[16].fc.freq = (ush )((int )bl_tree[16].fc.freq + 1);
        3: 3416:    } else { //Added block
        5: 3417:    if (count <= 10) {
        3: 3418:      bl_tree[17].fc.freq = (ush )((int )bl_tree[17].fc.freq + 1);
        3: 3419:    } else {
        2: 3420:      bl_tree[18].fc.freq = (ush )((int )bl_tree[18].fc.freq + 1);
        -: 3421:    }
        -: 3422:    }
        -: 3423:    }
        -: 3424:    }
      111: 3425:    count = 0;
        -: 3426:                     
      222: 3427:    if (nextlen == 0) {
       12: 3428:      max_count = 138;
       12: 3429:      min_count = 3;
       12: 3430:    } else { //Added block
       99: 3431:    if (curlen == nextlen) {
        -: 3432:                    
        1: 3433:      min_count = 3;
        1: 3434:    } else {
       98: 3435:      max_count = 7;
       98: 3436:      min_count = 4;
        -: 3437:    }
        -: 3438:    }
        -: 3439:    __Cont: 
      316: 3440:    n ++;
        -: 3441:  }
        -: 3442:  while_break: /* CIL Label */ ;
        -: 3443:  }
        -: 3444:         
        -: 3445:}
        2: 3446:}
        2: 3447:static void send_tree(ct_data *tree , int max_code ) 
        -: 3448:{ 
        -: 3449:  int n ;
        -: 3450:  int prevlen ;
        -: 3451:  int curlen ;
        -: 3452:  int nextlen ;
        -: 3453:  int count ;
        -: 3454:  int max_count ;
        -: 3455:  int min_count ;
        -: 3456:
        -: 3457:  {
        2: 3458:  prevlen = -1;
        2: 3459:  nextlen = (int )(tree + 0)->dl.len;
        2: 3460:  count = 0;
        2: 3461:  max_count = 7;
        2: 3462:  min_count = 4;
        2: 3463:  if (nextlen == 0) {
        1: 3464:    max_count = 138;
        -: 3465:                  
        1: 3466:  }
        2: 3467:  n = 0;
        -: 3468:  {
      318: 3469:  while (1) {
        -: 3470:                                     ;
      318: 3471:    if (! (n <= max_code)) {
        2: 3472:      goto while_break;
        -: 3473:    }
      316: 3474:    curlen = nextlen;
      316: 3475:    nextlen = (int )(tree + (n + 1))->dl.len;
      316: 3476:    count ++;
      316: 3477:    if (count < max_count) {
      315: 3478:      if (curlen == nextlen) {
      205: 3479:        goto __Cont;
        -: 3480:      } else {
      110: 3481:        goto _L;
        -: 3482:      }
        1: 3483:    } else { //Added block
        -: 3484:    _L: 
      111: 3485:    if (count < min_count) {
        -: 3486:       
        -: 3487:
      135: 3488:      while (1) {
        -: 3489:                                             ;
        -: 3490:        {
      135: 3491:        send_bits((int )bl_tree[curlen].fc.code, (int )bl_tree[curlen].dl.len);
      135: 3492:        count --;
        -: 3493:        }
      135: 3494:        if (! (count != 0)) {
      103: 3495:          goto while_break___0;
        -: 3496:        }
        -: 3497:      }
        -: 3498:      while_break___0: /* CIL Label */ ;
        -: 3499:       
        -: 3500:
      103: 3501:    } else { //Added block
        8: 3502:    if (curlen != 0) {
        3: 3503:      if (curlen != prevlen) {
        -: 3504:         
        -: 3505:
        3: 3506:        send_bits((int )bl_tree[curlen].fc.code, (int )bl_tree[curlen].dl.len);
        3: 3507:        count --;
        -: 3508:         
        -: 3509:
        3: 3510:      }
        -: 3511:      {
        3: 3512:      send_bits((int )bl_tree[16].fc.code, (int )bl_tree[16].dl.len);
        3: 3513:      send_bits(count - 3, 2);
        -: 3514:      }
        3: 3515:    } else { //Added block
        5: 3516:    if (count <= 10) {
        -: 3517:       
        -: 3518:
        3: 3519:      send_bits((int )bl_tree[17].fc.code, (int )bl_tree[17].dl.len);
        3: 3520:      send_bits(count - 3, 3);
        -: 3521:       
        -: 3522:
        3: 3523:    } else {
        -: 3524:       
        -: 3525:
        2: 3526:      send_bits((int )bl_tree[18].fc.code, (int )bl_tree[18].dl.len);
        2: 3527:      send_bits(count - 11, 7);
        -: 3528:       
        -: 3529:
        -: 3530:    }
        -: 3531:    }
        -: 3532:    }
        -: 3533:    }
      111: 3534:    count = 0;
      111: 3535:    prevlen = curlen;
      222: 3536:    if (nextlen == 0) {
       12: 3537:      max_count = 138;
       12: 3538:      min_count = 3;
       12: 3539:    } else { //Added block
       99: 3540:    if (curlen == nextlen) {
        -: 3541:                    
        1: 3542:      min_count = 3;
        1: 3543:    } else {
       98: 3544:      max_count = 7;
       98: 3545:      min_count = 4;
        -: 3546:    }
        -: 3547:    }
        -: 3548:    __Cont: 
      316: 3549:    n ++;
        -: 3550:  }
        -: 3551:  while_break: /* CIL Label */ ;
        -: 3552:  }
        2: 3553:  return;
        -: 3554:}
        -: 3555:}
        1: 3556:static int build_bl_tree(void) 
        -: 3557:{ 
        -: 3558:  int max_blindex ;
        -: 3559:
        -: 3560:  {
        -: 3561:  {
        1: 3562:  scan_tree(dyn_ltree, l_desc.max_code);
        1: 3563:  scan_tree(dyn_dtree, d_desc.max_code);
        1: 3564:  build_tree(& bl_desc);
        1: 3565:  max_blindex = 18;
        -: 3566:  }
        -: 3567:  {
        5: 3568:  while (1) {
        -: 3569:                                     ;
        5: 3570:    if (! (max_blindex >= 3)) {
    #####: 3571:      goto while_break;
        -: 3572:    }
        5: 3573:    if ((int )bl_tree[bl_order[max_blindex]].dl.len != 0) {
        1: 3574:      goto while_break;
        -: 3575:    }
        4: 3576:    max_blindex --;
        -: 3577:  }
        -: 3578:  while_break: /* CIL Label */ ;
        -: 3579:  }
        -: 3580:                                                           
        1: 3581:  return (max_blindex);
        -: 3582:}
        -: 3583:}
        1: 3584:static void send_all_trees(int lcodes , int dcodes , int blcodes ) 
        -: 3585:{ 
        -: 3586:  int rank ;
        -: 3587:
        -: 3588:  {
        -: 3589:  {
        1: 3590:  send_bits(lcodes - 257, 5);
        1: 3591:  send_bits(dcodes - 1, 5);
        1: 3592:  send_bits(blcodes - 4, 4);
        1: 3593:  rank = 0;
        -: 3594:  }
        -: 3595:  {
       16: 3596:  while (1) {
        -: 3597:                                     ;
       16: 3598:    if (! (rank < blcodes)) {
        1: 3599:      goto while_break;
        -: 3600:    }
        -: 3601:    {
       15: 3602:    send_bits((int )bl_tree[bl_order[rank]].dl.len, 3);
       15: 3603:    rank ++;
        -: 3604:    }
        -: 3605:  }
        -: 3606:  while_break: /* CIL Label */ ;
        -: 3607:  }
        -: 3608:  {
        1: 3609:  send_tree(dyn_ltree, lcodes - 1);
        1: 3610:  send_tree(dyn_dtree, dcodes - 1);
        -: 3611:  }
        1: 3612:  return;
        -: 3613:}
        -: 3614:}
        1: 3615:off_t flush_block(char *buf , ulg stored_len , int eof ) 
        -: 3616:{ 
        -: 3617:  ulg opt_lenb ;
        -: 3618:  ulg static_lenb ;
        -: 3619:  int max_blindex ;
        -: 3620:
        -: 3621:  {
        1: 3622:  flag_buf[last_flags] = flags;
        1: 3623:  if ((int )*file_type == 65535) {
        -: 3624:     
        -: 3625:
    #####: 3626:    set_file_type();
        -: 3627:     
        -: 3628:
    #####: 3629:  }
        -: 3630:  {
        1: 3631:  build_tree(& l_desc);
        1: 3632:  build_tree(& d_desc);
        1: 3633:  max_blindex = build_bl_tree();
        1: 3634:  opt_lenb = ((opt_len + 3UL) + 7UL) >> 3;
        1: 3635:  static_lenb = ((static_len + 3UL) + 7UL) >> 3;
        1: 3636:  input_len = (off_t )((ulg )input_len + stored_len);
        -: 3637:  }
        1: 3638:  if (static_lenb <= opt_lenb) {
        -: 3639:                           
    #####: 3640:  }
        1: 3641:  if (stored_len <= opt_lenb) {
        -: 3642:              
        -: 3643:                                 
        -: 3644:                    
        -: 3645:              
        -: 3646:                    
        -: 3647:       
        -: 3648:            
        -: 3649:                  
        -: 3650:     
        1: 3651:  } else { //Added block
        -: 3652:  _L___2: 
        1: 3653:  if (stored_len + 4UL <= opt_lenb) {
        -: 3654:                                                            {
        -: 3655:       
        -: 3656:
        -: 3657:                        
        -: 3658:                                                          
    #####: 3659:      compressed_len = (off_t )((ulg )compressed_len + ((stored_len + 4UL) << 3));
        -: 3660:                                                    
        -: 3661:       
        -: 3662:
        -: 3663:    }       
        -: 3664:              
        -: 3665:     
        1: 3666:  } else { //Added block
        -: 3667:  _L: 
        1: 3668:  if (static_lenb == opt_lenb) {
        -: 3669:     
        -: 3670:
    #####: 3671:    send_bits((1 << 1) + eof, 3);
    #####: 3672:    compress_block(static_ltree, static_dtree);
        -: 3673:                                                                         
        -: 3674:     
        -: 3675:
    #####: 3676:  } else {
        -: 3677:     
        -: 3678:
        1: 3679:    send_bits((2 << 1) + eof, 3);
        1: 3680:    send_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);
        1: 3681:    compress_block(dyn_ltree, dyn_dtree);
        -: 3682:                                                                      
        -: 3683:     
        -: 3684:
        -: 3685:  }
        -: 3686:  }
        -: 3687:  }
        -: 3688:  {
        1: 3689:  init_block();
        -: 3690:  }
        1: 3691:  if (eof) {
        -: 3692:     
        -: 3693:
        1: 3694:    bi_windup();
        -: 3695:                         
        -: 3696:     
        -: 3697:
        1: 3698:  }
        1: 3699:  return (compressed_len >> 3);
        -: 3700:}
        -: 3701:}
     7401: 3702:int ct_tally(int dist , int lc ) 
        -: 3703:{ 
        -: 3704:  unsigned int tmp ;
        -: 3705:  int tmp___0 ;
        -: 3706:  unsigned int tmp___1 ;
        -: 3707:  unsigned int tmp___2 ;
        -: 3708:  ulg out_length ;
        -: 3709:  ulg in_length ;
        -: 3710:  int dcode ;
        -: 3711:  int tmp___3 ;
        -: 3712:
        -: 3713:  {
     7401: 3714:  tmp = last_lit;
     7401: 3715:  last_lit ++;
     7401: 3716:  inbuf[tmp] = (uch )lc;
     7401: 3717:  if (dist == 0) {
     3235: 3718:    dyn_ltree[lc].fc.freq = (ush )((int )dyn_ltree[lc].fc.freq + 1);
     3235: 3719:  } else {
     4166: 3720:    dist --;
     4166: 3721:    dyn_ltree[((int )length_code[lc] + 256) + 1].fc.freq = (ush )((int )dyn_ltree[((int )length_code[lc] + 256) + 1].fc.freq + 1);
     4166: 3722:    if (dist < 256) {
      956: 3723:      tmp___0 = (int )dist_code[dist];
      956: 3724:    } else {
     3210: 3725:      tmp___0 = (int )dist_code[256 + (dist >> 7)];
        -: 3726:    }
     4166: 3727:    dyn_dtree[tmp___0].fc.freq = (ush )((int )dyn_dtree[tmp___0].fc.freq + 1);
     4166: 3728:    tmp___1 = last_dist;
     4166: 3729:    last_dist ++;
     4166: 3730:    d_buf[tmp___1] = (ush )dist;
     4166: 3731:    flags = (uch )((int )flags | (int )flag_bit);
        -: 3732:  }
     7401: 3733:  flag_bit = (uch )((int )flag_bit << 1);
     7401: 3734:  if ((last_lit & 7U) == 0U) {
      925: 3735:    tmp___2 = last_flags;
      925: 3736:    last_flags ++;
      925: 3737:    flag_buf[tmp___2] = flags;
      925: 3738:    flags = (uch )0;
      925: 3739:    flag_bit = (uch )1;
      925: 3740:  }
     7401: 3741:  if (level > 2) {
     7401: 3742:    if ((last_lit & 4095U) == 0U) {
        1: 3743:      out_length = (ulg )last_lit * 8UL;
        1: 3744:      in_length = (ulg )strstart - (ulg )block_start;
        1: 3745:      dcode = 0;
        -: 3746:      {
       31: 3747:      while (1) {
        -: 3748:                                         ;
       31: 3749:        if (! (dcode < 30)) {
        1: 3750:          goto while_break;
        -: 3751:        }
       30: 3752:        out_length += (ulg )dyn_dtree[dcode].fc.freq * (ulg )(5L + (long )extra_dbits[dcode]);
       30: 3753:        dcode ++;
        -: 3754:      }
        -: 3755:      while_break: /* CIL Label */ ;
        -: 3756:      }
        1: 3757:      out_length >>= 3;
        1: 3758:      if (last_dist < last_lit / 2U) {
    #####: 3759:        if (out_length < in_length / 2UL) {
    #####: 3760:          return (1);
        -: 3761:        }
    #####: 3762:      }
        1: 3763:    }
     7401: 3764:  }
     7401: 3765:  if (last_lit == 32767U) {
    #####: 3766:    tmp___3 = 1;
    #####: 3767:  } else { //Added block
     7401: 3768:  if (last_dist == 32768U) {
    #####: 3769:    tmp___3 = 1;
    #####: 3770:  } else {
     7401: 3771:    tmp___3 = 0;
        -: 3772:  }
        -: 3773:  }
        -: 3774:                   
        -: 3775:}
     7401: 3776:}
        1: 3777:static void compress_block(ct_data *ltree , ct_data *dtree ) 
        -: 3778:{ 
        -: 3779:  unsigned int dist ;
        -: 3780:  int lc ;
        -: 3781:  unsigned int lx ;
        -: 3782:  unsigned int dx ;
        -: 3783:  unsigned int fx ;
        -: 3784:  uch flag ;
        -: 3785:  unsigned int code ;
        -: 3786:  int extra ;
        -: 3787:  unsigned int tmp ;
        -: 3788:  unsigned int tmp___0 ;
        -: 3789:  unsigned int tmp___1 ;
        -: 3790:
        -: 3791:  {
        1: 3792:  lx = 0U;
        1: 3793:  dx = 0U;
        1: 3794:  fx = 0U;
        1: 3795:  flag = (uch )0;
        1: 3796:  if (last_lit != 0U) {
        -: 3797:     
        -: 3798:
     7401: 3799:    while (1) {
        -: 3800:                                       ;
     7401: 3801:      if ((lx & 7U) == 0U) {
      926: 3802:        tmp = fx;
      926: 3803:        fx ++;
      926: 3804:        flag = flag_buf[tmp];
      926: 3805:      }
     7401: 3806:      tmp___0 = lx;
     7401: 3807:      lx ++;
     7401: 3808:      lc = (int )inbuf[tmp___0];
     7401: 3809:      if (((int )flag & 1) == 0) {
        -: 3810:         
        -: 3811:
     3235: 3812:        send_bits((int )(ltree + lc)->fc.code, (int )(ltree + lc)->dl.len);
        -: 3813:         
        -: 3814:
     3235: 3815:      } else {
        -: 3816:        {
     4166: 3817:        code = (unsigned int )length_code[lc];
     4166: 3818:        send_bits((int )(ltree + ((code + 256U) + 1U))->fc.code, (int )(ltree + ((code + 256U) + 1U))->dl.len);
     4166: 3819:        extra = extra_lbits[code];
        -: 3820:        }
     4166: 3821:        if (extra != 0) {
        -: 3822:           
        -: 3823:
      681: 3824:          lc -= base_length[code];
      681: 3825:          send_bits(lc, extra);
        -: 3826:           
        -: 3827:
      681: 3828:        }
     4166: 3829:        tmp___1 = dx;
     4166: 3830:        dx ++;
     4166: 3831:        dist = (unsigned int )d_buf[tmp___1];
     4166: 3832:        if (dist < 256U) {
      956: 3833:          code = (unsigned int )dist_code[dist];
      956: 3834:        } else {
     3210: 3835:          code = (unsigned int )dist_code[256U + (dist >> 7)];
        -: 3836:        }
        -: 3837:        {
     4166: 3838:        send_bits((int )(dtree + code)->fc.code, (int )(dtree + code)->dl.len);
     4166: 3839:        extra = extra_dbits[code];
        -: 3840:        }
     4166: 3841:        if (extra != 0) {
        -: 3842:           
        -: 3843:
     4150: 3844:          dist -= (unsigned int )base_dist[code];
     4150: 3845:          send_bits((int )dist, extra);
        -: 3846:           
        -: 3847:
     4150: 3848:        }
        -: 3849:      }
     7401: 3850:      flag = (uch )((int )flag >> 1);
     7401: 3851:      if (! (lx < last_lit)) {
        1: 3852:        goto while_break;
        -: 3853:      }
        -: 3854:    }
        -: 3855:    while_break: /* CIL Label */ ;
        -: 3856:     
        -: 3857:
        1: 3858:  }
        -: 3859:  {
        1: 3860:  send_bits((int )(ltree + 256)->fc.code, (int )(ltree + 256)->dl.len);
        -: 3861:  }
        1: 3862:  return;
        -: 3863:}
        -: 3864:}
    #####: 3865:static void set_file_type(void) 
        -: 3866:{ 
        -: 3867:  int n ;
        -: 3868:  unsigned int ascii_freq ;
        -: 3869:  unsigned int bin_freq ;
        -: 3870:  int tmp ;
        -: 3871:  int tmp___0 ;
        -: 3872:  int tmp___1 ;
        -: 3873:
        -: 3874:  {
    #####: 3875:  n = 0;
    #####: 3876:  ascii_freq = 0U;
    #####: 3877:  bin_freq = 0U;
        -: 3878:  {
    #####: 3879:  while (1) {
        -: 3880:                                     ;
    #####: 3881:    if (! (n < 7)) {
    #####: 3882:      goto while_break;
        -: 3883:    }
    #####: 3884:    tmp = n;
    #####: 3885:    n ++;
    #####: 3886:    bin_freq += (unsigned int )dyn_ltree[tmp].fc.freq;
        -: 3887:  }
        -: 3888:  while_break: /* CIL Label */ ;
        -: 3889:  }
        -: 3890:  {
    #####: 3891:  while (1) {
        -: 3892:                                         ;
    #####: 3893:    if (! (n < 128)) {
    #####: 3894:      goto while_break___0;
        -: 3895:    }
    #####: 3896:    tmp___0 = n;
    #####: 3897:    n ++;
    #####: 3898:    ascii_freq += (unsigned int )dyn_ltree[tmp___0].fc.freq;
        -: 3899:  }
        -: 3900:  while_break___0: /* CIL Label */ ;
        -: 3901:  }
        -: 3902:  {
    #####: 3903:  while (1) {
        -: 3904:                                         ;
    #####: 3905:    if (! (n < 256)) {
    #####: 3906:      goto while_break___1;
        -: 3907:    }
    #####: 3908:    tmp___1 = n;
    #####: 3909:    n ++;
    #####: 3910:    bin_freq += (unsigned int )dyn_ltree[tmp___1].fc.freq;
        -: 3911:  }
        -: 3912:  while_break___1: /* CIL Label */ ;
        -: 3913:  }
    #####: 3914:  if (bin_freq > ascii_freq >> 2) {
    #####: 3915:    *file_type = (ush )0;
    #####: 3916:  } else {
    #####: 3917:    *file_type = (ush )1;
        -: 3918:  }
    #####: 3919:  return;
        -: 3920:}
        -: 3921:}
        -: 3922:static unsigned int decode(unsigned int count , uch *buffer ) ;
        -: 3923:static void decode_start(void) ;
        -: 3924:static void huf_decode_start(void) ;
        -: 3925:static unsigned int decode_c(void) ;
        -: 3926:static unsigned int decode_p(void) ;
        -: 3927:static void read_pt_len(int nn , int nbit , int i_special ) ;
        -: 3928:static void read_c_len(void) ;
        -: 3929:static void fillbuf(int n ) ;
        -: 3930:static unsigned int getbits(int n ) ;
        -: 3931:static void init_getbits(void) ;
        -: 3932:static void make_table(int nchar , uch *bitlen , int tablebits , ush *table ) ;
        -: 3933:static uch pt_len[19]  ;
        -: 3934:static unsigned int blocksize  ;
        -: 3935:static ush pt_table[256]  ;
        -: 3936:static ush bitbuf  ;
        -: 3937:static unsigned int subbitbuf  ;
        -: 3938:static int bitcount  ;
    #####: 3939:static void fillbuf(int n ) 
        -: 3940:{ 
        -: 3941:  unsigned int tmp ;
        -: 3942:  int tmp___0 ;
        -: 3943:  int tmp___1 ;
        -: 3944:
        -: 3945:  {
    #####: 3946:  bitbuf = (ush )((int )bitbuf << n);
        -: 3947:  {
    #####: 3948:  while (1) {
        -: 3949:                                     ;
    #####: 3950:    if (! (n > bitcount)) {
    #####: 3951:      goto while_break;
        -: 3952:    }
    #####: 3953:    n -= bitcount;
    #####: 3954:    bitbuf = (ush )((unsigned int )bitbuf | (subbitbuf << n));
    #####: 3955:    if (inptr < insize) {
    #####: 3956:      tmp = inptr;
    #####: 3957:      inptr ++;
    #####: 3958:      tmp___1 = (int )inbuf[tmp];
    #####: 3959:    } else {
        -: 3960:       
        -: 3961:
    #####: 3962:      tmp___0 = fill_inbuf(1);
    #####: 3963:      tmp___1 = tmp___0;
        -: 3964:       
        -: 3965:
        -: 3966:    }
    #####: 3967:    subbitbuf = (unsigned int )tmp___1;
    #####: 3968:    if ((int )subbitbuf == -1) {
    #####: 3969:      subbitbuf = 0U;
    #####: 3970:    }
    #####: 3971:    bitcount = 8;
        -: 3972:  }
        -: 3973:  while_break: /* CIL Label */ ;
        -: 3974:  }
    #####: 3975:  bitcount -= n;
    #####: 3976:  bitbuf = (ush )((unsigned int )bitbuf | (subbitbuf >> bitcount));
    #####: 3977:  return;
        -: 3978:}
        -: 3979:}
    #####: 3980:static unsigned int getbits(int n ) 
        -: 3981:{ 
        -: 3982:  unsigned int x ;
        -: 3983:
        -: 3984:  {
        -: 3985:  {
    #####: 3986:  x = (unsigned int )((int )bitbuf >> (16UL * sizeof(char ) - (unsigned long )n));
    #####: 3987:  fillbuf(n);
        -: 3988:  }
    #####: 3989:  return (x);
        -: 3990:}
        -: 3991:}
    #####: 3992:static void init_getbits(void) 
        -: 3993:{ 
        -: 3994:
        -: 3995:
        -: 3996:   
        -: 3997:
        -: 3998:  {
    #####: 3999:  bitbuf = (ush )0;
    #####: 4000:  subbitbuf = 0U;
    #####: 4001:  bitcount = 0;
    #####: 4002:  fillbuf((int )(16UL * sizeof(char )));
        -: 4003:  }
    #####: 4004:  return;
        -: 4005: 
        -: 4006:
        -: 4007:}
    #####: 4008:static void make_table(int nchar , uch *bitlen , int tablebits , ush *table ) 
        -: 4009:{ 
        -: 4010:  ush count[17] ;
        -: 4011:  ush weight[17] ;
        -: 4012:  ush start[18] ;
        -: 4013:  ush *p ;
        -: 4014:  unsigned int i___0 ;
        -: 4015:  unsigned int k ;
        -: 4016:  unsigned int len ;
        -: 4017:  unsigned int ch ;
        -: 4018:  unsigned int jutbits ;
        -: 4019:  unsigned int avail ;
        -: 4020:  unsigned int nextcode ;
        -: 4021:  unsigned int mask ;
        -: 4022:  unsigned int tmp ;
        -: 4023:  ush tmp___0 ;
        -: 4024:  unsigned int tmp___1 ;
        -: 4025:
        -: 4026:  {
    #####: 4027:  i___0 = 1U;
        -: 4028:  {
    #####: 4029:  while (1) {
        -: 4030:                                     ;
    #####: 4031:    if (! (i___0 <= 16U)) {
    #####: 4032:      goto while_break;
        -: 4033:    }
    #####: 4034:    count[i___0] = (ush )0;
    #####: 4035:    i___0 ++;
        -: 4036:  }
        -: 4037:  while_break: /* CIL Label */ ;
        -: 4038:  }
    #####: 4039:  i___0 = 0U;
        -: 4040:  {
    #####: 4041:  while (1) {
        -: 4042:                                         ;
    #####: 4043:    if (! (i___0 < (unsigned int )nchar)) {
    #####: 4044:      goto while_break___0;
        -: 4045:    }
    #####: 4046:    count[*(bitlen + i___0)] = (ush )((int )count[*(bitlen + i___0)] + 1);
    #####: 4047:    i___0 ++;
        -: 4048:  }
        -: 4049:  while_break___0: /* CIL Label */ ;
        -: 4050:  }
    #####: 4051:  start[1] = (ush )0;
    #####: 4052:  i___0 = 1U;
        -: 4053:  {
    #####: 4054:  while (1) {
        -: 4055:                                         ;
    #####: 4056:    if (! (i___0 <= 16U)) {
    #####: 4057:      goto while_break___1;
        -: 4058:    }
    #####: 4059:    start[i___0 + 1U] = (ush )((int )start[i___0] + ((int )count[i___0] << (16U - i___0)));
    #####: 4060:    i___0 ++;
        -: 4061:  }
        -: 4062:  while_break___1: /* CIL Label */ ;
        -: 4063:  }
    #####: 4064:  if (((int )start[17] & 65535) != 0) {
        -: 4065:     
        -: 4066:
    #####: 4067:    error((char *)"Bad table\n");
        -: 4068:     
        -: 4069:
    #####: 4070:  }
    #####: 4071:  jutbits = (unsigned int )(16 - tablebits);
    #####: 4072:  i___0 = 1U;
        -: 4073:  {
    #####: 4074:  while (1) {
        -: 4075:                                         ;
    #####: 4076:    if (! (i___0 <= (unsigned int )tablebits)) {
    #####: 4077:      goto while_break___2;
        -: 4078:    }
    #####: 4079:    start[i___0] = (ush )((int )start[i___0] >> jutbits);
    #####: 4080:    weight[i___0] = (ush )(1U << ((unsigned int )tablebits - i___0));
    #####: 4081:    i___0 ++;
        -: 4082:  }
        -: 4083:  while_break___2: /* CIL Label */ ;
        -: 4084:  }
        -: 4085:  {
    #####: 4086:  while (1) {
        -: 4087:                                         ;
    #####: 4088:    if (! (i___0 <= 16U)) {
    #####: 4089:      goto while_break___3;
        -: 4090:    }
    #####: 4091:    weight[i___0] = (ush )(1U << (16U - i___0));
    #####: 4092:    i___0 ++;
        -: 4093:  }
        -: 4094:  while_break___3: /* CIL Label */ ;
        -: 4095:  }
    #####: 4096:  i___0 = (unsigned int )((int )start[tablebits + 1] >> jutbits);
    #####: 4097:  if (i___0 != 0U) {
    #####: 4098:    k = (unsigned int )(1 << tablebits);
        -: 4099:    {
    #####: 4100:    while (1) {
        -: 4101:                                           ;
    #####: 4102:      if (! (i___0 != k)) {
    #####: 4103:        goto while_break___4;
        -: 4104:      }
    #####: 4105:      tmp = i___0;
    #####: 4106:      i___0 ++;
    #####: 4107:      *(table + tmp) = (ush )0;
        -: 4108:    }
        -: 4109:    while_break___4: /* CIL Label */ ;
        -: 4110:    }
    #####: 4111:  }
    #####: 4112:  avail = (unsigned int )nchar;
    #####: 4113:  mask = 1U << (15 - tablebits);
    #####: 4114:  ch = 0U;
        -: 4115:  {
    #####: 4116:  while (1) {
        -: 4117:                                         ;
    #####: 4118:    if (! (ch < (unsigned int )nchar)) {
    #####: 4119:      goto while_break___5;
        -: 4120:    }
    #####: 4121:    len = (unsigned int )*(bitlen + ch);
    #####: 4122:    if (len == 0U) {
    #####: 4123:      goto __Cont;
        -: 4124:    }
    #####: 4125:    nextcode = (unsigned int )((int )start[len] + (int )weight[len]);
    #####: 4126:    if (len <= (unsigned int )tablebits) {
    #####: 4127:      i___0 = (unsigned int )start[len];
        -: 4128:      {
    #####: 4129:      while (1) {
        -: 4130:                                             ;
    #####: 4131:        if (! (i___0 < nextcode)) {
    #####: 4132:          goto while_break___6;
        -: 4133:        }
    #####: 4134:        *(table + i___0) = (ush )ch;
    #####: 4135:        i___0 ++;
        -: 4136:      }
        -: 4137:      while_break___6: /* CIL Label */ ;
        -: 4138:      }
    #####: 4139:    } else {
    #####: 4140:      k = (unsigned int )start[len];
    #####: 4141:      p = table + (k >> jutbits);
    #####: 4142:      i___0 = len - (unsigned int )tablebits;
        -: 4143:      {
    #####: 4144:      while (1) {
        -: 4145:                                             ;
    #####: 4146:        if (! (i___0 != 0U)) {
    #####: 4147:          goto while_break___7;
        -: 4148:        }
    #####: 4149:        if ((int )*p == 0) {
    #####: 4150:          tmp___0 = (ush )0;
    #####: 4151:          prev[avail] = tmp___0;
    #####: 4152:          *((prev + 32768) + avail) = tmp___0;
    #####: 4153:          tmp___1 = avail;
    #####: 4154:          avail ++;
    #####: 4155:          *p = (ush )tmp___1;
    #####: 4156:        }
    #####: 4157:        if (k & mask) {
    #####: 4158:          p = (prev + 32768) + (int )*p;
    #####: 4159:        } else {
    #####: 4160:          p = & prev[*p];
        -: 4161:        }
    #####: 4162:        k <<= 1;
    #####: 4163:        i___0 --;
        -: 4164:      }
        -: 4165:      while_break___7: /* CIL Label */ ;
        -: 4166:      }
    #####: 4167:      *p = (ush )ch;
        -: 4168:    }
    #####: 4169:    start[len] = (ush )nextcode;
        -: 4170:    __Cont: 
    #####: 4171:    ch ++;
        -: 4172:  }
        -: 4173:  while_break___5: /* CIL Label */ ;
        -: 4174:  }
    #####: 4175:  return;
        -: 4176:}
        -: 4177:}
    #####: 4178:static void read_pt_len(int nn , int nbit , int i_special ) 
        -: 4179:{ 
        -: 4180:  int i___0 ;
        -: 4181:  int c ;
        -: 4182:  int n ;
        -: 4183:  unsigned int mask ;
        -: 4184:  unsigned int tmp ;
        -: 4185:  unsigned int tmp___0 ;
        -: 4186:  int tmp___1 ;
        -: 4187:  int tmp___2 ;
        -: 4188:  unsigned int tmp___3 ;
        -: 4189:  int tmp___4 ;
        -: 4190:  int tmp___5 ;
        -: 4191:
        -: 4192:  {
        -: 4193:  {
    #####: 4194:  tmp = getbits(nbit);
    #####: 4195:  n = (int )tmp;
        -: 4196:  }
    #####: 4197:  if (n == 0) {
        -: 4198:    {
    #####: 4199:    tmp___0 = getbits(nbit);
    #####: 4200:    c = (int )tmp___0;
    #####: 4201:    i___0 = 0;
        -: 4202:    }
        -: 4203:    {
    #####: 4204:    while (1) {
        -: 4205:                                       ;
    #####: 4206:      if (! (i___0 < nn)) {
    #####: 4207:        goto while_break;
        -: 4208:      }
    #####: 4209:      pt_len[i___0] = (uch )0;
    #####: 4210:      i___0 ++;
        -: 4211:    }
        -: 4212:    while_break: /* CIL Label */ ;
        -: 4213:    }
    #####: 4214:    i___0 = 0;
        -: 4215:    {
    #####: 4216:    while (1) {
        -: 4217:                                           ;
    #####: 4218:      if (! (i___0 < 256)) {
    #####: 4219:        goto while_break___0;
        -: 4220:      }
    #####: 4221:      pt_table[i___0] = (ush )c;
    #####: 4222:      i___0 ++;
        -: 4223:    }
        -: 4224:    while_break___0: /* CIL Label */ ;
        -: 4225:    }
    #####: 4226:  } else {
    #####: 4227:    i___0 = 0;
        -: 4228:    {
    #####: 4229:    while (1) {
        -: 4230:                                           ;
    #####: 4231:      if (! (i___0 < n)) {
    #####: 4232:        goto while_break___1;
        -: 4233:      }
    #####: 4234:      c = (int )bitbuf >> (16UL * sizeof(char ) - 3UL);
    #####: 4235:      if (c == 7) {
    #####: 4236:        mask = 1U << ((16UL * sizeof(char ) - 1UL) - 3UL);
        -: 4237:        {
    #####: 4238:        while (1) {
        -: 4239:                                               ;
    #####: 4240:          if (! (mask & (unsigned int )bitbuf)) {
    #####: 4241:            goto while_break___2;
        -: 4242:          }
    #####: 4243:          mask >>= 1;
    #####: 4244:          c ++;
        -: 4245:        }
        -: 4246:        while_break___2: /* CIL Label */ ;
        -: 4247:        }
    #####: 4248:      }
    #####: 4249:      if (c < 7) {
    #####: 4250:        tmp___1 = 3;
    #####: 4251:      } else {
    #####: 4252:        tmp___1 = c - 3;
        -: 4253:      }
        -: 4254:      {
    #####: 4255:      fillbuf(tmp___1);
    #####: 4256:      tmp___2 = i___0;
    #####: 4257:      i___0 ++;
    #####: 4258:      pt_len[tmp___2] = (uch )c;
        -: 4259:      }
    #####: 4260:      if (i___0 == i_special) {
        -: 4261:        {
    #####: 4262:        tmp___3 = getbits(2);
    #####: 4263:        c = (int )tmp___3;
        -: 4264:        }
        -: 4265:        {
    #####: 4266:        while (1) {
        -: 4267:                                               ;
    #####: 4268:          c --;
    #####: 4269:          if (! (c >= 0)) {
    #####: 4270:            goto while_break___3;
        -: 4271:          }
    #####: 4272:          tmp___4 = i___0;
    #####: 4273:          i___0 ++;
    #####: 4274:          pt_len[tmp___4] = (uch )0;
        -: 4275:        }
        -: 4276:        while_break___3: /* CIL Label */ ;
        -: 4277:        }
    #####: 4278:      }
        -: 4279:    }
        -: 4280:    while_break___1: /* CIL Label */ ;
        -: 4281:    }
        -: 4282:    {
    #####: 4283:    while (1) {
        -: 4284:                                           ;
    #####: 4285:      if (! (i___0 < nn)) {
    #####: 4286:        goto while_break___4;
        -: 4287:      }
    #####: 4288:      tmp___5 = i___0;
    #####: 4289:      i___0 ++;
    #####: 4290:      pt_len[tmp___5] = (uch )0;
        -: 4291:    }
        -: 4292:    while_break___4: /* CIL Label */ ;
        -: 4293:    }
        -: 4294:    {
    #####: 4295:    make_table(nn, pt_len, 8, pt_table);
        -: 4296:    }
        -: 4297:  }
    #####: 4298:  return;
        -: 4299:}
        -: 4300:}
    #####: 4301:static void read_c_len(void) 
        -: 4302:{ 
        -: 4303:  int i___0 ;
        -: 4304:  int c ;
        -: 4305:  int n ;
        -: 4306:  unsigned int mask ;
        -: 4307:  unsigned int tmp ;
        -: 4308:  unsigned int tmp___0 ;
        -: 4309:  unsigned int tmp___1 ;
        -: 4310:  unsigned int tmp___2 ;
        -: 4311:  int tmp___3 ;
        -: 4312:  int tmp___4 ;
        -: 4313:  int tmp___5 ;
        -: 4314:
        -: 4315:  {
        -: 4316:  {
    #####: 4317:  tmp = getbits(9);
    #####: 4318:  n = (int )tmp;
        -: 4319:  }
    #####: 4320:  if (n == 0) {
        -: 4321:    {
    #####: 4322:    tmp___0 = getbits(9);
    #####: 4323:    c = (int )tmp___0;
    #####: 4324:    i___0 = 0;
        -: 4325:    }
        -: 4326:    {
    #####: 4327:    while (1) {
        -: 4328:                                       ;
    #####: 4329:      if (! (i___0 < 510)) {
    #####: 4330:        goto while_break;
        -: 4331:      }
    #####: 4332:      outbuf[i___0] = (uch )0;
    #####: 4333:      i___0 ++;
        -: 4334:    }
        -: 4335:    while_break: /* CIL Label */ ;
        -: 4336:    }
    #####: 4337:    i___0 = 0;
        -: 4338:    {
    #####: 4339:    while (1) {
        -: 4340:                                           ;
    #####: 4341:      if (! (i___0 < 4096)) {
    #####: 4342:        goto while_break___0;
        -: 4343:      }
    #####: 4344:      d_buf[i___0] = (ush )c;
    #####: 4345:      i___0 ++;
        -: 4346:    }
        -: 4347:    while_break___0: /* CIL Label */ ;
        -: 4348:    }
    #####: 4349:  } else {
    #####: 4350:    i___0 = 0;
        -: 4351:    {
    #####: 4352:    while (1) {
        -: 4353:                                           ;
    #####: 4354:      if (! (i___0 < n)) {
    #####: 4355:        goto while_break___1;
        -: 4356:      }
    #####: 4357:      c = (int )pt_table[(int )bitbuf >> (16UL * sizeof(char ) - 8UL)];
    #####: 4358:      if (c >= 19) {
    #####: 4359:        mask = 1U << ((16UL * sizeof(char ) - 1UL) - 8UL);
        -: 4360:        {
    #####: 4361:        while (1) {
        -: 4362:                                               ;
    #####: 4363:          if ((unsigned int )bitbuf & mask) {
    #####: 4364:            c = (int )*((prev + 32768) + c);
    #####: 4365:          } else {
    #####: 4366:            c = (int )prev[c];
        -: 4367:          }
    #####: 4368:          mask >>= 1;
    #####: 4369:          if (! (c >= 19)) {
    #####: 4370:            goto while_break___2;
        -: 4371:          }
        -: 4372:        }
        -: 4373:        while_break___2: /* CIL Label */ ;
        -: 4374:        }
    #####: 4375:      }
        -: 4376:      {
    #####: 4377:      fillbuf((int )pt_len[c]);
        -: 4378:      }
    #####: 4379:      if (c <= 2) {
    #####: 4380:        if (c == 0) {
    #####: 4381:          c = 1;
    #####: 4382:        } else { //Added block
    #####: 4383:        if (c == 1) {
        -: 4384:           
        -: 4385:
    #####: 4386:          tmp___1 = getbits(4);
    #####: 4387:          c = (int )(tmp___1 + 3U);
        -: 4388:           
        -: 4389:
    #####: 4390:        } else {
        -: 4391:           
        -: 4392:
    #####: 4393:          tmp___2 = getbits(9);
    #####: 4394:          c = (int )(tmp___2 + 20U);
        -: 4395:           
        -: 4396:
        -: 4397:        }
        -: 4398:        }
        -: 4399:        {
    #####: 4400:        while (1) {
        -: 4401:                                               ;
    #####: 4402:          c --;
    #####: 4403:          if (! (c >= 0)) {
    #####: 4404:            goto while_break___3;
        -: 4405:          }
    #####: 4406:          tmp___3 = i___0;
    #####: 4407:          i___0 ++;
    #####: 4408:          outbuf[tmp___3] = (uch )0;
        -: 4409:        }
        -: 4410:        while_break___3: /* CIL Label */ ;
        -: 4411:        }
    #####: 4412:      } else {
    #####: 4413:        tmp___4 = i___0;
    #####: 4414:        i___0 ++;
    #####: 4415:        outbuf[tmp___4] = (uch )(c - 2);
        -: 4416:      }
        -: 4417:    }
        -: 4418:    while_break___1: /* CIL Label */ ;
        -: 4419:    }
        -: 4420:    {
    #####: 4421:    while (1) {
        -: 4422:                                           ;
    #####: 4423:      if (! (i___0 < 510)) {
    #####: 4424:        goto while_break___4;
        -: 4425:      }
    #####: 4426:      tmp___5 = i___0;
    #####: 4427:      i___0 ++;
    #####: 4428:      outbuf[tmp___5] = (uch )0;
        -: 4429:    }
        -: 4430:    while_break___4: /* CIL Label */ ;
        -: 4431:    }
        -: 4432:    {
    #####: 4433:    make_table(510, outbuf, 12, d_buf);
        -: 4434:    }
        -: 4435:  }
    #####: 4436:  return;
        -: 4437:}
        -: 4438:}
    #####: 4439:static unsigned int decode_c(void) 
        -: 4440:{ 
        -: 4441:  unsigned int j___0 ;
        -: 4442:  unsigned int mask ;
        -: 4443:
        -: 4444:  {
    #####: 4445:  if (blocksize == 0U) {
        -: 4446:    {
    #####: 4447:    blocksize = getbits(16);
        -: 4448:    }
    #####: 4449:    if (blocksize == 0U) {
    #####: 4450:      return (510U);
        -: 4451:    }
        -: 4452:    {
    #####: 4453:    read_pt_len(19, 5, 3);
    #####: 4454:    read_c_len();
    #####: 4455:    read_pt_len(14, 4, -1);
        -: 4456:    }
    #####: 4457:  }
    #####: 4458:  blocksize --;
    #####: 4459:  j___0 = (unsigned int )d_buf[(int )bitbuf >> (16UL * sizeof(char ) - 12UL)];
    #####: 4460:  if (j___0 >= 510U) {
    #####: 4461:    mask = 1U << ((16UL * sizeof(char ) - 1UL) - 12UL);
        -: 4462:    {
    #####: 4463:    while (1) {
        -: 4464:                                       ;
    #####: 4465:      if ((unsigned int )bitbuf & mask) {
    #####: 4466:        j___0 = (unsigned int )*((prev + 32768) + j___0);
    #####: 4467:      } else {
    #####: 4468:        j___0 = (unsigned int )prev[j___0];
        -: 4469:      }
    #####: 4470:      mask >>= 1;
    #####: 4471:      if (! (j___0 >= 510U)) {
    #####: 4472:        goto while_break;
        -: 4473:      }
        -: 4474:    }
        -: 4475:    while_break: /* CIL Label */ ;
        -: 4476:    }
    #####: 4477:  }
        -: 4478:  {
    #####: 4479:  fillbuf((int )outbuf[j___0]);
        -: 4480:  }
    #####: 4481:  return (j___0);
        -: 4482:}
    #####: 4483:}
    #####: 4484:static unsigned int decode_p(void) 
        -: 4485:{ 
        -: 4486:  unsigned int j___0 ;
        -: 4487:  unsigned int mask ;
        -: 4488:  unsigned int tmp ;
        -: 4489:
        -: 4490:  {
    #####: 4491:  j___0 = (unsigned int )pt_table[(int )bitbuf >> (16UL * sizeof(char ) - 8UL)];
    #####: 4492:  if (j___0 >= 14U) {
    #####: 4493:    mask = 1U << ((16UL * sizeof(char ) - 1UL) - 8UL);
        -: 4494:    {
    #####: 4495:    while (1) {
        -: 4496:                                       ;
    #####: 4497:      if ((unsigned int )bitbuf & mask) {
    #####: 4498:        j___0 = (unsigned int )*((prev + 32768) + j___0);
    #####: 4499:      } else {
    #####: 4500:        j___0 = (unsigned int )prev[j___0];
        -: 4501:      }
    #####: 4502:      mask >>= 1;
    #####: 4503:      if (! (j___0 >= 14U)) {
    #####: 4504:        goto while_break;
        -: 4505:      }
        -: 4506:    }
        -: 4507:    while_break: /* CIL Label */ ;
        -: 4508:    }
    #####: 4509:  }
        -: 4510:  {
    #####: 4511:  fillbuf((int )pt_len[j___0]);
        -: 4512:  }
    #####: 4513:  if (j___0 != 0U) {
        -: 4514:     
        -: 4515:
    #####: 4516:    tmp = getbits((int )(j___0 - 1U));
    #####: 4517:    j___0 = (1U << (j___0 - 1U)) + tmp;
        -: 4518:     
        -: 4519:
    #####: 4520:  }
    #####: 4521:  return (j___0);
        -: 4522:}
        -: 4523:}
    #####: 4524:static void huf_decode_start(void) 
        -: 4525:{ 
        -: 4526:
        -: 4527:
        -: 4528:   
        -: 4529:
        -: 4530:  {
    #####: 4531:  init_getbits();
    #####: 4532:  blocksize = 0U;
        -: 4533:  }
    #####: 4534:  return;
        -: 4535: 
        -: 4536:
        -: 4537:}
        -: 4538:static int j  ;
        -: 4539:static int done  ;
    #####: 4540:static void decode_start(void) 
        -: 4541:{ 
        -: 4542:
        -: 4543:
        -: 4544:   
        -: 4545:
        -: 4546:  {
    #####: 4547:  huf_decode_start();
    #####: 4548:  j = 0;
    #####: 4549:  done = 0;
        -: 4550:  }
    #####: 4551:  return;
        -: 4552: 
        -: 4553:
        -: 4554:}
        -: 4555:static unsigned int i  ;
    #####: 4556:static unsigned int decode(unsigned int count , uch *buffer ) 
        -: 4557:{ 
        -: 4558:  unsigned int r ;
        -: 4559:  unsigned int c ;
        -: 4560:  unsigned int tmp ;
        -: 4561:
        -: 4562:  {
    #####: 4563:  r = 0U;
        -: 4564:  {
    #####: 4565:  while (1) {
        -: 4566:                                     ;
    #####: 4567:    j --;
    #####: 4568:    if (! (j >= 0)) {
    #####: 4569:      goto while_break;
        -: 4570:    }
    #####: 4571:    *(buffer + r) = *(buffer + i);
    #####: 4572:    i = (i + 1U) & ((1U << 13) - 1U);
    #####: 4573:    r ++;
    #####: 4574:    if (r == count) {
    #####: 4575:      return (r);
        -: 4576:    }
        -: 4577:  }
        -: 4578:  while_break: /* CIL Label */ ;
        -: 4579:  }
        -: 4580:  {
    #####: 4581:  while (1) {
        -: 4582:                                         ;
        -: 4583:    {
    #####: 4584:    c = decode_c();
        -: 4585:    }
    #####: 4586:    if (c == 510U) {
    #####: 4587:      done = 1;
    #####: 4588:      return (r);
        -: 4589:    }
    #####: 4590:    if (c <= 255U) {
    #####: 4591:      *(buffer + r) = (uch )c;
    #####: 4592:      r ++;
    #####: 4593:      if (r == count) {
    #####: 4594:        return (r);
        -: 4595:      }
    #####: 4596:    } else {
        -: 4597:      {
    #####: 4598:      j = (int )(c - 253U);
    #####: 4599:      tmp = decode_p();
    #####: 4600:      i = ((r - tmp) - 1U) & ((1U << 13) - 1U);
        -: 4601:      }
        -: 4602:      {
    #####: 4603:      while (1) {
        -: 4604:                                             ;
    #####: 4605:        j --;
    #####: 4606:        if (! (j >= 0)) {
    #####: 4607:          goto while_break___1;
        -: 4608:        }
    #####: 4609:        *(buffer + r) = *(buffer + i);
    #####: 4610:        i = (i + 1U) & ((1U << 13) - 1U);
    #####: 4611:        r ++;
    #####: 4612:        if (r == count) {
    #####: 4613:          return (r);
        -: 4614:        }
        -: 4615:      }
        -: 4616:      while_break___1: /* CIL Label */ ;
        -: 4617:      }
        -: 4618:    }
        -: 4619:  }
        -: 4620:                                    ;
        -: 4621:  }
        -: 4622:}
    #####: 4623:}
    #####: 4624:int unlzh(int in , int out ) 
        -: 4625:{ 
        -: 4626:  unsigned int n ;
        -: 4627:
        -: 4628:  {
        -: 4629:  {
    #####: 4630:  ifd = in;
    #####: 4631:  ofd = out;
    #####: 4632:  decode_start();
        -: 4633:  }
        -: 4634:  {
    #####: 4635:  while (1) {
        -: 4636:                                     ;
    #####: 4637:    if (! (! done)) {
    #####: 4638:      goto while_break;
        -: 4639:    }
        -: 4640:    {
    #####: 4641:    n = decode(1U << 13, window);
        -: 4642:    }
    #####: 4643:    if (! test) {
    #####: 4644:      if (n > 0U) {
        -: 4645:         
        -: 4646:
    #####: 4647:        write_buf(out, (voidp )((char *)(window)), n);
        -: 4648:         
        -: 4649:
    #####: 4650:      }
    #####: 4651:    }
        -: 4652:  }
        -: 4653:  while_break: /* CIL Label */ ;
        -: 4654:  }
    #####: 4655:  return (0);
        -: 4656:}
        -: 4657:}
        -: 4658:extern  __attribute__((__nothrow__)) __off_t ( __attribute__((__leaf__)) lseek)(int __fd ,
        -: 4659:                                                                                __off_t __offset ,
        -: 4660:                                                                                int __whence ) ;
        -: 4661:extern int close(int __fd ) ;
        -: 4662:extern ssize_t read(int __fd , void *__buf , size_t __nbytes ) ;
        -: 4663:extern ssize_t write(int __fd , void const   *__buf , size_t __n ) ;
        -: 4664:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) chown)(char const   *__file ,
        -: 4665:                                                                                            __uid_t __owner ,
        -: 4666:                                                                                            __gid_t __group ) ;
        -: 4667:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) isatty)(int __fd ) ;
        -: 4668:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) unlink)(char const   *__name ) ;
        -: 4669:extern int ( __attribute__((__nonnull__(1))) open)(char const   *__file , int __oflag 
        -: 4670:                                                   , ...) ;
        -: 4671:int block_mode  =    128;
    #####: 4672:int unlzw(int in , int out ) 
        -: 4673:{ 
        -: 4674:  register char_type *stackp ;
        -: 4675:  code_int code ;
        -: 4676:  int finchar ;
        -: 4677:  code_int oldcode ;
        -: 4678:  code_int incode ;
        -: 4679:  long inbits ;
        -: 4680:  long posbits ;
        -: 4681:  int outpos ;
        -: 4682:  unsigned int bitmask ;
        -: 4683:  code_int free_ent ;
        -: 4684:  code_int maxcode ;
        -: 4685:  code_int maxmaxcode ;
        -: 4686:  int n_bits ;
        -: 4687:  int rsize ;
        -: 4688:  unsigned int tmp ;
        -: 4689:  int tmp___0 ;
        -: 4690:  register int i___0 ;
        -: 4691:  int e ;
        -: 4692:  int o ;
        -: 4693:  ssize_t tmp___1 ;
        -: 4694:  register char_type *p ;
        -: 4695:  int tmp___2 ;
        -: 4696:  char const   *tmp___3 ;
        -: 4697:  register int i___1 ;
        -: 4698:
        -: 4699:  {
    #####: 4700:  if (inptr < insize) {
    #####: 4701:    tmp = inptr;
    #####: 4702:    inptr ++;
    #####: 4703:    maxbits = (int )inbuf[tmp];
    #####: 4704:  } else {
        -: 4705:     
        -: 4706:
    #####: 4707:    tmp___0 = fill_inbuf(0);
    #####: 4708:    maxbits = tmp___0;
        -: 4709:     
        -: 4710:
        -: 4711:  }
    #####: 4712:  block_mode = maxbits & 128;
    #####: 4713:  if ((maxbits & 96) != 0) {
    #####: 4714:    if (! quiet) {
        -: 4715:       
        -: 4716:
    #####: 4717:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: warning, unknown flags 0x%x\n",
    #####: 4718:              progname, ifname, maxbits & 96);
        -: 4719:       
        -: 4720:
    #####: 4721:    }
    #####: 4722:    if (exit_code == 0) {
    #####: 4723:      exit_code = 2;
    #####: 4724:    }
    #####: 4725:  }
    #####: 4726:  maxbits &= 31;
    #####: 4727:  maxmaxcode = 1L << maxbits;
    #####: 4728:  if (maxbits > 16) {
        -: 4729:    {
    #####: 4730:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: compressed with %d bits, can only handle %d bits\n",
    #####: 4731:            progname, ifname, maxbits, 16);
    #####: 4732:    exit_code = 1;
        -: 4733:    }
    #####: 4734:    return (1);
        -: 4735:  }
    #####: 4736:  rsize = (int )insize;
    #####: 4737:  n_bits = 9;
    #####: 4738:  maxcode = (1L << n_bits) - 1L;
    #####: 4739:  bitmask = (unsigned int )((1 << n_bits) - 1);
    #####: 4740:  oldcode = (code_int )-1;
    #####: 4741:  finchar = 0;
    #####: 4742:  outpos = 0;
    #####: 4743:  posbits = (long )(inptr << 3);
    #####: 4744:  if (block_mode) {
    #####: 4745:    free_ent = (code_int )257;
    #####: 4746:  } else {
    #####: 4747:    free_ent = (code_int )256;
        -: 4748:  }
        -: 4749:  {
    #####: 4750:  memset((voidp )(prev), 0, (size_t )256);
    #####: 4751:  code = (code_int )255;
        -: 4752:  }
        -: 4753:  {
    #####: 4754:  while (1) {
        -: 4755:                                     ;
    #####: 4756:    if (! (code >= 0L)) {
    #####: 4757:      goto while_break;
        -: 4758:    }
    #####: 4759:    window[code] = (char_type )code;
    #####: 4760:    code --;
        -: 4761:  }
        -: 4762:  while_break: /* CIL Label */ ;
        -: 4763:  }
        -: 4764:  {
    #####: 4765:  while (1) {
        -: 4766:                                         ;
        -: 4767:    resetbuf: 
    #####: 4768:    o = (int )(posbits >> 3);
    #####: 4769:    e = (int )(insize - (unsigned int )o);
    #####: 4770:    i___0 = 0;
        -: 4771:    {
    #####: 4772:    while (1) {
        -: 4773:                                           ;
    #####: 4774:      if (! (i___0 < e)) {
    #####: 4775:        goto while_break___1;
        -: 4776:      }
    #####: 4777:      inbuf[i___0] = inbuf[i___0 + o];
    #####: 4778:      i___0 ++;
        -: 4779:    }
        -: 4780:    while_break___1: /* CIL Label */ ;
        -: 4781:    }
    #####: 4782:    insize = (unsigned int )e;
    #####: 4783:    posbits = 0L;
    #####: 4784:    if (insize < 64U) {
        -: 4785:      {
    #####: 4786:      tmp___1 = read(in, (void *)((char *)(inbuf) + insize), (size_t )32768);
    #####: 4787:      rsize = (int )tmp___1;
        -: 4788:      }
    #####: 4789:      if (rsize == -1) {
        -: 4790:         
        -: 4791:
    #####: 4792:        read_error();
        -: 4793:         
        -: 4794:
    #####: 4795:      }
    #####: 4796:      insize += (unsigned int )rsize;
    #####: 4797:      bytes_in += (off_t )rsize;
    #####: 4798:    }
    #####: 4799:    if (rsize != 0) {
    #####: 4800:      inbits = ((long )insize - (long )(insize % (unsigned int )n_bits)) << 3;
    #####: 4801:    } else {
    #####: 4802:      inbits = ((long )insize << 3) - (long )(n_bits - 1);
        -: 4803:    }
        -: 4804:    {
    #####: 4805:    while (1) {
        -: 4806:      while_continue___2: /* CIL Label */ ;
    #####: 4807:      if (! (inbits > posbits)) {
    #####: 4808:        goto while_break___2;
        -: 4809:      }
    #####: 4810:      if (free_ent > maxcode) {
    #####: 4811:        posbits = (posbits - 1L) + ((long )(n_bits << 3) - ((posbits - 1L) + (long )(n_bits << 3)) % (long )(n_bits << 3));
    #####: 4812:        n_bits ++;
    #####: 4813:        if (n_bits == maxbits) {
    #####: 4814:          maxcode = maxmaxcode;
    #####: 4815:        } else {
    #####: 4816:          maxcode = (1L << n_bits) - 1L;
        -: 4817:        }
    #####: 4818:        bitmask = (unsigned int )((1 << n_bits) - 1);
    #####: 4819:        goto resetbuf;
        -: 4820:      }
    #####: 4821:      p = & inbuf[posbits >> 3];
    #####: 4822:      code = ((((long )*(p + 0) | ((long )*(p + 1) << 8)) | ((long )*(p + 2) << 16)) >> (posbits & 7L)) & (long )bitmask;
    #####: 4823:      posbits += (long )n_bits;
    #####: 4824:      if (oldcode == -1L) {
    #####: 4825:        if (code >= 256L) {
        -: 4826:           
        -: 4827:
    #####: 4828:          error((char *)"corrupt input.");
        -: 4829:           
        -: 4830:
    #####: 4831:        }
    #####: 4832:        tmp___2 = outpos;
    #####: 4833:        outpos ++;
    #####: 4834:        oldcode = code;
    #####: 4835:        finchar = (int )oldcode;
    #####: 4836:        outbuf[tmp___2] = (char_type )finchar;
    #####: 4837:        goto while_continue___2;
        -: 4838:      }
    #####: 4839:      if (code == 256L) {
    #####: 4840:        if (block_mode) {
        -: 4841:          {
    #####: 4842:          memset((voidp )(prev), 0, (size_t )256);
    #####: 4843:          free_ent = (code_int )256;
    #####: 4844:          posbits = (posbits - 1L) + ((long )(n_bits << 3) - ((posbits - 1L) + (long )(n_bits << 3)) % (long )(n_bits << 3));
    #####: 4845:          n_bits = 9;
    #####: 4846:          maxcode = (1L << n_bits) - 1L;
    #####: 4847:          bitmask = (unsigned int )((1 << n_bits) - 1);
        -: 4848:          }
    #####: 4849:          goto resetbuf;
        -: 4850:        }
    #####: 4851:      }
    #####: 4852:      incode = code;
    #####: 4853:      stackp = (char_type *)(& d_buf[32767]);
    #####: 4854:      if (code >= free_ent) {
    #####: 4855:        if (code > free_ent) {
    #####: 4856:          if (! test) {
    #####: 4857:            if (outpos > 0) {
        -: 4858:               
        -: 4859:
    #####: 4860:              write_buf(out, (voidp )((char *)(outbuf)), (unsigned int )outpos);
    #####: 4861:              bytes_out += (off_t )outpos;
        -: 4862:               
        -: 4863:
    #####: 4864:            }
    #####: 4865:          }
    #####: 4866:          if (to_stdout) {
    #####: 4867:            tmp___3 = "corrupt input.";
    #####: 4868:          } else {
    #####: 4869:            tmp___3 = "corrupt input. Use zcat to recover some data.";
        -: 4870:          }
        -: 4871:          {
    #####: 4872:          error((char *)tmp___3);
        -: 4873:          }
    #####: 4874:        }
    #####: 4875:        stackp --;
    #####: 4876:        *stackp = (char_type )finchar;
    #####: 4877:        code = oldcode;
    #####: 4878:      }
        -: 4879:      {
    #####: 4880:      while (1) {
        -: 4881:                                             ;
    #####: 4882:        if (! ((cmp_code_int )code >= 256UL)) {
    #####: 4883:          goto while_break___3;
        -: 4884:        }
    #####: 4885:        stackp --;
    #####: 4886:        *stackp = window[code];
    #####: 4887:        code = (code_int )prev[code];
        -: 4888:      }
        -: 4889:      while_break___3: /* CIL Label */ ;
        -: 4890:      }
    #####: 4891:      stackp --;
    #####: 4892:      finchar = (int )window[code];
    #####: 4893:      *stackp = (char_type )finchar;
    #####: 4894:      i___1 = (int )((char_type *)(& d_buf[32767]) - stackp);
    #####: 4895:      if (outpos + i___1 >= 16384) {
        -: 4896:         
        -: 4897:
    #####: 4898:        while (1) {
        -: 4899:                                               ;
    #####: 4900:          if (i___1 > 16384 - outpos) {
    #####: 4901:            i___1 = 16384 - outpos;
    #####: 4902:          }
    #####: 4903:          if (i___1 > 0) {
        -: 4904:             
        -: 4905:
    #####: 4906:            memcpy((void * __restrict  )(outbuf + outpos), (void const   * __restrict  )stackp,
    #####: 4907:                   (size_t )i___1);
    #####: 4908:            outpos += i___1;
        -: 4909:             
        -: 4910:
    #####: 4911:          }
    #####: 4912:          if (outpos >= 16384) {
    #####: 4913:            if (! test) {
        -: 4914:               
        -: 4915:
    #####: 4916:              write_buf(out, (voidp )((char *)(outbuf)), (unsigned int )outpos);
    #####: 4917:              bytes_out += (off_t )outpos;
        -: 4918:               
        -: 4919:
    #####: 4920:            }
    #####: 4921:            outpos = 0;
    #####: 4922:          }
    #####: 4923:          stackp += i___1;
    #####: 4924:          i___1 = (int )((char_type *)(& d_buf[32767]) - stackp);
    #####: 4925:          if (! (i___1 > 0)) {
    #####: 4926:            goto while_break___4;
        -: 4927:          }
        -: 4928:        }
        -: 4929:        while_break___4: /* CIL Label */ ;
        -: 4930:         
        -: 4931:
    #####: 4932:      } else {
        -: 4933:         
        -: 4934:
    #####: 4935:        memcpy((void * __restrict  )(outbuf + outpos), (void const   * __restrict  )stackp,
    #####: 4936:               (size_t )i___1);
    #####: 4937:        outpos += i___1;
        -: 4938:         
        -: 4939:
        -: 4940:      }
    #####: 4941:      code = free_ent;
    #####: 4942:      if (code < maxmaxcode) {
    #####: 4943:        prev[code] = (unsigned short )oldcode;
    #####: 4944:        window[code] = (char_type )finchar;
    #####: 4945:        free_ent = code + 1L;
    #####: 4946:      }
    #####: 4947:      oldcode = incode;
        -: 4948:    }
        -: 4949:    while_break___2: /* CIL Label */ ;
        -: 4950:    }
    #####: 4951:    if (! (rsize != 0)) {
    #####: 4952:      goto while_break___0;
        -: 4953:    }
        -: 4954:  }
        -: 4955:  while_break___0: /* CIL Label */ ;
        -: 4956:  }
    #####: 4957:  if (! test) {
    #####: 4958:    if (outpos > 0) {
        -: 4959:       
        -: 4960:
    #####: 4961:      write_buf(out, (voidp )((char *)(outbuf)), (unsigned int )outpos);
    #####: 4962:      bytes_out += (off_t )outpos;
        -: 4963:       
        -: 4964:
    #####: 4965:    }
    #####: 4966:  }
    #####: 4967:  return (0);
        -: 4968:}
    #####: 4969:}
        -: 4970:static ulg orig_len  ;
        -: 4971:static int max_len  ;
        -: 4972:static uch literal[256]  ;
        -: 4973:static int lit_base[26]  ;
        -: 4974:static int leaves[26]  ;
        -: 4975:static int parents[26]  ;
        -: 4976:static int peek_bits  ;
        -: 4977:static ulg un_bitbuf  ;
        -: 4978:static int valid  ;
        -: 4979:static void read_tree(void) ;
        -: 4980:static void un_build_tree(void) ;
    #####: 4981:static void read_tree(void) 
        -: 4982:{ 
        -: 4983:  int len ;
        -: 4984:  int base ;
        -: 4985:  int n ;
        -: 4986:  unsigned int tmp ;
        -: 4987:  int tmp___0 ;
        -: 4988:  int tmp___1 ;
        -: 4989:  unsigned int tmp___2 ;
        -: 4990:  int tmp___3 ;
        -: 4991:  int tmp___4 ;
        -: 4992:  unsigned int tmp___5 ;
        -: 4993:  int tmp___6 ;
        -: 4994:  int tmp___7 ;
        -: 4995:  int tmp___8 ;
        -: 4996:  unsigned int tmp___9 ;
        -: 4997:  int tmp___10 ;
        -: 4998:  int tmp___11 ;
        -: 4999:
        -: 5000:  {
    #####: 5001:  orig_len = (ulg )0;
    #####: 5002:  n = 1;
        -: 5003:  {
    #####: 5004:  while (1) {
        -: 5005:                                     ;
    #####: 5006:    if (! (n <= 4)) {
    #####: 5007:      goto while_break;
        -: 5008:    }
    #####: 5009:    if (inptr < insize) {
    #####: 5010:      tmp = inptr;
    #####: 5011:      inptr ++;
    #####: 5012:      tmp___1 = (int )inbuf[tmp];
    #####: 5013:    } else {
        -: 5014:       
        -: 5015:
    #####: 5016:      tmp___0 = fill_inbuf(0);
    #####: 5017:      tmp___1 = tmp___0;
        -: 5018:       
        -: 5019:
        -: 5020:    }
    #####: 5021:    orig_len = (orig_len << 8) | (ulg )tmp___1;
    #####: 5022:    n ++;
        -: 5023:  }
        -: 5024:  while_break: /* CIL Label */ ;
        -: 5025:  }
    #####: 5026:  if (inptr < insize) {
    #####: 5027:    tmp___2 = inptr;
    #####: 5028:    inptr ++;
    #####: 5029:    tmp___4 = (int )inbuf[tmp___2];
    #####: 5030:  } else {
        -: 5031:     
        -: 5032:
    #####: 5033:    tmp___3 = fill_inbuf(0);
    #####: 5034:    tmp___4 = tmp___3;
        -: 5035:     
        -: 5036:
        -: 5037:  }
    #####: 5038:  max_len = tmp___4;
    #####: 5039:  if (max_len > 25) {
        -: 5040:     
        -: 5041:
    #####: 5042:    error((char *)"invalid compressed data -- Huffman code > 32 bits");
        -: 5043:     
        -: 5044:
    #####: 5045:  }
    #####: 5046:  n = 0;
    #####: 5047:  len = 1;
        -: 5048:  {
    #####: 5049:  while (1) {
        -: 5050:                                         ;
    #####: 5051:    if (! (len <= max_len)) {
    #####: 5052:      goto while_break___0;
        -: 5053:    }
    #####: 5054:    if (inptr < insize) {
    #####: 5055:      tmp___5 = inptr;
    #####: 5056:      inptr ++;
    #####: 5057:      tmp___7 = (int )inbuf[tmp___5];
    #####: 5058:    } else {
        -: 5059:       
        -: 5060:
    #####: 5061:      tmp___6 = fill_inbuf(0);
    #####: 5062:      tmp___7 = tmp___6;
        -: 5063:       
        -: 5064:
        -: 5065:    }
    #####: 5066:    leaves[len] = tmp___7;
    #####: 5067:    n += leaves[len];
    #####: 5068:    len ++;
        -: 5069:  }
        -: 5070:  while_break___0: /* CIL Label */ ;
        -: 5071:  }
    #####: 5072:  if (n > 256) {
        -: 5073:     
        -: 5074:
    #####: 5075:    error((char *)"too many leaves in Huffman tree");
        -: 5076:     
        -: 5077:
    #####: 5078:  }
    #####: 5079:  (leaves[max_len]) ++;
    #####: 5080:  base = 0;
    #####: 5081:  len = 1;
        -: 5082:  {
    #####: 5083:  while (1) {
        -: 5084:                                         ;
    #####: 5085:    if (! (len <= max_len)) {
    #####: 5086:      goto while_break___1;
        -: 5087:    }
    #####: 5088:    lit_base[len] = base;
    #####: 5089:    n = leaves[len];
        -: 5090:    {
    #####: 5091:    while (1) {
        -: 5092:                                           ;
    #####: 5093:      if (! (n > 0)) {
    #####: 5094:        goto while_break___2;
        -: 5095:      }
    #####: 5096:      tmp___8 = base;
    #####: 5097:      base ++;
    #####: 5098:      if (inptr < insize) {
    #####: 5099:        tmp___9 = inptr;
    #####: 5100:        inptr ++;
    #####: 5101:        tmp___11 = (int )inbuf[tmp___9];
    #####: 5102:      } else {
        -: 5103:         
        -: 5104:
    #####: 5105:        tmp___10 = fill_inbuf(0);
    #####: 5106:        tmp___11 = tmp___10;
        -: 5107:         
        -: 5108:
        -: 5109:      }
    #####: 5110:      literal[tmp___8] = (uch )tmp___11;
    #####: 5111:      n --;
        -: 5112:    }
        -: 5113:    while_break___2: /* CIL Label */ ;
        -: 5114:    }
    #####: 5115:    len ++;
        -: 5116:  }
        -: 5117:  while_break___1: /* CIL Label */ ;
        -: 5118:  }
    #####: 5119:  (leaves[max_len]) ++;
    #####: 5120:  return;
        -: 5121:}
        -: 5122:}
    #####: 5123:static void un_build_tree(void) 
        -: 5124:{ 
        -: 5125:  int nodes ;
        -: 5126:  int len ;
        -: 5127:  uch *prefixp ;
        -: 5128:  int prefixes ;
        -: 5129:  int tmp ;
        -: 5130:
        -: 5131:  {
    #####: 5132:  nodes = 0;
    #####: 5133:  len = max_len;
        -: 5134:  {
    #####: 5135:  while (1) {
        -: 5136:                                     ;
    #####: 5137:    if (! (len >= 1)) {
    #####: 5138:      goto while_break;
        -: 5139:    }
    #####: 5140:    nodes >>= 1;
    #####: 5141:    parents[len] = nodes;
    #####: 5142:    lit_base[len] -= nodes;
    #####: 5143:    nodes += leaves[len];
    #####: 5144:    len --;
        -: 5145:  }
        -: 5146:  while_break: /* CIL Label */ ;
        -: 5147:  }
    #####: 5148:  if (max_len <= 12) {
    #####: 5149:    peek_bits = max_len;
    #####: 5150:  } else {
    #####: 5151:    peek_bits = 12;
        -: 5152:  }
    #####: 5153:  prefixp = & outbuf[1 << peek_bits];
    #####: 5154:  len = 1;
        -: 5155:  {
    #####: 5156:  while (1) {
        -: 5157:                                         ;
    #####: 5158:    if (! (len <= peek_bits)) {
    #####: 5159:      goto while_break___0;
        -: 5160:    }
    #####: 5161:    prefixes = leaves[len] << (peek_bits - len);
        -: 5162:    {
    #####: 5163:    while (1) {
        -: 5164:                                           ;
    #####: 5165:      tmp = prefixes;
    #####: 5166:      prefixes --;
    #####: 5167:      if (! tmp) {
    #####: 5168:        goto while_break___1;
        -: 5169:      }
    #####: 5170:      prefixp --;
    #####: 5171:      *prefixp = (uch )len;
        -: 5172:    }
        -: 5173:    while_break___1: /* CIL Label */ ;
        -: 5174:    }
    #####: 5175:    len ++;
        -: 5176:  }
        -: 5177:  while_break___0: /* CIL Label */ ;
        -: 5178:  }
        -: 5179:  {
    #####: 5180:  while (1) {
        -: 5181:                                         ;
    #####: 5182:    if (! ((unsigned long )prefixp > (unsigned long )(outbuf))) {
    #####: 5183:      goto while_break___2;
        -: 5184:    }
    #####: 5185:    prefixp --;
    #####: 5186:    *prefixp = (uch )0;
        -: 5187:  }
        -: 5188:  while_break___2: /* CIL Label */ ;
        -: 5189:  }
    #####: 5190:  return;
        -: 5191:}
        -: 5192:}
    #####: 5193:int unpack(int in , int out ) 
        -: 5194:{ 
        -: 5195:  int len ;
        -: 5196:  unsigned int eob ;
        -: 5197:  register unsigned int peek ;
        -: 5198:  unsigned int peek_mask ;
        -: 5199:  unsigned int tmp ;
        -: 5200:  int tmp___0 ;
        -: 5201:  int tmp___1 ;
        -: 5202:  ulg mask ;
        -: 5203:  unsigned int tmp___2 ;
        -: 5204:  int tmp___3 ;
        -: 5205:  int tmp___4 ;
        -: 5206:  unsigned int tmp___5 ;
        -: 5207:
        -: 5208:  {
        -: 5209:  {
    #####: 5210:  ifd = in;
    #####: 5211:  ofd = out;
    #####: 5212:  read_tree();
    #####: 5213:  un_build_tree();
    #####: 5214:  valid = 0;
    #####: 5215:  un_bitbuf = (ulg )0;
    #####: 5216:  peek_mask = (unsigned int )((1 << peek_bits) - 1);
    #####: 5217:  eob = (unsigned int )(leaves[max_len] - 1);
        -: 5218:  }
        -: 5219:  {
    #####: 5220:  while (1) {
        -: 5221:                                     ;
        -: 5222:    {
    #####: 5223:    while (1) {
        -: 5224:                                           ;
    #####: 5225:      if (! (valid < peek_bits)) {
    #####: 5226:        goto while_break___0;
        -: 5227:      }
    #####: 5228:      if (inptr < insize) {
    #####: 5229:        tmp = inptr;
    #####: 5230:        inptr ++;
    #####: 5231:        tmp___1 = (int )inbuf[tmp];
    #####: 5232:      } else {
        -: 5233:         
        -: 5234:
    #####: 5235:        tmp___0 = fill_inbuf(0);
    #####: 5236:        tmp___1 = tmp___0;
        -: 5237:         
        -: 5238:
        -: 5239:      }
    #####: 5240:      un_bitbuf = (un_bitbuf << 8) | (ulg )tmp___1;
    #####: 5241:      valid += 8;
        -: 5242:    }
        -: 5243:    while_break___0: /* CIL Label */ ;
        -: 5244:    }
    #####: 5245:    peek = (unsigned int )((un_bitbuf >> (valid - peek_bits)) & (unsigned long )peek_mask);
    #####: 5246:    len = (int )outbuf[peek];
    #####: 5247:    if (len > 0) {
    #####: 5248:      peek >>= peek_bits - len;
    #####: 5249:    } else {
    #####: 5250:      mask = (ulg )peek_mask;
    #####: 5251:      len = peek_bits;
        -: 5252:      {
    #####: 5253:      while (1) {
        -: 5254:                                             ;
    #####: 5255:        len ++;
    #####: 5256:        mask = (mask << 1) + 1UL;
        -: 5257:        {
    #####: 5258:        while (1) {
        -: 5259:                                               ;
    #####: 5260:          if (! (valid < len)) {
    #####: 5261:            goto while_break___2;
        -: 5262:          }
    #####: 5263:          if (inptr < insize) {
    #####: 5264:            tmp___2 = inptr;
    #####: 5265:            inptr ++;
    #####: 5266:            tmp___4 = (int )inbuf[tmp___2];
    #####: 5267:          } else {
        -: 5268:             
        -: 5269:
    #####: 5270:            tmp___3 = fill_inbuf(0);
    #####: 5271:            tmp___4 = tmp___3;
        -: 5272:             
        -: 5273:
        -: 5274:          }
    #####: 5275:          un_bitbuf = (un_bitbuf << 8) | (ulg )tmp___4;
    #####: 5276:          valid += 8;
        -: 5277:        }
        -: 5278:        while_break___2: /* CIL Label */ ;
        -: 5279:        }
    #####: 5280:        peek = (unsigned int )((un_bitbuf >> (valid - len)) & mask);
    #####: 5281:        if (! (peek < (unsigned int )parents[len])) {
    #####: 5282:          goto while_break___1;
        -: 5283:        }
        -: 5284:      }
        -: 5285:      while_break___1: /* CIL Label */ ;
        -: 5286:      }
        -: 5287:    }
    #####: 5288:    if (peek == eob) {
    #####: 5289:      if (len == max_len) {
    #####: 5290:        goto while_break;
        -: 5291:      }
    #####: 5292:    }
    #####: 5293:    tmp___5 = outcnt;
    #####: 5294:    outcnt ++;
    #####: 5295:    window[tmp___5] = literal[peek + (unsigned int )lit_base[len]];
    #####: 5296:    if (outcnt == 32768U) {
        -: 5297:       
        -: 5298:
    #####: 5299:      flush_window();
        -: 5300:       
        -: 5301:
    #####: 5302:    }
    #####: 5303:    valid -= len;
        -: 5304:  }
        -: 5305:  while_break: /* CIL Label */ ;
        -: 5306:  }
        -: 5307:  {
    #####: 5308:  flush_window();
        -: 5309:  }
    #####: 5310:  if (orig_len != (ulg )(bytes_out & 4294967295L)) {
        -: 5311:     
        -: 5312:
    #####: 5313:    error((char *)"invalid compressed data--length error");
        -: 5314:     
        -: 5315:
    #####: 5316:  }
    #####: 5317:  return (0);
        -: 5318:}
        -: 5319:}
        -: 5320:            
        -: 5321:int pkzip  =    0;
        -: 5322:int ext_header  =    0;
    #####: 5323:int check_zipfile(int in ) 
        -: 5324:{ 
        -: 5325:  uch *h ;
        -: 5326:
        -: 5327:  {
    #####: 5328:  h = inbuf + inptr;
    #####: 5329:  ifd = in;
    #####: 5330:  inptr += (unsigned int )((30 + ((int )((ush )*((h + 26) + 0)) | ((int )((ush )*((h + 26) + 1)) << 8))) + ((int )((ush )*((h + 28) + 0)) | ((int )((ush )*((h + 28) + 1)) << 8)));
    #####: 5331:  if (inptr > insize) {
        -: 5332:    {
    #####: 5333:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: not a valid zip file\n",
    #####: 5334:            progname, ifname);
    #####: 5335:    exit_code = 1;
        -: 5336:    }
    #####: 5337:    return (1);
        -: 5338:  } else { //Added block
    #####: 5339:  if (((ulg )((int )((ush )*(h + 0)) | ((int )((ush )*(h + 1)) << 8)) | ((ulg )((int )((ush )*((h + 2) + 0)) | ((int )((ush )*((h + 2) + 1)) << 8)) << 16)) != 67324752UL) {
        -: 5340:    {
    #####: 5341:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: not a valid zip file\n",
    #####: 5342:            progname, ifname);
    #####: 5343:    exit_code = 1;
        -: 5344:    }
    #####: 5345:    return (1);
        -: 5346:  }
        -: 5347:  }
    #####: 5348:  method = (int )*(h + 8);
    #####: 5349:  if (method != 0) {
    #####: 5350:    if (method != 8) {
        -: 5351:      {
    #####: 5352:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: first entry not deflated or stored -- use unzip\n",
    #####: 5353:              progname, ifname);
    #####: 5354:      exit_code = 1;
        -: 5355:      }
    #####: 5356:      return (1);
        -: 5357:    }
    #####: 5358:  }
    #####: 5359:  decrypt = (int )*(h + 6) & 1;
    #####: 5360:  if (decrypt != 0) {
        -: 5361:    {
    #####: 5362:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: encrypted file -- use unzip\n",
    #####: 5363:            progname, ifname);
    #####: 5364:    exit_code = 1;
        -: 5365:    }
    #####: 5366:    return (1);
        -: 5367:  }
    #####: 5368:  ext_header = ((int )*(h + 6) & 8) != 0;
    #####: 5369:  pkzip = 1;
    #####: 5370:  return (0);
        -: 5371:}
    #####: 5372:}
    #####: 5373:int unzip(int in , int out ) 
        -: 5374:{ 
        -: 5375:  ulg orig_crc ;
        -: 5376:  ulg orig_len___0 ;
        -: 5377:  int n ;
        -: 5378:  uch buf[16] ;
        -: 5379:  int err ;
        -: 5380:  int res ;
        -: 5381:  int tmp ;
        -: 5382:  register ulg n___0 ;
        -: 5383:  int tmp___0 ;
        -: 5384:  uch c ;
        -: 5385:  unsigned int tmp___1 ;
        -: 5386:  int tmp___2 ;
        -: 5387:  int tmp___3 ;
        -: 5388:  unsigned int tmp___4 ;
        -: 5389:  ulg tmp___5 ;
        -: 5390:  unsigned int tmp___6 ;
        -: 5391:  int tmp___7 ;
        -: 5392:  int tmp___8 ;
        -: 5393:  unsigned int tmp___9 ;
        -: 5394:  int tmp___10 ;
        -: 5395:  int tmp___11 ;
        -: 5396:  ulg tmp___12 ;
        -: 5397:
        -: 5398:  {
        -: 5399:  {
    #####: 5400:  orig_crc = (ulg )0;
    #####: 5401:  orig_len___0 = (ulg )0;
    #####: 5402:  err = 0;
    #####: 5403:  ifd = in;
    #####: 5404:  ofd = out;
    #####: 5405:  updcrc((uch *)((void *)0), 0U);
        -: 5406:  }
    #####: 5407:  if (pkzip) {
    #####: 5408:    if (! ext_header) {
    #####: 5409:      orig_crc = (ulg )((int )((ush )*((inbuf + 14) + 0)) | ((int )((ush )*((inbuf + 14) + 1)) << 8)) | ((ulg )((int )((ush )*(((inbuf + 14) + 2) + 0)) | ((int )((ush )*(((inbuf + 14) + 2) + 1)) << 8)) << 16);
    #####: 5410:      orig_len___0 = (ulg )((int )((ush )*((inbuf + 22) + 0)) | ((int )((ush )*((inbuf + 22) + 1)) << 8)) | ((ulg )((int )((ush )*(((inbuf + 22) + 2) + 0)) | ((int )((ush )*(((inbuf + 22) + 2) + 1)) << 8)) << 16);
    #####: 5411:    }
    #####: 5412:  }
    #####: 5413:  if (method == 8) {
        -: 5414:    {
    #####: 5415:    tmp = inflate();
    #####: 5416:    res = tmp;
        -: 5417:    }
    #####: 5418:    if (res == 3) {
        -: 5419:       
        -: 5420:
    #####: 5421:      error((char *)"out of memory");
        -: 5422:       
        -: 5423:
    #####: 5424:    } else { //Added block
    #####: 5425:    if (res != 0) {
        -: 5426:       
        -: 5427:
    #####: 5428:      error((char *)"invalid compressed data--format violated");
        -: 5429:       
        -: 5430:
    #####: 5431:    }
        -: 5432:    }
    #####: 5433:  } else { //Added block
    #####: 5434:  if (pkzip) {
    #####: 5435:    if (method == 0) {
    #####: 5436:      n___0 = (ulg )((int )((ush )*((inbuf + 22) + 0)) | ((int )((ush )*((inbuf + 22) + 1)) << 8)) | ((ulg )((int )((ush )*(((inbuf + 22) + 2) + 0)) | ((int )((ush )*(((inbuf + 22) + 2) + 1)) << 8)) << 16);
    #####: 5437:      if (decrypt) {
    #####: 5438:        tmp___0 = 12;
    #####: 5439:      } else {
    #####: 5440:        tmp___0 = 0;
        -: 5441:      }
    #####: 5442:      if (n___0 != ((ulg )((int )((ush )*((inbuf + 18) + 0)) | ((int )((ush )*((inbuf + 18) + 1)) << 8)) | ((ulg )((int )((ush )*(((inbuf + 18) + 2) + 0)) | ((int )((ush )*(((inbuf + 18) + 2) + 1)) << 8)) << 16)) - (unsigned long )tmp___0) {
        -: 5443:         
        -: 5444:
    #####: 5445:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"len %ld, siz %ld\n",
    #####: 5446:                n___0, (ulg )((int )((ush )*((inbuf + 18) + 0)) | ((int )((ush )*((inbuf + 18) + 1)) << 8)) | ((ulg )((int )((ush )*(((inbuf + 18) + 2) + 0)) | ((int )((ush )*(((inbuf + 18) + 2) + 1)) << 8)) << 16));
    #####: 5447:        error((char *)"invalid compressed data--length mismatch");
        -: 5448:         
        -: 5449:
    #####: 5450:      }
        -: 5451:      {
    #####: 5452:      while (1) {
        -: 5453:                                         ;
    #####: 5454:        tmp___5 = n___0;
    #####: 5455:        n___0 --;
    #####: 5456:        if (! tmp___5) {
    #####: 5457:          goto while_break;
        -: 5458:        }
    #####: 5459:        if (inptr < insize) {
    #####: 5460:          tmp___1 = inptr;
    #####: 5461:          inptr ++;
    #####: 5462:          tmp___3 = (int )inbuf[tmp___1];
    #####: 5463:        } else {
        -: 5464:           
        -: 5465:
    #####: 5466:          tmp___2 = fill_inbuf(0);
    #####: 5467:          tmp___3 = tmp___2;
        -: 5468:           
        -: 5469:
        -: 5470:        }
    #####: 5471:        c = (uch )tmp___3;
    #####: 5472:        tmp___4 = outcnt;
    #####: 5473:        outcnt ++;
    #####: 5474:        window[tmp___4] = c;
    #####: 5475:        if (outcnt == 32768U) {
        -: 5476:           
        -: 5477:
    #####: 5478:          flush_window();
        -: 5479:           
        -: 5480:
    #####: 5481:        }
        -: 5482:      }
        -: 5483:      while_break: /* CIL Label */ ;
        -: 5484:      }
        -: 5485:      {
    #####: 5486:      flush_window();
        -: 5487:      }
    #####: 5488:    } else {
        -: 5489:       
        -: 5490:
    #####: 5491:      error((char *)"internal error, invalid method");
        -: 5492:       
        -: 5493:
        -: 5494:    }
    #####: 5495:  } else {
        -: 5496:     
        -: 5497:
    #####: 5498:    error((char *)"internal error, invalid method");
        -: 5499:     
        -: 5500:
        -: 5501:  }
        -: 5502:  }
    #####: 5503:  if (! pkzip) {
    #####: 5504:    n = 0;
        -: 5505:    {
    #####: 5506:    while (1) {
        -: 5507:                                           ;
    #####: 5508:      if (! (n < 8)) {
    #####: 5509:        goto while_break___0;
        -: 5510:      }
    #####: 5511:      if (inptr < insize) {
    #####: 5512:        tmp___6 = inptr;
    #####: 5513:        inptr ++;
    #####: 5514:        tmp___8 = (int )inbuf[tmp___6];
    #####: 5515:      } else {
        -: 5516:         
        -: 5517:
    #####: 5518:        tmp___7 = fill_inbuf(0);
    #####: 5519:        tmp___8 = tmp___7;
        -: 5520:         
        -: 5521:
        -: 5522:      }
    #####: 5523:      buf[n] = (uch )tmp___8;
    #####: 5524:      n ++;
        -: 5525:    }
        -: 5526:    while_break___0: /* CIL Label */ ;
        -: 5527:    }
    #####: 5528:    orig_crc = (ulg )((int )((ush )buf[0]) | ((int )((ush )buf[1]) << 8)) | ((ulg )((int )((ush )*((buf + 2) + 0)) | ((int )((ush )*((buf + 2) + 1)) << 8)) << 16);
    #####: 5529:    orig_len___0 = (ulg )((int )((ush )*((buf + 4) + 0)) | ((int )((ush )*((buf + 4) + 1)) << 8)) | ((ulg )((int )((ush )*(((buf + 4) + 2) + 0)) | ((int )((ush )*(((buf + 4) + 2) + 1)) << 8)) << 16);
    #####: 5530:  } else { //Added block
    #####: 5531:  if (ext_header) {
    #####: 5532:    n = 0;
        -: 5533:    {
    #####: 5534:    while (1) {
        -: 5535:                                           ;
    #####: 5536:      if (! (n < 16)) {
    #####: 5537:        goto while_break___1;
        -: 5538:      }
    #####: 5539:      if (inptr < insize) {
    #####: 5540:        tmp___9 = inptr;
    #####: 5541:        inptr ++;
    #####: 5542:        tmp___11 = (int )inbuf[tmp___9];
    #####: 5543:      } else {
        -: 5544:         
        -: 5545:
    #####: 5546:        tmp___10 = fill_inbuf(0);
    #####: 5547:        tmp___11 = tmp___10;
        -: 5548:         
        -: 5549:
        -: 5550:      }
    #####: 5551:      buf[n] = (uch )tmp___11;
    #####: 5552:      n ++;
        -: 5553:    }
        -: 5554:    while_break___1: /* CIL Label */ ;
        -: 5555:    }
    #####: 5556:    orig_crc = (ulg )((int )((ush )*((buf + 4) + 0)) | ((int )((ush )*((buf + 4) + 1)) << 8)) | ((ulg )((int )((ush )*(((buf + 4) + 2) + 0)) | ((int )((ush )*(((buf + 4) + 2) + 1)) << 8)) << 16);
    #####: 5557:    orig_len___0 = (ulg )((int )((ush )*((buf + 12) + 0)) | ((int )((ush )*((buf + 12) + 1)) << 8)) | ((ulg )((int )((ush )*(((buf + 12) + 2) + 0)) | ((int )((ush )*(((buf + 12) + 2) + 1)) << 8)) << 16);
    #####: 5558:  }
        -: 5559:  }
        -: 5560:  {
    #####: 5561:  tmp___12 = updcrc(outbuf, 0U);
        -: 5562:  }
    #####: 5563:  if (orig_crc != tmp___12) {
        -: 5564:     
        -: 5565:
    #####: 5566:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: invalid compressed data--crc error\n",
    #####: 5567:            progname, ifname);
    #####: 5568:    err = 1;
        -: 5569:     
        -: 5570:
    #####: 5571:  }
    #####: 5572:  if (orig_len___0 != (ulg )(bytes_out & 4294967295L)) {
        -: 5573:     
        -: 5574:
    #####: 5575:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: invalid compressed data--length error\n",
    #####: 5576:            progname, ifname);
    #####: 5577:    err = 1;
        -: 5578:     
        -: 5579:
    #####: 5580:  }
    #####: 5581:  if (pkzip) {
    #####: 5582:    if (inptr + 4U < insize) {
    #####: 5583:      if (((ulg )((int )((ush )*((inbuf + inptr) + 0)) | ((int )((ush )*((inbuf + inptr) + 1)) << 8)) | ((ulg )((int )((ush )*(((inbuf + inptr) + 2) + 0)) | ((int )((ush )*(((inbuf + inptr) + 2) + 1)) << 8)) << 16)) == 67324752UL) {
    #####: 5584:        if (to_stdout) {
    #####: 5585:          if (! quiet) {
        -: 5586:             
        -: 5587:
    #####: 5588:            fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s has more than one entry--rest ignored\n",
    #####: 5589:                    progname, ifname);
        -: 5590:             
        -: 5591:
    #####: 5592:          }
    #####: 5593:          if (exit_code == 0) {
    #####: 5594:            exit_code = 2;
    #####: 5595:          }
    #####: 5596:        } else {
        -: 5597:           
        -: 5598:
    #####: 5599:          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s has more than one entry -- unchanged\n",
    #####: 5600:                  progname, ifname);
    #####: 5601:          err = 1;
        -: 5602:           
        -: 5603:
        -: 5604:        }
    #####: 5605:      }
    #####: 5606:    }
    #####: 5607:  }
    #####: 5608:  pkzip = 0;
    #####: 5609:  ext_header = pkzip;
    #####: 5610:  if (err == 0) {
    #####: 5611:    return (0);
        -: 5612:  }
    #####: 5613:  exit_code = 1;
    #####: 5614:  if (! test) {
        -: 5615:     
        -: 5616:
    #####: 5617:    abort_gzip();
        -: 5618:     
        -: 5619:
    #####: 5620:  }
    #####: 5621:  return (err);
        -: 5622:}
    #####: 5623:}
        -: 5624:ulg crc_32_tab[256] ;
    #####: 5625:int copy(int in , int out ) 
        -: 5626:{ 
        -: 5627:  int *tmp ;
        -: 5628:  ssize_t tmp___0 ;
        -: 5629:
        -: 5630:  {
        -: 5631:  {
    #####: 5632:  tmp = __errno_location();
    #####: 5633:  *tmp = 0;
        -: 5634:  }
        -: 5635:  {
    #####: 5636:  while (1) {
        -: 5637:                                     ;
    #####: 5638:    if (insize != 0U) {
    #####: 5639:      if (! ((int )insize != -1)) {
    #####: 5640:        goto while_break;
        -: 5641:      }
    #####: 5642:    } else {
    #####: 5643:      goto while_break;
        -: 5644:    }
        -: 5645:    {
    #####: 5646:    write_buf(out, (voidp )((char *)(inbuf)), insize);
    #####: 5647:    bytes_out += (off_t )insize;
    #####: 5648:    tmp___0 = read(in, (void *)((char *)(inbuf)), (size_t )32768);
    #####: 5649:    insize = (unsigned int )tmp___0;
        -: 5650:    }
        -: 5651:  }
        -: 5652:  while_break: /* CIL Label */ ;
        -: 5653:  }
    #####: 5654:  if ((int )insize == -1) {
        -: 5655:     
        -: 5656:
    #####: 5657:    read_error();
        -: 5658:     
        -: 5659:
    #####: 5660:  }
    #####: 5661:  bytes_in = bytes_out;
    #####: 5662:  return (0);
        -: 5663:}
        -: 5664:}
        -: 5665:static ulg crc___0  =    (ulg )4294967295L;
        3: 5666:ulg updcrc(uch *s , unsigned int n ) 
        -: 5667:{ 
        -: 5668:  register ulg c ;
        -: 5669:  uch *tmp ;
        -: 5670:
        -: 5671:  {
        3: 5672:  if ((unsigned long )s == (unsigned long )((void *)0)) {
        1: 5673:    c = (ulg )4294967295L;
        1: 5674:  } else {
        2: 5675:    c = crc___0;
        2: 5676:    if (n) {
        -: 5677:       
        -: 5678:
    34231: 5679:      while (1) {
        -: 5680:                                         ;
    34231: 5681:        tmp = s;
    34231: 5682:        s ++;
    34231: 5683:        c = crc_32_tab[((int )c ^ (int )*tmp) & 255] ^ (c >> 8);
    34231: 5684:        n --;
    34231: 5685:        if (! n) {
        2: 5686:          goto while_break;
        -: 5687:        }
        -: 5688:      }
        -: 5689:      while_break: /* CIL Label */ ;
        -: 5690:       
        -: 5691:
        2: 5692:    }
        -: 5693:  }
        3: 5694:  crc___0 = c;
        3: 5695:  return (c ^ 4294967295UL);
        -: 5696:}
        -: 5697:}
        1: 5698:void clear_bufs(void) 
        -: 5699:{ 
        -: 5700:
        -: 5701:
        -: 5702:   
        -: 5703:
        1: 5704:  outcnt = 0U;
        1: 5705:  inptr = 0U;
        1: 5706:  insize = inptr;
        1: 5707:  bytes_out = 0L;
        1: 5708:  bytes_in = bytes_out;
        1: 5709:  return;
        -: 5710: 
        -: 5711:
        -: 5712:}
    #####: 5713:int fill_inbuf(int eof_ok ) 
        -: 5714:{ 
        -: 5715:  int len ;
        -: 5716:  ssize_t tmp ;
        -: 5717:  int *tmp___0 ;
        -: 5718:
        -: 5719:  {
    #####: 5720:  insize = 0U;
        -: 5721:  {
    #####: 5722:  while (1) {
        -: 5723:                                     ;
        -: 5724:    {
    #####: 5725:    tmp = read(ifd, (void *)((char *)(inbuf) + insize), (size_t )(32768U - insize));
    #####: 5726:    len = (int )tmp;
        -: 5727:    }
    #####: 5728:    if (len == 0) {
    #####: 5729:      goto while_break;
        -: 5730:    }
    #####: 5731:    if (len == -1) {
        -: 5732:      {
    #####: 5733:      read_error();
        -: 5734:      }
    #####: 5735:      goto while_break;
        -: 5736:    }
    #####: 5737:    insize += (unsigned int )len;
    #####: 5738:    if (! (insize < 32768U)) {
    #####: 5739:      goto while_break;
        -: 5740:    }
        -: 5741:  }
        -: 5742:  while_break: /* CIL Label */ ;
        -: 5743:  }
    #####: 5744:  if (insize == 0U) {
    #####: 5745:    if (eof_ok) {
    #####: 5746:      return (-1);
        -: 5747:    }
        -: 5748:    {
    #####: 5749:    flush_window();
    #####: 5750:    tmp___0 = __errno_location();
    #####: 5751:    *tmp___0 = 0;
    #####: 5752:    read_error();
        -: 5753:    }
    #####: 5754:  }
    #####: 5755:  bytes_in += (off_t )insize;
    #####: 5756:  inptr = 1U;
    #####: 5757:  return ((int )inbuf[0]);
        -: 5758:}
    #####: 5759:}
        1: 5760:void flush_outbuf(void) 
        -: 5761:{ 
        -: 5762:
        -: 5763:
        -: 5764:   
        -: 5765:
        1: 5766:  if (outcnt == 0U) {
    #####: 5767:    return;
        -: 5768:  }
        -: 5769:  {
        1: 5770:  write_buf(ofd, (voidp )((char *)(outbuf)), outcnt);
        1: 5771:  bytes_out += (off_t )outcnt;
        1: 5772:  outcnt = 0U;
        -: 5773:  }
        1: 5774:  return;
        -: 5775: 
        -: 5776:
        1: 5777:}
    #####: 5778:void flush_window(void) 
        -: 5779:{ 
        -: 5780:
        -: 5781:
        -: 5782:   
        -: 5783:
    #####: 5784:  if (outcnt == 0U) {
    #####: 5785:    return;
        -: 5786:  }
        -: 5787:  {
    #####: 5788:  updcrc(window, outcnt);
        -: 5789:  }
    #####: 5790:  if (! test) {
        -: 5791:     
        -: 5792:
    #####: 5793:    write_buf(ofd, (voidp )((char *)(window)), outcnt);
        -: 5794:     
        -: 5795:
    #####: 5796:  }
    #####: 5797:  bytes_out += (off_t )outcnt;
    #####: 5798:  outcnt = 0U;
    #####: 5799:  return;
        -: 5800: 
        -: 5801:
    #####: 5802:}
        1: 5803:void write_buf(int fd , voidp buf , unsigned int cnt ) 
        -: 5804:{ 
        -: 5805:  unsigned int n ;
        -: 5806:  ssize_t tmp ;
        -: 5807:
        -: 5808:  {
        -: 5809:  {
        1: 5810:  while (1) {
        -: 5811:                                     ;
        -: 5812:    {
        1: 5813:    tmp = write(fd, (void const   *)buf, (size_t )cnt);
        1: 5814:    n = (unsigned int )tmp;
        -: 5815:    }
        1: 5816:    if (! (n != cnt)) {
        1: 5817:      goto while_break;
        -: 5818:    }
    #####: 5819:    if (n == 4294967295U) {
        -: 5820:       
        -: 5821:
    #####: 5822:      write_error();
        -: 5823:       
        -: 5824:
    #####: 5825:    }
    #####: 5826:    cnt -= n;
    #####: 5827:    buf = (voidp )((char *)buf + n);
        -: 5828:  }
        -: 5829:  while_break: /* CIL Label */ ;
        -: 5830:  }
        1: 5831:  return;
        -: 5832:}
        -: 5833:}
    #####: 5834:char *strlwr(char *s ) 
        -: 5835:{ 
        -: 5836:  char *t ;
        -: 5837:  int tmp___0 ;
        -: 5838:  unsigned short const   **tmp___1 ;
        -: 5839:
        -: 5840:  {
    #####: 5841:  t = s;
        -: 5842:  {
    #####: 5843:  while (1) {
        -: 5844:                                     ;
    #####: 5845:    if (! *t) {
    #####: 5846:      goto while_break;
        -: 5847:    }
        -: 5848:    {
    #####: 5849:    tmp___1 = __ctype_b_loc();
        -: 5850:    }
    #####: 5851:    if ((int const   )*(*tmp___1 + (int )((unsigned char )*t)) & 256) {
        -: 5852:       
        -: 5853:
    #####: 5854:      tmp___0 = tolower((int )((unsigned char )*t));
    #####: 5855:      *t = (char )tmp___0;
        -: 5856:       
        -: 5857:
    #####: 5858:    } else {
    #####: 5859:      *t = (char )((unsigned char )*t);
        -: 5860:    }
    #####: 5861:    t ++;
        -: 5862:  }
        -: 5863:  while_break: /* CIL Label */ ;
        -: 5864:  }
    #####: 5865:  return (s);
        -: 5866:}
        -: 5867:}
        2: 5868:char *base_name(char *fname ) 
        -: 5869:{ 
        -: 5870:  char *p ;
        -: 5871:
        -: 5872:  {
        -: 5873:  {
        2: 5874:  p = strrchr((char const   *)fname, '/');
        -: 5875:  }
        2: 5876:  if ((unsigned long )p != (unsigned long )((void *)0)) {
        2: 5877:    fname = p + 1;
        2: 5878:  }
        2: 5879:  return (fname);
        -: 5880:}
        -: 5881:}
    #####: 5882:int xunlink(char *filename ) 
        -: 5883:{ 
        -: 5884:  int r ;
        -: 5885:  int tmp ;
        -: 5886:
        -: 5887:  {
        -: 5888:  {
    #####: 5889:  tmp = unlink((char const   *)filename);
    #####: 5890:  r = tmp;
        -: 5891:  }
    #####: 5892:  return (r);
        -: 5893:}
        -: 5894:}
        -: 5895:                                   
        -: 5896:  
        -: 5897:           
        -: 5898:             
        -: 5899:
        -: 5900:   
        -: 5901:   
        -: 5902:                                           
        -: 5903:          
        -: 5904:   
        -: 5905:                                                         
        -: 5906:           
        -: 5907:   
        -: 5908:                                                  
        -: 5909:         
        -: 5910:   
        -: 5911:   
        -: 5912:             
        -: 5913:                                      
        -: 5914:         
        -: 5915:                         
        -: 5916:                      
        -: 5917:     
        -: 5918:                                                        
        -: 5919:                       
        -: 5920:     
        -: 5921:   
        -: 5922:                                
        -: 5923:   
        -: 5924:         
        -: 5925: 
        -: 5926: 
        1: 5927:char *add_envopt(int *argcp , char ***argvp , char *env___0 ) 
        -: 5928:{ 
        -: 5929:  char *p ;
        -: 5930:  char **oargv ;
        -: 5931:  char **nargv ;
        -: 5932:  int oargc ;
        -: 5933:  int nargc ;
        -: 5934:  char *tmp ;
        -: 5935:  size_t tmp___0 ;
        -: 5936:  voidp tmp___1 ;
        -: 5937:  size_t tmp___2 ;
        -: 5938:  size_t tmp___3 ;
        -: 5939:  char *tmp___4 ;
        -: 5940:  void *tmp___5 ;
        -: 5941:  int tmp___6 ;
        -: 5942:  char **tmp___7 ;
        -: 5943:  char **tmp___8 ;
        -: 5944:  size_t tmp___9 ;
        -: 5945:  char **tmp___10 ;
        -: 5946:  char *tmp___11 ;
        -: 5947:  char **tmp___12 ;
        -: 5948:  char **tmp___13 ;
        -: 5949:  int tmp___14 ;
        -: 5950:
        -: 5951:  {
        -: 5952:  {
        1: 5953:  oargc = *argcp;
        1: 5954:  nargc = 0;
        1: 5955:  tmp = getenv((char const   *)env___0);
        1: 5956:  env___0 = tmp;
        -: 5957:  }
        1: 5958:  if ((unsigned long )env___0 == (unsigned long )((void *)0)) {
        1: 5959:    return ((char *)((void *)0));
        -: 5960:  }
        -: 5961:  {
    #####: 5962:  tmp___0 = strlen((char const   *)env___0);
    #####: 5963:  tmp___1 = xmalloc((unsigned int )(tmp___0 + 1UL));
    #####: 5964:  p = (char *)tmp___1;
    #####: 5965:  env___0 = strcpy((char * __restrict  )p, (char const   * __restrict  )env___0);
    #####: 5966:  p = env___0;
        -: 5967:  }
        -: 5968:  {
    #####: 5969:  while (1) {
        -: 5970:                                     ;
    #####: 5971:    if (! *p) {
    #####: 5972:      goto while_break;
        -: 5973:    }
        -: 5974:    {
    #####: 5975:    tmp___2 = strspn((char const   *)p, " \t");
    #####: 5976:    p += tmp___2;
        -: 5977:    }
    #####: 5978:    if ((int )*p == 0) {
    #####: 5979:      goto while_break;
        -: 5980:    }
        -: 5981:    {
    #####: 5982:    tmp___3 = strcspn((char const   *)p, " \t");
    #####: 5983:    p += tmp___3;
        -: 5984:    }
    #####: 5985:    if (*p) {
    #####: 5986:      tmp___4 = p;
    #####: 5987:      p ++;
    #####: 5988:      *tmp___4 = (char )'\000';
    #####: 5989:    }
    #####: 5990:    nargc ++;
        -: 5991:  }
        -: 5992:  while_break: /* CIL Label */ ;
        -: 5993:  }
    #####: 5994:  if (nargc == 0) {
        -: 5995:    {
    #####: 5996:    free((void *)env___0);
        -: 5997:    }
    #####: 5998:    return ((char *)((void *)0));
        -: 5999:  }
        -: 6000:  {
    #####: 6001:  *argcp += nargc;
    #####: 6002:  tmp___5 = calloc((size_t )(*argcp + 1), sizeof(char *));
    #####: 6003:  nargv = (char **)tmp___5;
        -: 6004:  }
    #####: 6005:  if ((unsigned long )nargv == (unsigned long )((void *)0)) {
        -: 6006:     
        -: 6007:
    #####: 6008:    error((char *)"out of memory");
        -: 6009:     
        -: 6010:
    #####: 6011:  }
    #####: 6012:  oargv = *argvp;
    #####: 6013:  *argvp = nargv;
    #####: 6014:  tmp___6 = oargc;
    #####: 6015:  oargc --;
    #####: 6016:  if (tmp___6 < 0) {
        -: 6017:     
        -: 6018:
    #####: 6019:    error((char *)"argc<=0");
        -: 6020:     
        -: 6021:
    #####: 6022:  }
    #####: 6023:  tmp___7 = nargv;
    #####: 6024:  nargv ++;
    #####: 6025:  tmp___8 = oargv;
    #####: 6026:  oargv ++;
    #####: 6027:  *tmp___7 = *tmp___8;
    #####: 6028:  p = env___0;
        -: 6029:  {
    #####: 6030:  while (1) {
        -: 6031:                                         ;
    #####: 6032:    if (! (nargc > 0)) {
    #####: 6033:      goto while_break___0;
        -: 6034:    }
        -: 6035:    {
    #####: 6036:    tmp___9 = strspn((char const   *)p, " \t");
    #####: 6037:    p += tmp___9;
    #####: 6038:    tmp___10 = nargv;
    #####: 6039:    nargv ++;
    #####: 6040:    *tmp___10 = p;
        -: 6041:    }
        -: 6042:    {
    #####: 6043:    while (1) {
        -: 6044:                                           ;
    #####: 6045:      tmp___11 = p;
    #####: 6046:      p ++;
    #####: 6047:      if (! *tmp___11) {
    #####: 6048:        goto while_break___1;
        -: 6049:      }
        -: 6050:    }
        -: 6051:    while_break___1: /* CIL Label */ ;
        -: 6052:    }
    #####: 6053:    nargc --;
        -: 6054:  }
        -: 6055:  while_break___0: /* CIL Label */ ;
        -: 6056:  }
        -: 6057:  {
    #####: 6058:  while (1) {
        -: 6059:                                         ;
    #####: 6060:    tmp___14 = oargc;
    #####: 6061:    oargc --;
    #####: 6062:    if (! tmp___14) {
    #####: 6063:      goto while_break___2;
        -: 6064:    }
    #####: 6065:    tmp___12 = nargv;
    #####: 6066:    nargv ++;
    #####: 6067:    tmp___13 = oargv;
    #####: 6068:    oargv ++;
    #####: 6069:    *tmp___12 = *tmp___13;
        -: 6070:  }
        -: 6071:  while_break___2: /* CIL Label */ ;
        -: 6072:  }
    #####: 6073:  *nargv = (char *)((void *)0);
    #####: 6074:  return (env___0);
        -: 6075:}
        1: 6076:}
    #####: 6077:void error(char *m ) 
        -: 6078:{ 
        -: 6079:
        -: 6080:
        -: 6081:   
        -: 6082:
        -: 6083:  {
    #####: 6084:  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: %s\n",
    #####: 6085:          progname, ifname, m);
    #####: 6086:  abort_gzip();
        -: 6087:  }
    #####: 6088:  return;
        -: 6089: 
        -: 6090:
        -: 6091:}
        -: 6092:                       
        -: 6093:  
        -: 6094:
        -: 6095:
        -: 6096:   
        -: 6097:
        -: 6098:                
        -: 6099:     
        -: 6100:
        -: 6101:                                                                                              
        -: 6102:                                 
        -: 6103:     
        -: 6104:
        -: 6105:   
        -: 6106:                       
        -: 6107:                  
        -: 6108:   
        -: 6109:         
        -: 6110: 
        -: 6111:
        -: 6112: 
    #####: 6113:void read_error(void) 
        -: 6114:{ 
        -: 6115:  int e ;
        -: 6116:  int *tmp ;
        -: 6117:  int *tmp___0 ;
        -: 6118:
        -: 6119:  {
        -: 6120:  {
    #####: 6121:  tmp = __errno_location();
    #####: 6122:  e = *tmp;
    #####: 6123:  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: ", progname);
        -: 6124:  }
    #####: 6125:  if (e != 0) {
        -: 6126:     
        -: 6127:
    #####: 6128:    tmp___0 = __errno_location();
    #####: 6129:    *tmp___0 = e;
    #####: 6130:    perror((char const   *)(ifname));
        -: 6131:     
        -: 6132:
    #####: 6133:  } else {
        -: 6134:     
        -: 6135:
    #####: 6136:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: unexpected end of file\n",
        -: 6137:            ifname);
        -: 6138:     
        -: 6139:
        -: 6140:  }
        -: 6141:  {
    #####: 6142:  abort_gzip();
        -: 6143:  }
    #####: 6144:  return;
        -: 6145:}
        -: 6146:}
    #####: 6147:void write_error(void) 
        -: 6148:{ 
        -: 6149:  int e ;
        -: 6150:  int *tmp ;
        -: 6151:  int *tmp___0 ;
        -: 6152:
        -: 6153:  {
        -: 6154:  {
    #####: 6155:  tmp = __errno_location();
    #####: 6156:  e = *tmp;
    #####: 6157:  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: ", progname);
    #####: 6158:  tmp___0 = __errno_location();
    #####: 6159:  *tmp___0 = e;
    #####: 6160:  perror((char const   *)(ofname));
    #####: 6161:  abort_gzip();
        -: 6162:  }
    #####: 6163:  return;
        -: 6164:}
        -: 6165:}
    #####: 6166:void display_ratio(off_t num , off_t den , FILE *file ) 
        -: 6167:{ 
        -: 6168:  long ratio ;
        -: 6169:
        -: 6170:  {
    #####: 6171:  if (den == 0L) {
    #####: 6172:    ratio = 0L;
    #####: 6173:  } else { //Added block
    #####: 6174:  if (den < 2147483L) {
    #####: 6175:    ratio = (1000L * num) / den;
    #####: 6176:  } else {
    #####: 6177:    ratio = num / (den / 1000L);
        -: 6178:  }
        -: 6179:  }
    #####: 6180:  if (ratio < 0L) {
        -: 6181:     
        -: 6182:
    #####: 6183:    _IO_putc('-', file);
    #####: 6184:    ratio = - ratio;
        -: 6185:     
        -: 6186:
    #####: 6187:  } else {
        -: 6188:     
        -: 6189:
    #####: 6190:    _IO_putc(' ', file);
        -: 6191:     
        -: 6192:
        -: 6193:  }
        -: 6194:  {
    #####: 6195:  fprint_off(file, ratio / 10L, 2);
    #####: 6196:  fprintf((FILE * __restrict  )file, (char const   * __restrict  )".%d%%", (int )(ratio % 10L));
        -: 6197:  }
    #####: 6198:  return;
        -: 6199:}
        -: 6200:}
    #####: 6201:void fprint_off(FILE *file , off_t offset , int width ) 
        -: 6202:{ 
        -: 6203:  char buf[8UL * sizeof(off_t )] ;
        -: 6204:  char *p ;
        -: 6205:  int negative ;
        -: 6206:  int remainder ;
        -: 6207:  int quotient ;
        -: 6208:  int tmp ;
        -: 6209:
        -: 6210:  {
    #####: 6211:  p = buf + sizeof(buf);
    #####: 6212:  negative = offset < 0L;
        -: 6213:  {
    #####: 6214:  while (1) {
        -: 6215:                                     ;
    #####: 6216:    remainder = (int )(offset % 10L);
    #####: 6217:    quotient = (int )(offset / 10L);
    #####: 6218:    if (offset < 0L) {
    #####: 6219:      if (0 < remainder) {
    #####: 6220:        remainder -= 10;
    #####: 6221:        quotient ++;
    #####: 6222:      }
    #####: 6223:    }
    #####: 6224:    p --;
    #####: 6225:    if (remainder < 0) {
    #####: 6226:      tmp = - remainder;
    #####: 6227:    } else {
    #####: 6228:      tmp = remainder;
        -: 6229:    }
    #####: 6230:    *p = (char )(tmp + 48);
    #####: 6231:    width --;
    #####: 6232:    offset = (off_t )quotient;
    #####: 6233:    if (! (offset != 0L)) {
    #####: 6234:      goto while_break;
        -: 6235:    }
        -: 6236:  }
        -: 6237:  while_break: /* CIL Label */ ;
        -: 6238:  }
    #####: 6239:  width -= negative;
        -: 6240:  {
    #####: 6241:  while (1) {
        -: 6242:                                         ;
    #####: 6243:    if (! (0 < width)) {
    #####: 6244:      goto while_break___0;
        -: 6245:    }
        -: 6246:    {
    #####: 6247:    _IO_putc(' ', file);
    #####: 6248:    width --;
        -: 6249:    }
        -: 6250:  }
        -: 6251:  while_break___0: /* CIL Label */ ;
        -: 6252:  }
    #####: 6253:  if (negative) {
        -: 6254:     
        -: 6255:
    #####: 6256:    _IO_putc('-', file);
        -: 6257:     
        -: 6258:
    #####: 6259:  }
        -: 6260:  {
    #####: 6261:  while (1) {
        -: 6262:                                         ;
    #####: 6263:    if (! ((unsigned long )p < (unsigned long )(buf + sizeof(buf)))) {
    #####: 6264:      goto while_break___1;
        -: 6265:    }
        -: 6266:    {
    #####: 6267:    _IO_putc((int )*p, file);
    #####: 6268:    p ++;
        -: 6269:    }
        -: 6270:  }
        -: 6271:  while_break___1: /* CIL Label */ ;
        -: 6272:  }
    #####: 6273:  return;
        -: 6274:}
        -: 6275:}
    #####: 6276:voidp xmalloc(unsigned int size ) 
        -: 6277:{ 
        -: 6278:  voidp cp ;
        -: 6279:  void *tmp ;
        -: 6280:
        -: 6281:  {
        -: 6282:  {
    #####: 6283:  tmp = malloc((size_t )size);
    #####: 6284:  cp = tmp;
        -: 6285:  }
    #####: 6286:  if ((unsigned long )cp == (unsigned long )((void *)0)) {
        -: 6287:     
        -: 6288:
    #####: 6289:    error((char *)"out of memory");
        -: 6290:     
        -: 6291:
    #####: 6292:  }
    #####: 6293:  return (cp);
        -: 6294:}
        -: 6295:}
        -: 6296:ulg crc_32_tab[256]  = 
        -: 6297:  {      (ulg )0L,      (ulg )1996959894L,      (ulg )3993919788L,      (ulg )2567524794L, 
        -: 6298:        (ulg )124634137L,      (ulg )1886057615L,      (ulg )3915621685L,      (ulg )2657392035L, 
        -: 6299:        (ulg )249268274L,      (ulg )2044508324L,      (ulg )3772115230L,      (ulg )2547177864L, 
        -: 6300:        (ulg )162941995L,      (ulg )2125561021L,      (ulg )3887607047L,      (ulg )2428444049L, 
        -: 6301:        (ulg )498536548L,      (ulg )1789927666L,      (ulg )4089016648L,      (ulg )2227061214L, 
        -: 6302:        (ulg )450548861L,      (ulg )1843258603L,      (ulg )4107580753L,      (ulg )2211677639L, 
        -: 6303:        (ulg )325883990L,      (ulg )1684777152L,      (ulg )4251122042L,      (ulg )2321926636L, 
        -: 6304:        (ulg )335633487L,      (ulg )1661365465L,      (ulg )4195302755L,      (ulg )2366115317L, 
        -: 6305:        (ulg )997073096L,      (ulg )1281953886L,      (ulg )3579855332L,      (ulg )2724688242L, 
        -: 6306:        (ulg )1006888145L,      (ulg )1258607687L,      (ulg )3524101629L,      (ulg )2768942443L, 
        -: 6307:        (ulg )901097722L,      (ulg )1119000684L,      (ulg )3686517206L,      (ulg )2898065728L, 
        -: 6308:        (ulg )853044451L,      (ulg )1172266101L,      (ulg )3705015759L,      (ulg )2882616665L, 
        -: 6309:        (ulg )651767980L,      (ulg )1373503546L,      (ulg )3369554304L,      (ulg )3218104598L, 
        -: 6310:        (ulg )565507253L,      (ulg )1454621731L,      (ulg )3485111705L,      (ulg )3099436303L, 
        -: 6311:        (ulg )671266974L,      (ulg )1594198024L,      (ulg )3322730930L,      (ulg )2970347812L, 
        -: 6312:        (ulg )795835527L,      (ulg )1483230225L,      (ulg )3244367275L,      (ulg )3060149565L, 
        -: 6313:        (ulg )1994146192L,      (ulg )31158534L,      (ulg )2563907772L,      (ulg )4023717930L, 
        -: 6314:        (ulg )1907459465L,      (ulg )112637215L,      (ulg )2680153253L,      (ulg )3904427059L, 
        -: 6315:        (ulg )2013776290L,      (ulg )251722036L,      (ulg )2517215374L,      (ulg )3775830040L, 
        -: 6316:        (ulg )2137656763L,      (ulg )141376813L,      (ulg )2439277719L,      (ulg )3865271297L, 
        -: 6317:        (ulg )1802195444L,      (ulg )476864866L,      (ulg )2238001368L,      (ulg )4066508878L, 
        -: 6318:        (ulg )1812370925L,      (ulg )453092731L,      (ulg )2181625025L,      (ulg )4111451223L, 
        -: 6319:        (ulg )1706088902L,      (ulg )314042704L,      (ulg )2344532202L,      (ulg )4240017532L, 
        -: 6320:        (ulg )1658658271L,      (ulg )366619977L,      (ulg )2362670323L,      (ulg )4224994405L, 
        -: 6321:        (ulg )1303535960L,      (ulg )984961486L,      (ulg )2747007092L,      (ulg )3569037538L, 
        -: 6322:        (ulg )1256170817L,      (ulg )1037604311L,      (ulg )2765210733L,      (ulg )3554079995L, 
        -: 6323:        (ulg )1131014506L,      (ulg )879679996L,      (ulg )2909243462L,      (ulg )3663771856L, 
        -: 6324:        (ulg )1141124467L,      (ulg )855842277L,      (ulg )2852801631L,      (ulg )3708648649L, 
        -: 6325:        (ulg )1342533948L,      (ulg )654459306L,      (ulg )3188396048L,      (ulg )3373015174L, 
        -: 6326:        (ulg )1466479909L,      (ulg )544179635L,      (ulg )3110523913L,      (ulg )3462522015L, 
        -: 6327:        (ulg )1591671054L,      (ulg )702138776L,      (ulg )2966460450L,      (ulg )3352799412L, 
        -: 6328:        (ulg )1504918807L,      (ulg )783551873L,      (ulg )3082640443L,      (ulg )3233442989L, 
        -: 6329:        (ulg )3988292384L,      (ulg )2596254646L,      (ulg )62317068L,      (ulg )1957810842L, 
        -: 6330:        (ulg )3939845945L,      (ulg )2647816111L,      (ulg )81470997L,      (ulg )1943803523L, 
        -: 6331:        (ulg )3814918930L,      (ulg )2489596804L,      (ulg )225274430L,      (ulg )2053790376L, 
        -: 6332:        (ulg )3826175755L,      (ulg )2466906013L,      (ulg )167816743L,      (ulg )2097651377L, 
        -: 6333:        (ulg )4027552580L,      (ulg )2265490386L,      (ulg )503444072L,      (ulg )1762050814L, 
        -: 6334:        (ulg )4150417245L,      (ulg )2154129355L,      (ulg )426522225L,      (ulg )1852507879L, 
        -: 6335:        (ulg )4275313526L,      (ulg )2312317920L,      (ulg )282753626L,      (ulg )1742555852L, 
        -: 6336:        (ulg )4189708143L,      (ulg )2394877945L,      (ulg )397917763L,      (ulg )1622183637L, 
        -: 6337:        (ulg )3604390888L,      (ulg )2714866558L,      (ulg )953729732L,      (ulg )1340076626L, 
        -: 6338:        (ulg )3518719985L,      (ulg )2797360999L,      (ulg )1068828381L,      (ulg )1219638859L, 
        -: 6339:        (ulg )3624741850L,      (ulg )2936675148L,      (ulg )906185462L,      (ulg )1090812512L, 
        -: 6340:        (ulg )3747672003L,      (ulg )2825379669L,      (ulg )829329135L,      (ulg )1181335161L, 
        -: 6341:        (ulg )3412177804L,      (ulg )3160834842L,      (ulg )628085408L,      (ulg )1382605366L, 
        -: 6342:        (ulg )3423369109L,      (ulg )3138078467L,      (ulg )570562233L,      (ulg )1426400815L, 
        -: 6343:        (ulg )3317316542L,      (ulg )2998733608L,      (ulg )733239954L,      (ulg )1555261956L, 
        -: 6344:        (ulg )3268935591L,      (ulg )3050360625L,      (ulg )752459403L,      (ulg )1541320221L, 
        -: 6345:        (ulg )2607071920L,      (ulg )3965973030L,      (ulg )1969922972L,      (ulg )40735498L, 
        -: 6346:        (ulg )2617837225L,      (ulg )3943577151L,      (ulg )1913087877L,      (ulg )83908371L, 
        -: 6347:        (ulg )2512341634L,      (ulg )3803740692L,      (ulg )2075208622L,      (ulg )213261112L, 
        -: 6348:        (ulg )2463272603L,      (ulg )3855990285L,      (ulg )2094854071L,      (ulg )198958881L, 
        -: 6349:        (ulg )2262029012L,      (ulg )4057260610L,      (ulg )1759359992L,      (ulg )534414190L, 
        -: 6350:        (ulg )2176718541L,      (ulg )4139329115L,      (ulg )1873836001L,      (ulg )414664567L, 
        -: 6351:        (ulg )2282248934L,      (ulg )4279200368L,      (ulg )1711684554L,      (ulg )285281116L, 
        -: 6352:        (ulg )2405801727L,      (ulg )4167216745L,      (ulg )1634467795L,      (ulg )376229701L, 
        -: 6353:        (ulg )2685067896L,      (ulg )3608007406L,      (ulg )1308918612L,      (ulg )956543938L, 
        -: 6354:        (ulg )2808555105L,      (ulg )3495958263L,      (ulg )1231636301L,      (ulg )1047427035L, 
        -: 6355:        (ulg )2932959818L,      (ulg )3654703836L,      (ulg )1088359270L,      (ulg )936918000L, 
        -: 6356:        (ulg )2847714899L,      (ulg )3736837829L,      (ulg )1202900863L,      (ulg )817233897L, 
        -: 6357:        (ulg )3183342108L,      (ulg )3401237130L,      (ulg )1404277552L,      (ulg )615818150L, 
        -: 6358:        (ulg )3134207493L,      (ulg )3453421203L,      (ulg )1423857449L,      (ulg )601450431L, 
        -: 6359:        (ulg )3009837614L,      (ulg )3294710456L,      (ulg )1567103746L,      (ulg )711928724L, 
        -: 6360:        (ulg )3020668471L,      (ulg )3272380065L,      (ulg )1510334235L,      (ulg )755167117L};
        -: 6361:static ulg crc  ;
        1: 6362:int zip(int in , int out ) 
        -: 6363:{ 
        -: 6364:  uch flags___0 ;
        -: 6365:  ush attr ;
        -: 6366:  ush deflate_flags ;
        -: 6367:  unsigned int tmp ;
        -: 6368:  unsigned int tmp___0 ;
        -: 6369:  unsigned int tmp___1 ;
        -: 6370:  unsigned int tmp___2 ;
        -: 6371:  unsigned int tmp___3 ;
        -: 6372:  ulg tmp___4 ;
        -: 6373:  unsigned int tmp___5 ;
        -: 6374:  ulg tmp___6 ;
        -: 6375:  unsigned int tmp___7 ;
        -: 6376:  ulg tmp___8 ;
        -: 6377:  unsigned int tmp___9 ;
        -: 6378:  ulg tmp___10 ;
        -: 6379:  unsigned int tmp___11 ;
        -: 6380:  ulg tmp___12 ;
        -: 6381:  unsigned int tmp___13 ;
        -: 6382:  ulg tmp___14 ;
        -: 6383:  unsigned int tmp___15 ;
        -: 6384:  ulg tmp___16 ;
        -: 6385:  unsigned int tmp___17 ;
        -: 6386:  ulg tmp___18 ;
        -: 6387:  unsigned int tmp___19 ;
        -: 6388:  unsigned int tmp___20 ;
        -: 6389:  char *p ;
        -: 6390:  char *tmp___21 ;
        -: 6391:  unsigned int tmp___22 ;
        -: 6392:  char *tmp___23 ;
        -: 6393:  unsigned int tmp___24 ;
        -: 6394:  unsigned int tmp___25 ;
        -: 6395:  unsigned int tmp___26 ;
        -: 6396:  unsigned int tmp___27 ;
        -: 6397:  unsigned int tmp___28 ;
        -: 6398:  unsigned int tmp___29 ;
        -: 6399:  unsigned int tmp___30 ;
        -: 6400:  unsigned int tmp___31 ;
        -: 6401:  unsigned int tmp___32 ;
        -: 6402:  unsigned int tmp___33 ;
        -: 6403:  unsigned int tmp___34 ;
        -: 6404:  unsigned int tmp___35 ;
        -: 6405:  unsigned int tmp___36 ;
        -: 6406:  unsigned int tmp___37 ;
        -: 6407:  unsigned int tmp___38 ;
        -: 6408:  unsigned int tmp___39 ;
        -: 6409:
        -: 6410:  {
        1: 6411:  flags___0 = (uch )0;
        1: 6412:  attr = (ush )0;
        1: 6413:  deflate_flags = (ush )0;
        1: 6414:  ifd = in;
        1: 6415:  ofd = out;
        1: 6416:  outcnt = 0U;
        1: 6417:  method = 8;
        1: 6418:  tmp = outcnt;
        1: 6419:  outcnt ++;
        1: 6420:  outbuf[tmp] = (uch )*("\037\213" + 0);
        1: 6421:  if (outcnt == 16384U) {
        -: 6422:     
        -: 6423:
    #####: 6424:    flush_outbuf();
        -: 6425:     
        -: 6426:
    #####: 6427:  }
        1: 6428:  tmp___0 = outcnt;
        1: 6429:  outcnt ++;
        1: 6430:  outbuf[tmp___0] = (uch )*("\037\213" + 1);
        1: 6431:  if (outcnt == 16384U) {
        -: 6432:     
        -: 6433:
    #####: 6434:    flush_outbuf();
        -: 6435:     
        -: 6436:
    #####: 6437:  }
        1: 6438:  tmp___1 = outcnt;
        1: 6439:  outcnt ++;
        1: 6440:  outbuf[tmp___1] = (uch )8;
        1: 6441:  if (outcnt == 16384U) {
        -: 6442:     
        -: 6443:
    #####: 6444:    flush_outbuf();
        -: 6445:     
        -: 6446:
    #####: 6447:  }
        1: 6448:  if (save_orig_name) {
        1: 6449:    flags___0 = (uch )((int )flags___0 | 8);
        1: 6450:  }
        1: 6451:  tmp___2 = outcnt;
        1: 6452:  outcnt ++;
        1: 6453:  outbuf[tmp___2] = flags___0;
        1: 6454:  if (outcnt == 16384U) {
        -: 6455:     
        -: 6456:
    #####: 6457:    flush_outbuf();
        -: 6458:     
        -: 6459:
    #####: 6460:  }
        1: 6461:  time_stamp = (time_t )0;
        1: 6462:  if (outcnt < 16382U) {
        1: 6463:    tmp___3 = outcnt;
        1: 6464:    outcnt ++;
        1: 6465:    if (time_stamp == (time_stamp & 4294967295L)) {
        1: 6466:      tmp___4 = (ulg )time_stamp;
        1: 6467:    } else {
    #####: 6468:      tmp___4 = (ulg )0;
        -: 6469:    }
        1: 6470:    outbuf[tmp___3] = (uch )((tmp___4 & 65535UL) & 255UL);
        1: 6471:    tmp___5 = outcnt;
        1: 6472:    outcnt ++;
        1: 6473:    if (time_stamp == (time_stamp & 4294967295L)) {
        1: 6474:      tmp___6 = (ulg )time_stamp;
        1: 6475:    } else {
    #####: 6476:      tmp___6 = (ulg )0;
        -: 6477:    }
        1: 6478:    outbuf[tmp___5] = (uch )((int )((ush )(tmp___6 & 65535UL)) >> 8);
        1: 6479:  } else {
    #####: 6480:    tmp___7 = outcnt;
    #####: 6481:    outcnt ++;
    #####: 6482:    if (time_stamp == (time_stamp & 4294967295L)) {
    #####: 6483:      tmp___8 = (ulg )time_stamp;
    #####: 6484:    } else {
    #####: 6485:      tmp___8 = (ulg )0;
        -: 6486:    }
    #####: 6487:    outbuf[tmp___7] = (uch )((tmp___8 & 65535UL) & 255UL);
    #####: 6488:    if (outcnt == 16384U) {
        -: 6489:       
        -: 6490:
    #####: 6491:      flush_outbuf();
        -: 6492:       
        -: 6493:
    #####: 6494:    }
    #####: 6495:    tmp___9 = outcnt;
    #####: 6496:    outcnt ++;
    #####: 6497:    if (time_stamp == (time_stamp & 4294967295L)) {
    #####: 6498:      tmp___10 = (ulg )time_stamp;
    #####: 6499:    } else {
    #####: 6500:      tmp___10 = (ulg )0;
        -: 6501:    }
    #####: 6502:    outbuf[tmp___9] = (uch )((int )((ush )(tmp___10 & 65535UL)) >> 8);
    #####: 6503:    if (outcnt == 16384U) {
        -: 6504:       
        -: 6505:
    #####: 6506:      flush_outbuf();
        -: 6507:       
        -: 6508:
    #####: 6509:    }
        -: 6510:  }
        1: 6511:  if (outcnt < 16382U) {
        1: 6512:    tmp___11 = outcnt;
        1: 6513:    outcnt ++;
        1: 6514:    if (time_stamp == (time_stamp & 4294967295L)) {
        1: 6515:      tmp___12 = (ulg )time_stamp;
        1: 6516:    } else {
    #####: 6517:      tmp___12 = (ulg )0;
        -: 6518:    }
        1: 6519:    outbuf[tmp___11] = (uch )((tmp___12 >> 16) & 255UL);
        1: 6520:    tmp___13 = outcnt;
        1: 6521:    outcnt ++;
        1: 6522:    if (time_stamp == (time_stamp & 4294967295L)) {
        1: 6523:      tmp___14 = (ulg )time_stamp;
        1: 6524:    } else {
    #####: 6525:      tmp___14 = (ulg )0;
        -: 6526:    }
        1: 6527:    outbuf[tmp___13] = (uch )((int )((ush )(tmp___14 >> 16)) >> 8);
        1: 6528:  } else {
    #####: 6529:    tmp___15 = outcnt;
    #####: 6530:    outcnt ++;
    #####: 6531:    if (time_stamp == (time_stamp & 4294967295L)) {
    #####: 6532:      tmp___16 = (ulg )time_stamp;
    #####: 6533:    } else {
    #####: 6534:      tmp___16 = (ulg )0;
        -: 6535:    }
    #####: 6536:    outbuf[tmp___15] = (uch )((tmp___16 >> 16) & 255UL);
    #####: 6537:    if (outcnt == 16384U) {
        -: 6538:       
        -: 6539:
    #####: 6540:      flush_outbuf();
        -: 6541:       
        -: 6542:
    #####: 6543:    }
    #####: 6544:    tmp___17 = outcnt;
    #####: 6545:    outcnt ++;
    #####: 6546:    if (time_stamp == (time_stamp & 4294967295L)) {
    #####: 6547:      tmp___18 = (ulg )time_stamp;
    #####: 6548:    } else {
    #####: 6549:      tmp___18 = (ulg )0;
        -: 6550:    }
    #####: 6551:    outbuf[tmp___17] = (uch )((int )((ush )(tmp___18 >> 16)) >> 8);
    #####: 6552:    if (outcnt == 16384U) {
        -: 6553:       
        -: 6554:
    #####: 6555:      flush_outbuf();
        -: 6556:       
        -: 6557:
    #####: 6558:    }
        -: 6559:  }
        -: 6560:  {
        1: 6561:  crc = updcrc((uch *)0, 0U);
        1: 6562:  bi_init(out);
        1: 6563:  ct_init(& attr, & method);
        1: 6564:  lm_init(level, & deflate_flags);
        1: 6565:  tmp___19 = outcnt;
        1: 6566:  outcnt ++;
        1: 6567:  outbuf[tmp___19] = (uch )deflate_flags;
        -: 6568:  }
        1: 6569:  if (outcnt == 16384U) {
        -: 6570:     
        -: 6571:
    #####: 6572:    flush_outbuf();
        -: 6573:     
        -: 6574:
    #####: 6575:  }
        1: 6576:  tmp___20 = outcnt;
        1: 6577:  outcnt ++;
        1: 6578:  outbuf[tmp___20] = (uch )3;
        1: 6579:  if (outcnt == 16384U) {
        -: 6580:     
        -: 6581:
    #####: 6582:    flush_outbuf();
        -: 6583:     
        -: 6584:
    #####: 6585:  }
        1: 6586:  if (save_orig_name) {
        -: 6587:    {
        1: 6588:    tmp___21 = base_name(ifname);
        1: 6589:    p = tmp___21;
        -: 6590:    }
        -: 6591:    {
        7: 6592:    while (1) {
        -: 6593:                                       ;
        7: 6594:      tmp___22 = outcnt;
        7: 6595:      outcnt ++;
        7: 6596:      outbuf[tmp___22] = (uch )*p;
        7: 6597:      if (outcnt == 16384U) {
        -: 6598:         
        -: 6599:
    #####: 6600:        flush_outbuf();
        -: 6601:         
        -: 6602:
    #####: 6603:      }
        7: 6604:      tmp___23 = p;
        7: 6605:      p ++;
        7: 6606:      if (! *tmp___23) {
        1: 6607:        goto while_break;
        -: 6608:      }
        -: 6609:    }
        -: 6610:    while_break: /* CIL Label */ ;
        -: 6611:    }
        1: 6612:  }
        -: 6613:  {
        1: 6614:  header_bytes = (off_t )outcnt;
        1: 6615:  deflate();
        -: 6616:  }
        1: 6617:  if (outcnt < 16382U) {
        1: 6618:    tmp___24 = outcnt;
        1: 6619:    outcnt ++;
        1: 6620:    outbuf[tmp___24] = (uch )((crc & 65535UL) & 255UL);
        1: 6621:    tmp___25 = outcnt;
        1: 6622:    outcnt ++;
        1: 6623:    outbuf[tmp___25] = (uch )((int )((ush )(crc & 65535UL)) >> 8);
        1: 6624:  } else {
    #####: 6625:    tmp___26 = outcnt;
    #####: 6626:    outcnt ++;
    #####: 6627:    outbuf[tmp___26] = (uch )((crc & 65535UL) & 255UL);
    #####: 6628:    if (outcnt == 16384U) {
        -: 6629:       
        -: 6630:
    #####: 6631:      flush_outbuf();
        -: 6632:       
        -: 6633:
    #####: 6634:    }
    #####: 6635:    tmp___27 = outcnt;
    #####: 6636:    outcnt ++;
    #####: 6637:    outbuf[tmp___27] = (uch )((int )((ush )(crc & 65535UL)) >> 8);
    #####: 6638:    if (outcnt == 16384U) {
        -: 6639:       
        -: 6640:
    #####: 6641:      flush_outbuf();
        -: 6642:       
        -: 6643:
    #####: 6644:    }
        -: 6645:  }
        1: 6646:  if (outcnt < 16382U) {
        1: 6647:    tmp___28 = outcnt;
        1: 6648:    outcnt ++;
        1: 6649:    outbuf[tmp___28] = (uch )((crc >> 16) & 255UL);
        1: 6650:    tmp___29 = outcnt;
        1: 6651:    outcnt ++;
        1: 6652:    outbuf[tmp___29] = (uch )((int )((ush )(crc >> 16)) >> 8);
        1: 6653:  } else {
    #####: 6654:    tmp___30 = outcnt;
    #####: 6655:    outcnt ++;
    #####: 6656:    outbuf[tmp___30] = (uch )((crc >> 16) & 255UL);
    #####: 6657:    if (outcnt == 16384U) {
        -: 6658:       
        -: 6659:
    #####: 6660:      flush_outbuf();
        -: 6661:       
        -: 6662:
    #####: 6663:    }
    #####: 6664:    tmp___31 = outcnt;
    #####: 6665:    outcnt ++;
    #####: 6666:    outbuf[tmp___31] = (uch )((int )((ush )(crc >> 16)) >> 8);
    #####: 6667:    if (outcnt == 16384U) {
        -: 6668:       
        -: 6669:
    #####: 6670:      flush_outbuf();
        -: 6671:       
        -: 6672:
    #####: 6673:    }
        -: 6674:  }
        1: 6675:  if (outcnt < 16382U) {
        1: 6676:    tmp___32 = outcnt;
        1: 6677:    outcnt ++;
        1: 6678:    outbuf[tmp___32] = (uch )(((ulg )bytes_in & 65535UL) & 255UL);
        1: 6679:    tmp___33 = outcnt;
        1: 6680:    outcnt ++;
        1: 6681:    outbuf[tmp___33] = (uch )((int )((ush )((ulg )bytes_in & 65535UL)) >> 8);
        1: 6682:  } else {
    #####: 6683:    tmp___34 = outcnt;
    #####: 6684:    outcnt ++;
    #####: 6685:    outbuf[tmp___34] = (uch )(((ulg )bytes_in & 65535UL) & 255UL);
    #####: 6686:    if (outcnt == 16384U) {
        -: 6687:       
        -: 6688:
    #####: 6689:      flush_outbuf();
        -: 6690:       
        -: 6691:
    #####: 6692:    }
    #####: 6693:    tmp___35 = outcnt;
    #####: 6694:    outcnt ++;
    #####: 6695:    outbuf[tmp___35] = (uch )((int )((ush )((ulg )bytes_in & 65535UL)) >> 8);
    #####: 6696:    if (outcnt == 16384U) {
        -: 6697:       
        -: 6698:
    #####: 6699:      flush_outbuf();
        -: 6700:       
        -: 6701:
    #####: 6702:    }
        -: 6703:  }
        1: 6704:  if (outcnt < 16382U) {
        1: 6705:    tmp___36 = outcnt;
        1: 6706:    outcnt ++;
        1: 6707:    outbuf[tmp___36] = (uch )(((ulg )bytes_in >> 16) & 255UL);
        1: 6708:    tmp___37 = outcnt;
        1: 6709:    outcnt ++;
        1: 6710:    outbuf[tmp___37] = (uch )((int )((ush )((ulg )bytes_in >> 16)) >> 8);
        1: 6711:  } else {
    #####: 6712:    tmp___38 = outcnt;
    #####: 6713:    outcnt ++;
    #####: 6714:    outbuf[tmp___38] = (uch )(((ulg )bytes_in >> 16) & 255UL);
    #####: 6715:    if (outcnt == 16384U) {
        -: 6716:       
        -: 6717:
    #####: 6718:      flush_outbuf();
        -: 6719:       
        -: 6720:
    #####: 6721:    }
    #####: 6722:    tmp___39 = outcnt;
    #####: 6723:    outcnt ++;
    #####: 6724:    outbuf[tmp___39] = (uch )((int )((ush )((ulg )bytes_in >> 16)) >> 8);
    #####: 6725:    if (outcnt == 16384U) {
        -: 6726:       
        -: 6727:
    #####: 6728:      flush_outbuf();
        -: 6729:       
        -: 6730:
    #####: 6731:    }
        -: 6732:  }
        -: 6733:  {
        1: 6734:  header_bytes = (off_t )((unsigned long )header_bytes + 2UL * sizeof(long ));
        1: 6735:  flush_outbuf();
        -: 6736:  }
        1: 6737:  return (0);
        -: 6738:}
        -: 6739:}
    11568: 6740:int file_read(char *buf , unsigned int size ) 
        -: 6741:{ 
        -: 6742:  unsigned int len ;
        -: 6743:  ssize_t tmp ;
        -: 6744:
        -: 6745:  {
        -: 6746:  {
    11568: 6747:  tmp = read(ifd, (void *)buf, (size_t )size);
    11568: 6748:  len = (unsigned int )tmp;
        -: 6749:  }
    11568: 6750:  if (len == 0U) {
    11566: 6751:    return ((int )len);
        -: 6752:  }
        2: 6753:  if (len == 4294967295U) {
        -: 6754:    {
    #####: 6755:    read_error();
        -: 6756:    }
    #####: 6757:    return (-1);
        -: 6758:  }
        -: 6759:  {
        2: 6760:  crc = updcrc((uch *)buf, len);
        2: 6761:  bytes_in += (off_t )len;
        -: 6762:  }
        2: 6763:  return ((int )len);
        -: 6764:}
    11568: 6765:}
        -: 6766:static char *license_msg[7]  = {      (char *)"Copyright 1999 Free Software Foundation",      (char *)"Copyright 1992-1993 Jean-loup Gailly",      (char *)"This program comes with ABSOLUTELY NO WARRANTY.",      (char *)"You may redistribute copies of this program", 
        -: 6767:        (char *)"under the terms of the GNU General Public License.",      (char *)"For more information about these matters, see the file named COPYING.",      (char *)0};
        -: 6768:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) ctime)(time_t const   *__timer ) ;
        -: 6769:extern DIR *( __attribute__((__nonnull__(1))) opendir)(char const   *__name ) ;
        -: 6770:extern int ( __attribute__((__nonnull__(1))) closedir)(DIR *__dirp ) ;
        -: 6771:extern struct dirent *( __attribute__((__nonnull__(1))) readdir)(DIR *__dirp ) ;
        -: 6772:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) utime)(char const   *__file ,
        -: 6773:                                                                                            struct utimbuf  const  *__file_times ) ;
        -: 6774:int ascii  =    0;
        -: 6775:int to_stdout  =    0;
        -: 6776:int decompress  =    0;
        -: 6777:int force  =    0;
        -: 6778:int no_name  =    -1;
        -: 6779:int no_time  =    -1;
        -: 6780:int recursive  =    0;
        -: 6781:int list  =    0;
        -: 6782:int verbose  =    0;
        -: 6783:int quiet  =    0;
        -: 6784:int do_lzw  =    0;
        -: 6785:int test  =    0;
        -: 6786:int foreground  ;
        -: 6787:int maxbits  =    16;
        -: 6788:int method  =    8;
        -: 6789:int level  =    6;
        -: 6790:int exit_code  =    0;
        -: 6791:int last_member  ;
        -: 6792:int part_nb  ;
        -: 6793:char *env  ;
        -: 6794:char **args  =    (char **)((void *)0);
        -: 6795:char *z_suffix  ;
        -: 6796:int z_len  ;
        -: 6797:off_t total_in  ;
        -: 6798:off_t total_out  ;
        -: 6799:int remove_ofname  =    0;
        -: 6800:struct stat istat  ;
        -: 6801:struct option longopts[24]  = 
        -: 6802:  {      {"ascii", 0, (int *)0, 'a'}, 
        -: 6803:        {"to-stdout", 0, (int *)0, 'c'}, 
        -: 6804:        {"stdout", 0, (int *)0, 'c'}, 
        -: 6805:        {"decompress", 0, (int *)0, 'd'}, 
        -: 6806:        {"uncompress", 0, (int *)0, 'd'}, 
        -: 6807:        {"force", 0, (int *)0, 'f'}, 
        -: 6808:        {"help", 0, (int *)0, 'h'}, 
        -: 6809:        {"list", 0, (int *)0, 'l'}, 
        -: 6810:        {"license", 0, (int *)0, 'L'}, 
        -: 6811:        {"no-name", 0, (int *)0, 'n'}, 
        -: 6812:        {"name", 0, (int *)0, 'N'}, 
        -: 6813:        {"quiet", 0, (int *)0, 'q'}, 
        -: 6814:        {"silent", 0, (int *)0, 'q'}, 
        -: 6815:        {"recursive", 0, (int *)0, 'r'}, 
        -: 6816:        {"suffix", 1, (int *)0, 'S'}, 
        -: 6817:        {"test", 0, (int *)0, 't'}, 
        -: 6818:        {"no-time", 0, (int *)0, 'T'}, 
        -: 6819:        {"verbose", 0, (int *)0, 'v'}, 
        -: 6820:        {"version", 0, (int *)0, 'V'}, 
        -: 6821:        {"fast", 0, (int *)0, '1'}, 
        -: 6822:        {"best", 0, (int *)0, '9'}, 
        -: 6823:        {"lzw", 0, (int *)0, 'Z'}, 
        -: 6824:        {"bits", 1, (int *)0, 'b'}, 
        -: 6825:        {(char const   *)0, 0, (int *)0, 0}};
        -: 6826:static void usage(void) ;
        -: 6827:static void help(void) ;
        -: 6828:static void license(void) ;
        -: 6829:static void version(void) ;
        -: 6830:static int input_eof(void) ;
        -: 6831:static void treat_stdin(void) ;
        -: 6832:static void treat_file(char *iname ) ;
        -: 6833:static int create_outfile(void) ;
        -: 6834:static int do_stat(char *name , struct stat *sbuf ) ;
        -: 6835:static char *get_suffix(char *name ) ;
        -: 6836:static int get_istat(char *iname , struct stat *sbuf ) ;
        -: 6837:static int make_ofname(void) ;
        -: 6838:static int same_file(struct stat *stat1 , struct stat *stat2 ) ;
        -: 6839:static int name_too_long(char *name , struct stat *statb ) ;
        -: 6840:static void shorten_name(char *name ) ;
        -: 6841:static int get_method(int in ) ;
        -: 6842:static void do_list(int ifd___0 , int method___0 ) ;
        -: 6843:static int check_ofname(void) ;
        -: 6844:static void copy_stat(struct stat *ifstat ) ;
        -: 6845:static void do_exit(int exitcode ) ;
        -: 6846:int main(int argc , char **argv ) ;
        -: 6847:int (*work)(int infile , int outfile )  =    & zip;
        -: 6848:static void treat_dir(char *dir ) ;
        -: 6849:static void reset_times(char *name , struct stat *statb ) ;
    #####: 6850:static void usage(void) 
        -: 6851:{ 
        -: 6852:
        -: 6853:
        -: 6854:   
        -: 6855:
        -: 6856:  {
    #####: 6857:  printf((char const   * __restrict  )"usage: %s [-%scdfhlLnN%stvV19] [-S suffix] [file ...]\n",
    #####: 6858:         progname, "", "r");
        -: 6859:  }
    #####: 6860:  return;
        -: 6861: 
        -: 6862:
        -: 6863:}
        -: 6864:static char *help_msg[19]  = 
        -: 6865:  {      (char *)" -c --stdout      write on standard output, keep original files unchanged",      (char *)" -d --decompress  decompress",      (char *)" -f --force       force overwrite of output file and compress links",      (char *)" -h --help        give this help", 
        -: 6866:        (char *)" -l --list        list compressed file contents",      (char *)" -L --license     display software license",      (char *)" -n --no-name     do not save or restore the original name and time stamp",      (char *)" -N --name        save or restore the original name and time stamp", 
        -: 6867:        (char *)" -q --quiet       suppress all warnings",      (char *)" -r --recursive   operate recursively on directories",      (char *)" -S .suf  --suffix .suf     use suffix .suf on compressed files",      (char *)" -t --test        test compressed file integrity", 
        -: 6868:        (char *)" -v --verbose     verbose mode",      (char *)" -V --version     display version number",      (char *)" -1 --fast        compress faster",      (char *)" -9 --best        compress better", 
        -: 6869:        (char *)" file...          files to (de)compress. If none given, use standard input.",      (char *)"Report bugs to <bug-gzip@gnu.org>.",      (char *)0};
    #####: 6870:static void help(void) 
        -: 6871:{ 
        -: 6872:  char **p ;
        -: 6873:  char **tmp ;
        -: 6874:
        -: 6875:  {
        -: 6876:  {
    #####: 6877:  p = help_msg;
    #####: 6878:  printf((char const   * __restrict  )"%s %s\n(%s)\n", progname, "1.3", "1999-12-21");
    #####: 6879:  usage();
        -: 6880:  }
        -: 6881:  {
    #####: 6882:  while (1) {
        -: 6883:                                     ;
    #####: 6884:    if (! *p) {
    #####: 6885:      goto while_break;
        -: 6886:    }
        -: 6887:    {
    #####: 6888:    tmp = p;
    #####: 6889:    p ++;
    #####: 6890:    printf((char const   * __restrict  )"%s\n", *tmp);
        -: 6891:    }
        -: 6892:  }
        -: 6893:  while_break: /* CIL Label */ ;
        -: 6894:  }
    #####: 6895:  return;
        -: 6896:}
        -: 6897:}
    #####: 6898:static void license(void) 
        -: 6899:{ 
        -: 6900:  char **p ;
        -: 6901:  char **tmp ;
        -: 6902:
        -: 6903:  {
        -: 6904:  {
    #####: 6905:  p = license_msg;
    #####: 6906:  printf((char const   * __restrict  )"%s %s\n(%s)\n", progname, "1.3", "1999-12-21");
        -: 6907:  }
        -: 6908:  {
    #####: 6909:  while (1) {
        -: 6910:                                     ;
    #####: 6911:    if (! *p) {
    #####: 6912:      goto while_break;
        -: 6913:    }
        -: 6914:    {
    #####: 6915:    tmp = p;
    #####: 6916:    p ++;
    #####: 6917:    printf((char const   * __restrict  )"%s\n", *tmp);
        -: 6918:    }
        -: 6919:  }
        -: 6920:  while_break: /* CIL Label */ ;
        -: 6921:  }
    #####: 6922:  return;
        -: 6923:}
        -: 6924:}
    #####: 6925:static void version(void) 
        -: 6926:{ 
        -: 6927:
        -: 6928:
        -: 6929:   
        -: 6930:
        -: 6931:  {
    #####: 6932:  license();
    #####: 6933:  printf((char const   * __restrict  )"Compilation options:\n%s %s ", "DIRENT", "UTIME");
    #####: 6934:  printf((char const   * __restrict  )"STDC_HEADERS ");
    #####: 6935:  printf((char const   * __restrict  )"HAVE_UNISTD_H ");
    #####: 6936:  printf((char const   * __restrict  )"HAVE_MEMORY_H ");
    #####: 6937:  printf((char const   * __restrict  )"HAVE_STRING_H ");
    #####: 6938:  printf((char const   * __restrict  )"\n");
    #####: 6939:  printf((char const   * __restrict  )"Written by Jean-loup Gailly.\n");
        -: 6940:  }
    #####: 6941:  return;
        -: 6942: 
        -: 6943:
        -: 6944:}
    #####: 6945:static void progerror(char *string ) 
        -: 6946:{ 
        -: 6947:  int e ;
        -: 6948:  int *tmp ;
        -: 6949:  int *tmp___0 ;
        -: 6950:
        -: 6951:  {
        -: 6952:  {
    #####: 6953:  tmp = __errno_location();
    #####: 6954:  e = *tmp;
    #####: 6955:  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: ", progname);
    #####: 6956:  tmp___0 = __errno_location();
    #####: 6957:  *tmp___0 = e;
    #####: 6958:  perror((char const   *)string);
    #####: 6959:  exit_code = 1;
        -: 6960:  }
    #####: 6961:  return;
        -: 6962:}
        -: 6963:}
        1: 6964:int main(int argc , char **argv ) 
        -: 6965:{ 
        -: 6966:  int file_count ;
        -: 6967:  int proglen ;
        -: 6968:  int optc ;
        -: 6969:  size_t tmp ;
        -: 6970:  int tmp___0 ;
        -: 6971:  void (*tmp___1)(int  ) ;
        -: 6972:  void (*tmp___2)(int  ) ;
        -: 6973:  void (*tmp___3)(int  ) ;
        -: 6974:  int tmp___4 ;
        -: 6975:  int tmp___5 ;
        -: 6976:  int tmp___6 ;
        -: 6977:  int tmp___7 ;
        -: 6978:  size_t tmp___8 ;
        -: 6979:  size_t tmp___9 ;
        -: 6980:  void (*tmp___10)(int  ) ;
        -: 6981:  int tmp___11 ;
        -: 6982:  int tmp___12 ;
        -: 6983:
        -: 6984:  {
        -: 6985:  {
        1: 6986:  progname = base_name(*(argv + 0));
        1: 6987:  tmp = strlen((char const   *)progname);
        1: 6988:  proglen = (int )tmp;
        -: 6989:  }
        1: 6990:  if (proglen > 4) {
        -: 6991:    {
        1: 6992:    tmp___0 = strcmp((char const   *)((progname + proglen) - 4), ".exe");
        -: 6993:    }
        1: 6994:    if (tmp___0 == 0) {
    #####: 6995:      *(progname + (proglen - 4)) = (char )'\000';
    #####: 6996:    }
        1: 6997:  }
        -: 6998:  {
        1: 6999:  env = add_envopt(& argc, & argv, (char *)"GZIP");
        -: 7000:  }
        1: 7001:  if ((unsigned long )env != (unsigned long )((void *)0)) {
    #####: 7002:    args = argv;
    #####: 7003:  }
        -: 7004:  {
        1: 7005:  tmp___1 = signal(2, (void (*)(int  ))1);
        1: 7006:  foreground = (unsigned long )tmp___1 != (unsigned long )((void (*)(int  ))1);
        -: 7007:  }
        1: 7008:  if (foreground) {
        -: 7009:     
        -: 7010:
        1: 7011:    signal(2, (void (*)(int  ))(& abort_gzip));
        -: 7012:     
        -: 7013:
        1: 7014:  }
        -: 7015:  {
        1: 7016:  tmp___2 = signal(15, (void (*)(int  ))1);
        -: 7017:  }
        1: 7018:  if ((unsigned long )tmp___2 != (unsigned long )((void (*)(int  ))1)) {
        -: 7019:     
        -: 7020:
        1: 7021:    signal(15, (void (*)(int  ))(& abort_gzip));
        -: 7022:     
        -: 7023:
        1: 7024:  }
        -: 7025:  {
        1: 7026:  tmp___3 = signal(1, (void (*)(int  ))1);
        -: 7027:  }
        1: 7028:  if ((unsigned long )tmp___3 != (unsigned long )((void (*)(int  ))1)) {
        -: 7029:     
        -: 7030:
        1: 7031:    signal(1, (void (*)(int  ))(& abort_gzip));
        -: 7032:     
        -: 7033:
        1: 7034:  }
        -: 7035:  {
        1: 7036:  tmp___6 = strncmp((char const   *)progname, "un", (size_t )2);
        -: 7037:  }
        1: 7038:  if (tmp___6 == 0) {
    #####: 7039:    decompress = 1;
    #####: 7040:  } else {
        -: 7041:    {
        1: 7042:    tmp___7 = strncmp((char const   *)progname, "gun", (size_t )3);
        -: 7043:    }
        1: 7044:    if (tmp___7 == 0) {
    #####: 7045:      decompress = 1;
    #####: 7046:    } else {
        -: 7047:      {
        1: 7048:      tmp___4 = strcmp((char const   *)(progname + 1), "cat");
        -: 7049:      }
        1: 7050:      if (tmp___4 == 0) {
    #####: 7051:        to_stdout = 1;
    #####: 7052:        decompress = to_stdout;
    #####: 7053:      } else {
        -: 7054:        {
        1: 7055:        tmp___5 = strcmp((char const   *)progname, "gzcat");
        -: 7056:        }
        1: 7057:        if (tmp___5 == 0) {
    #####: 7058:          to_stdout = 1;
    #####: 7059:          decompress = to_stdout;
    #####: 7060:        }
        -: 7061:      }
        -: 7062:    }
        -: 7063:  }
        -: 7064:  {
        1: 7065:  z_suffix = (char *)".gz";
        1: 7066:  tmp___8 = strlen((char const   *)z_suffix);
        1: 7067:  z_len = (int )tmp___8;
        -: 7068:  }
        -: 7069:  {
        2: 7070:  while (1) {
        -: 7071:                                     ;
        -: 7072:    {
        2: 7073:    optc = getopt_long(argc, (char * const  *)argv, "ab:cdfhH?lLmMnNqrS:tvVZ123456789",
        -: 7074:                       (struct option  const  *)(longopts), (int *)0);
        -: 7075:    }
        2: 7076:    if (! (optc != -1)) {
        1: 7077:      goto while_break;
        -: 7078:    }
        -: 7079:    {
        1: 7080:    if (optc == 97) {
    #####: 7081:      goto case_97;
        -: 7082:    }
        1: 7083:    if (optc == 98) {
    #####: 7084:      goto case_98;
        -: 7085:    }
        1: 7086:    if (optc == 99) {
        1: 7087:      goto case_99;
        -: 7088:    }
    #####: 7089:    if (optc == 100) {
    #####: 7090:      goto case_100;
        -: 7091:    }
    #####: 7092:    if (optc == 102) {
    #####: 7093:      goto case_102;
        -: 7094:    }
    #####: 7095:    if (optc == 104) {
    #####: 7096:      goto case_104;
        -: 7097:    }
    #####: 7098:    if (optc == 72) {
    #####: 7099:      goto case_104;
        -: 7100:    }
    #####: 7101:    if (optc == 63) {
    #####: 7102:      goto case_104;
        -: 7103:    }
    #####: 7104:    if (optc == 108) {
    #####: 7105:      goto case_108;
        -: 7106:    }
    #####: 7107:    if (optc == 76) {
    #####: 7108:      goto case_76;
        -: 7109:    }
    #####: 7110:    if (optc == 109) {
    #####: 7111:      goto case_109;
        -: 7112:    }
    #####: 7113:    if (optc == 77) {
    #####: 7114:      goto case_77;
        -: 7115:    }
    #####: 7116:    if (optc == 110) {
    #####: 7117:      goto case_110;
        -: 7118:    }
    #####: 7119:    if (optc == 78) {
    #####: 7120:      goto case_78;
        -: 7121:    }
    #####: 7122:    if (optc == 113) {
    #####: 7123:      goto case_113;
        -: 7124:    }
    #####: 7125:    if (optc == 114) {
    #####: 7126:      goto case_114;
        -: 7127:    }
    #####: 7128:    if (optc == 83) {
    #####: 7129:      goto case_83;
        -: 7130:    }
    #####: 7131:    if (optc == 116) {
    #####: 7132:      goto case_116;
        -: 7133:    }
    #####: 7134:    if (optc == 118) {
    #####: 7135:      goto case_118;
        -: 7136:    }
    #####: 7137:    if (optc == 86) {
    #####: 7138:      goto case_86;
        -: 7139:    }
    #####: 7140:    if (optc == 90) {
    #####: 7141:      goto case_90;
        -: 7142:    }
    #####: 7143:    if (optc == 49) {
    #####: 7144:      goto case_49;
        -: 7145:    }
    #####: 7146:    if (optc == 50) {
    #####: 7147:      goto case_49;
        -: 7148:    }
    #####: 7149:    if (optc == 51) {
    #####: 7150:      goto case_49;
        -: 7151:    }
    #####: 7152:    if (optc == 52) {
    #####: 7153:      goto case_49;
        -: 7154:    }
    #####: 7155:    if (optc == 53) {
    #####: 7156:      goto case_49;
        -: 7157:    }
    #####: 7158:    if (optc == 54) {
    #####: 7159:      goto case_49;
        -: 7160:    }
    #####: 7161:    if (optc == 55) {
    #####: 7162:      goto case_49;
        -: 7163:    }
    #####: 7164:    if (optc == 56) {
    #####: 7165:      goto case_49;
        -: 7166:    }
    #####: 7167:    if (optc == 57) {
    #####: 7168:      goto case_49;
        -: 7169:    }
    #####: 7170:    goto switch_default;
        -: 7171:    case_97: /* CIL Label */ 
    #####: 7172:    ascii = 1;
    #####: 7173:    goto switch_break;
        -: 7174:    case_98: /* CIL Label */ 
        -: 7175:    {
    #####: 7176:    maxbits = atoi((char const   *)optarg);
        -: 7177:    }
    #####: 7178:    goto switch_break;
        -: 7179:    case_99: /* CIL Label */ 
        1: 7180:    to_stdout = 1;
        1: 7181:    goto switch_break;
        -: 7182:    case_100: /* CIL Label */ 
    #####: 7183:    decompress = 1;
    #####: 7184:    goto switch_break;
        -: 7185:    case_102: /* CIL Label */ 
    #####: 7186:    force ++;
    #####: 7187:    goto switch_break;
        -: 7188:    case_104: /* CIL Label */ 
        -: 7189:                             
        -: 7190:                              
        -: 7191:     {
    #####: 7192:    help();
    #####: 7193:    do_exit(0);
        -: 7194:    }
    #####: 7195:    goto switch_break;
        -: 7196:    case_108: /* CIL Label */ 
    #####: 7197:    to_stdout = 1;
    #####: 7198:    decompress = to_stdout;
    #####: 7199:    list = decompress;
    #####: 7200:    goto switch_break;
        -: 7201:    case_76: /* CIL Label */ 
        -: 7202:    {
    #####: 7203:    license();
    #####: 7204:    do_exit(0);
        -: 7205:    }
    #####: 7206:    goto switch_break;
        -: 7207:    case_109: /* CIL Label */ 
    #####: 7208:    no_time = 1;
    #####: 7209:    goto switch_break;
        -: 7210:    case_77: /* CIL Label */ 
    #####: 7211:    no_time = 0;
    #####: 7212:    goto switch_break;
        -: 7213:    case_110: /* CIL Label */ 
    #####: 7214:    no_time = 1;
    #####: 7215:    no_name = no_time;
    #####: 7216:    goto switch_break;
        -: 7217:    case_78: /* CIL Label */ 
    #####: 7218:    no_time = 0;
    #####: 7219:    no_name = no_time;
    #####: 7220:    goto switch_break;
        -: 7221:    case_113: /* CIL Label */ 
    #####: 7222:    quiet = 1;
    #####: 7223:    verbose = 0;
    #####: 7224:    goto switch_break;
        -: 7225:    case_114: /* CIL Label */ 
    #####: 7226:    recursive = 1;
    #####: 7227:    goto switch_break;
        -: 7228:    case_83: /* CIL Label */ 
        -: 7229:    {
    #####: 7230:    tmp___9 = strlen((char const   *)optarg);
    #####: 7231:    z_len = (int )tmp___9;
    #####: 7232:    z_suffix = optarg;
        -: 7233:    }
    #####: 7234:    goto switch_break;
        -: 7235:    case_116: /* CIL Label */ 
    #####: 7236:    to_stdout = 1;
    #####: 7237:    decompress = to_stdout;
    #####: 7238:    test = decompress;
    #####: 7239:    goto switch_break;
        -: 7240:    case_118: /* CIL Label */ 
    #####: 7241:    verbose ++;
    #####: 7242:    quiet = 0;
    #####: 7243:    goto switch_break;
        -: 7244:    case_86: /* CIL Label */ 
        -: 7245:    {
    #####: 7246:    version();
    #####: 7247:    do_exit(0);
        -: 7248:    }
    #####: 7249:    goto switch_break;
        -: 7250:    case_90: /* CIL Label */ 
        -: 7251:    {
    #####: 7252:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: -Z not supported in this version\n",
    #####: 7253:            progname);
    #####: 7254:    usage();
    #####: 7255:    do_exit(1);
        -: 7256:    }
    #####: 7257:    goto switch_break;
        -: 7258:    case_49: /* CIL Label */ 
        -: 7259:                             
        -: 7260:                              
        -: 7261:                              
        -: 7262:                              
        -: 7263:                              
        -: 7264:                              
        -: 7265:                              
        -: 7266:                              
    #####: 7267:     level = optc - 48;
    #####: 7268:    goto switch_break;
        -: 7269:    switch_default: /* CIL Label */ 
        -: 7270:    {
    #####: 7271:    usage();
    #####: 7272:    do_exit(1);
    #####: 7273:    }
        -: 7274:    switch_break: /* CIL Label */ ;
        -: 7275:    }
        -: 7276:  }
        -: 7277:  while_break: /* CIL Label */ ;
        -: 7278:  }
        1: 7279:  if (quiet) {
        -: 7280:    {
    #####: 7281:    tmp___10 = signal(13, (void (*)(int  ))1);
        -: 7282:    }
    #####: 7283:    if ((unsigned long )tmp___10 != (unsigned long )((void (*)(int  ))1)) {
        -: 7284:       
        -: 7285:
    #####: 7286:      signal(13, (void (*)(int  ))(& abort_gzip));
        -: 7287:       
        -: 7288:
    #####: 7289:    }
    #####: 7290:  }
        1: 7291:  if (no_time < 0) {
        1: 7292:    no_time = decompress;
        1: 7293:  }
        1: 7294:  if (no_name < 0) {
        1: 7295:    no_name = decompress;
        1: 7296:  }
        1: 7297:  file_count = argc - optind;
        1: 7298:  if (ascii) {
    #####: 7299:    if (! quiet) {
        -: 7300:       
        -: 7301:
    #####: 7302:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: option --ascii ignored on this system\n",
    #####: 7303:              progname);
        -: 7304:       
        -: 7305:
    #####: 7306:    }
    #####: 7307:  }
        1: 7308:  if (z_len == 0) {
    #####: 7309:    if (! decompress) {
        -: 7310:       
        -: 7311:
    #####: 7312:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: incorrect suffix \'%s\'\n",
    #####: 7313:              progname, optarg);
    #####: 7314:      do_exit(1);
        -: 7315:       
        -: 7316:
    #####: 7317:    } else {
    #####: 7318:      goto _L;
        -: 7319:    }
        1: 7320:  } else { //Added block
        -: 7321:  _L: 
        1: 7322:  if (z_len > 30) {
        -: 7323:     
        -: 7324:
    #####: 7325:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: incorrect suffix \'%s\'\n",
    #####: 7326:            progname, optarg);
    #####: 7327:    do_exit(1);
        -: 7328:     
        -: 7329:
    #####: 7330:  }
        -: 7331:  }
        1: 7332:  if (do_lzw) {
    #####: 7333:    if (! decompress) {
    #####: 7334:      work = & lzw;
    #####: 7335:    }
    #####: 7336:  }
        1: 7337:  if (file_count != 0) {
        1: 7338:    if (to_stdout) {
        1: 7339:      if (! test) {
        1: 7340:        if (! list) {
        1: 7341:          if (! decompress) {
        1: 7342:            tmp___11 = 1;
        1: 7343:          } else { //Added block
    #####: 7344:          if (! ascii) {
    #####: 7345:            tmp___11 = 1;
    #####: 7346:          } else {
    #####: 7347:            tmp___11 = 0;
        -: 7348:          }
        -: 7349:          }
        1: 7350:        } else {
    #####: 7351:          tmp___11 = 0;
        -: 7352:        }
        1: 7353:      } else {
    #####: 7354:        tmp___11 = 0;
        -: 7355:      }
        1: 7356:    } else {
    #####: 7357:      tmp___11 = 0;
        -: 7358:    }
        -: 7359:    {
        2: 7360:    while (1) {
        -: 7361:                                           ;
        2: 7362:      if (! (optind < argc)) {
        1: 7363:        goto while_break___0;
        -: 7364:      }
        -: 7365:      {
        1: 7366:      tmp___12 = optind;
        1: 7367:      optind ++;
        1: 7368:      treat_file(*(argv + tmp___12));
        -: 7369:      }
        -: 7370:    }
        -: 7371:    while_break___0: /* CIL Label */ ;
        -: 7372:    }
        1: 7373:  } else {
        -: 7374:     
        -: 7375:
    #####: 7376:    treat_stdin();
        -: 7377:     
        -: 7378:
        -: 7379:  }
        1: 7380:  if (list) {
    #####: 7381:    if (! quiet) {
    #####: 7382:      if (file_count > 1) {
        -: 7383:         
        -: 7384:
    #####: 7385:        do_list(-1, -1);
        -: 7386:         
        -: 7387:
    #####: 7388:      }
    #####: 7389:    }
    #####: 7390:  }
        -: 7391:  {
        1: 7392:  do_exit(exit_code);
        -: 7393:  }
        1: 7394:  return (exit_code);
        -: 7395:}
        -: 7396:}
        1: 7397:static int input_eof(void) 
        -: 7398:{ 
        -: 7399:  int tmp ;
        -: 7400:
        -: 7401:  {
        1: 7402:  if (! decompress) {
        1: 7403:    return (1);
        -: 7404:  } else { //Added block
    #####: 7405:  if (last_member) {
    #####: 7406:    return (1);
        -: 7407:  }
        -: 7408:  }
    #####: 7409:  if (inptr == insize) {
    #####: 7410:    if (insize != 32768U) {
    #####: 7411:      return (1);
        -: 7412:    } else {
        -: 7413:      {
    #####: 7414:      tmp = fill_inbuf(1);
        -: 7415:      }
    #####: 7416:      if (tmp == -1) {
    #####: 7417:        return (1);
        -: 7418:      }
        -: 7419:    }
    #####: 7420:    inptr = 0U;
    #####: 7421:  }
    #####: 7422:  return (0);
        -: 7423:}
        1: 7424:}
    #####: 7425:static void treat_stdin(void) 
        -: 7426:{ 
        -: 7427:  char const   *tmp ;
        -: 7428:  char const   *tmp___0 ;
        -: 7429:  struct _IO_FILE *tmp___1 ;
        -: 7430:  int tmp___2 ;
        -: 7431:  int tmp___3 ;
        -: 7432:  int tmp___4 ;
        -: 7433:  int tmp___5 ;
        -: 7434:  int tmp___6 ;
        -: 7435:  int tmp___7 ;
        -: 7436:  int tmp___8 ;
        -: 7437:  int tmp___9 ;
        -: 7438:  int tmp___10 ;
        -: 7439:  int tmp___11 ;
        -: 7440:
        -: 7441:  {
    #####: 7442:  if (! force) {
    #####: 7443:    if (! list) {
    #####: 7444:      if (decompress) {
    #####: 7445:        tmp___1 = stdin;
    #####: 7446:      } else {
    #####: 7447:        tmp___1 = stdout;
        -: 7448:      }
        -: 7449:      {
    #####: 7450:      tmp___2 = fileno(tmp___1);
    #####: 7451:      tmp___3 = isatty(tmp___2);
        -: 7452:      }
    #####: 7453:      if (tmp___3) {
    #####: 7454:        if (decompress) {
    #####: 7455:          tmp = "de";
    #####: 7456:        } else {
    #####: 7457:          tmp = "";
        -: 7458:        }
    #####: 7459:        if (decompress) {
    #####: 7460:          tmp___0 = "read from";
    #####: 7461:        } else {
    #####: 7462:          tmp___0 = "written to";
        -: 7463:        }
        -: 7464:        {
    #####: 7465:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: compressed data not %s a terminal. Use -f to force %scompression.\n",
    #####: 7466:                progname, tmp___0, tmp);
    #####: 7467:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"For help, type: %s -h\n",
    #####: 7468:                progname);
    #####: 7469:        do_exit(1);
        -: 7470:        }
    #####: 7471:      }
    #####: 7472:    }
    #####: 7473:  }
    #####: 7474:  if (decompress) {
    #####: 7475:    tmp___4 = 1;
    #####: 7476:  } else { //Added block
    #####: 7477:  if (! ascii) {
    #####: 7478:    tmp___4 = 1;
    #####: 7479:  } else {
    #####: 7480:    tmp___4 = 0;
        -: 7481:  }
        -: 7482:  }
    #####: 7483:  if (! test) {
    #####: 7484:    if (! list) {
    #####: 7485:      if (! decompress) {
    #####: 7486:        tmp___5 = 1;
    #####: 7487:      } else { //Added block
    #####: 7488:      if (! ascii) {
    #####: 7489:        tmp___5 = 1;
    #####: 7490:      } else {
    #####: 7491:        tmp___5 = 0;
        -: 7492:      }
        -: 7493:      }
    #####: 7494:    } else {
    #####: 7495:      tmp___5 = 0;
        -: 7496:    }
    #####: 7497:  } else {
    #####: 7498:    tmp___5 = 0;
        -: 7499:  }
        -: 7500:  {
    #####: 7501:  strcpy((char * __restrict  )(ifname), (char const   * __restrict  )"stdin");
    #####: 7502:  strcpy((char * __restrict  )(ofname), (char const   * __restrict  )"stdout");
    #####: 7503:  time_stamp = (time_t )0;
        -: 7504:  }
    #####: 7505:  if (list) {
    #####: 7506:    goto _L;
        -: 7507:  } else { //Added block
    #####: 7508:  if (! no_time) {
        -: 7509:    _L: 
        -: 7510:    {
    #####: 7511:    tmp___6 = fileno(stdin);
    #####: 7512:    tmp___7 = fstat(tmp___6, & istat);
        -: 7513:    }
    #####: 7514:    if (tmp___7 != 0) {
        -: 7515:       
        -: 7516:
    #####: 7517:      progerror((char *)"standard input");
    #####: 7518:      do_exit(1);
        -: 7519:       
        -: 7520:
    #####: 7521:    }
    #####: 7522:    time_stamp = (time_t )0;
    #####: 7523:  }
        -: 7524:  }
        -: 7525:  {
    #####: 7526:  ifile_size = -1L;
    #####: 7527:  clear_bufs();
    #####: 7528:  to_stdout = 1;
    #####: 7529:  part_nb = 0;
        -: 7530:  }
    #####: 7531:  if (decompress) {
        -: 7532:    {
    #####: 7533:    method = get_method(ifd);
        -: 7534:    }
    #####: 7535:    if (method < 0) {
        -: 7536:       
        -: 7537:
    #####: 7538:      do_exit(exit_code);
        -: 7539:       
        -: 7540:
    #####: 7541:    }
    #####: 7542:  }
    #####: 7543:  if (list) {
        -: 7544:    {
    #####: 7545:    do_list(ifd, method);
        -: 7546:    }
    #####: 7547:    return;
        -: 7548:  }
        -: 7549:  {
    #####: 7550:  while (1) {
        -: 7551:                                     ;
        -: 7552:    {
    #####: 7553:    tmp___8 = fileno(stdout);
    #####: 7554:    tmp___9 = fileno(stdin);
    #####: 7555:    tmp___10 = (*work)(tmp___9, tmp___8);
        -: 7556:    }
    #####: 7557:    if (tmp___10 != 0) {
    #####: 7558:      return;
        -: 7559:    }
        -: 7560:    {
    #####: 7561:    tmp___11 = input_eof();
        -: 7562:    }
    #####: 7563:    if (tmp___11) {
    #####: 7564:      goto while_break;
        -: 7565:    }
        -: 7566:    {
    #####: 7567:    method = get_method(ifd);
        -: 7568:    }
    #####: 7569:    if (method < 0) {
    #####: 7570:      return;
        -: 7571:    }
    #####: 7572:    bytes_out = (off_t )0;
        -: 7573:  }
        -: 7574:  while_break: /* CIL Label */ ;
        -: 7575:  }
    #####: 7576:  if (verbose) {
    #####: 7577:    if (test) {
        -: 7578:       
        -: 7579:
    #####: 7580:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )" OK\n");
        -: 7581:       
        -: 7582:
    #####: 7583:    } else { //Added block
    #####: 7584:    if (! decompress) {
        -: 7585:       
        -: 7586:
    #####: 7587:      display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);
    #####: 7588:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n");
        -: 7589:       
        -: 7590:
    #####: 7591:    }
        -: 7592:    }
    #####: 7593:  }
    #####: 7594:  return;
        -: 7595:}
    #####: 7596:}
        1: 7597:static void treat_file(char *iname ) 
        -: 7598:{ 
        -: 7599:  int cflag ;
        -: 7600:  int tmp ;
        -: 7601:  int tmp___0 ;
        -: 7602:  struct stat st ;
        -: 7603:  int tmp___1 ;
        -: 7604:  int tmp___2 ;
        -: 7605:  int tmp___3 ;
        -: 7606:  int tmp___4 ;
        -: 7607:  char const   *tmp___7 ;
        -: 7608:  size_t tmp___8 ;
        -: 7609:  char const   *tmp___9 ;
        -: 7610:  size_t tmp___10 ;
        -: 7611:  int tmp___11 ;
        -: 7612:  int tmp___12 ;
        -: 7613:  int tmp___13 ;
        -: 7614:
        -: 7615:  {
        -: 7616:  {
        1: 7617:  tmp = strcmp((char const   *)iname, "-");
        -: 7618:  }
        1: 7619:  if (tmp == 0) {
        -: 7620:    {
    #####: 7621:    cflag = to_stdout;
    #####: 7622:    treat_stdin();
    #####: 7623:    to_stdout = cflag;
        -: 7624:    }
    #####: 7625:    return;
        -: 7626:  }
        -: 7627:  {
        1: 7628:  tmp___0 = get_istat(iname, & istat);
        -: 7629:  }
        1: 7630:  if (tmp___0 != 0) {
    #####: 7631:    return;
        -: 7632:  }
        1: 7633:  if ((istat.st_mode & 61440U) == 16384U) {
    #####: 7634:    if (recursive) {
        -: 7635:       
        -: 7636:
    #####: 7637:      st = istat;
    #####: 7638:      treat_dir(iname);
    #####: 7639:      reset_times(iname, & st);
        -: 7640:       
        -: 7641:
    #####: 7642:    } else {
    #####: 7643:      if (! quiet) {
        -: 7644:         
        -: 7645:
    #####: 7646:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s is a directory -- ignored\n",
    #####: 7647:                progname, ifname);
        -: 7648:         
        -: 7649:
    #####: 7650:      }
    #####: 7651:      if (exit_code == 0) {
    #####: 7652:        exit_code = 2;
    #####: 7653:      }
        -: 7654:    }
    #####: 7655:    return;
        -: 7656:  }
        1: 7657:  if (! ((istat.st_mode & 61440U) == 32768U)) {
    #####: 7658:    if (! quiet) {
        -: 7659:       
        -: 7660:
    #####: 7661:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s is not a directory or a regular file - ignored\n",
    #####: 7662:              progname, ifname);
        -: 7663:       
        -: 7664:
    #####: 7665:    }
    #####: 7666:    if (exit_code == 0) {
    #####: 7667:      exit_code = 2;
    #####: 7668:    }
    #####: 7669:    return;
        -: 7670:  }
        1: 7671:  if (istat.st_nlink > 1UL) {
    #####: 7672:    if (! to_stdout) {
    #####: 7673:      if (! force) {
    #####: 7674:        if (! quiet) {
    #####: 7675:          if (istat.st_nlink > 2UL) {
    #####: 7676:            tmp___1 = 's';
    #####: 7677:          } else {
    #####: 7678:            tmp___1 = ' ';
        -: 7679:          }
        -: 7680:          {
    #####: 7681:          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s has %d other link%c -- unchanged\n",
    #####: 7682:                  progname, ifname, (int )istat.st_nlink - 1, tmp___1);
        -: 7683:          }
    #####: 7684:        }
    #####: 7685:        if (exit_code == 0) {
    #####: 7686:          exit_code = 2;
    #####: 7687:        }
    #####: 7688:        return;
        -: 7689:      }
    #####: 7690:    }
    #####: 7691:  }
        1: 7692:  ifile_size = istat.st_size;
        1: 7693:  time_stamp = (time_t )0;
        1: 7694:  if (to_stdout) {
        1: 7695:    if (! list) {
        1: 7696:      if (! test) {
        -: 7697:         
        -: 7698:
        1: 7699:        strcpy((char * __restrict  )(ofname), (char const   * __restrict  )"stdout");
        -: 7700:         
        -: 7701:
        1: 7702:      } else {
    #####: 7703:        goto _L___0;
        -: 7704:      }
        1: 7705:    } else {
    #####: 7706:      goto _L___0;
        -: 7707:    }
        1: 7708:  } else {
        -: 7709:    _L___0: 
        -: 7710:    {
    #####: 7711:    tmp___2 = make_ofname();
        -: 7712:    }
    #####: 7713:    if (tmp___2 != 0) {
    #####: 7714:      return;
        -: 7715:    }
        -: 7716:  }
        1: 7717:  if (ascii) {
    #####: 7718:    if (! decompress) {
    #####: 7719:      tmp___3 = 0;
    #####: 7720:    } else {
    #####: 7721:      tmp___3 = 0;
        -: 7722:    }
    #####: 7723:  } else {
        1: 7724:    tmp___3 = 0;
        -: 7725:  }
        -: 7726:  {
        1: 7727:  ifd = open((char const   *)(ifname), tmp___3, 384);
        -: 7728:  }
        1: 7729:  if (ifd == -1) {
        -: 7730:    {
    #####: 7731:    progerror(ifname);
        -: 7732:    }
    #####: 7733:    return;
        -: 7734:  }
        -: 7735:  {
        1: 7736:  clear_bufs();
        1: 7737:  part_nb = 0;
        -: 7738:  }
        1: 7739:  if (decompress) {
        -: 7740:    {
    #####: 7741:    method = get_method(ifd);
        -: 7742:    }
    #####: 7743:    if (method < 0) {
        -: 7744:      {
    #####: 7745:      close(ifd);
        -: 7746:      }
    #####: 7747:      return;
        -: 7748:    }
    #####: 7749:  }
        1: 7750:  if (list) {
        -: 7751:    {
    #####: 7752:    do_list(ifd, method);
    #####: 7753:    close(ifd);
        -: 7754:    }
    #####: 7755:    return;
        -: 7756:  }
        1: 7757:  if (to_stdout) {
        -: 7758:     
        -: 7759:
        1: 7760:    ofd = fileno(stdout);
        -: 7761:     
        -: 7762:
        1: 7763:  } else {
        -: 7764:    {
    #####: 7765:    tmp___4 = create_outfile();
        -: 7766:    }
    #####: 7767:    if (tmp___4 != 0) {
    #####: 7768:      return;
        -: 7769:    }
    #####: 7770:    if (! decompress) {
    #####: 7771:      if (save_orig_name) {
    #####: 7772:        if (! verbose) {
    #####: 7773:          if (! quiet) {
        -: 7774:             
        -: 7775:
    #####: 7776:            fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s compressed to %s\n",
    #####: 7777:                    progname, ifname, ofname);
        -: 7778:             
        -: 7779:
    #####: 7780:          }
    #####: 7781:        }
    #####: 7782:      }
    #####: 7783:    }
        -: 7784:  }
        1: 7785:  if (! save_orig_name) {
        1: 7786:    save_orig_name = ! no_name;
        1: 7787:  }
        1: 7788:  if (verbose) {
        -: 7789:    {
    #####: 7790:    tmp___10 = strlen((char const   *)(ifname));
        -: 7791:    }
    #####: 7792:    if ((int )tmp___10 >= 15) {
    #####: 7793:      tmp___9 = "";
    #####: 7794:    } else {
        -: 7795:      {
    #####: 7796:      tmp___8 = strlen((char const   *)(ifname));
        -: 7797:      }
    #####: 7798:      if ((int )tmp___8 >= 7) {
    #####: 7799:        tmp___7 = "\t";
    #####: 7800:      } else {
    #####: 7801:        tmp___7 = "\t\t";
        -: 7802:      }
    #####: 7803:      tmp___9 = tmp___7;
        -: 7804:    }
        -: 7805:    {
    #####: 7806:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s:\t%s", ifname,
    #####: 7807:            tmp___9);
        -: 7808:    }
    #####: 7809:  }
        -: 7810:  {
        1: 7811:  while (1) {
        -: 7812:                                     ;
        -: 7813:    {
        1: 7814:    tmp___11 = (*work)(ifd, ofd);
        -: 7815:    }
        1: 7816:    if (tmp___11 != 0) {
    #####: 7817:      method = -1;
    #####: 7818:      goto while_break;
        -: 7819:    }
        -: 7820:    {
        1: 7821:    tmp___12 = input_eof();
        -: 7822:    }
        1: 7823:    if (tmp___12) {
        1: 7824:      goto while_break;
        -: 7825:    }
        -: 7826:    {
    #####: 7827:    method = get_method(ifd);
        -: 7828:    }
    #####: 7829:    if (method < 0) {
    #####: 7830:      goto while_break;
        -: 7831:    }
    #####: 7832:    bytes_out = (off_t )0;
        -: 7833:  }
        -: 7834:  while_break: /* CIL Label */ ;
        -: 7835:  }
        -: 7836:  {
        1: 7837:  close(ifd);
        -: 7838:  }
        1: 7839:  if (! to_stdout) {
        -: 7840:    {
    #####: 7841:    tmp___13 = close(ofd);
        -: 7842:    }
    #####: 7843:    if (tmp___13) {
        -: 7844:       
        -: 7845:
    #####: 7846:      write_error();
        -: 7847:       
        -: 7848:
    #####: 7849:    }
    #####: 7850:  }
        1: 7851:  if (method == -1) {
    #####: 7852:    if (! to_stdout) {
        -: 7853:       
        -: 7854:
    #####: 7855:      xunlink(ofname);
        -: 7856:       
        -: 7857:
    #####: 7858:    }
    #####: 7859:    return;
        -: 7860:  }
        1: 7861:  if (verbose) {
    #####: 7862:    if (test) {
        -: 7863:       
        -: 7864:
    #####: 7865:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )" OK");
        -: 7866:       
        -: 7867:
    #####: 7868:    } else { //Added block
    #####: 7869:    if (decompress) {
        -: 7870:       
        -: 7871:
    #####: 7872:      display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, stderr);
        -: 7873:       
        -: 7874:
    #####: 7875:    } else {
        -: 7876:       
        -: 7877:
    #####: 7878:      display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, stderr);
        -: 7879:       
        -: 7880:
        -: 7881:    }
        -: 7882:    }
    #####: 7883:    if (! test) {
    #####: 7884:      if (! to_stdout) {
        -: 7885:         
        -: 7886:
    #####: 7887:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )" -- replaced with %s",
        -: 7888:                ofname);
        -: 7889:         
        -: 7890:
    #####: 7891:      }
    #####: 7892:    }
        -: 7893:    {
    #####: 7894:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n");
        -: 7895:    }
    #####: 7896:  }
        1: 7897:  if (! to_stdout) {
        -: 7898:     
        -: 7899:
    #####: 7900:    copy_stat(& istat);
        -: 7901:     
        -: 7902:
    #####: 7903:  }
        1: 7904:  return;
        -: 7905:}
        1: 7906:}
    #####: 7907:static int create_outfile(void) 
        -: 7908:{ 
        -: 7909:  struct stat ostat ;
        -: 7910:  int flags___0 ;
        -: 7911:  int tmp ;
        -: 7912:  int tmp___0 ;
        -: 7913:  int tmp___1 ;
        -: 7914:
        -: 7915:  {
    #####: 7916:  flags___0 = 193;
    #####: 7917:  if (ascii) {
    #####: 7918:    if (decompress) {
    #####: 7919:      flags___0 &= -1;
    #####: 7920:    }
    #####: 7921:  }
        -: 7922:  {
    #####: 7923:  while (1) {
        -: 7924:                                     ;
        -: 7925:    {
    #####: 7926:    tmp = check_ofname();
        -: 7927:    }
    #####: 7928:    if (tmp != 0) {
        -: 7929:      {
    #####: 7930:      close(ifd);
        -: 7931:      }
    #####: 7932:      return (1);
        -: 7933:    }
        -: 7934:    {
    #####: 7935:    remove_ofname = 1;
    #####: 7936:    ofd = open((char const   *)(ofname), flags___0, 384);
        -: 7937:    }
    #####: 7938:    if (ofd == -1) {
        -: 7939:      {
    #####: 7940:      progerror(ofname);
    #####: 7941:      close(ifd);
        -: 7942:      }
    #####: 7943:      return (1);
        -: 7944:    }
        -: 7945:    {
    #####: 7946:    tmp___0 = fstat(ofd, & ostat);
        -: 7947:    }
    #####: 7948:    if (tmp___0 != 0) {
        -: 7949:      {
    #####: 7950:      progerror(ofname);
    #####: 7951:      close(ifd);
    #####: 7952:      close(ofd);
    #####: 7953:      xunlink(ofname);
        -: 7954:      }
    #####: 7955:      return (1);
        -: 7956:    }
        -: 7957:    {
    #####: 7958:    tmp___1 = name_too_long(ofname, & ostat);
        -: 7959:    }
    #####: 7960:    if (! tmp___1) {
    #####: 7961:      return (0);
        -: 7962:    }
    #####: 7963:    if (decompress) {
    #####: 7964:      if (! quiet) {
        -: 7965:         
        -: 7966:
    #####: 7967:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s: warning, name truncated\n",
    #####: 7968:                progname, ofname);
        -: 7969:         
        -: 7970:
    #####: 7971:      }
    #####: 7972:      if (exit_code == 0) {
    #####: 7973:        exit_code = 2;
    #####: 7974:      }
    #####: 7975:      return (0);
        -: 7976:    }
        -: 7977:    {
    #####: 7978:    close(ofd);
    #####: 7979:    xunlink(ofname);
    #####: 7980:    shorten_name(ofname);
        -: 7981:    }
        -: 7982:  }
        -: 7983:                                ;
        -: 7984:  }
        -: 7985:}
    #####: 7986:}
        1: 7987:static int do_stat(char *name , struct stat *sbuf ) 
        -: 7988:{ 
        -: 7989:  int *tmp ;
        -: 7990:  int tmp___0 ;
        -: 7991:
        -: 7992:  {
        -: 7993:  {
        1: 7994:  tmp = __errno_location();
        1: 7995:  *tmp = 0;
        1: 7996:  tmp___0 = stat((char const   * __restrict  )name, (struct stat * __restrict  )sbuf);
        -: 7997:  }
        1: 7998:  return (tmp___0);
        -: 7999:}
        -: 8000:}
        -: 8001:static char *known_suffixes[9]  = 
        -: 8002:  {      (char *)((void *)0),      (char *)".gz",      (char *)".z",      (char *)".taz", 
        -: 8003:        (char *)".tgz",      (char *)"-gz",      (char *)"-z",      (char *)"_z", 
        -: 8004:        (char *)((void *)0)};
    #####: 8005:static char *get_suffix(char *name ) 
        -: 8006:{ 
        -: 8007:  int nlen ;
        -: 8008:  int slen ;
        -: 8009:  char suffix[33] ;
        -: 8010:  char **suf ;
        -: 8011:  int tmp ;
        -: 8012:  size_t tmp___0 ;
        -: 8013:  size_t tmp___1 ;
        -: 8014:  int s ;
        -: 8015:  size_t tmp___2 ;
        -: 8016:  int tmp___3 ;
        -: 8017:
        -: 8018:  {
        -: 8019:  {
    #####: 8020:  suf = known_suffixes;
    #####: 8021:  *suf = z_suffix;
    #####: 8022:  tmp = strcmp((char const   *)z_suffix, "z");
        -: 8023:  }
    #####: 8024:  if (tmp == 0) {
    #####: 8025:    suf ++;
    #####: 8026:  }
        -: 8027:  {
    #####: 8028:  tmp___0 = strlen((char const   *)name);
    #####: 8029:  nlen = (int )tmp___0;
        -: 8030:  }
    #####: 8031:  if (nlen <= 32) {
        -: 8032:     
        -: 8033:
    #####: 8034:    strcpy((char * __restrict  )(suffix), (char const   * __restrict  )name);
        -: 8035:     
        -: 8036:
    #####: 8037:  } else {
        -: 8038:     
        -: 8039:
    #####: 8040:    strcpy((char * __restrict  )(suffix), (char const   * __restrict  )(((name + nlen) - 30) - 2));
        -: 8041:     
        -: 8042:
        -: 8043:  }
        -: 8044:  {
    #####: 8045:  strlwr(suffix);
    #####: 8046:  tmp___1 = strlen((char const   *)(suffix));
    #####: 8047:  slen = (int )tmp___1;
        -: 8048:  }
        -: 8049:  {
    #####: 8050:  while (1) {
        -: 8051:                                     ;
        -: 8052:    {
    #####: 8053:    tmp___2 = strlen((char const   *)*suf);
    #####: 8054:    s = (int )tmp___2;
        -: 8055:    }
    #####: 8056:    if (slen > s) {
    #####: 8057:      if ((int )suffix[(slen - s) - 1] != 47) {
        -: 8058:        {
    #####: 8059:        tmp___3 = strcmp((char const   *)((suffix + slen) - s), (char const   *)*suf);
        -: 8060:        }
    #####: 8061:        if (tmp___3 == 0) {
    #####: 8062:          return ((name + nlen) - s);
        -: 8063:        }
    #####: 8064:      }
    #####: 8065:    }
    #####: 8066:    suf ++;
    #####: 8067:    if (! ((unsigned long )*suf != (unsigned long )((void *)0))) {
    #####: 8068:      goto while_break;
        -: 8069:    }
        -: 8070:  }
        -: 8071:  while_break: /* CIL Label */ ;
        -: 8072:  }
    #####: 8073:  return ((char *)((void *)0));
        -: 8074:}
    #####: 8075:}
        -: 8076:static char *suffixes[6]  = {      (char *)((void *)0),      (char *)".gz",      (char *)".z",      (char *)"-z", 
        -: 8077:        (char *)".Z",      (char *)((void *)0)};
        1: 8078:static int get_istat(char *iname , struct stat *sbuf ) 
        -: 8079:{ 
        -: 8080:  int ilen ;
        -: 8081:  int z_suffix_errno ;
        -: 8082:  char **suf ;
        -: 8083:  char *s ;
        -: 8084:  size_t tmp ;
        -: 8085:  int tmp___0 ;
        -: 8086:  int *tmp___1 ;
        -: 8087:  size_t tmp___2 ;
        -: 8088:  int tmp___3 ;
        -: 8089:  char *s0 ;
        -: 8090:  size_t tmp___4 ;
        -: 8091:  int tmp___5 ;
        -: 8092:  int *tmp___6 ;
        -: 8093:  int tmp___7 ;
        -: 8094:  int *tmp___8 ;
        -: 8095:
        -: 8096:  {
        -: 8097:  {
        1: 8098:  z_suffix_errno = 0;
        1: 8099:  suf = suffixes;
        1: 8100:  *suf = z_suffix;
        1: 8101:  tmp = strlen((char const   *)iname);
        -: 8102:  }
        1: 8103:  if (sizeof(ifname) - 1UL <= tmp) {
    #####: 8104:    goto name_too_long;
        -: 8105:  }
        -: 8106:  {
        1: 8107:  strcpy((char * __restrict  )(ifname), (char const   * __restrict  )iname);
        1: 8108:  tmp___0 = do_stat(ifname, sbuf);
        -: 8109:  }
        1: 8110:  if (tmp___0 == 0) {
        1: 8111:    return (0);
        -: 8112:  }
    #####: 8113:  if (! decompress) {
        -: 8114:    {
    #####: 8115:    progerror(ifname);
        -: 8116:    }
    #####: 8117:    return (1);
        -: 8118:  } else {
        -: 8119:    {
    #####: 8120:    tmp___1 = __errno_location();
        -: 8121:    }
    #####: 8122:    if (*tmp___1 != 2) {
        -: 8123:      {
    #####: 8124:      progerror(ifname);
        -: 8125:      }
    #####: 8126:      return (1);
        -: 8127:    }
        -: 8128:  }
        -: 8129:  {
    #####: 8130:  s = get_suffix(ifname);
        -: 8131:  }
    #####: 8132:  if ((unsigned long )s != (unsigned long )((void *)0)) {
        -: 8133:    {
    #####: 8134:    progerror(ifname);
        -: 8135:    }
    #####: 8136:    return (1);
        -: 8137:  }
        -: 8138:  {
    #####: 8139:  tmp___2 = strlen((char const   *)(ifname));
    #####: 8140:  ilen = (int )tmp___2;
    #####: 8141:  tmp___3 = strcmp((char const   *)z_suffix, ".gz");
        -: 8142:  }
    #####: 8143:  if (tmp___3 == 0) {
    #####: 8144:    suf ++;
    #####: 8145:  }
        -: 8146:  {
    #####: 8147:  while (1) {
        -: 8148:                                     ;
        -: 8149:    {
    #####: 8150:    s = *suf;
    #####: 8151:    s0 = s;
    #####: 8152:    strcpy((char * __restrict  )(ifname), (char const   * __restrict  )iname);
    #####: 8153:    tmp___4 = strlen((char const   *)s);
        -: 8154:    }
    #####: 8155:    if (sizeof(ifname) <= (size_t )ilen + tmp___4) {
    #####: 8156:      goto name_too_long;
        -: 8157:    }
        -: 8158:    {
    #####: 8159:    strcat((char * __restrict  )(ifname), (char const   * __restrict  )s);
    #####: 8160:    tmp___5 = do_stat(ifname, sbuf);
        -: 8161:    }
    #####: 8162:    if (tmp___5 == 0) {
    #####: 8163:      return (0);
        -: 8164:    }
        -: 8165:    {
    #####: 8166:    tmp___7 = strcmp((char const   *)s0, (char const   *)z_suffix);
        -: 8167:    }
    #####: 8168:    if (tmp___7 == 0) {
        -: 8169:       
        -: 8170:
    #####: 8171:      tmp___6 = __errno_location();
    #####: 8172:      z_suffix_errno = *tmp___6;
        -: 8173:       
        -: 8174:
    #####: 8175:    }
    #####: 8176:    suf ++;
    #####: 8177:    if (! ((unsigned long )*suf != (unsigned long )((void *)0))) {
    #####: 8178:      goto while_break;
        -: 8179:    }
        -: 8180:  }
        -: 8181:  while_break: /* CIL Label */ ;
        -: 8182:  }
        -: 8183:  {
    #####: 8184:  strcpy((char * __restrict  )(ifname), (char const   * __restrict  )iname);
    #####: 8185:  strcat((char * __restrict  )(ifname), (char const   * __restrict  )z_suffix);
    #####: 8186:  tmp___8 = __errno_location();
    #####: 8187:  *tmp___8 = z_suffix_errno;
    #####: 8188:  progerror(ifname);
        -: 8189:  }
    #####: 8190:  return (1);
        -: 8191:  name_too_long: 
        -: 8192:  {
    #####: 8193:  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s: file name too long\n",
    #####: 8194:          progname, iname);
    #####: 8195:  exit_code = 1;
        -: 8196:  }
    #####: 8197:  return (1);
        -: 8198:}
        1: 8199:}
    #####: 8200:static int make_ofname(void) 
        -: 8201:{ 
        -: 8202:  char *suff ;
        -: 8203:  int tmp ;
        -: 8204:  int tmp___0 ;
        -: 8205:  size_t tmp___1 ;
        -: 8206:
        -: 8207:  {
        -: 8208:  {
    #####: 8209:  strcpy((char * __restrict  )(ofname), (char const   * __restrict  )(ifname));
    #####: 8210:  suff = get_suffix(ofname);
        -: 8211:  }
    #####: 8212:  if (decompress) {
    #####: 8213:    if ((unsigned long )suff == (unsigned long )((void *)0)) {
    #####: 8214:      if (! recursive) {
    #####: 8215:        if (list) {
    #####: 8216:          return (0);
        -: 8217:        } else { //Added block
    #####: 8218:        if (test) {
    #####: 8219:          return (0);
        -: 8220:        }
        -: 8221:        }
    #####: 8222:      }
    #####: 8223:      if (verbose) {
    #####: 8224:        goto _L;
        -: 8225:      } else { //Added block
    #####: 8226:      if (! recursive) {
    #####: 8227:        if (! quiet) {
        -: 8228:          _L: 
    #####: 8229:          if (! quiet) {
        -: 8230:             
        -: 8231:
    #####: 8232:            fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s: unknown suffix -- ignored\n",
    #####: 8233:                    progname, ifname);
        -: 8234:             
        -: 8235:
    #####: 8236:          }
    #####: 8237:          if (exit_code == 0) {
    #####: 8238:            exit_code = 2;
    #####: 8239:          }
    #####: 8240:        }
    #####: 8241:      }
        -: 8242:      }
    #####: 8243:      return (2);
        -: 8244:    }
        -: 8245:    {
    #####: 8246:    strlwr(suff);
    #####: 8247:    tmp = strcmp((char const   *)suff, ".tgz");
        -: 8248:    }
    #####: 8249:    if (tmp == 0) {
        -: 8250:       
        -: 8251:
    #####: 8252:      strcpy((char * __restrict  )suff, (char const   * __restrict  )".tar");
        -: 8253:       
        -: 8254:
    #####: 8255:    } else {
        -: 8256:      {
    #####: 8257:      tmp___0 = strcmp((char const   *)suff, ".taz");
        -: 8258:      }
    #####: 8259:      if (tmp___0 == 0) {
        -: 8260:         
        -: 8261:
    #####: 8262:        strcpy((char * __restrict  )suff, (char const   * __restrict  )".tar");
        -: 8263:         
        -: 8264:
    #####: 8265:      } else {
    #####: 8266:        *suff = (char )'\000';
        -: 8267:      }
        -: 8268:    }
    #####: 8269:  } else { //Added block
    #####: 8270:  if ((unsigned long )suff != (unsigned long )((void *)0)) {
    #####: 8271:    if (verbose) {
        -: 8272:       
        -: 8273:
    #####: 8274:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s already has %s suffix -- unchanged\n",
    #####: 8275:              progname, ifname, suff);
        -: 8276:       
        -: 8277:
    #####: 8278:    } else { //Added block
    #####: 8279:    if (! recursive) {
    #####: 8280:      if (! quiet) {
        -: 8281:         
        -: 8282:
    #####: 8283:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s already has %s suffix -- unchanged\n",
    #####: 8284:                progname, ifname, suff);
        -: 8285:         
        -: 8286:
    #####: 8287:      }
    #####: 8288:    }
        -: 8289:    }
    #####: 8290:    if (exit_code == 0) {
    #####: 8291:      exit_code = 2;
    #####: 8292:    }
    #####: 8293:    return (2);
        -: 8294:  } else {
        -: 8295:    {
    #####: 8296:    save_orig_name = 0;
    #####: 8297:    tmp___1 = strlen((char const   *)(ofname));
        -: 8298:    }
    #####: 8299:    if (sizeof(ofname) <= tmp___1 + (size_t )z_len) {
    #####: 8300:      goto name_too_long;
        -: 8301:    }
        -: 8302:    {
    #####: 8303:    strcat((char * __restrict  )(ofname), (char const   * __restrict  )z_suffix);
        -: 8304:    }
        -: 8305:  }
        -: 8306:  }
    #####: 8307:  return (0);
        -: 8308:  name_too_long: 
    #####: 8309:  if (! quiet) {
        -: 8310:     
        -: 8311:
    #####: 8312:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s: file name too long\n",
    #####: 8313:            progname, ifname);
        -: 8314:     
        -: 8315:
    #####: 8316:  }
    #####: 8317:  if (exit_code == 0) {
    #####: 8318:    exit_code = 2;
    #####: 8319:  }
    #####: 8320:  return (2);
        -: 8321:}
    #####: 8322:}
    #####: 8323:static int get_method(int in ) 
        -: 8324:{ 
        -: 8325:  uch flags___0 ;
        -: 8326:  char magic[2] ;
        -: 8327:  int imagic1 ;
        -: 8328:  ulg stamp ;
        -: 8329:  unsigned int tmp ;
        -: 8330:  int tmp___0 ;
        -: 8331:  int tmp___1 ;
        -: 8332:  unsigned int tmp___2 ;
        -: 8333:  int tmp___3 ;
        -: 8334:  unsigned int tmp___4 ;
        -: 8335:  int tmp___5 ;
        -: 8336:  int tmp___6 ;
        -: 8337:  unsigned int tmp___7 ;
        -: 8338:  int tmp___8 ;
        -: 8339:  int tmp___9 ;
        -: 8340:  unsigned int tmp___10 ;
        -: 8341:  int tmp___11 ;
        -: 8342:  int tmp___12 ;
        -: 8343:  unsigned int tmp___13 ;
        -: 8344:  int tmp___14 ;
        -: 8345:  int tmp___15 ;
        -: 8346:  unsigned int tmp___16 ;
        -: 8347:  int tmp___17 ;
        -: 8348:  int tmp___18 ;
        -: 8349:  unsigned int tmp___19 ;
        -: 8350:  int tmp___20 ;
        -: 8351:  int tmp___21 ;
        -: 8352:  unsigned int tmp___22 ;
        -: 8353:  int tmp___23 ;
        -: 8354:  int tmp___24 ;
        -: 8355:  unsigned int tmp___25 ;
        -: 8356:  int tmp___26 ;
        -: 8357:  int tmp___27 ;
        -: 8358:  unsigned int tmp___28 ;
        -: 8359:  unsigned int tmp___29 ;
        -: 8360:  unsigned int part ;
        -: 8361:  unsigned int tmp___30 ;
        -: 8362:  int tmp___31 ;
        -: 8363:  int tmp___32 ;
        -: 8364:  unsigned int tmp___33 ;
        -: 8365:  int tmp___34 ;
        -: 8366:  int tmp___35 ;
        -: 8367:  unsigned int len ;
        -: 8368:  unsigned int tmp___36 ;
        -: 8369:  int tmp___37 ;
        -: 8370:  int tmp___38 ;
        -: 8371:  unsigned int tmp___39 ;
        -: 8372:  int tmp___40 ;
        -: 8373:  int tmp___41 ;
        -: 8374:  unsigned int tmp___42 ;
        -: 8375:  unsigned int tmp___43 ;
        -: 8376:  char c ;
        -: 8377:  unsigned int tmp___44 ;
        -: 8378:  int tmp___45 ;
        -: 8379:  char *p ;
        -: 8380:  char *tmp___46 ;
        -: 8381:  char *base ;
        -: 8382:  unsigned int tmp___47 ;
        -: 8383:  int tmp___48 ;
        -: 8384:  int tmp___49 ;
        -: 8385:  char *tmp___50 ;
        -: 8386:  unsigned int tmp___51 ;
        -: 8387:  int tmp___52 ;
        -: 8388:  int tmp___53 ;
        -: 8389:  int tmp___54 ;
        -: 8390:  int tmp___55 ;
        -: 8391:  int tmp___56 ;
        -: 8392:  int tmp___57 ;
        -: 8393:  int tmp___58 ;
        -: 8394:  int tmp___59 ;
        -: 8395:  int tmp___60 ;
        -: 8396:  int tmp___61 ;
        -: 8397:  int inbyte ;
        -: 8398:  unsigned int tmp___62 ;
        -: 8399:  int tmp___63 ;
        -: 8400:
        -: 8401:  {
    #####: 8402:  if (force) {
    #####: 8403:    if (to_stdout) {
    #####: 8404:      if (inptr < insize) {
    #####: 8405:        tmp = inptr;
    #####: 8406:        inptr ++;
    #####: 8407:        tmp___1 = (int )inbuf[tmp];
    #####: 8408:      } else {
        -: 8409:         
        -: 8410:
    #####: 8411:        tmp___0 = fill_inbuf(1);
    #####: 8412:        tmp___1 = tmp___0;
        -: 8413:         
        -: 8414:
        -: 8415:      }
    #####: 8416:      magic[0] = (char )tmp___1;
    #####: 8417:      if (inptr < insize) {
    #####: 8418:        tmp___2 = inptr;
    #####: 8419:        inptr ++;
    #####: 8420:        imagic1 = (int )inbuf[tmp___2];
    #####: 8421:      } else {
        -: 8422:         
        -: 8423:
    #####: 8424:        tmp___3 = fill_inbuf(1);
    #####: 8425:        imagic1 = tmp___3;
        -: 8426:         
        -: 8427:
        -: 8428:      }
    #####: 8429:      magic[1] = (char )imagic1;
    #####: 8430:    } else {
    #####: 8431:      goto _L;
        -: 8432:    }
    #####: 8433:  } else {
        -: 8434:    _L: 
    #####: 8435:    if (inptr < insize) {
    #####: 8436:      tmp___4 = inptr;
    #####: 8437:      inptr ++;
    #####: 8438:      tmp___6 = (int )inbuf[tmp___4];
    #####: 8439:    } else {
        -: 8440:       
        -: 8441:
    #####: 8442:      tmp___5 = fill_inbuf(0);
    #####: 8443:      tmp___6 = tmp___5;
        -: 8444:       
        -: 8445:
        -: 8446:    }
    #####: 8447:    magic[0] = (char )tmp___6;
    #####: 8448:    if (inptr < insize) {
    #####: 8449:      tmp___7 = inptr;
    #####: 8450:      inptr ++;
    #####: 8451:      tmp___9 = (int )inbuf[tmp___7];
    #####: 8452:    } else {
        -: 8453:       
        -: 8454:
    #####: 8455:      tmp___8 = fill_inbuf(0);
    #####: 8456:      tmp___9 = tmp___8;
        -: 8457:       
        -: 8458:
        -: 8459:    }
    #####: 8460:    magic[1] = (char )tmp___9;
    #####: 8461:    imagic1 = 0;
        -: 8462:  }
        -: 8463:  {
    #####: 8464:  method = -1;
    #####: 8465:  part_nb ++;
    #####: 8466:  header_bytes = (off_t )0;
    #####: 8467:  last_member = 0;
    #####: 8468:  tmp___60 = memcmp((void const   *)(magic), (void const   *)"\037\213", (size_t )2);
        -: 8469:  }
    #####: 8470:  if (tmp___60 == 0) {
    #####: 8471:    goto _L___4;
        -: 8472:  } else {
        -: 8473:    {
    #####: 8474:    tmp___61 = memcmp((void const   *)(magic), (void const   *)"\037\236", (size_t )2);
        -: 8475:    }
    #####: 8476:    if (tmp___61 == 0) {
        -: 8477:      _L___4: 
    #####: 8478:      if (inptr < insize) {
    #####: 8479:        tmp___10 = inptr;
    #####: 8480:        inptr ++;
    #####: 8481:        tmp___12 = (int )inbuf[tmp___10];
    #####: 8482:      } else {
        -: 8483:         
        -: 8484:
    #####: 8485:        tmp___11 = fill_inbuf(0);
    #####: 8486:        tmp___12 = tmp___11;
        -: 8487:         
        -: 8488:
        -: 8489:      }
    #####: 8490:      method = tmp___12;
    #####: 8491:      if (method != 8) {
        -: 8492:        {
    #####: 8493:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s: unknown method %d -- get newer version of gzip\n",
    #####: 8494:                progname, ifname, method);
    #####: 8495:        exit_code = 1;
        -: 8496:        }
    #####: 8497:        return (-1);
        -: 8498:      }
    #####: 8499:      work = & unzip;
    #####: 8500:      if (inptr < insize) {
    #####: 8501:        tmp___13 = inptr;
    #####: 8502:        inptr ++;
    #####: 8503:        tmp___15 = (int )inbuf[tmp___13];
    #####: 8504:      } else {
        -: 8505:         
        -: 8506:
    #####: 8507:        tmp___14 = fill_inbuf(0);
    #####: 8508:        tmp___15 = tmp___14;
        -: 8509:         
        -: 8510:
        -: 8511:      }
    #####: 8512:      flags___0 = (uch )tmp___15;
    #####: 8513:      if (((int )flags___0 & 32) != 0) {
        -: 8514:        {
    #####: 8515:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s is encrypted -- get newer version of gzip\n",
    #####: 8516:                progname, ifname);
    #####: 8517:        exit_code = 1;
        -: 8518:        }
    #####: 8519:        return (-1);
        -: 8520:      }
    #####: 8521:      if (((int )flags___0 & 2) != 0) {
        -: 8522:        {
    #####: 8523:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s is a a multi-part gzip file -- get newer version of gzip\n",
    #####: 8524:                progname, ifname);
    #####: 8525:        exit_code = 1;
        -: 8526:        }
    #####: 8527:        if (force <= 1) {
    #####: 8528:          return (-1);
        -: 8529:        }
    #####: 8530:      }
    #####: 8531:      if (((int )flags___0 & 192) != 0) {
        -: 8532:        {
    #####: 8533:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s has flags 0x%x -- get newer version of gzip\n",
    #####: 8534:                progname, ifname, (int )flags___0);
    #####: 8535:        exit_code = 1;
        -: 8536:        }
    #####: 8537:        if (force <= 1) {
    #####: 8538:          return (-1);
        -: 8539:        }
    #####: 8540:      }
    #####: 8541:      if (inptr < insize) {
    #####: 8542:        tmp___16 = inptr;
    #####: 8543:        inptr ++;
    #####: 8544:        tmp___18 = (int )inbuf[tmp___16];
    #####: 8545:      } else {
        -: 8546:         
        -: 8547:
    #####: 8548:        tmp___17 = fill_inbuf(0);
    #####: 8549:        tmp___18 = tmp___17;
        -: 8550:         
        -: 8551:
        -: 8552:      }
    #####: 8553:      stamp = (ulg )tmp___18;
    #####: 8554:      if (inptr < insize) {
    #####: 8555:        tmp___19 = inptr;
    #####: 8556:        inptr ++;
    #####: 8557:        tmp___21 = (int )inbuf[tmp___19];
    #####: 8558:      } else {
        -: 8559:         
        -: 8560:
    #####: 8561:        tmp___20 = fill_inbuf(0);
    #####: 8562:        tmp___21 = tmp___20;
        -: 8563:         
        -: 8564:
        -: 8565:      }
    #####: 8566:      stamp |= (ulg )tmp___21 << 8;
    #####: 8567:      if (inptr < insize) {
    #####: 8568:        tmp___22 = inptr;
    #####: 8569:        inptr ++;
    #####: 8570:        tmp___24 = (int )inbuf[tmp___22];
    #####: 8571:      } else {
        -: 8572:         
        -: 8573:
    #####: 8574:        tmp___23 = fill_inbuf(0);
    #####: 8575:        tmp___24 = tmp___23;
        -: 8576:         
        -: 8577:
        -: 8578:      }
    #####: 8579:      stamp |= (ulg )tmp___24 << 16;
    #####: 8580:      if (inptr < insize) {
    #####: 8581:        tmp___25 = inptr;
    #####: 8582:        inptr ++;
    #####: 8583:        tmp___27 = (int )inbuf[tmp___25];
    #####: 8584:      } else {
        -: 8585:         
        -: 8586:
    #####: 8587:        tmp___26 = fill_inbuf(0);
    #####: 8588:        tmp___27 = tmp___26;
        -: 8589:         
        -: 8590:
        -: 8591:      }
    #####: 8592:      stamp |= (ulg )tmp___27 << 24;
    #####: 8593:      if (stamp != 0UL) {
    #####: 8594:        if (! no_time) {
    #####: 8595:          time_stamp = (time_t )stamp;
    #####: 8596:        }
    #####: 8597:      }
    #####: 8598:      time_stamp = (time_t )0;
    #####: 8599:      if (inptr < insize) {
    #####: 8600:        tmp___28 = inptr;
    #####: 8601:        inptr ++;
    #####: 8602:      } else {
        -: 8603:         
        -: 8604:
    #####: 8605:        fill_inbuf(0);
        -: 8606:         
        -: 8607:
        -: 8608:      }
    #####: 8609:      if (inptr < insize) {
    #####: 8610:        tmp___29 = inptr;
    #####: 8611:        inptr ++;
    #####: 8612:      } else {
        -: 8613:         
        -: 8614:
    #####: 8615:        fill_inbuf(0);
        -: 8616:         
        -: 8617:
        -: 8618:      }
    #####: 8619:      if (((int )flags___0 & 2) != 0) {
    #####: 8620:        if (inptr < insize) {
    #####: 8621:          tmp___30 = inptr;
    #####: 8622:          inptr ++;
    #####: 8623:          tmp___32 = (int )inbuf[tmp___30];
    #####: 8624:        } else {
        -: 8625:           
        -: 8626:
    #####: 8627:          tmp___31 = fill_inbuf(0);
    #####: 8628:          tmp___32 = tmp___31;
        -: 8629:           
        -: 8630:
        -: 8631:        }
    #####: 8632:        part = (unsigned int )tmp___32;
    #####: 8633:        if (inptr < insize) {
    #####: 8634:          tmp___33 = inptr;
    #####: 8635:          inptr ++;
    #####: 8636:          tmp___35 = (int )inbuf[tmp___33];
    #####: 8637:        } else {
        -: 8638:           
        -: 8639:
    #####: 8640:          tmp___34 = fill_inbuf(0);
    #####: 8641:          tmp___35 = tmp___34;
        -: 8642:           
        -: 8643:
        -: 8644:        }
    #####: 8645:        part |= (unsigned int )tmp___35 << 8;
    #####: 8646:        if (verbose) {
        -: 8647:           
        -: 8648:
    #####: 8649:          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s: part number %u\n",
    #####: 8650:                  progname, ifname, part);
        -: 8651:           
        -: 8652:
    #####: 8653:        }
    #####: 8654:      }
    #####: 8655:      if (((int )flags___0 & 4) != 0) {
    #####: 8656:        if (inptr < insize) {
    #####: 8657:          tmp___36 = inptr;
    #####: 8658:          inptr ++;
    #####: 8659:          tmp___38 = (int )inbuf[tmp___36];
    #####: 8660:        } else {
        -: 8661:           
        -: 8662:
    #####: 8663:          tmp___37 = fill_inbuf(0);
    #####: 8664:          tmp___38 = tmp___37;
        -: 8665:           
        -: 8666:
        -: 8667:        }
    #####: 8668:        len = (unsigned int )tmp___38;
    #####: 8669:        if (inptr < insize) {
    #####: 8670:          tmp___39 = inptr;
    #####: 8671:          inptr ++;
    #####: 8672:          tmp___41 = (int )inbuf[tmp___39];
    #####: 8673:        } else {
        -: 8674:           
        -: 8675:
    #####: 8676:          tmp___40 = fill_inbuf(0);
    #####: 8677:          tmp___41 = tmp___40;
        -: 8678:           
        -: 8679:
        -: 8680:        }
    #####: 8681:        len |= (unsigned int )tmp___41 << 8;
    #####: 8682:        if (verbose) {
        -: 8683:           
        -: 8684:
    #####: 8685:          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s: extra field of %u bytes ignored\n",
    #####: 8686:                  progname, ifname, len);
        -: 8687:           
        -: 8688:
    #####: 8689:        }
        -: 8690:        {
    #####: 8691:        while (1) {
        -: 8692:                                           ;
    #####: 8693:          tmp___43 = len;
    #####: 8694:          len --;
    #####: 8695:          if (! tmp___43) {
    #####: 8696:            goto while_break;
        -: 8697:          }
    #####: 8698:          if (inptr < insize) {
    #####: 8699:            tmp___42 = inptr;
    #####: 8700:            inptr ++;
    #####: 8701:          } else {
        -: 8702:             
        -: 8703:
    #####: 8704:            fill_inbuf(0);
        -: 8705:             
        -: 8706:
        -: 8707:          }
        -: 8708:        }
        -: 8709:        while_break: /* CIL Label */ ;
        -: 8710:        }
    #####: 8711:      }
    #####: 8712:      if (((int )flags___0 & 8) != 0) {
    #####: 8713:        if (no_name) {
    #####: 8714:          goto _L___0;
        -: 8715:        } else { //Added block
    #####: 8716:        if (to_stdout) {
    #####: 8717:          if (! list) {
    #####: 8718:            goto _L___0;
        -: 8719:          } else {
    #####: 8720:            goto _L___1;
        -: 8721:          }
    #####: 8722:        } else { //Added block
        -: 8723:        _L___1: 
    #####: 8724:        if (part_nb > 1) {
        -: 8725:          _L___0: 
        -: 8726:          {
    #####: 8727:          while (1) {
        -: 8728:                                                 ;
    #####: 8729:            if (inptr < insize) {
    #####: 8730:              tmp___44 = inptr;
    #####: 8731:              inptr ++;
    #####: 8732:              c = (char )inbuf[tmp___44];
    #####: 8733:            } else {
        -: 8734:               
        -: 8735:
    #####: 8736:              tmp___45 = fill_inbuf(0);
    #####: 8737:              c = (char )tmp___45;
        -: 8738:               
        -: 8739:
        -: 8740:            }
    #####: 8741:            if (! ((int )c != 0)) {
    #####: 8742:              goto while_break___0;
        -: 8743:            }
        -: 8744:          }
        -: 8745:          while_break___0: /* CIL Label */ ;
        -: 8746:          }
    #####: 8747:        } else {
        -: 8748:          {
    #####: 8749:          tmp___46 = base_name(ofname);
    #####: 8750:          p = tmp___46;
    #####: 8751:          base = p;
        -: 8752:          }
        -: 8753:          {
    #####: 8754:          while (1) {
        -: 8755:                                                 ;
    #####: 8756:            if (inptr < insize) {
    #####: 8757:              tmp___47 = inptr;
    #####: 8758:              inptr ++;
    #####: 8759:              tmp___49 = (int )inbuf[tmp___47];
    #####: 8760:            } else {
        -: 8761:               
        -: 8762:
    #####: 8763:              tmp___48 = fill_inbuf(0);
    #####: 8764:              tmp___49 = tmp___48;
        -: 8765:               
        -: 8766:
        -: 8767:            }
    #####: 8768:            *p = (char )tmp___49;
    #####: 8769:            tmp___50 = p;
    #####: 8770:            p ++;
    #####: 8771:            if ((int )*tmp___50 == 0) {
    #####: 8772:              goto while_break___1;
        -: 8773:            }
    #####: 8774:            if ((unsigned long )p >= (unsigned long )(ofname + sizeof(ofname))) {
        -: 8775:               
        -: 8776:
    #####: 8777:              error((char *)"corrupted input -- file name too large");
        -: 8778:               
        -: 8779:
    #####: 8780:            }
        -: 8781:          }
        -: 8782:          while_break___1: /* CIL Label */ ;
        -: 8783:          }
    #####: 8784:          if (! list) {
    #####: 8785:            if (base) {
    #####: 8786:              list = 0;
    #####: 8787:            }
    #####: 8788:          }
        -: 8789:        }
        -: 8790:        }
        -: 8791:        }
    #####: 8792:      }
    #####: 8793:      if (((int )flags___0 & 16) != 0) {
        -: 8794:         
        -: 8795:
    #####: 8796:        while (1) {
        -: 8797:                                               ;
    #####: 8798:          if (inptr < insize) {
    #####: 8799:            tmp___51 = inptr;
    #####: 8800:            inptr ++;
    #####: 8801:            tmp___53 = (int )inbuf[tmp___51];
    #####: 8802:          } else {
        -: 8803:             
        -: 8804:
    #####: 8805:            tmp___52 = fill_inbuf(0);
    #####: 8806:            tmp___53 = tmp___52;
        -: 8807:             
        -: 8808:
        -: 8809:          }
    #####: 8810:          if (! (tmp___53 != 0)) {
    #####: 8811:            goto while_break___2;
        -: 8812:          }
        -: 8813:        }
        -: 8814:        while_break___2: /* CIL Label */ ;
        -: 8815:         
        -: 8816:
    #####: 8817:      }
    #####: 8818:      if (part_nb == 1) {
    #####: 8819:        header_bytes = (off_t )((unsigned long )inptr + 2UL * sizeof(long ));
    #####: 8820:      }
    #####: 8821:    } else {
        -: 8822:      {
    #####: 8823:      tmp___58 = memcmp((void const   *)(magic), (void const   *)"PK\003\004", (size_t )2);
        -: 8824:      }
    #####: 8825:      if (tmp___58 == 0) {
    #####: 8826:        if (inptr == 2U) {
        -: 8827:          {
    #####: 8828:          tmp___59 = memcmp((void const   *)((char *)(inbuf)), (void const   *)"PK\003\004",
        -: 8829:                            (size_t )4);
        -: 8830:          }
    #####: 8831:          if (tmp___59 == 0) {
        -: 8832:            {
    #####: 8833:            inptr = 0U;
    #####: 8834:            work = & unzip;
    #####: 8835:            tmp___54 = check_zipfile(in);
        -: 8836:            }
    #####: 8837:            if (tmp___54 != 0) {
    #####: 8838:              return (-1);
        -: 8839:            }
    #####: 8840:            last_member = 1;
    #####: 8841:          } else {
    #####: 8842:            goto _L___3;
        -: 8843:          }
    #####: 8844:        } else {
    #####: 8845:          goto _L___3;
        -: 8846:        }
    #####: 8847:      } else {
        -: 8848:        _L___3: 
        -: 8849:        {
    #####: 8850:        tmp___57 = memcmp((void const   *)(magic), (void const   *)"\037\036", (size_t )2);
        -: 8851:        }
    #####: 8852:        if (tmp___57 == 0) {
    #####: 8853:          work = & unpack;
    #####: 8854:          method = 2;
    #####: 8855:        } else {
        -: 8856:          {
    #####: 8857:          tmp___56 = memcmp((void const   *)(magic), (void const   *)"\037\235", (size_t )2);
        -: 8858:          }
    #####: 8859:          if (tmp___56 == 0) {
    #####: 8860:            work = & unlzw;
    #####: 8861:            method = 1;
    #####: 8862:            last_member = 1;
    #####: 8863:          } else {
        -: 8864:            {
    #####: 8865:            tmp___55 = memcmp((void const   *)(magic), (void const   *)"\037\240",
        -: 8866:                              (size_t )2);
        -: 8867:            }
    #####: 8868:            if (tmp___55 == 0) {
    #####: 8869:              work = & unlzh;
    #####: 8870:              method = 3;
    #####: 8871:              last_member = 1;
    #####: 8872:            } else { //Added block
    #####: 8873:            if (force) {
    #####: 8874:              if (to_stdout) {
    #####: 8875:                if (! list) {
    #####: 8876:                  method = 0;
    #####: 8877:                  work = & copy;
    #####: 8878:                  inptr = 0U;
    #####: 8879:                  last_member = 1;
    #####: 8880:                }
    #####: 8881:              }
    #####: 8882:            }
        -: 8883:            }
        -: 8884:          }
        -: 8885:        }
        -: 8886:      }
        -: 8887:    }
        -: 8888:  }
    #####: 8889:  if (method >= 0) {
    #####: 8890:    return (method);
        -: 8891:  }
    #####: 8892:  if (part_nb == 1) {
        -: 8893:    {
    #####: 8894:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: not in gzip format\n",
    #####: 8895:            progname, ifname);
    #####: 8896:    exit_code = 1;
        -: 8897:    }
    #####: 8898:    return (-1);
        -: 8899:  } else {
    #####: 8900:    if ((int )magic[0] == 0) {
    #####: 8901:      inbyte = imagic1;
        -: 8902:      {
    #####: 8903:      while (1) {
        -: 8904:                                             ;
    #####: 8905:        if (! (inbyte == 0)) {
    #####: 8906:          goto while_break___3;
        -: 8907:        }
    #####: 8908:        goto __Cont;
        -: 8909:        __Cont: 
    #####: 8910:        if (inptr < insize) {
    #####: 8911:          tmp___62 = inptr;
    #####: 8912:          inptr ++;
    #####: 8913:          inbyte = (int )inbuf[tmp___62];
    #####: 8914:        } else {
        -: 8915:           
        -: 8916:
    #####: 8917:          tmp___63 = fill_inbuf(1);
    #####: 8918:          inbyte = tmp___63;
        -: 8919:           
        -: 8920:
        -: 8921:        }
        -: 8922:      }
        -: 8923:      while_break___3: /* CIL Label */ ;
        -: 8924:      }
    #####: 8925:      if (inbyte == -1) {
    #####: 8926:        if (verbose) {
    #####: 8927:          if (! quiet) {
        -: 8928:             
        -: 8929:
    #####: 8930:            fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: decompression OK, trailing zero bytes ignored\n",
    #####: 8931:                    progname, ifname);
        -: 8932:             
        -: 8933:
    #####: 8934:          }
    #####: 8935:          if (exit_code == 0) {
    #####: 8936:            exit_code = 2;
    #####: 8937:          }
    #####: 8938:        }
    #####: 8939:        return (-3);
        -: 8940:      }
    #####: 8941:    }
    #####: 8942:    if (! quiet) {
        -: 8943:       
        -: 8944:
    #####: 8945:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n%s: %s: decompression OK, trailing garbage ignored\n",
    #####: 8946:              progname, ifname);
        -: 8947:       
        -: 8948:
    #####: 8949:    }
    #####: 8950:    if (exit_code == 0) {
    #####: 8951:      exit_code = 2;
    #####: 8952:    }
    #####: 8953:    return (-2);
        -: 8954:  }
        -: 8955:}
    #####: 8956:}
        -: 8957:static int first_time  =    1;
        -: 8958:static char *methods[9]  = 
        -: 8959:  {      (char *)"store",      (char *)"compr",      (char *)"pack ",      (char *)"lzh  ", 
        -: 8960:        (char *)"",      (char *)"",      (char *)"",      (char *)"", 
        -: 8961:        (char *)"defla"};
    #####: 8962:static void do_list(int ifd___0 , int method___0 ) 
        -: 8963:{ 
        -: 8964:  ulg crc___1 ;
        -: 8965:  char *date ;
        -: 8966:  int positive_off_t_width ;
        -: 8967:  off_t o ;
        -: 8968:  uch buf[8] ;
        -: 8969:  ssize_t tmp ;
        -: 8970:  char *tmp___0 ;
        -: 8971:
        -: 8972:  {
    #####: 8973:  positive_off_t_width = 1;
    #####: 8974:  o = -1L - (-1L << (sizeof(off_t ) * 8UL - 1UL));
        -: 8975:  {
    #####: 8976:  while (1) {
        -: 8977:                                     ;
    #####: 8978:    if (! (9L < o)) {
    #####: 8979:      goto while_break;
        -: 8980:    }
    #####: 8981:    positive_off_t_width ++;
    #####: 8982:    o /= 10L;
        -: 8983:  }
        -: 8984:  while_break: /* CIL Label */ ;
        -: 8985:  }
    #####: 8986:  if (first_time) {
    #####: 8987:    if (method___0 >= 0) {
    #####: 8988:      first_time = 0;
    #####: 8989:      if (verbose) {
        -: 8990:         
        -: 8991:
    #####: 8992:        printf((char const   * __restrict  )"method  crc     date  time  ");
        -: 8993:         
        -: 8994:
    #####: 8995:      }
    #####: 8996:      if (! quiet) {
        -: 8997:         
        -: 8998:
    #####: 8999:        printf((char const   * __restrict  )"%*.*s %*.*s  ratio uncompressed_name\n",
    #####: 9000:               positive_off_t_width, positive_off_t_width, "compressed", positive_off_t_width,
    #####: 9001:               positive_off_t_width, "uncompressed");
        -: 9002:         
        -: 9003:
    #####: 9004:      }
    #####: 9005:    } else {
    #####: 9006:      goto _L;
        -: 9007:    }
    #####: 9008:  } else { //Added block
        -: 9009:  _L: 
    #####: 9010:  if (method___0 < 0) {
    #####: 9011:    if (total_in <= 0L) {
    #####: 9012:      return;
        -: 9013:    } else { //Added block
    #####: 9014:    if (total_out <= 0L) {
    #####: 9015:      return;
        -: 9016:    }
        -: 9017:    }
    #####: 9018:    if (verbose) {
        -: 9019:       
        -: 9020:
    #####: 9021:      printf((char const   * __restrict  )"                            ");
        -: 9022:       
        -: 9023:
    #####: 9024:    }
    #####: 9025:    if (verbose) {
        -: 9026:       
        -: 9027:
    #####: 9028:      fprint_off(stdout, total_in, positive_off_t_width);
    #####: 9029:      printf((char const   * __restrict  )" ");
    #####: 9030:      fprint_off(stdout, total_out, positive_off_t_width);
    #####: 9031:      printf((char const   * __restrict  )" ");
        -: 9032:       
        -: 9033:
    #####: 9034:    } else { //Added block
    #####: 9035:    if (! quiet) {
        -: 9036:       
        -: 9037:
    #####: 9038:      fprint_off(stdout, total_in, positive_off_t_width);
    #####: 9039:      printf((char const   * __restrict  )" ");
    #####: 9040:      fprint_off(stdout, total_out, positive_off_t_width);
    #####: 9041:      printf((char const   * __restrict  )" ");
        -: 9042:       
        -: 9043:
    #####: 9044:    }
        -: 9045:    }
        -: 9046:    {
    #####: 9047:    display_ratio(total_out - (total_in - header_bytes), total_out, stdout);
    #####: 9048:    printf((char const   * __restrict  )" (totals)\n");
        -: 9049:    }
    #####: 9050:    return;
        -: 9051:  }
        -: 9052:  }
    #####: 9053:  crc___1 = (ulg )(~ 0);
    #####: 9054:  bytes_out = -1L;
    #####: 9055:  bytes_in = ifile_size;
    #####: 9056:  if (method___0 == 8) {
    #####: 9057:    if (! last_member) {
        -: 9058:      {
    #####: 9059:      bytes_in = lseek(ifd___0, (off_t )-8, 2);
        -: 9060:      }
    #####: 9061:      if (bytes_in != -1L) {
        -: 9062:        {
    #####: 9063:        bytes_in += 8L;
    #####: 9064:        tmp = read(ifd___0, (void *)((char *)(buf)), sizeof(buf));
        -: 9065:        }
    #####: 9066:        if ((unsigned long )tmp != sizeof(buf)) {
        -: 9067:           
        -: 9068:
    #####: 9069:          read_error();
        -: 9070:           
        -: 9071:
    #####: 9072:        }
    #####: 9073:        crc___1 = (ulg )((int )((ush )buf[0]) | ((int )((ush )buf[1]) << 8)) | ((ulg )((int )((ush )*((buf + 2) + 0)) | ((int )((ush )*((buf + 2) + 1)) << 8)) << 16);
    #####: 9074:        bytes_out = (off_t )((ulg )((int )((ush )*((buf + 4) + 0)) | ((int )((ush )*((buf + 4) + 1)) << 8)) | ((ulg )((int )((ush )*(((buf + 4) + 2) + 0)) | ((int )((ush )*(((buf + 4) + 2) + 1)) << 8)) << 16));
    #####: 9075:      }
    #####: 9076:    }
    #####: 9077:  }
        -: 9078:  {
    #####: 9079:  tmp___0 = ctime((time_t const   *)(& time_stamp));
    #####: 9080:  date = tmp___0 + 4;
    #####: 9081:  *(date + 12) = (char )'\000';
        -: 9082:  }
    #####: 9083:  if (verbose) {
        -: 9084:     
        -: 9085:
    #####: 9086:    printf((char const   * __restrict  )"%5s %08lx %11s ", methods[method___0], crc___1,
    #####: 9087:           date);
        -: 9088:     
        -: 9089:
    #####: 9090:  }
        -: 9091:  {
    #####: 9092:  fprint_off(stdout, bytes_in, positive_off_t_width);
    #####: 9093:  printf((char const   * __restrict  )" ");
    #####: 9094:  fprint_off(stdout, bytes_out, positive_off_t_width);
    #####: 9095:  printf((char const   * __restrict  )" ");
        -: 9096:  }
    #####: 9097:  if (bytes_in == -1L) {
    #####: 9098:    total_in = -1L;
    #####: 9099:    header_bytes = (off_t )0;
    #####: 9100:    bytes_out = header_bytes;
    #####: 9101:    bytes_in = bytes_out;
    #####: 9102:  } else { //Added block
    #####: 9103:  if (total_in >= 0L) {
    #####: 9104:    total_in += bytes_in;
    #####: 9105:  }
        -: 9106:  }
    #####: 9107:  if (bytes_out == -1L) {
    #####: 9108:    total_out = -1L;
    #####: 9109:    header_bytes = (off_t )0;
    #####: 9110:    bytes_out = header_bytes;
    #####: 9111:    bytes_in = bytes_out;
    #####: 9112:  } else { //Added block
    #####: 9113:  if (total_out >= 0L) {
    #####: 9114:    total_out += bytes_out;
    #####: 9115:  }
        -: 9116:  }
        -: 9117:  {
    #####: 9118:  display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, stdout);
    #####: 9119:  printf((char const   * __restrict  )" %s\n", ofname);
        -: 9120:  }
    #####: 9121:  return;
        -: 9122:}
    #####: 9123:}
    #####: 9124:static int same_file(struct stat *stat1 , struct stat *stat2 ) 
        -: 9125:{ 
        -: 9126:  int tmp ;
        -: 9127:
        -: 9128:  {
    #####: 9129:  if (stat1->st_ino == stat2->st_ino) {
    #####: 9130:    if (stat1->st_dev == stat2->st_dev) {
    #####: 9131:      tmp = 1;
    #####: 9132:    } else {
    #####: 9133:      tmp = 0;
        -: 9134:    }
    #####: 9135:  } else {
    #####: 9136:    tmp = 0;
        -: 9137:  }
    #####: 9138:  return (tmp);
        -: 9139:}
        -: 9140:}
    #####: 9141:static int name_too_long(char *name , struct stat *statb ) 
        -: 9142:{ 
        -: 9143:  int s ;
        -: 9144:  size_t tmp ;
        -: 9145:  char c ;
        -: 9146:  struct stat tstat ;
        -: 9147:  int res ;
        -: 9148:  int tmp___0 ;
        -: 9149:  int tmp___1 ;
        -: 9150:  int tmp___2 ;
        -: 9151:
        -: 9152:  {
        -: 9153:  {
    #####: 9154:  tmp = strlen((char const   *)name);
    #####: 9155:  s = (int )tmp;
    #####: 9156:  c = *(name + (s - 1));
    #####: 9157:  tstat = *statb;
    #####: 9158:  *(name + (s - 1)) = (char )'\000';
    #####: 9159:  tmp___0 = stat((char const   * __restrict  )name, (struct stat * __restrict  )(& tstat));
        -: 9160:  }
    #####: 9161:  if (tmp___0 == 0) {
        -: 9162:    {
    #####: 9163:    tmp___1 = same_file(statb, & tstat);
        -: 9164:    }
    #####: 9165:    if (tmp___1) {
    #####: 9166:      tmp___2 = 1;
    #####: 9167:    } else {
    #####: 9168:      tmp___2 = 0;
        -: 9169:    }
    #####: 9170:  } else {
    #####: 9171:    tmp___2 = 0;
        -: 9172:  }
    #####: 9173:  res = tmp___2;
    #####: 9174:  *(name + (s - 1)) = c;
    #####: 9175:  return (res);
        -: 9176:}
        -: 9177:}
    #####: 9178:static void shorten_name(char *name ) 
        -: 9179:{ 
        -: 9180:  int len ;
        -: 9181:  char *trunc ;
        -: 9182:  int plen ;
        -: 9183:  int min_part ;
        -: 9184:  char *p ;
        -: 9185:  size_t tmp ;
        -: 9186:  int tmp___0 ;
        -: 9187:  size_t tmp___1 ;
        -: 9188:  char *tmp___2 ;
        -: 9189:
        -: 9190:  {
        -: 9191:  {
    #####: 9192:  trunc = (char *)((void *)0);
    #####: 9193:  min_part = 3;
    #####: 9194:  tmp = strlen((char const   *)name);
    #####: 9195:  len = (int )tmp;
        -: 9196:  }
    #####: 9197:  if (decompress) {
    #####: 9198:    if (len <= 1) {
        -: 9199:       
        -: 9200:
    #####: 9201:      error((char *)"name too short");
        -: 9202:       
        -: 9203:
    #####: 9204:    }
    #####: 9205:    *(name + (len - 1)) = (char )'\000';
    #####: 9206:    return;
        -: 9207:  }
        -: 9208:  {
    #####: 9209:  p = get_suffix(name);
        -: 9210:  }
    #####: 9211:  if ((unsigned long )p == (unsigned long )((void *)0)) {
        -: 9212:     
        -: 9213:
    #####: 9214:    error((char *)"can\'t recover suffix\n");
        -: 9215:     
        -: 9216:
    #####: 9217:  }
    #####: 9218:  *p = (char )'\000';
    #####: 9219:  save_orig_name = 1;
    #####: 9220:  if (len > 4) {
        -: 9221:    {
    #####: 9222:    tmp___0 = strcmp((char const   *)(p - 4), ".tar");
        -: 9223:    }
    #####: 9224:    if (tmp___0 == 0) {
        -: 9225:      {
    #####: 9226:      strcpy((char * __restrict  )(p - 4), (char const   * __restrict  )".tgz");
        -: 9227:      }
    #####: 9228:      return;
        -: 9229:    }
    #####: 9230:  }
        -: 9231:  {
    #####: 9232:  while (1) {
        -: 9233:                                     ;
        -: 9234:    {
    #####: 9235:    p = strrchr((char const   *)name, '/');
        -: 9236:    }
    #####: 9237:    if (p) {
    #####: 9238:      p ++;
    #####: 9239:    } else {
    #####: 9240:      p = name;
        -: 9241:    }
        -: 9242:    {
    #####: 9243:    while (1) {
        -: 9244:                                           ;
    #####: 9245:      if (! *p) {
    #####: 9246:        goto while_break___0;
        -: 9247:      }
        -: 9248:      {
    #####: 9249:      tmp___1 = strcspn((char const   *)p, ".");
    #####: 9250:      plen = (int )tmp___1;
    #####: 9251:      p += plen;
        -: 9252:      }
    #####: 9253:      if (plen > min_part) {
    #####: 9254:        trunc = p - 1;
    #####: 9255:      }
    #####: 9256:      if (*p) {
    #####: 9257:        p ++;
    #####: 9258:      }
        -: 9259:    }
        -: 9260:    while_break___0: /* CIL Label */ ;
        -: 9261:    }
    #####: 9262:    if ((unsigned long )trunc == (unsigned long )((void *)0)) {
    #####: 9263:      min_part --;
    #####: 9264:      if (! (min_part != 0)) {
    #####: 9265:        goto while_break;
        -: 9266:      }
    #####: 9267:    } else {
    #####: 9268:      goto while_break;
        -: 9269:    }
        -: 9270:  }
        -: 9271:  while_break: /* CIL Label */ ;
        -: 9272:  }
    #####: 9273:  if ((unsigned long )trunc != (unsigned long )((void *)0)) {
        -: 9274:    {
    #####: 9275:    while (1) {
        -: 9276:                                           ;
    #####: 9277:      *(trunc + 0) = *(trunc + 1);
    #####: 9278:      tmp___2 = trunc;
    #####: 9279:      trunc ++;
    #####: 9280:      if (! *tmp___2) {
    #####: 9281:        goto while_break___1;
        -: 9282:      }
        -: 9283:    }
        -: 9284:    while_break___1: /* CIL Label */ ;
        -: 9285:    }
    #####: 9286:    trunc --;
    #####: 9287:  } else {
        -: 9288:    {
    #####: 9289:    trunc = strrchr((char const   *)name, (int )*("." + 0));
        -: 9290:    }
    #####: 9291:    if ((unsigned long )trunc == (unsigned long )((void *)0)) {
        -: 9292:       
        -: 9293:
    #####: 9294:      error((char *)"internal error in shorten_name");
        -: 9295:       
        -: 9296:
    #####: 9297:    }
    #####: 9298:    if ((int )*(trunc + 1) == 0) {
    #####: 9299:      trunc --;
    #####: 9300:    }
        -: 9301:  }
        -: 9302:  {
    #####: 9303:  strcpy((char * __restrict  )trunc, (char const   * __restrict  )z_suffix);
        -: 9304:  }
    #####: 9305:  return;
        -: 9306:}
    #####: 9307:}
    #####: 9308:static int check_ofname(void) 
        -: 9309:{ 
        -: 9310:  struct stat ostat ;
        -: 9311:  int *tmp ;
        -: 9312:  int *tmp___0 ;
        -: 9313:  int tmp___1 ;
        -: 9314:  int tmp___2 ;
        -: 9315:  int tmp___3 ;
        -: 9316:  char const   *tmp___4 ;
        -: 9317:  int tmp___5 ;
        -: 9318:  int tmp___6 ;
        -: 9319:  char response[80] ;
        -: 9320:  int tmp___7 ;
        -: 9321:  int tmp___8 ;
        -: 9322:  int tmp___10 ;
        -: 9323:  int tmp___11 ;
        -: 9324:  unsigned short const   **tmp___12 ;
        -: 9325:  int tmp___13 ;
        -: 9326:
        -: 9327:  {
        -: 9328:  {
    #####: 9329:  tmp = __errno_location();
    #####: 9330:  *tmp = 0;
        -: 9331:  }
        -: 9332:  {
    #####: 9333:  while (1) {
        -: 9334:                                     ;
        -: 9335:    {
    #####: 9336:    tmp___1 = stat((char const   * __restrict  )(ofname), (struct stat * __restrict  )(& ostat));
        -: 9337:    }
    #####: 9338:    if (! (tmp___1 != 0)) {
    #####: 9339:      goto while_break;
        -: 9340:    }
        -: 9341:    {
    #####: 9342:    tmp___0 = __errno_location();
        -: 9343:    }
    #####: 9344:    if (*tmp___0 != 36) {
    #####: 9345:      return (0);
        -: 9346:    }
        -: 9347:    {
    #####: 9348:    shorten_name(ofname);
        -: 9349:    }
        -: 9350:  }
        -: 9351:  while_break: /* CIL Label */ ;
        -: 9352:  }
    #####: 9353:  if (! decompress) {
        -: 9354:    {
    #####: 9355:    tmp___3 = name_too_long(ofname, & ostat);
        -: 9356:    }
    #####: 9357:    if (tmp___3) {
        -: 9358:      {
    #####: 9359:      shorten_name(ofname);
    #####: 9360:      tmp___2 = stat((char const   * __restrict  )(ofname), (struct stat * __restrict  )(& ostat));
        -: 9361:      }
    #####: 9362:      if (tmp___2 != 0) {
    #####: 9363:        return (0);
        -: 9364:      }
    #####: 9365:    }
    #####: 9366:  }
        -: 9367:  {
    #####: 9368:  tmp___6 = same_file(& istat, & ostat);
        -: 9369:  }
    #####: 9370:  if (tmp___6) {
        -: 9371:    {
    #####: 9372:    tmp___5 = strcmp((char const   *)(ifname), (char const   *)(ofname));
        -: 9373:    }
    #####: 9374:    if (tmp___5 == 0) {
    #####: 9375:      if (decompress) {
    #####: 9376:        tmp___4 = "de";
    #####: 9377:      } else {
    #####: 9378:        tmp___4 = "";
        -: 9379:      }
        -: 9380:      {
    #####: 9381:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s: cannot %scompress onto itself\n",
    #####: 9382:              progname, ifname, tmp___4);
        -: 9383:      }
    #####: 9384:    } else {
        -: 9385:       
        -: 9386:
    #####: 9387:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s and %s are the same file\n",
    #####: 9388:              progname, ifname, ofname);
        -: 9389:       
        -: 9390:
        -: 9391:    }
    #####: 9392:    exit_code = 1;
    #####: 9393:    return (1);
        -: 9394:  }
    #####: 9395:  if (! force) {
        -: 9396:    {
    #####: 9397:    strcpy((char * __restrict  )(response), (char const   * __restrict  )"n");
    #####: 9398:    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s already exists;",
    #####: 9399:            progname, ofname);
        -: 9400:    }
    #####: 9401:    if (foreground) {
        -: 9402:      {
    #####: 9403:      tmp___7 = fileno(stdin);
    #####: 9404:      tmp___8 = isatty(tmp___7);
        -: 9405:      }
    #####: 9406:      if (tmp___8) {
        -: 9407:         
        -: 9408:
    #####: 9409:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )" do you wish to overwrite (y or n)? ");
    #####: 9410:        fflush(stderr);
    #####: 9411:        fgets((char * __restrict  )(response), (int )(sizeof(response) - 1UL), (FILE * __restrict  )stdin);
        -: 9412:         
        -: 9413:
    #####: 9414:      }
    #####: 9415:    }
        -: 9416:    {
    #####: 9417:    tmp___12 = __ctype_b_loc();
        -: 9418:    }
    #####: 9419:    if ((int const   )*(*tmp___12 + (int )((unsigned char )response[0])) & 256) {
        -: 9420:       
        -: 9421:
    #####: 9422:      tmp___10 = tolower((int )((unsigned char )response[0]));
    #####: 9423:      tmp___11 = tmp___10;
        -: 9424:       
        -: 9425:
    #####: 9426:    } else {
    #####: 9427:      tmp___11 = (int )((unsigned char )response[0]);
        -: 9428:    }
    #####: 9429:    if (tmp___11 != 121) {
        -: 9430:      {
    #####: 9431:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\tnot overwritten\n");
        -: 9432:      }
    #####: 9433:      if (exit_code == 0) {
    #####: 9434:        exit_code = 2;
    #####: 9435:      }
    #####: 9436:      return (1);
        -: 9437:    }
    #####: 9438:  }
        -: 9439:  {
    #####: 9440:  tmp___13 = xunlink(ofname);
        -: 9441:  }
    #####: 9442:  if (tmp___13) {
        -: 9443:    {
    #####: 9444:    progerror(ofname);
        -: 9445:    }
    #####: 9446:    return (1);
        -: 9447:  }
    #####: 9448:  return (0);
        -: 9449:}
    #####: 9450:}
    #####: 9451:static void reset_times(char *name , struct stat *statb ) 
        -: 9452:{ 
        -: 9453:  struct utimbuf timep ;
        -: 9454:  int e ;
        -: 9455:  int *tmp ;
        -: 9456:  int *tmp___0 ;
        -: 9457:  int tmp___1 ;
        -: 9458:
        -: 9459:  {
        -: 9460:  {
    #####: 9461:  timep.actime = statb->st_atim.tv_sec;
    #####: 9462:  timep.modtime = statb->st_mtim.tv_sec;
    #####: 9463:  tmp___1 = utime((char const   *)name, (struct utimbuf  const  *)(& timep));
        -: 9464:  }
    #####: 9465:  if (tmp___1) {
    #####: 9466:    if (! ((statb->st_mode & 61440U) == 16384U)) {
        -: 9467:      {
    #####: 9468:      tmp = __errno_location();
    #####: 9469:      e = *tmp;
        -: 9470:      }
    #####: 9471:      if (! quiet) {
        -: 9472:         
        -: 9473:
    #####: 9474:        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: ",
    #####: 9475:                progname);
        -: 9476:         
        -: 9477:
    #####: 9478:      }
    #####: 9479:      if (exit_code == 0) {
    #####: 9480:        exit_code = 2;
    #####: 9481:      }
    #####: 9482:      if (! quiet) {
        -: 9483:         
        -: 9484:
    #####: 9485:        tmp___0 = __errno_location();
    #####: 9486:        *tmp___0 = e;
    #####: 9487:        perror((char const   *)(ofname));
        -: 9488:         
        -: 9489:
    #####: 9490:      }
    #####: 9491:    }
    #####: 9492:  }
    #####: 9493:  return;
        -: 9494:}
        -: 9495:}
    #####: 9496:static void copy_stat(struct stat *ifstat ) 
        -: 9497:{ 
        -: 9498:  int e ;
        -: 9499:  int *tmp ;
        -: 9500:  int *tmp___0 ;
        -: 9501:  int tmp___1 ;
        -: 9502:  int e___0 ;
        -: 9503:  int *tmp___2 ;
        -: 9504:  int *tmp___3 ;
        -: 9505:  int tmp___4 ;
        -: 9506:
        -: 9507:  {
    #####: 9508:  if (decompress) {
    #####: 9509:    if (time_stamp != 0L) {
    #####: 9510:      if (ifstat->st_mtim.tv_sec != time_stamp) {
    #####: 9511:        ifstat->st_mtim.tv_sec = time_stamp;
    #####: 9512:        if (verbose > 1) {
        -: 9513:           
        -: 9514:
    #####: 9515:          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: time stamp restored\n",
        -: 9516:                  ofname);
        -: 9517:           
        -: 9518:
    #####: 9519:        }
    #####: 9520:      }
    #####: 9521:    }
    #####: 9522:  }
        -: 9523:  {
    #####: 9524:  reset_times(ofname, ifstat);
    #####: 9525:  tmp___1 = chmod((char const   *)(ofname), ifstat->st_mode & 4095U);
        -: 9526:  }
    #####: 9527:  if (tmp___1) {
        -: 9528:    {
    #####: 9529:    tmp = __errno_location();
    #####: 9530:    e = *tmp;
        -: 9531:    }
    #####: 9532:    if (! quiet) {
        -: 9533:       
        -: 9534:
    #####: 9535:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: ", progname);
        -: 9536:       
        -: 9537:
    #####: 9538:    }
    #####: 9539:    if (exit_code == 0) {
    #####: 9540:      exit_code = 2;
    #####: 9541:    }
    #####: 9542:    if (! quiet) {
        -: 9543:       
        -: 9544:
    #####: 9545:      tmp___0 = __errno_location();
    #####: 9546:      *tmp___0 = e;
    #####: 9547:      perror((char const   *)(ofname));
        -: 9548:       
        -: 9549:
    #####: 9550:    }
    #####: 9551:  }
        -: 9552:  {
    #####: 9553:  chown((char const   *)(ofname), ifstat->st_uid, ifstat->st_gid);
    #####: 9554:  remove_ofname = 0;
    #####: 9555:  tmp___4 = xunlink(ifname);
        -: 9556:  }
    #####: 9557:  if (tmp___4) {
        -: 9558:    {
    #####: 9559:    tmp___2 = __errno_location();
    #####: 9560:    e___0 = *tmp___2;
        -: 9561:    }
    #####: 9562:    if (! quiet) {
        -: 9563:       
        -: 9564:
    #####: 9565:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: ", progname);
        -: 9566:       
        -: 9567:
    #####: 9568:    }
    #####: 9569:    if (exit_code == 0) {
    #####: 9570:      exit_code = 2;
    #####: 9571:    }
    #####: 9572:    if (! quiet) {
        -: 9573:       
        -: 9574:
    #####: 9575:      tmp___3 = __errno_location();
    #####: 9576:      *tmp___3 = e___0;
    #####: 9577:      perror((char const   *)(ifname));
        -: 9578:       
        -: 9579:
    #####: 9580:    }
    #####: 9581:  }
    #####: 9582:  return;
        -: 9583:}
        -: 9584:}
    #####: 9585:static void treat_dir(char *dir ) 
        -: 9586:{ 
        -: 9587:  struct dirent *dp ;
        -: 9588:  DIR *dirp ;
        -: 9589:  char nbuf[1024] ;
        -: 9590:  int len ;
        -: 9591:  int tmp ;
        -: 9592:  int tmp___0 ;
        -: 9593:  size_t tmp___1 ;
        -: 9594:  int tmp___2 ;
        -: 9595:  size_t tmp___3 ;
        -: 9596:  int *tmp___4 ;
        -: 9597:  int *tmp___5 ;
        -: 9598:  int tmp___6 ;
        -: 9599:
        -: 9600:  {
        -: 9601:  {
    #####: 9602:  dirp = opendir((char const   *)dir);
        -: 9603:  }
    #####: 9604:  if ((unsigned long )dirp == (unsigned long )((void *)0)) {
        -: 9605:    {
    #####: 9606:    progerror(dir);
        -: 9607:    }
    #####: 9608:    return;
        -: 9609:  }
        -: 9610:  {
    #####: 9611:  while (1) {
        -: 9612:    while_continue: /* CIL Label */ ;
        -: 9613:    {
    #####: 9614:    tmp___4 = __errno_location();
    #####: 9615:    *tmp___4 = 0;
    #####: 9616:    dp = readdir(dirp);
        -: 9617:    }
    #####: 9618:    if (! ((unsigned long )dp != (unsigned long )((void *)0))) {
    #####: 9619:      goto while_break;
        -: 9620:    }
        -: 9621:    {
    #####: 9622:    tmp = strcmp((char const   *)(dp->d_name), ".");
        -: 9623:    }
    #####: 9624:    if (tmp == 0) {
    #####: 9625:      goto while_continue;
        -: 9626:    } else {
        -: 9627:      {
    #####: 9628:      tmp___0 = strcmp((char const   *)(dp->d_name), "..");
        -: 9629:      }
    #####: 9630:      if (tmp___0 == 0) {
    #####: 9631:        goto while_continue;
        -: 9632:      }
        -: 9633:    }
        -: 9634:    {
    #####: 9635:    tmp___1 = strlen((char const   *)dir);
    #####: 9636:    len = (int )tmp___1;
    #####: 9637:    tmp___3 = strlen((char const   *)(dp->d_name));
        -: 9638:    }
    #####: 9639:    if (((size_t )len + tmp___3) + 1UL < 1023UL) {
        -: 9640:      {
    #####: 9641:      strcpy((char * __restrict  )(nbuf), (char const   * __restrict  )dir);
        -: 9642:      }
    #####: 9643:      if (len != 0) {
    #####: 9644:        tmp___2 = len;
    #####: 9645:        len ++;
    #####: 9646:        nbuf[tmp___2] = (char )'/';
    #####: 9647:      }
        -: 9648:      {
    #####: 9649:      strcpy((char * __restrict  )(nbuf + len), (char const   * __restrict  )(dp->d_name));
    #####: 9650:      treat_file(nbuf);
        -: 9651:      }
    #####: 9652:    } else {
        -: 9653:       
        -: 9654:
    #####: 9655:      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%s: %s/%s: pathname too long\n",
    #####: 9656:              progname, dir, dp->d_name);
    #####: 9657:      exit_code = 1;
        -: 9658:       
        -: 9659:
        -: 9660:    }
        -: 9661:  }
        -: 9662:  while_break: /* CIL Label */ ;
        -: 9663:  }
        -: 9664:  {
    #####: 9665:  tmp___5 = __errno_location();
        -: 9666:  }
    #####: 9667:  if (*tmp___5 != 0) {
        -: 9668:     
        -: 9669:
    #####: 9670:    progerror(dir);
        -: 9671:     
        -: 9672:
    #####: 9673:  }
        -: 9674:  {
    #####: 9675:  tmp___6 = closedir(dirp);
        -: 9676:  }
    #####: 9677:  if (tmp___6 != 0) {
        -: 9678:     
        -: 9679:
    #####: 9680:    progerror(dir);
        -: 9681:     
        -: 9682:
    #####: 9683:  }
    #####: 9684:  return;
        -: 9685:}
    #####: 9686:}
        -: 9687:static int in_exit  =    0;
        1: 9688:static void do_exit(int exitcode ) 
        -: 9689:{ 
        -: 9690:
        -: 9691:
        -: 9692:   
        -: 9693:
        1: 9694:  if (in_exit) {
        -: 9695:     
        -: 9696:
    #####: 9697:    exit(exitcode);
        -: 9698:     
        -: 9699:
        -: 9700:  }
        1: 9701:  in_exit = 1;
        1: 9702:  if ((unsigned long )env != (unsigned long )((void *)0)) {
        -: 9703:     
        -: 9704:
    #####: 9705:    free((void *)env);
    #####: 9706:    env = (char *)((void *)0);
        -: 9707:     
        -: 9708:
    #####: 9709:  }
        1: 9710:  if ((unsigned long )args != (unsigned long )((void *)0)) {
        -: 9711:     
        -: 9712:
    #####: 9713:    free((void *)((char *)args));
    #####: 9714:    args = (char **)((void *)0);
        -: 9715:     
        -: 9716:
    #####: 9717:  }
        -: 9718:  {
        1: 9719:  exit(exitcode);
        -: 9720:  }
        -: 9721: 
        -: 9722:
        -: 9723:}
    #####: 9724:void abort_gzip(void) 
        -: 9725:{ 
        -: 9726:
        -: 9727:
        -: 9728:   
        -: 9729:
    #####: 9730:  if (remove_ofname) {
        -: 9731:     
        -: 9732:
    #####: 9733:    close(ofd);
    #####: 9734:    xunlink(ofname);
        -: 9735:     
        -: 9736:
    #####: 9737:  }
        -: 9738:  {
    #####: 9739:  do_exit(1);
        -: 9740:  }
    #####: 9741:  return;
        -: 9742: 
        -: 9743:
        -: 9744:}
        -: 9745:#pragma merger("0","/tmp/cil-Ls8epKGB.i","")
