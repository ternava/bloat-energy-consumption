        -:    0:Source:chisel_grep-2.4.2_p0.2train.c
        -:    0:Graph:chisel_grep-2.4.2_p0.2train.gcno
        -:    0:Data:chisel_grep-2.4.2_p0.2train.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Generated by CIL v. 1.7.3 */
        -:    2:/* print_CIL_Input is true */
        -:    3:
        -:    4:typedef int __int32_t;
        -:    5:typedef unsigned long __dev_t;
        -:    6:typedef unsigned int __uid_t;
        -:    7:typedef unsigned int __gid_t;
        -:    8:typedef unsigned long __ino_t;
        -:    9:typedef unsigned int __mode_t;
        -:   10:typedef unsigned long __nlink_t;
        -:   11:typedef long __off_t;
        -:   12:typedef long __off64_t;
        -:   13:typedef long __time_t;
        -:   14:typedef long __blksize_t;
        -:   15:typedef long __blkcnt_t;
        -:   16:typedef long __ssize_t;
        -:   17:typedef long __syscall_slong_t;
        -:   18:typedef char *__caddr_t;
        -:   19:typedef __off_t off_t;
        -:   20:typedef __ssize_t ssize_t;
        -:   21:typedef __caddr_t caddr_t;
        -:   22:typedef unsigned long size_t;
        -:   23:struct timespec {
        -:   24:   __time_t tv_sec ;
        -:   25:   __syscall_slong_t tv_nsec ;
        -:   26:};
        -:   27:struct stat {
        -:   28:   __dev_t st_dev ;
        -:   29:   __ino_t st_ino ;
        -:   30:   __nlink_t st_nlink ;
        -:   31:   __mode_t st_mode ;
        -:   32:   __uid_t st_uid ;
        -:   33:   __gid_t st_gid ;
        -:   34:   int __pad0 ;
        -:   35:   __dev_t st_rdev ;
        -:   36:   __off_t st_size ;
        -:   37:   __blksize_t st_blksize ;
        -:   38:   __blkcnt_t st_blocks ;
        -:   39:   struct timespec st_atim ;
        -:   40:   struct timespec st_mtim ;
        -:   41:   struct timespec st_ctim ;
        -:   42:   __syscall_slong_t __glibc_reserved[3] ;
        -:   43:};
        -:   44:struct _IO_FILE;
        -:   45:struct _IO_FILE;
        -:   46:typedef struct _IO_FILE FILE;
        -:   47:typedef void _IO_lock_t;
        -:   48:struct _IO_marker {
        -:   49:   struct _IO_marker *_next ;
        -:   50:   struct _IO_FILE *_sbuf ;
        -:   51:   int _pos ;
        -:   52:};
        -:   53:struct _IO_FILE {
        -:   54:   int _flags ;
        -:   55:   char *_IO_read_ptr ;
        -:   56:   char *_IO_read_end ;
        -:   57:   char *_IO_read_base ;
        -:   58:   char *_IO_write_base ;
        -:   59:   char *_IO_write_ptr ;
        -:   60:   char *_IO_write_end ;
        -:   61:   char *_IO_buf_base ;
        -:   62:   char *_IO_buf_end ;
        -:   63:   char *_IO_save_base ;
        -:   64:   char *_IO_backup_base ;
        -:   65:   char *_IO_save_end ;
        -:   66:   struct _IO_marker *_markers ;
        -:   67:   struct _IO_FILE *_chain ;
        -:   68:   int _fileno ;
        -:   69:   int _flags2 ;
        -:   70:   __off_t _old_offset ;
        -:   71:   unsigned short _cur_column ;
        -:   72:   signed char _vtable_offset ;
        -:   73:   char _shortbuf[1] ;
        -:   74:   _IO_lock_t *_lock ;
        -:   75:   __off64_t _offset ;
        -:   76:   void *__pad1 ;
        -:   77:   void *__pad2 ;
        -:   78:   void *__pad3 ;
        -:   79:   void *__pad4 ;
        -:   80:   size_t __pad5 ;
        -:   81:   int _mode ;
        -:   82:   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t )] ;
        -:   83:};
        -:   84:typedef void *ptr_t;
        -:   85:struct option {
        -:   86:   char const   *name ;
        -:   87:   int has_arg ;
        -:   88:   int *flag ;
        -:   89:   int val ;
        -:   90:};
        -:   91:struct matcher {
        -:   92:   char *name ;
        -:   93:   void (*compile)(char * , size_t  ) ;
        -:   94:   char *(*execute)(char * , size_t  , char ** ) ;
        -:   95:};
        -:   96:struct stats {
        -:   97:   struct stats *parent ;
        -:   98:   struct stat stat ;
        -:   99:};
        -:  100:enum __anonenum_directories_30 {
        -:  101:    READ_DIRECTORIES = 0,
        -:  102:    RECURSE_DIRECTORIES = 1,
        -:  103:    SKIP_DIRECTORIES = 2
        -:  104:} ;
        -:  105:enum __anonenum_binary_files_31 {
        -:  106:    BINARY_BINARY_FILES = 0,
        -:  107:    TEXT_BINARY_FILES = 1,
        -:  108:    WITHOUT_MATCH_BINARY_FILES = 2
        -:  109:} ;
        -:  110:typedef unsigned long active_reg_t;
        -:  111:typedef unsigned long reg_syntax_t;
        -:  112:enum __anonenum_reg_errcode_t_32 {
        -:  113:    REG_NOERROR = 0,
        -:  114:    REG_NOMATCH = 1,
        -:  115:    REG_BADPAT = 2,
        -:  116:    REG_ECOLLATE = 3,
        -:  117:    REG_ECTYPE = 4,
        -:  118:    REG_EESCAPE = 5,
        -:  119:    REG_ESUBREG = 6,
        -:  120:    REG_EBRACK = 7,
        -:  121:    REG_EPAREN = 8,
        -:  122:    REG_EBRACE = 9,
        -:  123:    REG_BADBR = 10,
        -:  124:    REG_ERANGE = 11,
        -:  125:    REG_ESPACE = 12,
        -:  126:    REG_BADRPT = 13,
        -:  127:    REG_EEND = 14,
        -:  128:    REG_ESIZE = 15,
        -:  129:    REG_ERPAREN = 16
        -:  130:} ;
        -:  131:typedef enum __anonenum_reg_errcode_t_32 reg_errcode_t;
        -:  132:struct re_pattern_buffer {
        -:  133:   unsigned char *buffer ;
        -:  134:   unsigned long allocated ;
        -:  135:   unsigned long used ;
        -:  136:   reg_syntax_t syntax ;
        -:  137:   char *fastmap ;
        -:  138:   char *translate ;
        -:  139:   size_t re_nsub ;
        -:  140:   unsigned int can_be_null : 1 ;
        -:  141:   unsigned int regs_allocated : 2 ;
        -:  142:   unsigned int fastmap_accurate : 1 ;
        -:  143:   unsigned int no_sub : 1 ;
        -:  144:   unsigned int not_bol : 1 ;
        -:  145:   unsigned int not_eol : 1 ;
        -:  146:   unsigned int newline_anchor : 1 ;
        -:  147:};
        -:  148:typedef struct re_pattern_buffer regex_t;
        -:  149:typedef int regoff_t;
        -:  150:struct re_registers {
        -:  151:   unsigned int num_regs ;
        -:  152:   regoff_t *start ;
        -:  153:   regoff_t *end ;
        -:  154:};
        -:  155:struct __anonstruct_regmatch_t_33 {
        -:  156:   regoff_t rm_so ;
        -:  157:   regoff_t rm_eo ;
        -:  158:};
        -:  159:typedef struct __anonstruct_regmatch_t_33 regmatch_t;
        -:  160:typedef int charclass[(((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int ))];
        -:  161:enum __anonenum_token_34 {
        -:  162:    END = -1,
        -:  163:    EMPTY = 256,
        -:  164:    BACKREF = 257,
        -:  165:    BEGLINE = 258,
        -:  166:    ENDLINE = 259,
        -:  167:    BEGWORD = 260,
        -:  168:    ENDWORD = 261,
        -:  169:    LIMWORD = 262,
        -:  170:    NOTLIMWORD = 263,
        -:  171:    QMARK = 264,
        -:  172:    STAR = 265,
        -:  173:    PLUS = 266,
        -:  174:    REPMN = 267,
        -:  175:    CAT = 268,
        -:  176:    OR = 269,
        -:  177:    ORTOP = 270,
        -:  178:    LPAREN = 271,
        -:  179:    RPAREN = 272,
        -:  180:    CSET = 273
        -:  181:} ;
        -:  182:typedef enum __anonenum_token_34 token;
        -:  183:struct __anonstruct_position_35 {
        -:  184:   unsigned int strchr ;
        -:  185:   unsigned int constraint ;
        -:  186:};
        -:  187:typedef struct __anonstruct_position_35 position;
        -:  188:struct __anonstruct_position_set_36 {
        -:  189:   position *elems ;
        -:  190:   int nelem ;
        -:  191:};
        -:  192:typedef struct __anonstruct_position_set_36 position_set;
        -:  193:struct __anonstruct_dfa_state_37 {
        -:  194:   int hash ;
        -:  195:   position_set elems ;
        -:  196:   char newline ;
        -:  197:   char letter ;
        -:  198:   char backref ;
        -:  199:   unsigned char constraint ;
        -:  200:   int first_end ;
        -:  201:};
        -:  202:typedef struct __anonstruct_dfa_state_37 dfa_state;
        -:  203:struct dfamust {
        -:  204:   int exact ;
        -:  205:   char *must ;
        -:  206:   struct dfamust *next ;
        -:  207:};
        -:  208:struct dfa {
        -:  209:   charclass *charclasses ;
        -:  210:   int cindex ;
        -:  211:   int calloc ;
        -:  212:   token *tokens ;
        -:  213:   int tindex ;
        -:  214:   int talloc ;
        -:  215:   int depth ;
        -:  216:   int nleaves ;
        -:  217:   int nregexps ;
        -:  218:   dfa_state *states ;
        -:  219:   int sindex ;
        -:  220:   int salloc ;
        -:  221:   position_set *follows ;
        -:  222:   int searchflag ;
        -:  223:   int tralloc ;
        -:  224:   int trcount ;
        -:  225:   int **trans ;
        -:  226:   int **realtrans ;
        -:  227:   int **fails ;
        -:  228:   int *success ;
        -:  229:   int *newlines ;
        -:  230:   struct dfamust *musts ;
        -:  231:};
        -:  232:struct __anonstruct_prednames_38 {
        -:  233:   char const   *name ;
        -:  234:   int (*pred)(int  ) ;
        -:  235:};
        -:  236:struct __anonstruct_must_39 {
        -:  237:   char **in ;
        -:  238:   char *left ;
        -:  239:   char *right ;
        -:  240:   char *is ;
        -:  241:};
        -:  242:typedef struct __anonstruct_must_39 must;
        -:  243:struct kwsmatch {
        -:  244:   int strchr ;
        -:  245:   char *beg[1] ;
        -:  246:   size_t size[1] ;
        -:  247:};
        -:  248:typedef ptr_t kwset_t;
        -:  249:struct _obstack_chunk {
        -:  250:   char *limit ;
        -:  251:   struct _obstack_chunk *prev ;
        -:  252:   char contents[4] ;
        -:  253:};
        -:  254:struct obstack {
        -:  255:   long chunk_size ;
        -:  256:   struct _obstack_chunk *chunk ;
        -:  257:   char *object_base ;
        -:  258:   char *next_free ;
        -:  259:   char *chunk_limit ;
        -:  260:   long temp ;
        -:  261:   int alignment_mask ;
        -:  262:   struct _obstack_chunk *(*chunkfun)(void * , long  ) ;
        -:  263:   void (*freefun)(void * , struct _obstack_chunk * ) ;
        -:  264:   void *extra_arg ;
        -:  265:   unsigned int use_extra_arg : 1 ;
        -:  266:   unsigned int maybe_empty_object : 1 ;
        -:  267:   unsigned int alloc_failed : 1 ;
        -:  268:};
        -:  269:struct trie;
        -:  270:struct trie;
        -:  271:struct tree {
        -:  272:   struct tree *llink ;
        -:  273:   struct tree *rlink ;
        -:  274:   struct trie *trie ;
        -:  275:   unsigned char label ;
        -:  276:   char balance ;
        -:  277:};
        -:  278:struct trie {
        -:  279:   unsigned int accepting ;
        -:  280:   struct tree *links ;
        -:  281:   struct trie *parent ;
        -:  282:   struct trie *next ;
        -:  283:   struct trie *fail ;
        -:  284:   int depth ;
        -:  285:   int shift ;
        -:  286:   int maxshift ;
        -:  287:};
        -:  288:struct kwset {
        -:  289:   struct obstack obstack ;
        -:  290:   int words ;
        -:  291:   struct trie *trie ;
        -:  292:   int mind ;
        -:  293:   int maxd ;
        -:  294:   unsigned char delta[256] ;
        -:  295:   struct trie *next[256] ;
        -:  296:   char *target ;
        -:  297:   int mind2 ;
        -:  298:   char *trans ;
        -:  299:};
        -:  300:enum __anonenum_dirs_40 {
        -:  301:    L = 0,
        -:  302:    R = 1
        -:  303:} ;
        -:  304:struct dirent {
        -:  305:   __ino_t d_ino ;
        -:  306:   __off_t d_off ;
        -:  307:   unsigned short d_reclen ;
        -:  308:   unsigned char d_type ;
        -:  309:   char d_name[256] ;
        -:  310:};
        -:  311:struct __dirstream;
        -:  312:struct __dirstream;
        -:  313:typedef struct __dirstream DIR;
        -:  314:typedef char boolean;
        -:  315:enum __anonenum_re_opcode_t_42 {
        -:  316:    no_op = 0,
        -:  317:    succeed = 1,
        -:  318:    exactn = 2,
        -:  319:    anychar = 3,
        -:  320:    charset = 4,
        -:  321:    charset_not = 5,
        -:  322:    start_memory = 6,
        -:  323:    stop_memory = 7,
        -:  324:    duplicate = 8,
        -:  325:    begline = 9,
        -:  326:    endline = 10,
        -:  327:    begbuf = 11,
        -:  328:    endbuf = 12,
        -:  329:    jump = 13,
        -:  330:    jump_past_alt = 14,
        -:  331:    on_failure_jump = 15,
        -:  332:    on_failure_keep_string_jump = 16,
        -:  333:    pop_failure_jump = 17,
        -:  334:    maybe_pop_jump = 18,
        -:  335:    dummy_failure_jump = 19,
        -:  336:    push_dummy_failure = 20,
        -:  337:    succeed_n = 21,
        -:  338:    jump_n = 22,
        -:  339:    set_number_at = 23,
        -:  340:    wordchar = 24,
        -:  341:    notwordchar = 25,
        -:  342:    wordbeg = 26,
        -:  343:    wordend = 27,
        -:  344:    wordbound = 28,
        -:  345:    notwordbound = 29
        -:  346:} ;
        -:  347:typedef enum __anonenum_re_opcode_t_42 re_opcode_t;
        -:  348:union fail_stack_elt {
        -:  349:   unsigned char *pointer ;
        -:  350:   int integer ;
        -:  351:};
        -:  352:typedef union fail_stack_elt fail_stack_elt_t;
        -:  353:struct __anonstruct_fail_stack_type_43 {
        -:  354:   fail_stack_elt_t *stack ;
        -:  355:   unsigned int size ;
        -:  356:   unsigned int avail ;
        -:  357:};
        -:  358:typedef struct __anonstruct_fail_stack_type_43 fail_stack_type;
        -:  359:struct __anonstruct_bits_45 {
        -:  360:   unsigned int match_null_string_p : 2 ;
        -:  361:   unsigned int is_active : 1 ;
        -:  362:   unsigned int matched_something : 1 ;
        -:  363:   unsigned int ever_matched_something : 1 ;
        -:  364:};
        -:  365:union __anonunion_register_info_type_44 {
        -:  366:   fail_stack_elt_t word ;
        -:  367:   struct __anonstruct_bits_45 bits ;
        -:  368:};
        -:  369:typedef union __anonunion_register_info_type_44 register_info_type;
        -:  370:typedef unsigned int regnum_t;
        -:  371:typedef long pattern_offset_t;
        -:  372:struct __anonstruct_compile_stack_elt_t_46 {
        -:  373:   pattern_offset_t begalt_offset ;
        -:  374:   pattern_offset_t fixup_alt_jump ;
        -:  375:   pattern_offset_t inner_group_offset ;
        -:  376:   pattern_offset_t laststart_offset ;
        -:  377:   regnum_t regnum ;
        -:  378:};
        -:  379:typedef struct __anonstruct_compile_stack_elt_t_46 compile_stack_elt_t;
        -:  380:struct __anonstruct_compile_stack_type_47 {
        -:  381:   compile_stack_elt_t *stack ;
        -:  382:   unsigned int size ;
        -:  383:   unsigned int avail ;
        -:  384:};
        -:  385:typedef struct __anonstruct_compile_stack_type_47 compile_stack_type;
        -:  386:/* compiler builtin: 
        -:  387:   void *__builtin_alloca(unsigned long  ) ;  */
        -:  388:#pragma merger("0","/tmp/cil-ldV4twA4.i","")
        -:  389:#pragma merger("0","/tmp/cil-pthx382W.i","")
        -:  390:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) stat)(char const   * __restrict  __file ,
        -:  391:                                                                                             struct stat * __restrict  __buf ) ;
        -:  392:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(2), __leaf__)) fstat)(int __fd ,
        -:  393:                                                                                            struct stat *__buf ) ;
        -:  394:extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) mmap)(void *__addr ,
        -:  395:                                                                             size_t __len ,
        -:  396:                                                                             int __prot ,
        -:  397:                                                                             int __flags ,
        -:  398:                                                                             int __fd ,
        -:  399:                                                                             __off_t __offset ) ;
        -:  400:extern struct _IO_FILE *stdin ;
        -:  401:extern struct _IO_FILE *stdout ;
        -:  402:extern int fclose(FILE *__stream ) ;
        -:  403:extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __modes ) ;
        -:  404:extern int fprintf(FILE * __restrict  __stream , char const   * __restrict  __format 
        -:  405:                   , ...) ;
        -:  406:extern int printf(char const   * __restrict  __format  , ...) ;
        -:  407:extern int puts(char const   *__s ) ;
        -:  408:extern size_t fread(void * __restrict  __ptr , size_t __size , size_t __n , FILE * __restrict  __stream ) ;
        -:  409:extern size_t fwrite(void const   * __restrict  __ptr , size_t __size , size_t __n ,
        -:  410:                     FILE * __restrict  __s ) ;
        -:  411:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) feof)(FILE *__stream ) ;
        -:  412:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) ferror)(FILE *__stream ) ;
        -:  413:extern int ( __attribute__((__nonnull__(1))) open)(char const   *__file , int __oflag 
        -:  414:                                                   , ...) ;
        -:  415:extern  __attribute__((__nothrow__)) __off_t ( __attribute__((__leaf__)) lseek)(int __fd ,
        -:  416:                                                                                __off_t __offset ,
        -:  417:                                                                                int __whence ) ;
        -:  418:extern int close(int __fd ) ;
        -:  419:extern ssize_t read(int __fd , void *__buf , size_t __nbytes ) ;
        -:  420:extern char *optarg ;
        -:  421:extern int optind ;
        -:  422:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) getpagesize)(void)  __attribute__((__const__)) ;
        -:  423:extern  __attribute__((__nothrow__)) int *( __attribute__((__leaf__)) __errno_location)(void)  __attribute__((__const__)) ;
        -:  424:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) atoi)(char const   *__nptr )  __attribute__((__pure__)) ;
        -:  425:extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) malloc)(size_t __size )  __attribute__((__malloc__)) ;
        -:  426:extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) calloc)(size_t __nmemb ,
        -:  427:                                                                               size_t __size )  __attribute__((__malloc__)) ;
        -:  428:extern  __attribute__((__nothrow__)) void *( __attribute__((__warn_unused_result__,
        -:  429:__leaf__)) realloc)(void *__ptr , size_t __size ) ;
        -:  430:extern  __attribute__((__nothrow__)) void ( __attribute__((__leaf__)) free)(void *__ptr ) ;
        -:  431:extern  __attribute__((__nothrow__, __noreturn__)) void ( __attribute__((__leaf__)) abort)(void) ;
        -:  432:extern  __attribute__((__nothrow__, __noreturn__)) void ( __attribute__((__leaf__)) exit)(int __status ) ;
        -:  433:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1), __leaf__)) getenv)(char const   *__name ) ;
        -:  434:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1,2), __leaf__)) memcpy)(void * __restrict  __dest ,
        -:  435:                                                                                                 void const   * __restrict  __src ,
        -:  436:                                                                                                 size_t __n ) ;
        -:  437:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1,2), __leaf__)) memmove)(void *__dest ,
        -:  438:                                                                                                  void const   *__src ,
        -:  439:                                                                                                  size_t __n ) ;
        -:  440:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1), __leaf__)) memset)(void *__s ,
        -:  441:                                                                                               int __c ,
        -:  442:                                                                                               size_t __n ) ;
        -:  443:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) memcmp)(void const   *__s1 ,
        -:  444:                                                                                               void const   *__s2 ,
        -:  445:                                                                                               size_t __n )  __attribute__((__pure__)) ;
        -:  446:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1), __leaf__)) memchr)(void const   *__s ,
        -:  447:                                                                                               int __c ,
        -:  448:                                                                                               size_t __n )  __attribute__((__pure__)) ;
        -:  449:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2), __leaf__)) strcpy)(char * __restrict  __dest ,
        -:  450:                                                                                                 char const   * __restrict  __src ) ;
        -:  451:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) strcmp)(char const   *__s1 ,
        -:  452:                                                                                               char const   *__s2 )  __attribute__((__pure__)) ;
        -:  453:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) strncmp)(char const   *__s1 ,
        -:  454:                                                                                                char const   *__s2 ,
        -:  455:                                                                                                size_t __n )  __attribute__((__pure__)) ;
        -:  456:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) strcoll)(char const   *__s1 ,
        -:  457:                                                                                                char const   *__s2 )  __attribute__((__pure__)) ;
        -:  458:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1), __leaf__)) strchr)(char const   *__s ,
        -:  459:                                                                                               int __c )  __attribute__((__pure__)) ;
        -:  460:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1), __leaf__)) strrchr)(char const   *__s ,
        -:  461:                                                                                                int __c )  __attribute__((__pure__)) ;
        -:  462:extern  __attribute__((__nothrow__)) size_t ( __attribute__((__nonnull__(1), __leaf__)) strlen)(char const   *__s )  __attribute__((__pure__)) ;
        -:  463:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) strerror)(int __errnum ) ;
        -:  464: __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2), __leaf__)) stpcpy)(char * __restrict  dest ,
        -:  465:                                                                                          char const   * __restrict  src ) ;
        -:  466:extern  __attribute__((__nothrow__)) unsigned short const   **( __attribute__((__leaf__)) __ctype_b_loc)(void)  __attribute__((__const__)) ;
        -:  467:extern  __attribute__((__nothrow__)) __int32_t const   **( __attribute__((__leaf__)) __ctype_tolower_loc)(void)  __attribute__((__const__)) ;
        -:  468:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) tolower)(int __c ) ;
        -:  469:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) toupper)(int __c ) ;
        -:  470:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) gettext)(char const   *__msgid )  __attribute__((__format_arg__(1))) ;
        -:  471:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) textdomain)(char const   *__domainname ) ;
        -:  472:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) bindtextdomain)(char const   *__domainname ,
        -:  473:                                                                                       char const   *__dirname ) ;
        -:  474:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) setlocale)(int __category ,
        -:  475:                                                                                  char const   *__locale ) ;
        -:  476:extern int getopt_long(int __argc , char * const  *__argv , char const   *__shortopts ,
        -:  477:                       struct option  const  *__longopts , int *__longind ) ;
        -:  478: __attribute__((__noreturn__)) void fatal(char const   *mesg , int errnum ) ;
        -:  479:char *xmalloc(size_t size ) ;
        -:  480:char *xrealloc(char *ptr , size_t size ) ;
        -:  481:struct matcher matchers[6] ;
        -:  482:char const   *matcher  ;
        -:  483:int match_icase  ;
        -:  484:int match_words  ;
        -:  485:int match_lines  ;
        -:  486:unsigned char eolbyte  ;
        -:  487:char *savedir(char const   *dir , off_t name_size ) ;
        -:  488:static struct stats stats_base  ;
        -:  489:static int show_help  ;
        -:  490:static int show_version  ;
        -:  491:static int mmap_option  ;
        -:  492:static char const   short_options[51]  = 
        -:  493:  {      (char const   )'0',      (char const   )'1',      (char const   )'2',      (char const   )'3', 
        -:  494:        (char const   )'4',      (char const   )'5',      (char const   )'6',      (char const   )'7', 
        -:  495:        (char const   )'8',      (char const   )'9',      (char const   )'A',      (char const   )':', 
        -:  496:        (char const   )'B',      (char const   )':',      (char const   )'C',      (char const   )':', 
        -:  497:        (char const   )':',      (char const   )'E',      (char const   )'F',      (char const   )'G', 
        -:  498:        (char const   )'H',      (char const   )'I',      (char const   )'U',      (char const   )'V', 
        -:  499:        (char const   )'X',      (char const   )':',      (char const   )'a',      (char const   )'b', 
        -:  500:        (char const   )'c',      (char const   )'d',      (char const   )':',      (char const   )'e', 
        -:  501:        (char const   )':',      (char const   )'f',      (char const   )':',      (char const   )'h', 
        -:  502:        (char const   )'i',      (char const   )'L',      (char const   )'l',      (char const   )'n', 
        -:  503:        (char const   )'q',      (char const   )'r',      (char const   )'s',      (char const   )'u', 
        -:  504:        (char const   )'v',      (char const   )'w',      (char const   )'x',      (char const   )'y', 
        -:  505:        (char const   )'Z',      (char const   )'z',      (char const   )'\000'};
        -:  506:static struct option long_options[35]  = 
        -:  507:  {      {"after-context", 1, (int *)((void *)0), 'A'}, 
        -:  508:        {"basic-regexp", 0, (int *)((void *)0), 'G'}, 
        -:  509:        {"before-context", 1, (int *)((void *)0), 'B'}, 
        -:  510:        {"binary-files", 1, (int *)((void *)0), 128}, 
        -:  511:        {"byte-offset", 0, (int *)((void *)0), 'b'}, 
        -:  512:        {"context", 2, (int *)((void *)0), 'C'}, 
        -:  513:        {"count", 0, (int *)((void *)0), 'c'}, 
        -:  514:        {"directories", 1, (int *)((void *)0), 'd'}, 
        -:  515:        {"extended-regexp", 0, (int *)((void *)0), 'E'}, 
        -:  516:        {"file", 1, (int *)((void *)0), 'f'}, 
        -:  517:        {"files-with-matches", 0, (int *)((void *)0), 'l'}, 
        -:  518:        {"files-without-match", 0, (int *)((void *)0), 'L'}, 
        -:  519:        {"fixed-regexp", 0, (int *)((void *)0), 'F'}, 
        -:  520:        {"fixed-strings", 0, (int *)((void *)0), 'F'}, 
        -:  521:        {"help", 0, & show_help, 1}, 
        -:  522:        {"ignore-case", 0, (int *)((void *)0), 'i'}, 
        -:  523:        {"line-number", 0, (int *)((void *)0), 'n'}, 
        -:  524:        {"line-regexp", 0, (int *)((void *)0), 'x'}, 
        -:  525:        {"mmap", 0, & mmap_option, 1}, 
        -:  526:        {"no-filename", 0, (int *)((void *)0), 'h'}, 
        -:  527:        {"no-messages", 0, (int *)((void *)0), 's'}, 
        -:  528:        {"null", 0, (int *)((void *)0), 'Z'}, 
        -:  529:        {"null-data", 0, (int *)((void *)0), 'z'}, 
        -:  530:        {"quiet", 0, (int *)((void *)0), 'q'}, 
        -:  531:        {"recursive", 0, (int *)((void *)0), 'r'}, 
        -:  532:        {"regexp", 1, (int *)((void *)0), 'e'}, 
        -:  533:        {"invert-match", 0, (int *)((void *)0), 'v'}, 
        -:  534:        {"silent", 0, (int *)((void *)0), 'q'}, 
        -:  535:        {"text", 0, (int *)((void *)0), 'a'}, 
        -:  536:        {"binary", 0, (int *)((void *)0), 'U'}, 
        -:  537:        {"unix-byte-offsets", 0, (int *)((void *)0), 'u'}, 
        -:  538:        {"version", 0, (int *)((void *)0), 'V'}, 
        -:  539:        {"with-filename", 0, (int *)((void *)0), 'H'}, 
        -:  540:        {"word-regexp", 0, (int *)((void *)0), 'w'}, 
        -:  541:        {(char const   *)0, 0, (int *)0, 0}};
        -:  542:static char *prog  ;
        -:  543:static char const   *filename  ;
        -:  544:static int errseen  ;
        -:  545:static enum __anonenum_directories_30 directories  ;
        -:  546:static int ck_atoi(char const   *str , int *out ) ;
        -:  547:static  __attribute__((__noreturn__)) void usage(int status ) ;
        -:  548:static void error(char const   *mesg , int errnum ) ;
        -:  549:static void setmatcher(char const   *m ) ;
        -:  550:static int install_matcher(char const   *name ) ;
        -:  551:static int prepend_args(char const   *options , char *buf , char **argv ) ;
        -:  552:static void prepend_default_options(char const   *options , int *pargc , char ***pargv ) ;
        -:  553:static char *page_alloc(size_t size , char **up ) ;
        -:  554:static int reset(int fd , char const   *file , struct stats *stats ) ;
        -:  555:static int fillbuf(size_t save , struct stats *stats ) ;
        -:  556:static int grepbuf(char *beg , char *lim ) ;
        -:  557:static void prtext(char *beg , char *lim , int *nlinesp ) ;
        -:  558:static void prpending(char *lim ) ;
        -:  559:static void prline(char *beg , char *lim , int sep ) ;
        -:  560:static void print_offset_sep(off_t pos , int sep ) ;
        -:  561:static void nlscan(char *lim ) ;
        -:  562:static int grep(int fd , char const   *file , struct stats *stats ) ;
        -:  563:static int grepdir(char const   *dir , struct stats *stats ) ;
        -:  564:static int grepfile(char const   *file , struct stats *stats ) ;
        -:  565:static void (*compile)(char * , size_t  )  ;
        -:  566:static char *(*execute)(char * , size_t  , char ** )  ;
    #####:  567:static void error(char const   *mesg , int errnum ) 
        -:  568:{ 
        -:  569:  char *tmp ;
        -:  570:
        -:  571:  {
    #####:  572:  if (errnum) {
        -:  573:     
        -:  574:
    #####:  575:    tmp = strerror(errnum);
    #####:  576:    fprintf((FILE * __restrict  )stdout, (char const   * __restrict  )"%s: %s: %s\n",
    #####:  577:            prog, mesg, tmp);
        -:  578:     
        -:  579:
    #####:  580:  } else {
        -:  581:     
        -:  582:
    #####:  583:    fprintf((FILE * __restrict  )stdout, (char const   * __restrict  )"%s: %s\n",
    #####:  584:            prog, mesg);
        -:  585:     
        -:  586:
        -:  587:  }
        -:  588:              
        -:  589:         
        -:  590:}
    #####:  591:}
        -:  592: __attribute__((__noreturn__)) void fatal(char const   *mesg , int errnum ) ;
    #####:  593:void fatal(char const   *mesg , int errnum ) 
        -:  594:{ 
        -:  595:
        -:  596:
        -:  597:   
        -:  598:
        -:  599:   
        -:  600:
    #####:  601:  error(mesg, errnum);
    #####:  602:  exit(2);
        -:  603:   
        -:  604:
        -:  605: 
        -:  606:
        -:  607:}
        4:  608:char *xmalloc(size_t size ) 
        -:  609:{ 
        -:  610:  char *result ;
        -:  611:  void *tmp ;
        -:  612:  char *tmp___0 ;
        -:  613:
        -:  614:  {
        -:  615:  {
        4:  616:  tmp = malloc(size);
        4:  617:  result = (char *)tmp;
        -:  618:  }
        -:  619:             
        -:  620:                   
        -:  621:       
        -:  622:
        -:  623:                                            
        -:  624:                                        
        -:  625:       
        -:  626:
        -:  627:     
        -:  628:   
        4:  629:  return (result);
        -:  630:}
        -:  631:}
    #####:  632:char *xrealloc(char *ptr , size_t size ) 
        -:  633:{ 
        -:  634:  char *result ;
        -:  635:  void *tmp ;
        -:  636:  void *tmp___0 ;
        -:  637:  char *tmp___1 ;
        -:  638:
        -:  639:  {
        -:  640:           {
        -:  641:     
        -:  642:
    #####:  643:    tmp = realloc((void *)ptr, size);
    #####:  644:    result = (char *)tmp;
        -:  645:     
        -:  646:
        -:  647:  }       
        -:  648:     
        -:  649:
        -:  650:                           
        -:  651:                             
        -:  652:     
        -:  653:
        -:  654:   
        -:  655:             
        -:  656:                   
        -:  657:       
        -:  658:
        -:  659:                                            
        -:  660:                                        
        -:  661:       
        -:  662:
        -:  663:     
        -:  664:   
    #####:  665:  return (result);
        -:  666:}
        -:  667:}
        -:  668:static int ck_atoi(char const   *str , int *out ) 
        -:  669:{ 
        -:  670:  char const   *p ;
        -:  671:
        -:  672:  {
        -:  673:          
        -:  674:   
        -:  675:             
        -:  676:                                      
        -:  677:               
        -:  678:                       
        -:  679:     
        -:  680:                                
        -:  681:                  
        -:  682:                          
        -:  683:                                
        -:  684:                  
        -:  685:     
        -:  686:     
        -:  687:         
        -:  688:   
        -:  689:                                
        -:  690:   
        -:  691:   
        -:  692:                                      
        -:  693:   
        -:  694:  return (0);
        -:  695:}
        -:  696:}
        -:  697:static char *ubuffer  ;
        -:  698:static char *buffer  ;
        -:  699:static size_t bufsalloc  ;
        -:  700:static size_t bufalloc  ;
        -:  701:static int bufdesc  ;
        -:  702:static char *bufbeg  ;
        -:  703:static char *buflim  ;
        -:  704:static size_t pagesize  ;
        -:  705:static off_t bufoffset  ;
        -:  706:static int bufmapped  ;
        -:  707:static off_t initial_bufoffset  ;
        3:  708:static char *page_alloc(size_t size , char **up ) 
        -:  709:{ 
        -:  710:  size_t asize ;
        -:  711:  char *p ;
        -:  712:  void *tmp ;
        -:  713:  void *tmp___0 ;
        -:  714:  void *tmp___1 ;
        -:  715:  char *tmp___2 ;
        -:  716:
        -:  717:  {
        3:  718:  asize = (size + pagesize) - 1UL;
        -:  719:                     {
        -:  720:             {
        -:  721:       
        -:  722:
        3:  723:      tmp = realloc((void *)*up, asize);
        3:  724:      tmp___1 = tmp;
        -:  725:       
        -:  726:
        -:  727:    }       
        -:  728:       
        -:  729:
        -:  730:                              
        -:  731:                        
        -:  732:       
        -:  733:
        -:  734:     
        3:  735:    p = (char *)tmp___1;
        -:  736:           {
        -:  737:              
        -:  738:                                        {
        3:  739:        tmp___2 = p;
        -:  740:      }       
        -:  741:                                                         
        -:  742:       
        3:  743:      return (tmp___2);
        -:  744:    }
        -:  745:  }
        -:  746:                               
        -:  747:}
        -:  748:}
        3:  749:static int reset(int fd , char const   *file , struct stats *stats ) 
        -:  750:{ 
        -:  751:  size_t ubufsalloc ;
        -:  752:  int tmp ;
        -:  753:  char *tmp___0 ;
        -:  754:  int *tmp___1 ;
        -:  755:  int tmp___2 ;
        -:  756:  int *tmp___3 ;
        -:  757:  int tmp___4 ;
        -:  758:
        -:  759:  {
        -:  760:                 
        -:  761:                                             
        -:  762:                                 
        -:  763:            
        -:  764:                                                                            
        -:  765:     
        -:  766:         {
        -:  767:    {
        3:  768:    tmp = getpagesize();
        3:  769:    pagesize = (size_t )tmp;
        -:  770:    }
        -:  771:                          
        -:  772:       
        -:  773:
        -:  774:              
        -:  775:       
        -:  776:
        -:  777:     
        -:  778:                           {
        3:  779:      ubufsalloc = (size_t )8192;
        -:  780:    }       
        -:  781:                            
        -:  782:     
        -:  783:                                      {
        3:  784:      bufsalloc = ubufsalloc;
        -:  785:    }       
        -:  786:                                                                  
        -:  787:     
        3:  788:    bufalloc = 5UL * bufsalloc;
        -:  789:                                 
        -:  790:       
        -:  791:
        -:  792:                                            
        -:  793:                                        
        -:  794:       
        -:  795:
        -:  796:           { //Added block
        -:  797:                                      
        -:  798:       
        -:  799:
        -:  800:                                            
        -:  801:                                        
        -:  802:       
        -:  803:
        -:  804:           { //Added block
        -:  805:                                    
        -:  806:       
        -:  807:
        -:  808:                                            
        -:  809:                                        
        -:  810:       
        -:  811:
        -:  812:           {
        -:  813:      {
        3:  814:      buffer = page_alloc(bufalloc + 1UL, & ubuffer);
        -:  815:      }
        -:  816:                     
        -:  817:         
        -:  818:
        -:  819:                                              
        -:  820:                                          
        -:  821:         
        -:  822:
        -:  823:       
        -:  824:    }
        -:  825:    }
        -:  826:    }
        -:  827:  }
        -:  828:  {
        -:  829:                  
        3:  830:  bufdesc = fd;
        -:  831:                                     
        -:  832:  }
        -:  833:                     
        -:  834:     
        -:  835:                                 
        -:  836:                             
        -:  837:     
        -:  838:               
        -:  839:   
        -:  840:                                         
        -:  841:                                                   
        -:  842:                 
        -:  843:     
        -:  844:   
        -:  845:                                                 
        -:  846:               
        -:  847:                            
        -:  848:            
        -:  849:       
        -:  850:                                            
        -:  851:       
        -:  852:                           
        -:  853:         
        -:  854:                                     
        -:  855:                                 
        -:  856:         
        -:  857:                   
        -:  858:       
        -:  859:     
        -:  860:                                  
        -:  861:                      
        -:  862:                                                        
        -:  863:                    
        -:  864:              
        -:  865:                    
        -:  866:       
        -:  867:            
        -:  868:                  
        -:  869:     
        -:  870:                        
        -:  871:          
        -:  872:                  
        -:  873:   
        3:  874:  return (1);
        -:  875:}
        -:  876:}
       14:  877:static int fillbuf(size_t save , struct stats *stats ) 
        -:  878:{ 
        -:  879:  size_t fillsize ;
        -:  880:  int cc ;
        -:  881:  size_t readsize ;
        -:  882:  size_t saved_offset ;
        -:  883:  size_t aligned_save ;
        -:  884:  size_t tmp ;
        -:  885:  size_t maxalloc ;
        -:  886:  size_t newalloc ;
        -:  887:  off_t to_be_read ;
        -:  888:  size_t slop ;
        -:  889:  off_t aligned_to_be_read ;
        -:  890:  size_t tmp___0 ;
        -:  891:  off_t maxalloc_off ;
        -:  892:  char *tmp___1 ;
        -:  893:  size_t mmapsize ;
        -:  894:  int *tmp___2 ;
        -:  895:  __off_t tmp___3 ;
        -:  896:  void *tmp___4 ;
        -:  897:  ssize_t bytesread ;
        -:  898:  int *tmp___5 ;
        -:  899:
        -:  900:  {
       14:  901:  fillsize = (size_t )0;
       14:  902:  cc = 1;
       14:  903:  saved_offset = (size_t )(buflim - ubuffer) - save;
        -:  904:                         
        -:  905:                                 
        -:  906:                 
        -:  907:            
        -:  908:                                                
        -:  909:     
        -:  910:                       
        -:  911:                           
        -:  912:                                                   
        -:  913:                                                   
        -:  914:                                                   
        -:  915:                 
        -:  916:                                  
        -:  917:              
        -:  918:                             
        -:  919:       
        -:  920:                                                                   
        -:  921:                                                                          
        -:  922:                               
        -:  923:                                                             
        -:  924:                                           
        -:  925:         
        -:  926:       
        -:  927:     
        -:  928:     
        -:  929:               
        -:  930:                                        
        -:  931:                                 
        -:  932:                         
        -:  933:       
        -:  934:                                        
        -:  935:                         
        -:  936:              
        -:  937:                                 
        -:  938:                         
        -:  939:       
        -:  940:     
        -:  941:                                  
        -:  942:     
        -:  943:                               
        -:  944:                              
        -:  945:                          
        -:  946:                               
        -:  947:     
        -:  948:                           
        -:  949:       
        -:  950:
        -:  951:                                            
        -:  952:                                        
        -:  953:       
        -:  954:
        -:  955:                          
        -:  956:                          
        -:  957:       
        -:  958:
        -:  959:                                            
        -:  960:                                        
        -:  961:       
        -:  962:
        -:  963:                          
        -:  964:                           
        -:  965:                                 
        -:  966:         
        -:  967:
        -:  968:                                              
        -:  969:                                          
        -:  970:         
        -:  971:
        -:  972:              
        -:  973:                
        -:  974:       
        -:  975:                          
        -:  976:        
        -:  977:                              
        -:  978:       
        -:  979:                          
        -:  980:                                                     
        -:  981:       
        -:  982:                     
        -:  983:         
        -:  984:
        -:  985:                                              
        -:  986:                                          
        -:  987:         
        -:  988:
        -:  989:       
        -:  990:     
        -:  991:     
        -:  992:     
        -:  993:     
        -:  994:   
        -:  995:  {
       14:  996:  bufbeg = (buffer + bufsalloc) - save;
       14:  997:  memmove((void *)bufbeg, (void const   *)(ubuffer + saved_offset), save);
       14:  998:  readsize = bufalloc - bufsalloc;
        -:  999:  }
        -: 1000:                  
        -: 1001:                        
        -: 1002:                                                                
        -: 1003:                                                            
        -: 1004:                                      
        -: 1005:     
        -: 1006:                   
        -: 1007:       
        -: 1008:                                                                                        
        -: 1009:       
        -: 1010:                                                                      
        -: 1011:                            
        -: 1012:              
        -: 1013:                    
        -: 1014:       
        -: 1015:            
        -: 1016:              
        -: 1017:                    
        -: 1018:                                           
        -: 1019:         
        -: 1020:                                               
        -: 1021:         
        -: 1022:                           
        -: 1023:           
        -: 1024:
        -: 1025:                                       
        -: 1026:                                   
        -: 1027:                 
        -: 1028:           
        -: 1029:
        -: 1030:         
        -: 1031:       
        -: 1032:     
        -: 1033:   
        -: 1034:                  {
        -: 1035:    {
        -: 1036:              {
        -: 1037:                                           
        -: 1038:      {
       14: 1039:      bytesread = read(bufdesc, (void *)(buffer + bufsalloc), readsize);
        -: 1040:      }
        -: 1041:                           
        -: 1042:         
        -: 1043:                                     
        -: 1044:         
        -: 1045:                                
        -: 1046:                               
        -: 1047:         
        -: 1048:              
        -: 1049:                             
        -: 1050:       
        -: 1051:                              
       14: 1052:    }
        -: 1053:    while_break___0: /* CIL Label */ ;
        -: 1054:    }
        -: 1055:                         
        -: 1056:             
        -: 1057:           {
       14: 1058:      fillsize = (size_t )bytesread;
        -: 1059:    }
        -: 1060:  }
        -: 1061:                                                      
       14: 1062:  buflim = (buffer + bufsalloc) + fillsize;
       14: 1063:  return (cc);
        -: 1064:}
        -: 1065:}
        -: 1066:static enum __anonenum_binary_files_31 binary_files  ;
        -: 1067:static int filename_mask  ;
        -: 1068:static int out_quiet  ;
        -: 1069:static int out_invert  ;
        -: 1070:static int out_file  ;
        -: 1071:static int out_line  ;
        -: 1072:static int out_byte  ;
        -: 1073:static int out_before  ;
        -: 1074:static int out_after  ;
        -: 1075:static int count_matches  ;
        -: 1076:static int list_files  ;
        -: 1077:static int no_filenames  ;
        -: 1078:static int suppress_errors  ;
        -: 1079:static off_t totalcc  ;
        -: 1080:static char *lastnl  ;
        -: 1081:static char *lastout  ;
        -: 1082:static off_t totalnl  ;
        -: 1083:static int pending  ;
        -: 1084:static int done_on_match  ;
    #####: 1085:static void nlscan(char *lim ) 
        -: 1086:{ 
        -: 1087:  char *beg ;
        -: 1088:  void *tmp ;
        -: 1089:
        -: 1090:  {
    #####: 1091:  beg = lastnl;
        -: 1092:  {
    #####: 1093:  while (1) {
        -: 1094:                                     ;
        -: 1095:    {
    #####: 1096:    tmp = memchr((void const   *)beg, (int )eolbyte, (size_t )(lim - beg));
    #####: 1097:    beg = (char *)tmp;
        -: 1098:    }
    #####: 1099:    if (! beg) {
    #####: 1100:      goto while_break;
        -: 1101:    }
    #####: 1102:    totalnl ++;
    #####: 1103:    beg ++;
        -: 1104:  }
        -: 1105:  while_break: /* CIL Label */ ;
        -: 1106:  }
        -: 1107:               
        -: 1108:         
        -: 1109:}
    #####: 1110:}
    #####: 1111:static void print_offset_sep(off_t pos , int sep ) 
        -: 1112:{ 
        -: 1113:  char buf[sizeof(pos) * 8UL] ;
        -: 1114:  char *p ;
        -: 1115:
        -: 1116:  {
    #####: 1117:  p = (buf + sizeof(buf)) - 1;
    #####: 1118:  *p = (char )sep;
        -: 1119:  {
    #####: 1120:  while (1) {
        -: 1121:                                     ;
    #####: 1122:    p --;
    #####: 1123:    *p = (char )(48L + pos % 10L);
    #####: 1124:    pos /= 10L;
    #####: 1125:    if (! (pos != 0L)) {
    #####: 1126:      goto while_break;
        -: 1127:    }
        -: 1128:  }
        -: 1129:  while_break: /* CIL Label */ ;
        -: 1130:  }
        -: 1131:  {
    #####: 1132:  fwrite((void const   * __restrict  )p, (size_t )1, (size_t )((buf + sizeof(buf)) - p),
    #####: 1133:         (FILE * __restrict  )stdout);
        -: 1134:  }
        -: 1135:         
        -: 1136:}
    #####: 1137:}
       76: 1138:static void prline(char *beg , char *lim , int sep ) 
        -: 1139:{ 
        -: 1140:  off_t pos ;
        -: 1141:  int *tmp ;
        -: 1142:  char *tmp___0 ;
        -: 1143:  int tmp___1 ;
        -: 1144:
        -: 1145:  {
       76: 1146:  if (out_file) {
        -: 1147:     
        -: 1148:
       76: 1149:    printf((char const   * __restrict  )"%s%c", filename, sep & filename_mask);
        -: 1150:     
        -: 1151:
       76: 1152:  }
       76: 1153:  if (out_line) {
        -: 1154:     
        -: 1155:
    #####: 1156:    nlscan(beg);
    #####: 1157:    totalnl ++;
    #####: 1158:    print_offset_sep(totalnl, sep);
    #####: 1159:    lastnl = lim;
        -: 1160:     
        -: 1161:
    #####: 1162:  }
       76: 1163:  if (out_byte) {
        -: 1164:     
        -: 1165:
    #####: 1166:    pos = totalcc + (beg - bufbeg);
    #####: 1167:    print_offset_sep(pos, sep);
        -: 1168:     
        -: 1169:
    #####: 1170:  }
        -: 1171:  {
       76: 1172:  fwrite((void const   * __restrict  )beg, (size_t )1, (size_t )(lim - beg), (FILE * __restrict  )stdout);
        -: 1173:                           
        -: 1174:  }
        -: 1175:                
        -: 1176:     
        -: 1177:
        -: 1178:                             
        -: 1179:                                        
        -: 1180:                                         
        -: 1181:     
        -: 1182:
        -: 1183:   
       76: 1184:  lastout = lim;
        -: 1185:         
        -: 1186:}
       76: 1187:}
       87: 1188:static void prpending(char *lim ) 
        -: 1189:{ 
        -: 1190:  char *nl ;
        -: 1191:  void *tmp ;
        -: 1192:
        -: 1193:  {
        -: 1194:                  
        -: 1195:                     
        -: 1196:   
        -: 1197:  {
       87: 1198:  while (1) {
        -: 1199:                                     ;
       87: 1200:    if (pending > 0) {
    #####: 1201:      if (! ((unsigned long )lastout < (unsigned long )lim)) {
    #####: 1202:        goto while_break;
        -: 1203:      }
    #####: 1204:    } else {
       87: 1205:      goto while_break;
        -: 1206:    }
        -: 1207:    {
    #####: 1208:    pending --;
    #####: 1209:    tmp = memchr((void const   *)lastout, (int )eolbyte, (size_t )(lim - lastout));
    #####: 1210:    nl = (char *)tmp;
        -: 1211:    }
        -: 1212:                                                           {
    #####: 1213:      nl ++;
        -: 1214:    }       
        -: 1215:               
        -: 1216:     
        -: 1217:    {
    #####: 1218:    prline(lastout, nl, '-');
        -: 1219:    }
        -: 1220:  }
        -: 1221:  while_break: /* CIL Label */ ;
        -: 1222:  }
        -: 1223:         
        -: 1224:}
       87: 1225:}
        -: 1226:static int used  ;
       76: 1227:static void prtext(char *beg , char *lim , int *nlinesp ) 
        -: 1228:{ 
        -: 1229:  char *bp ;
        -: 1230:  char *p ;
        -: 1231:  char *nl ;
        -: 1232:  char eol ;
        -: 1233:  int i ;
        -: 1234:  int n ;
        -: 1235:  void *tmp ;
        -: 1236:  void *tmp___0 ;
        -: 1237:
        -: 1238:  {
       76: 1239:  eol = (char )eolbyte;
        -: 1240:                   {
        -: 1241:                     {
        -: 1242:       
        -: 1243:
       76: 1244:      prpending(beg);
        -: 1245:       
        -: 1246:
        -: 1247:    }
        -: 1248:  }
       76: 1249:  p = beg;
        -: 1250:                   {
       76: 1251:    if (lastout) {
       76: 1252:      bp = lastout;
       76: 1253:    } else {
    #####: 1254:      bp = bufbeg;
        -: 1255:    }
       76: 1256:    i = 0;
        -: 1257:    {
       76: 1258:    while (1) {
        -: 1259:                                       ;
       76: 1260:      if (! (i < out_before)) {
       76: 1261:        goto while_break;
        -: 1262:      }
    #####: 1263:      if ((unsigned long )p > (unsigned long )bp) {
        -: 1264:         
        -: 1265:
    #####: 1266:        while (1) {
        -: 1267:                                               ;
    #####: 1268:          p --;
    #####: 1269:          if ((unsigned long )p > (unsigned long )bp) {
    #####: 1270:            if (! ((int )*(p + -1) != (int )eol)) {
    #####: 1271:              goto while_break___0;
        -: 1272:            }
    #####: 1273:          } else {
    #####: 1274:            goto while_break___0;
        -: 1275:          }
        -: 1276:        }
        -: 1277:        while_break___0: /* CIL Label */ ;
        -: 1278:         
        -: 1279:
    #####: 1280:      }
    #####: 1281:      i ++;
        -: 1282:    }
        -: 1283:    while_break: /* CIL Label */ ;
        -: 1284:    }
        -: 1285:                     
        -: 1286:              
        -: 1287:           { //Added block
       76: 1288:    if (out_after) {
        -: 1289:      _L: 
    #####: 1290:      if (used) {
    #####: 1291:        if ((unsigned long )p != (unsigned long )lastout) {
        -: 1292:           
        -: 1293:
    #####: 1294:          puts("--");
        -: 1295:           
        -: 1296:
    #####: 1297:        }
    #####: 1298:      }
    #####: 1299:    }
        -: 1300:    }
        -: 1301:    {
       76: 1302:    while (1) {
        -: 1303:                                           ;
       76: 1304:      if (! ((unsigned long )p < (unsigned long )beg)) {
       76: 1305:        goto while_break___1;
        -: 1306:      }
        -: 1307:      {
    #####: 1308:      tmp = memchr((void const   *)p, (int )eol, (size_t )(beg - p));
    #####: 1309:      nl = (char *)tmp;
    #####: 1310:      prline(p, nl + 1, '-');
    #####: 1311:      p = nl + 1;
        -: 1312:      }
        -: 1313:    }
        -: 1314:    while_break___1: /* CIL Label */ ;
        -: 1315:    }
        -: 1316:  }
       76: 1317:  if (nlinesp) {
    #####: 1318:    n = 0;
        -: 1319:    {
    #####: 1320:    while (1) {
        -: 1321:                                           ;
    #####: 1322:      if (! ((unsigned long )p < (unsigned long )lim)) {
    #####: 1323:        goto while_break___2;
        -: 1324:      }
        -: 1325:      {
    #####: 1326:      tmp___0 = memchr((void const   *)p, (int )eol, (size_t )(lim - p));
    #####: 1327:      nl = (char *)tmp___0;
        -: 1328:      }
        -: 1329:                                                             {
    #####: 1330:        nl ++;
        -: 1331:      }       
        -: 1332:                 
        -: 1333:       
    #####: 1334:      if (! out_quiet) {
        -: 1335:         
        -: 1336:
    #####: 1337:        prline(p, nl, ':');
        -: 1338:         
        -: 1339:
    #####: 1340:      }
    #####: 1341:      p = nl;
    #####: 1342:      n ++;
        -: 1343:    }
        -: 1344:    while_break___2: /* CIL Label */ ;
        -: 1345:    }
    #####: 1346:    *nlinesp = n;
    #####: 1347:  } else { //Added block
       76: 1348:  if (! out_quiet) {
        -: 1349:     
        -: 1350:
       76: 1351:    prline(beg, lim, ':');
        -: 1352:     
        -: 1353:
       76: 1354:  }
        -: 1355:  }
        -: 1356:                  
        -: 1357:                
        -: 1358:         {
       76: 1359:    pending = out_after;
        -: 1360:  }
       76: 1361:  used = 1;
        -: 1362:         
        -: 1363:}
       76: 1364:}
       13: 1365:static int grepbuf(char *beg , char *lim ) 
        -: 1366:{ 
        -: 1367:  int nlines ;
        -: 1368:  int n ;
        -: 1369:  register char *p ;
        -: 1370:  register char *b ;
        -: 1371:  char *endp ;
        -: 1372:  char eol ;
        -: 1373:
        -: 1374:  {
       13: 1375:  eol = (char )eolbyte;
       13: 1376:  nlines = 0;
       13: 1377:  p = beg;
        -: 1378:  {
       89: 1379:  while (1) {
        -: 1380:                                     ;
        -: 1381:    {
       89: 1382:    b = (*execute)(p, (size_t )(lim - p), & endp);
        -: 1383:    }
       89: 1384:    if (! ((unsigned long )b != (unsigned long )((char *)0))) {
       13: 1385:      goto while_break;
        -: 1386:    }
        -: 1387:                                                   
        -: 1388:                                                    
        -: 1389:                                           
        -: 1390:                           
        -: 1391:                
        -: 1392:                  
        -: 1393:         
        -: 1394:                            
        -: 1395:          
        -: 1396:                                                     
        -: 1397:                         
        -: 1398:       
        -: 1399:       
        -: 1400:     
       76: 1401:    if (! out_invert) {
        -: 1402:      {
       76: 1403:      prtext(b, endp, (int *)0);
       76: 1404:      nlines ++;
        -: 1405:      }
        -: 1406:                          
        -: 1407:                        
        -: 1408:       
       76: 1409:    } else { //Added block
        -: 1410:                                               {
        -: 1411:       
        -: 1412:
    #####: 1413:      prtext(p, b, & n);
    #####: 1414:      nlines += n;
        -: 1415:       
        -: 1416:
        -: 1417:    }
        -: 1418:    }
       76: 1419:    p = endp;
        -: 1420:  }
        -: 1421:  while_break: /* CIL Label */ ;
        -: 1422:  }
       13: 1423:  if (out_invert) {
        -: 1424:                                                 {
        -: 1425:       
        -: 1426:
    #####: 1427:      prtext(p, lim, & n);
    #####: 1428:      nlines += n;
        -: 1429:       
        -: 1430:
        -: 1431:    }
    #####: 1432:  }
       13: 1433:  return (nlines);
        -: 1434:}
        -: 1435:}
        3: 1436:static int grep(int fd , char const   *file , struct stats *stats ) 
        -: 1437:{ 
        -: 1438:  int nlines ;
        -: 1439:  int i ;
        -: 1440:  int not_text ;
        -: 1441:  size_t residue ;
        -: 1442:  size_t save ;
        -: 1443:  char *beg ;
        -: 1444:  char *lim ;
        -: 1445:  char eol ;
        -: 1446:  int tmp ;
        -: 1447:  int *tmp___0 ;
        -: 1448:  int tmp___1 ;
        -: 1449:  int tmp___2 ;
        -: 1450:  int *tmp___3 ;
        -: 1451:  int *tmp___4 ;
        -: 1452:  int tmp___5 ;
        -: 1453:  int tmp___6 ;
        -: 1454:  void *tmp___7 ;
        -: 1455:  int tmp___8 ;
        -: 1456:  int tmp___9 ;
        -: 1457:  int *tmp___10 ;
        -: 1458:  int *tmp___11 ;
        -: 1459:  int tmp___12 ;
        -: 1460:  char *tmp___13 ;
        -: 1461:  int tmp___14 ;
        -: 1462:  char *tmp___15 ;
        -: 1463:
        -: 1464:  {
        -: 1465:  {
        3: 1466:  eol = (char )eolbyte;
        3: 1467:  tmp = reset(fd, file, stats);
        -: 1468:  }
        -: 1469:              
        -: 1470:               
        -: 1471:   
        -: 1472:             
        -: 1473:                                           
        -: 1474:                                                     
        -: 1475:         
        -: 1476:                            
        -: 1477:         
        -: 1478:                           
        -: 1479:           
        -: 1480:
        -: 1481:                                       
        -: 1482:                                
        -: 1483:           
        -: 1484:
        -: 1485:         
        -: 1486:         
        -: 1487:                                       
        -: 1488:         
        -: 1489:                             
        -: 1490:       
        -: 1491:     
        -: 1492:   
        -: 1493:  {
        3: 1494:  totalcc = (off_t )0;
        -: 1495:                      
        -: 1496:                      
        -: 1497:              
        -: 1498:             
        3: 1499:  residue = (size_t )0;
        3: 1500:  save = (size_t )0;
        3: 1501:  tmp___5 = fillbuf(save, stats);
        -: 1502:  }
        -: 1503:                  
        -: 1504:     
        -: 1505:                                 
        -: 1506:     
        -: 1507:                         
        -: 1508:                              
        -: 1509:         
        -: 1510:
        -: 1511:                                     
        -: 1512:                                  
        -: 1513:         
        -: 1514:
        -: 1515:       
        -: 1516:            
        -: 1517:       
        -: 1518:
        -: 1519:                                   
        -: 1520:                                
        -: 1521:       
        -: 1522:
        -: 1523:     
        -: 1524:               
        -: 1525:   
        3: 1526:  if ((unsigned int )binary_files == 0U) {
        -: 1527:                     {
        3: 1528:      goto _L;
        -: 1529:    }       
        -: 1530:                  
        -: 1531:     
    #####: 1532:  } else { //Added block
        -: 1533:  _L___0: 
    #####: 1534:                                         {
        -: 1535:    _L: 
        -: 1536:             {
        3: 1537:      tmp___6 = '\000';
        -: 1538:    }       
        -: 1539:                       
        -: 1540:     
        -: 1541:    {
        3: 1542:    tmp___7 = memchr((void const   *)bufbeg, tmp___6, (size_t )(buflim - bufbeg));
        -: 1543:    }
        3: 1544:    if (tmp___7) {
    #####: 1545:      tmp___8 = 1;
    #####: 1546:    } else {
        -: 1547:                  
        -: 1548:    }
        -: 1549:  }       
        -: 1550:                
        -: 1551:   
        -: 1552:  }
        3: 1553:  not_text = tmp___8;
        -: 1554:                 
        -: 1555:                                            
        -: 1556:                 
        -: 1557:     
        -: 1558:   
        -: 1559:                            
        3: 1560:  out_quiet += not_text;
        -: 1561:  {
       14: 1562:  while (1) {
        -: 1563:                                     ;
       14: 1564:    lastnl = bufbeg;
        -: 1565:                 {
       14: 1566:      lastout = bufbeg;
        -: 1567:    }
       14: 1568:    if ((size_t )(buflim - bufbeg) == save) {
        3: 1569:      goto while_break;
        -: 1570:    }
       11: 1571:    beg = (bufbeg + save) - residue;
       11: 1572:    lim = buflim;
        -: 1573:    {
      274: 1574:    while (1) {
        -: 1575:                                           ;
        -: 1576:                                                     {
      274: 1577:        if (! ((int )*(lim + -1) != (int )eol)) {
       11: 1578:          goto while_break___0;
        -: 1579:        }
        -: 1580:      }       
        -: 1581:                             
        -: 1582:       
      263: 1583:      lim --;
        -: 1584:    }
        -: 1585:    while_break___0: /* CIL Label */ ;
        -: 1586:    }
       11: 1587:    residue = (size_t )(buflim - lim);
        -: 1588:                                                   {
        -: 1589:      {
       11: 1590:      tmp___9 = grepbuf(beg, lim);
       11: 1591:      nlines += tmp___9;
        -: 1592:      }
        -: 1593:                   {
        -: 1594:         
        -: 1595:
       11: 1596:        prpending(lim);
        -: 1597:         
        -: 1598:
        -: 1599:      }
        -: 1600:                   
        -: 1601:                            
        -: 1602:                             
        -: 1603:                             
        -: 1604:           
        -: 1605:         
        -: 1606:       
        -: 1607:    }
       11: 1608:    i = 0;
       11: 1609:    beg = lim;
        -: 1610:    {
       11: 1611:    while (1) {
        -: 1612:                                           ;
       11: 1613:      if (i < out_before) {
        -: 1614:                                                          {
    #####: 1615:          if (! ((unsigned long )beg != (unsigned long )lastout)) {
    #####: 1616:            goto while_break___1;
        -: 1617:          }
        -: 1618:        }       
        -: 1619:                               
        -: 1620:         
    #####: 1621:      } else {
       11: 1622:        goto while_break___1;
        -: 1623:      }
    #####: 1624:      i ++;
        -: 1625:      {
    #####: 1626:      while (1) {
        -: 1627:                                             ;
    #####: 1628:        beg --;
        -: 1629:                                                          {
    #####: 1630:          if (! ((int )*(beg + -1) != (int )eol)) {
    #####: 1631:            goto while_break___2;
        -: 1632:          }
        -: 1633:        }       
        -: 1634:                               
        -: 1635:         
        -: 1636:      }
        -: 1637:      while_break___2: /* CIL Label */ ;
        -: 1638:      }
        -: 1639:    }
        -: 1640:    while_break___1: /* CIL Label */ ;
        -: 1641:    }
        -: 1642:                                                         
        -: 1643:                          
        -: 1644:     
       11: 1645:    save = (size_t )((lim + residue) - beg);
       11: 1646:    totalcc = (off_t )((size_t )totalcc + ((size_t )(buflim - bufbeg) - save));
        -: 1647:                   
        -: 1648:       
        -: 1649:
        -: 1650:                  
        -: 1651:       
        -: 1652:
        -: 1653:     
        -: 1654:    {
       11: 1655:    tmp___12 = fillbuf(save, stats);
        -: 1656:    }
        -: 1657:                     
        -: 1658:       
        -: 1659:                                    
        -: 1660:       
        -: 1661:                            
        -: 1662:                                
        -: 1663:           
        -: 1664:
        -: 1665:                                        
        -: 1666:                                     
        -: 1667:           
        -: 1668:
        -: 1669:         
        -: 1670:              
        -: 1671:         
        -: 1672:
        -: 1673:                                      
        -: 1674:                                   
        -: 1675:         
        -: 1676:
        -: 1677:       
        -: 1678:                       
        -: 1679:     
        -: 1680:  }
        -: 1681:  while_break: /* CIL Label */ ;
        -: 1682:  }
        5: 1683:  if (residue) {
        -: 1684:    {
        2: 1685:    tmp___13 = buflim;
        2: 1686:    buflim ++;
        2: 1687:    *tmp___13 = eol;
        2: 1688:    tmp___14 = grepbuf((bufbeg + save) - residue, buflim);
        2: 1689:    nlines += tmp___14;
        -: 1690:    }
        -: 1691:                  
        -: 1692:       
        -: 1693:
        -: 1694:                        
        -: 1695:       
        -: 1696:
        -: 1697:     
        2: 1698:  }
        -: 1699:  finish_grep: 
        3: 1700:  done_on_match -= not_text;
        3: 1701:  out_quiet -= not_text;
        3: 1702:  if (not_text & ~ out_quiet) {
    #####: 1703:    if (nlines != 0) {
        -: 1704:       
        -: 1705:
    #####: 1706:      tmp___15 = gettext("Binary file %s matches\n");
    #####: 1707:      printf((char const   * __restrict  )tmp___15, filename);
        -: 1708:       
        -: 1709:
    #####: 1710:    }
    #####: 1711:  }
        3: 1712:  return (nlines);
        -: 1713:}
        -: 1714:}
        3: 1715:static int grepfile(char const   *file , struct stats *stats ) 
        -: 1716:{ 
        -: 1717:  int desc ;
        -: 1718:  int count ;
        -: 1719:  int status ;
        -: 1720:  char *tmp ;
        -: 1721:  int *tmp___0 ;
        -: 1722:  int e ;
        -: 1723:  int *tmp___1 ;
        -: 1724:  int *tmp___2 ;
        -: 1725:  int tmp___3 ;
        -: 1726:  int tmp___4 ;
        -: 1727:  int tmp___5 ;
        -: 1728:  int *tmp___6 ;
        -: 1729:  int *tmp___7 ;
        -: 1730:  int tmp___8 ;
        -: 1731:
        -: 1732:  {
        3: 1733:  if (! file) {
        -: 1734:     
        -: 1735:
        -: 1736:             
    #####: 1737:    tmp = gettext("(standard input)");
    #####: 1738:    filename = (char const   *)tmp;
        -: 1739:     
        -: 1740:
    #####: 1741:  } else {
        -: 1742:    {
        -: 1743:              {
        -: 1744:                                       
        -: 1745:      {
        3: 1746:      desc = open(file, 0);
        -: 1747:      }
        -: 1748:                     
        -: 1749:         
        -: 1750:                                     
        -: 1751:         
        -: 1752:                                
        -: 1753:                           
        -: 1754:         
        -: 1755:              
        -: 1756:                         
        -: 1757:       
        -: 1758:                          
        3: 1759:    }
        -: 1760:    while_break: /* CIL Label */ ;
        -: 1761:    }
        3: 1762:    if (desc < 0) {
        -: 1763:      {
    #####: 1764:      tmp___1 = __errno_location();
    #####: 1765:      e = *tmp___1;
        -: 1766:      }
        -: 1767:                    
        -: 1768:                                               
        -: 1769:           
        -: 1770:                                                                                                         
        -: 1771:           
        -: 1772:                             
        -: 1773:             
        -: 1774:                                         
        -: 1775:                                  
        -: 1776:             
        -: 1777:                       
        -: 1778:           
        -: 1779:           
        -: 1780:                                         
        -: 1781:           
        -: 1782:                           
        -: 1783:         
        -: 1784:       
        -: 1785:                             {
        -: 1786:                                               
        -: 1787:           
        -: 1788:
        -: 1789:                        
        -: 1790:                         
        -: 1791:           
        -: 1792:                        
        -: 1793:                         
        -: 1794:           
        -: 1795:                            
        -: 1796:                                   
        -: 1797:                     
        -: 1798:                                   
        -: 1799:           
        -: 1800:                                                                                                         
        -: 1801:           
        -: 1802:                             
        -: 1803:                                                           
        -: 1804:                         
        -: 1805:             
        -: 1806:           
        -: 1807:                            
        -: 1808:                                         
        -: 1809:           
        -: 1810:
        -: 1811:         
        -: 1812:        {
    #####: 1813:        error(file, e);
        -: 1814:        }
        -: 1815:      }
    #####: 1816:      return (1);
        -: 1817:    }
        3: 1818:    filename = file;
        -: 1819:  }
        -: 1820:  {
        3: 1821:  count = grep(desc, file, stats);
        -: 1822:  }
        -: 1823:                  
        -: 1824:                       
        -: 1825:         {
        3: 1826:    if (count_matches) {
    #####: 1827:      if (out_file) {
        -: 1828:         
        -: 1829:
    #####: 1830:        printf((char const   * __restrict  )"%s%c", filename, 58 & filename_mask);
        -: 1831:         
        -: 1832:
    #####: 1833:      }
        -: 1834:      {
    #####: 1835:      printf((char const   * __restrict  )"%d\n", count);
        -: 1836:      }
    #####: 1837:    }
        3: 1838:    status = ! count;
        3: 1839:    if (list_files == 1 - 2 * status) {
        -: 1840:       
        -: 1841:
    #####: 1842:      printf((char const   * __restrict  )"%s%c", filename, 10 & filename_mask);
        -: 1843:       
        -: 1844:
    #####: 1845:    }
        -: 1846:              {
        -: 1847:       
        -: 1848:
        -: 1849:                {
        -: 1850:                                             ;
        -: 1851:        {
        3: 1852:        tmp___8 = close(desc);
        -: 1853:        }
        -: 1854:                               
        -: 1855:                               
        -: 1856:         
        -: 1857:         
        -: 1858:                                     
        -: 1859:         
        -: 1860:                            
        -: 1861:           
        -: 1862:                                       
        -: 1863:                                
        -: 1864:           
        -: 1865:                               
        -: 1866:         
        3: 1867:      }
        -: 1868:      while_break___0: /* CIL Label */ ;
        -: 1869:       
        -: 1870:
        -: 1871:    }
        -: 1872:  }
        -: 1873:                  
        -: 1874:}
        3: 1875:}
        -: 1876:static int grepdir(char const   *dir , struct stats *stats ) 
        -: 1877:{ 
        -: 1878:  int status ;
        -: 1879:  struct stats *ancestor ;
        -: 1880:  char *name_space ;
        -: 1881:  char *tmp ;
        -: 1882:  char *tmp___0 ;
        -: 1883:  int *tmp___1 ;
        -: 1884:  char *tmp___2 ;
        -: 1885:  int *tmp___3 ;
        -: 1886:  size_t dirlen ;
        -: 1887:  size_t tmp___4 ;
        -: 1888:  int needs_slash ;
        -: 1889:  int tmp___5 ;
        -: 1890:  char *file ;
        -: 1891:  char *namep ;
        -: 1892:  struct stats child ;
        -: 1893:  size_t namelen ;
        -: 1894:  size_t tmp___6 ;
        -: 1895:  int tmp___7 ;
        -: 1896:
        -: 1897:  {
        -: 1898:             
        -: 1899:                   
        -: 1900:   
        -: 1901:             
        -: 1902:                                      
        -: 1903:                                
        -: 1904:                                                                              
        -: 1905:                       
        -: 1906:     
        -: 1907:                                                      
        -: 1908:                                                        
        -: 1909:                                
        -: 1910:           
        -: 1911:
        -: 1912:                                                    
        -: 1913:                                                     
        -: 1914:                                                                                    
        -: 1915:                                  
        -: 1916:           
        -: 1917:
        -: 1918:         
        -: 1919:                   
        -: 1920:       
        -: 1921:     
        -: 1922:   
        -: 1923:                                
        -: 1924:   
        -: 1925:  {
        -: 1926:  name_space = savedir(dir, (off_t )((unsigned int )stats->stat.st_size));
        -: 1927:  }
        -: 1928:                    {
        -: 1929:    {
        -: 1930:    tmp___3 = __errno_location();
        -: 1931:    }
        -: 1932:                  {
        -: 1933:                             {
        -: 1934:         
        -: 1935:
        -: 1936:        tmp___1 = __errno_location();
        -: 1937:        error(dir, *tmp___1);
        -: 1938:         
        -: 1939:
        -: 1940:      }
        -: 1941:    }       
        -: 1942:       
        -: 1943:
        -: 1944:                                            
        -: 1945:                                        
        -: 1946:       
        -: 1947:
        -: 1948:     
        -: 1949:  }       
        -: 1950:     
        -: 1951:                          
        -: 1952:                     
        -: 1953:     
        -: 1954:                        
        -: 1955:                  
        -: 1956:                          
        -: 1957:                                                      
        -: 1958:                  
        -: 1959:            
        -: 1960:                  
        -: 1961:     
        -: 1962:     
        -: 1963:                          
        -: 1964:                               
        -: 1965:                       
        -: 1966:                         
        -: 1967:                               
        -: 1968:     
        -: 1969:               
        -: 1970:                                            
        -: 1971:                     
        -: 1972:                             
        -: 1973:       
        -: 1974:       
        -: 1975:                                              
        -: 1976:                        
        -: 1977:                                                              
        -: 1978:                                                                          
        -: 1979:                                    
        -: 1980:                                                                                                       
        -: 1981:                             
        -: 1982:                                                        
        -: 1983:                        
        -: 1984:       
        -: 1985:     
        -: 1986:                                      
        -: 1987:     
        -: 1988:                               
        -: 1989:               
        -: 1990:       
        -: 1991:
        -: 1992:                         
        -: 1993:       
        -: 1994:
        -: 1995:     
        -: 1996:     
        -: 1997:                             
        -: 1998:     
        -: 1999:   
        -: 2000:  return (status);
        -: 2001:}
        -: 2002:}
        -: 2003:static  __attribute__((__noreturn__)) void usage(int status ) ;
        -: 2004:static void usage(int status ) 
        -: 2005:{ 
        -: 2006:  char *tmp ;
        -: 2007:  char *tmp___0 ;
        -: 2008:  char *tmp___1 ;
        -: 2009:  char *tmp___2 ;
        -: 2010:  char *tmp___3 ;
        -: 2011:  char *tmp___4 ;
        -: 2012:  char *tmp___5 ;
        -: 2013:  char *tmp___6 ;
        -: 2014:  char *tmp___7 ;
        -: 2015:  char *tmp___8 ;
        -: 2016:
        -: 2017:   
        -: 2018:                    
        -: 2019:     
        -: 2020:
        -: 2021:                                                               
        -: 2022:                                                                                 
        -: 2023:                                                                  
        -: 2024:                                                                                     
        -: 2025:     
        -: 2026:
        -: 2027:          
        -: 2028:     
        -: 2029:
        -: 2030:                                                                    
        -: 2031:                                                       
        -: 2032:                                                                                                                                                                    
        -: 2033:                                                       
        -: 2034:                                                                                                                                                                                                                                               
        -: 2035:                                                 
        -: 2036:                                                                                                                                                                                                                                                                                                                                                                                                                      
        -: 2037:                                                 
        -: 2038:                                                                                                                                                                                                                                                                                                                                                 
        -: 2039:                                                 

        -: 2041:                                                 

        -: 2043:                                                 
        -: 2044:                                                                     
        -: 2045:                                                 
        -: 2046:     
        -: 2047:
        -: 2048:   
        -: 2049:   
        -: 2050:               
        -: 2051:   
        -: 2052: 
        -: 2053:}
        1: 2054:static void setmatcher(char const   *m ) 
        -: 2055:{ 
        -: 2056:  char *tmp ;
        -: 2057:  int tmp___0 ;
        -: 2058:
        -: 2059:  {
        -: 2060:                
        -: 2061:     
        -: 2062:                                 
        -: 2063:     
        -: 2064:                       
        -: 2065:       
        -: 2066:
        -: 2067:                                                      
        -: 2068:                                    
        -: 2069:       
        -: 2070:
        -: 2071:     
        -: 2072:   
        1: 2073:  matcher = m;
        -: 2074:         
        -: 2075:}
        1: 2076:}
        1: 2077:static int install_matcher(char const   *name ) 
        -: 2078:{ 
        -: 2079:  int i ;
        -: 2080:  int tmp ;
        -: 2081:
        -: 2082:  {
        1: 2083:  i = 0;
        -: 2084:  {
        3: 2085:  while (1) {
        -: 2086:                                     ;
        -: 2087:                             
        -: 2088:                       
        -: 2089:     
        -: 2090:    {
        3: 2091:    tmp = strcmp(name, (char const   *)matchers[i].name);
        -: 2092:    }
        3: 2093:    if (tmp == 0) {
        1: 2094:      compile = matchers[i].compile;
        1: 2095:      execute = matchers[i].execute;
        1: 2096:      return (1);
        -: 2097:    }
        2: 2098:    i ++;
        -: 2099:  }
        -: 2100:  while_break: /* CIL Label */ ;
        -: 2101:  }
        -: 2102:             
        -: 2103:}
        -: 2104:}
        -: 2105:static int prepend_args(char const   *options , char *buf , char **argv ) 
        -: 2106:{ 
        -: 2107:  char const   *o ;
        -: 2108:  char *b ;
        -: 2109:  int n ;
        -: 2110:  unsigned short const   **tmp ;
        -: 2111:  char const   *tmp___0 ;
        -: 2112:  char *tmp___1 ;
        -: 2113:  char tmp___2 ;
        -: 2114:  char const   *tmp___3 ;
        -: 2115:  unsigned short const   **tmp___4 ;
        -: 2116:  char *tmp___5 ;
        -: 2117:
        -: 2118:  {
        -: 2119:              
        -: 2120:          
        -: 2121:        
        -: 2122:  {
        -: 2123:            {
        -: 2124:                                     ;
        -: 2125:    {
        -: 2126:              {
        -: 2127:                                           ;
        -: 2128:       
        -: 2129:                            
        -: 2130:       
        -: 2131:                                                                          
        -: 2132:                             
        -: 2133:       
        -: 2134:           
        -: 2135:    }
        -: 2136:    while_break___0: /* CIL Label */ ;
        -: 2137:    }
        -: 2138:              {
        -: 2139:      return (n);
        -: 2140:    }
        -: 2141:               
        -: 2142:                      
        -: 2143:     
        -: 2144:    n ++;
        -: 2145:     
        -: 2146:               
        -: 2147:                                            
        -: 2148:                  
        -: 2149:           
        -: 2150:                  
        -: 2151:           
        -: 2152:                                
        -: 2153:                         
        -: 2154:                                
        -: 2155:                 
        -: 2156:                      
        -: 2157:               
        -: 2158:                                      
        -: 2159:         
        -: 2160:       
        -: 2161:               
        -: 2162:         
        -: 2163:                                  
        -: 2164:         
        -: 2165:                                                                            
        -: 2166:                               
        -: 2167:         
        -: 2168:              
        -: 2169:                             
        -: 2170:       
        -: 2171:     
        -: 2172:                                      
        -: 2173:     
        -: 2174:                
        -: 2175:         
        -: 2176:                             
        -: 2177:  }
        -: 2178:                                ;
        -: 2179:  }
        -: 2180:}
        -: 2181:}
        -: 2182:static void prepend_default_options(char const   *options , int *pargc , char ***pargv ) 
        -: 2183:{ 
        -: 2184:  char *buf ;
        -: 2185:  size_t tmp ;
        -: 2186:  char *tmp___0 ;
        -: 2187:  int prepended ;
        -: 2188:  int tmp___1 ;
        -: 2189:  int argc ;
        -: 2190:  char * const  *argv ;
        -: 2191:  char **pp ;
        -: 2192:  char *tmp___2 ;
        -: 2193:  char **tmp___3 ;
        -: 2194:  char * const  *tmp___4 ;
        -: 2195:  int tmp___5 ;
        -: 2196:  char **tmp___6 ;
        -: 2197:  char *tmp___7 ;
        -: 2198:  char * const  *tmp___8 ;
        -: 2199:
        -: 2200:   
        -: 2201:                
        -: 2202:     
        -: 2203:                          
        -: 2204:                                 
        -: 2205:                  
        -: 2206:                                                               
        -: 2207:                        
        -: 2208:                  
        -: 2209:                                   
        -: 2210:                                                                              
        -: 2211:                          
        -: 2212:                              
        -: 2213:                
        -: 2214:                 
        -: 2215:          
        -: 2216:                   
        -: 2217:            
        -: 2218:                                
        -: 2219:                                             
        -: 2220:                  
        -: 2221:     
        -: 2222:     
        -: 2223:               
        -: 2224:                                       
        -: 2225:                   
        -: 2226:            
        -: 2227:                     
        -: 2228:              
        -: 2229:                                 
        -: 2230:                         
        -: 2231:                      
        -: 2232:                         
        -: 2233:       
        -: 2234:                          
        -: 2235:     
        -: 2236:                                  
        -: 2237:     
        -: 2238:   
        -: 2239:         
        -: 2240: 
        -: 2241:}
        1: 2242:int main(int argc , char **argv ) 
        -: 2243:{ 
        -: 2244:  char *keys ;
        -: 2245:  size_t keycc ;
        -: 2246:  size_t oldcc ;
        -: 2247:  size_t keyalloc ;
        -: 2248:  int with_filenames ;
        -: 2249:  int opt ;
        -: 2250:  int cc ;
        -: 2251:  int status ;
        -: 2252:  int default_context ;
        -: 2253:  unsigned int digit_args_val ;
        -: 2254:  FILE *fp ;
        -: 2255:  char *tmp ;
        -: 2256:  char *tmp___0 ;
        -: 2257:  char *tmp___1 ;
        -: 2258:  char *tmp___2 ;
        -: 2259:  int tmp___3 ;
        -: 2260:  char *tmp___4 ;
        -: 2261:  int tmp___5 ;
        -: 2262:  char *tmp___6 ;
        -: 2263:  int tmp___7 ;
        -: 2264:  char *tmp___8 ;
        -: 2265:  int tmp___9 ;
        -: 2266:  int tmp___10 ;
        -: 2267:  int tmp___11 ;
        -: 2268:  size_t tmp___12 ;
        -: 2269:  size_t tmp___13 ;
        -: 2270:  FILE *tmp___15 ;
        -: 2271:  int tmp___16 ;
        -: 2272:  int *tmp___17 ;
        -: 2273:  int tmp___18 ;
        -: 2274:  size_t tmp___19 ;
        -: 2275:  size_t tmp___20 ;
        -: 2276:  char *tmp___21 ;
        -: 2277:  int tmp___22 ;
        -: 2278:  int tmp___23 ;
        -: 2279:  int tmp___24 ;
        -: 2280:  char *tmp___25 ;
        -: 2281:  char *tmp___26 ;
        -: 2282:  char *tmp___27 ;
        -: 2283:  int tmp___28 ;
        -: 2284:  int tmp___29 ;
        -: 2285:  int tmp___30 ;
        -: 2286:  char *file ;
        -: 2287:  char *tmp___32 ;
        -: 2288:  int tmp___33 ;
        -: 2289:  int tmp___34 ;
        -: 2290:  int *tmp___35 ;
        -: 2291:  char *tmp___36 ;
        -: 2292:  int tmp___37 ;
        -: 2293:  int tmp___38 ;
        -: 2294:
        -: 2295:  {
        1: 2296:  *(argv + 0) = (char *)"target5";
        1: 2297:  prog = *(argv + 0);
        -: 2298:             
        -: 2299:     
        -: 2300:                                                 
        -: 2301:     
        -: 2302:                  
        -: 2303:       
        -: 2304:
        -: 2305:                                               
        -: 2306:                     
        -: 2307:       
        -: 2308:
        -: 2309:     
        -: 2310:   
        -: 2311:  {
        1: 2312:  keys = (char *)((void *)0);
        -: 2313:                     
        -: 2314:                     
        1: 2315:  eolbyte = (unsigned char )'\n';
        1: 2316:  filename_mask = ~ 0;
        1: 2317:  out_before = -1;
        1: 2318:  out_after = out_before;
        -: 2319:                      
        1: 2320:  digit_args_val = 0U;
        -: 2321:                   
        -: 2322:                                                                                                     
        -: 2323:                     
        -: 2324:                                   
        -: 2325:                                                                   
        -: 2326:  }
        -: 2327:  {
        2: 2328:  while (1) {
        -: 2329:                                     ;
        -: 2330:    {
        2: 2331:    opt = getopt_long(argc, (char * const  *)argv, short_options, (struct option  const  *)(long_options),
        -: 2332:                      (int *)((void *)0));
        -: 2333:    }
        2: 2334:    if (! (opt != -1)) {
        1: 2335:      goto while_break;
        -: 2336:    }
        -: 2337:    {
        -: 2338:                    
        -: 2339:                   
        -: 2340:     
        -: 2341:                    
        -: 2342:                   
        -: 2343:     
        -: 2344:                    
        -: 2345:                   
        -: 2346:     
        -: 2347:                    
        -: 2348:                   
        -: 2349:     
        -: 2350:                    
        -: 2351:                   
        -: 2352:     
        -: 2353:                    
        -: 2354:                   
        -: 2355:     
        -: 2356:                    
        -: 2357:                   
        -: 2358:     
        -: 2359:                    
        -: 2360:                   
        -: 2361:     
        -: 2362:                    
        -: 2363:                   
        -: 2364:     
        -: 2365:                    
        -: 2366:                   
        -: 2367:     
        -: 2368:                    
        -: 2369:                   
        -: 2370:     
        -: 2371:                    
        -: 2372:                   
        -: 2373:     
        1: 2374:    if (opt == 67) {
    #####: 2375:      goto case_67;
        -: 2376:    }
        1: 2377:    if (opt == 69) {
        1: 2378:      goto case_69;
        -: 2379:    }
        -: 2380:                    
        -: 2381:                   
        -: 2382:     
    #####: 2383:    if (opt == 71) {
    #####: 2384:      goto case_71;
        -: 2385:    }
        -: 2386:                    
        -: 2387:                   
        -: 2388:     
        -: 2389:                    
        -: 2390:                   
        -: 2391:     
        -: 2392:                    
        -: 2393:                   
        -: 2394:     
        -: 2395:                     
        -: 2396:                    
        -: 2397:     
    #####: 2398:    if (opt == 86) {
    #####: 2399:      goto case_86;
        -: 2400:    }
        -: 2401:                    
        -: 2402:                   
        -: 2403:     
        -: 2404:                    
        -: 2405:                   
        -: 2406:     
    #####: 2407:    if (opt == 98) {
    #####: 2408:      goto case_98;
        -: 2409:    }
    #####: 2410:    if (opt == 99) {
    #####: 2411:      goto case_99;
        -: 2412:    }
        -: 2413:                     
        -: 2414:                    
        -: 2415:     
        -: 2416:                     
        -: 2417:                    
        -: 2418:     
    #####: 2419:    if (opt == 102) {
    #####: 2420:      goto case_102;
        -: 2421:    }
    #####: 2422:    if (opt == 104) {
    #####: 2423:      goto case_104;
        -: 2424:    }
    #####: 2425:    if (opt == 105) {
    #####: 2426:      goto case_105;
        -: 2427:    }
        -: 2428:                     
        -: 2429:                    
        -: 2430:     
    #####: 2431:    if (opt == 76) {
    #####: 2432:      goto case_76;
        -: 2433:    }
    #####: 2434:    if (opt == 108) {
    #####: 2435:      goto case_108;
        -: 2436:    }
    #####: 2437:    if (opt == 110) {
    #####: 2438:      goto case_110;
        -: 2439:    }
        -: 2440:                     
        -: 2441:                    
        -: 2442:     
        -: 2443:                     
        -: 2444:                    
        -: 2445:     
        -: 2446:                     
        -: 2447:                    
        -: 2448:     
    #####: 2449:    if (opt == 118) {
    #####: 2450:      goto case_118;
        -: 2451:    }
        -: 2452:                     
        -: 2453:                    
        -: 2454:     
        -: 2455:                     
        -: 2456:                    
        -: 2457:     
        -: 2458:                    
        -: 2459:                   
        -: 2460:     
        -: 2461:                     
        -: 2462:                    
        -: 2463:     
        -: 2464:                     
        -: 2465:                    
        -: 2466:     
        -: 2467:                   
        -: 2468:                  
        -: 2469:     
        -: 2470:                        
        -: 2471:    case_48: /* CIL Label */ 
        -: 2472:                             
        -: 2473:                              
        -: 2474:                              
        -: 2475:                              
        -: 2476:                              
        -: 2477:                              
        -: 2478:                              
        -: 2479:                              
        -: 2480:                              
    #####: 2481:     digit_args_val = (10U * digit_args_val + (unsigned int )opt) - 48U;
    #####: 2482:    default_context = (int )digit_args_val;
        -: 2483:                      
        -: 2484:                             
        -: 2485:                 
        -: 2486:       
        -: 2487:                                                             
        -: 2488:       
        -: 2489:                    
        -: 2490:         
        -: 2491:
        -: 2492:                                                             
        -: 2493:                                          
        -: 2494:         
        -: 2495:
        -: 2496:       
        -: 2497:     
        -: 2498:                      
        -: 2499:                             
        -: 2500:                 
        -: 2501:       
        -: 2502:                                                              
        -: 2503:       
        -: 2504:                    
        -: 2505:         
        -: 2506:
        -: 2507:                                                             
        -: 2508:                                          
        -: 2509:         
        -: 2510:
        -: 2511:       
        -: 2512:     
    #####: 2513:    goto switch_break;
        -: 2514:    case_67: /* CIL Label */ 
        -: 2515:                 
        -: 2516:       
        -: 2517:                                                                   
        -: 2518:       
        -: 2519:                    
        -: 2520:         
        -: 2521:
        -: 2522:                                                             
        -: 2523:                                          
        -: 2524:         
        -: 2525:
        -: 2526:       
        -: 2527:           {
    #####: 2528:      default_context = 2;
    #####: 2529:    }
        -: 2530:                      
        -: 2531:    case_69: /* CIL Label */ 
        -: 2532:    {
        1: 2533:    setmatcher("egrep");
        -: 2534:    }
        -: 2535:                      
        -: 2536:                             
        -: 2537:     
        -: 2538:                        
        -: 2539:     
        1: 2540:    goto switch_break;
        -: 2541:    case_71: /* CIL Label */ 
        -: 2542:    {
        -: 2543:                       
    #####: 2544:    }
        -: 2545:                      
        -: 2546:                             
        -: 2547:                       
        -: 2548:                      
        -: 2549:                             
        -: 2550:                                                       
        -: 2551:                      
        -: 2552:                             
        -: 2553:                      
        -: 2554:    case_117: /* CIL Label */ 
    #####: 2555:    goto switch_break;
        -: 2556:    case_86: /* CIL Label */ 
    #####: 2557:    show_version = 1;
        -: 2558:                      
        -: 2559:                             
        -: 2560:     
        -: 2561:                                       
        -: 2562:     
        -: 2563:                      
        -: 2564:                             
        -: 2565:                                                       
        -: 2566:                      
        -: 2567:    case_98: /* CIL Label */ 
    #####: 2568:    out_byte = 1;
    #####: 2569:    goto switch_break;
        -: 2570:    case_99: /* CIL Label */ 
    #####: 2571:    out_quiet = 1;
    #####: 2572:    count_matches = 1;
    #####: 2573:    goto switch_break;
        -: 2574:                              
        -: 2575:     
        -: 2576:                                                      
        -: 2577:     
        -: 2578:                        
        -: 2579:                                                       
        -: 2580:            
        -: 2581:       
        -: 2582:                                                        
        -: 2583:       
        -: 2584:                          
        -: 2585:                                                         
        -: 2586:              
        -: 2587:         
        -: 2588:                                                            
        -: 2589:         
        -: 2590:                           
        -: 2591:                                                           
        -: 2592:                
        -: 2593:           
        -: 2594:
        -: 2595:                                                          
        -: 2596:                                            
        -: 2597:           
        -: 2598:
        -: 2599:         
        -: 2600:       
        -: 2601:     
        -: 2602:                      
        -: 2603:                              
        -: 2604:     
        -: 2605:                                              
        -: 2606:                        
        -: 2607:                                                       
        -: 2608:                                                                                     
        -: 2609:                         
        -: 2610:                     
        -: 2611:             
        -: 2612:                                     
        -: 2613:     
        -: 2614:                      
        -: 2615:    case_102: /* CIL Label */ 
        -: 2616:    {
        -: 2617:                                                   
        -: 2618:    }
        -: 2619:                       {
        -: 2620:       
        -: 2621:
    #####: 2622:      tmp___15 = fopen((char const   * __restrict  )optarg, (char const   * __restrict  )"r");
        -: 2623:                    
        -: 2624:       
        -: 2625:
        -: 2626:    }       
        -: 2627:                 
        -: 2628:     
        -: 2629:              {
        -: 2630:       
        -: 2631:
    #####: 2632:      tmp___17 = __errno_location();
    #####: 2633:      fatal((char const   *)optarg, *tmp___17);
        -: 2634:       
        -: 2635:
        -: 2636:    }
        -: 2637:                          
        -: 2638:     
        -: 2639:               
        -: 2640:                                            
        -: 2641:                                        
        -: 2642:                             
        -: 2643:       
        -: 2644:                      
        -: 2645:     
        -: 2646:                                      
        -: 2647:     
        -: 2648:     
        -: 2649:                                    
        -: 2650:                  
        -: 2651:     
        -: 2652:     
        -: 2653:               
        -: 2654:                                            
        -: 2655:       
        -: 2656:                          
        -: 2657:       
        -: 2658:                     
        -: 2659:                             
        -: 2660:              
        -: 2661:         
        -: 2662:                                                                                                   
        -: 2663:                                                  
        -: 2664:                            
        -: 2665:         
        -: 2666:                         
        -: 2667:                               
        -: 2668:         
        -: 2669:       
        -: 2670:                           
        -: 2671:                                    
        -: 2672:         
        -: 2673:
        -: 2674:                        
        -: 2675:                                        
        -: 2676:         
        -: 2677:
        -: 2678:       
        -: 2679:     
        -: 2680:                                      
        -: 2681:     
        -: 2682:                                                      
        -: 2683:       
        -: 2684:
        -: 2685:                 
        -: 2686:       
        -: 2687:
        -: 2688:     
        -: 2689:                         
        -: 2690:                                                
        -: 2691:                         
        -: 2692:                 
        -: 2693:                                         
        -: 2694:       
        -: 2695:     
        -: 2696:                      
        -: 2697:    case_104: /* CIL Label */ 
    #####: 2698:    no_filenames = 1;
    #####: 2699:    goto switch_break;
        -: 2700:    case_105: /* CIL Label */ 
        -: 2701:                              
    #####: 2702:     match_icase = 1;
    #####: 2703:    goto switch_break;
        -: 2704:    case_76: /* CIL Label */ 
    #####: 2705:    out_quiet = 1;
    #####: 2706:    list_files = -1;
        -: 2707:                      
    #####: 2708:    goto switch_break;
        -: 2709:    case_108: /* CIL Label */ 
    #####: 2710:    out_quiet = 1;
    #####: 2711:    list_files = 1;
        -: 2712:                      
        -: 2713:                      
        -: 2714:    case_110: /* CIL Label */ 
    #####: 2715:    out_line = 1;
        -: 2716:                      
        -: 2717:                              
        -: 2718:                      
        -: 2719:                  
        -: 2720:                      
        -: 2721:                              
        -: 2722:                                                     
        -: 2723:                      
        -: 2724:                              
        -: 2725:                        
        -: 2726:                      
        -: 2727:    case_118: /* CIL Label */ 
    #####: 2728:    out_invert = 1;
        -: 2729:                      
        -: 2730:                              
        -: 2731:                    
        -: 2732:                      
        -: 2733:                              
        -: 2734:                    
        -: 2735:                      
        -: 2736:                             
        -: 2737:                      
        -: 2738:                      
        -: 2739:                              
        -: 2740:                                     
        -: 2741:                      
        -: 2742:                              
        -: 2743:     
        -: 2744:                                                        
        -: 2745:     
        -: 2746:                        
        -: 2747:                                                         
        -: 2748:            
        -: 2749:       
        -: 2750:                                                        
        -: 2751:       
        -: 2752:                          
        -: 2753:                                                           
        -: 2754:              
        -: 2755:         
        -: 2756:                                                                   
        -: 2757:         
        -: 2758:                            
        -: 2759:                                                             
        -: 2760:                
        -: 2761:           
        -: 2762:
        -: 2763:                                                          
        -: 2764:                                             
        -: 2765:           
        -: 2766:
        -: 2767:         
        -: 2768:       
        -: 2769:     
        -: 2770:                      
        -: 2771:                            
        -: 2772:                      
        -: 2773:                                    
        -: 2774:     
        -: 2775:             
        -: 2776:     
        -: 2777:                      
        -: 2778:    switch_break: /* CIL Label */ ;
        -: 2779:    }
        -: 2780:  }
        -: 2781:  while_break: /* CIL Label */ ;
        -: 2782:  }
        -: 2783:                     {
        1: 2784:    out_after = default_context;
        -: 2785:  }
        -: 2786:                      {
        1: 2787:    out_before = default_context;
        -: 2788:  }
        1: 2789:  if (! matcher) {
    #####: 2790:    matcher = "grep";
    #####: 2791:  }
        1: 2792:  if (show_version) {
        -: 2793:     
        -: 2794:
    #####: 2795:    tmp___25 = gettext("%s (GNU grep) %s\n");
    #####: 2796:    printf((char const   * __restrict  )tmp___25, matcher, "2.4.2");
    #####: 2797:    printf((char const   * __restrict  )"\n");
    #####: 2798:    tmp___26 = gettext("Copyright 1988, 1992-1999, 2000 Free Software Foundation, Inc.\n");
    #####: 2799:    printf((char const   * __restrict  )tmp___26);
    #####: 2800:    tmp___27 = gettext("This is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n");
    #####: 2801:    printf((char const   * __restrict  )tmp___27);
    #####: 2802:    printf((char const   * __restrict  )"\n");
    #####: 2803:    exit(0);
        -: 2804:     
        -: 2805:
        -: 2806:  }
        -: 2807:                  
        -: 2808:     
        -: 2809:
        -: 2810:             
        -: 2811:     
        -: 2812:
        -: 2813:   
        -: 2814:             
        -: 2815:                       
        -: 2816:                      
        -: 2817:            
        -: 2818:               
        -: 2819:     
        -: 2820:         { //Added block
        -: 2821:                     {
        -: 2822:     
        -: 2823:
        1: 2824:    tmp___28 = optind;
        1: 2825:    optind ++;
        1: 2826:    keys = *(argv + tmp___28);
        1: 2827:    keycc = strlen((char const   *)keys);
        -: 2828:     
        -: 2829:
        -: 2830:  }       
        -: 2831:     
        -: 2832:
        -: 2833:             
        -: 2834:     
        -: 2835:
        -: 2836:   
        -: 2837:  }
        -: 2838:  {
        1: 2839:  tmp___29 = install_matcher(matcher);
        -: 2840:  }
        -: 2841:                   
        -: 2842:     
        -: 2843:                                          
        -: 2844:     
        -: 2845:                     
        -: 2846:       
        -: 2847:
        -: 2848:              
        -: 2849:       
        -: 2850:
        -: 2851:     
        -: 2852:   
        -: 2853:  {
        1: 2854:  (*compile)(keys, keycc);
        -: 2855:  }
        1: 2856:  if (argc - optind > 1) {
        1: 2857:    if (! no_filenames) {
        1: 2858:      out_file = 1;
        1: 2859:    } else {
        -: 2860:              
        -: 2861:    }
        1: 2862:  } else { //Added block
        -: 2863:  _L: 
    #####: 2864:  if (with_filenames) {
        -: 2865:                 
    #####: 2866:  }
        -: 2867:  }
        1: 2868:  if (optind < argc) {
        -: 2869:               
        -: 2870:    {
        3: 2871:    while (1) {
        -: 2872:                                           ;
        -: 2873:      {
        3: 2874:      file = *(argv + optind);
        3: 2875:      tmp___33 = strcmp((char const   *)file, "-");
        -: 2876:      }
        -: 2877:                          
        -: 2878:                                       
        -: 2879:             {
        3: 2880:        tmp___32 = file;
        -: 2881:      }
        -: 2882:      {
        3: 2883:      tmp___34 = grepfile((char const   *)tmp___32, & stats_base);
        -: 2884:                         
        3: 2885:      optind ++;
        -: 2886:      }
        3: 2887:      if (! (optind < argc)) {
        1: 2888:        goto while_break___2;
        -: 2889:      }
        -: 2890:    }
        -: 2891:    while_break___2: /* CIL Label */ ;
        -: 2892:    }
        1: 2893:  } else {
        -: 2894:     
        -: 2895:
    #####: 2896:    status = grepfile((char const   *)((char *)((void *)0)), & stats_base);
        -: 2897:     
        -: 2898:
        -: 2899:  }
        -: 2900:   
        -: 2901:                            
        -: 2902:   
        -: 2903:                       
        -: 2904:     
        -: 2905:
        -: 2906:                                  
        -: 2907:                                         
        -: 2908:                                               
        -: 2909:     
        -: 2910:
        -: 2911:   
        -: 2912:                
        -: 2913:                 
        -: 2914:          
        -: 2915:                      
        -: 2916:   
        -: 2917:   
        -: 2918:                 
        -: 2919:   
        -: 2920:}
        1: 2921:}
        -: 2922:reg_syntax_t re_syntax_options  ;
        -: 2923:reg_syntax_t re_set_syntax(reg_syntax_t syntax ) ;
        -: 2924:char const   *re_compile_pattern(char const   *pattern , size_t length , struct re_pattern_buffer *bufp ) ;
        -: 2925:int re_compile_fastmap(struct re_pattern_buffer *bufp ) ;
        -: 2926:int re_search(struct re_pattern_buffer *bufp , char const   *string , int size , int startpos ,
        -: 2927:              int range , struct re_registers *regs___0 ) ;
        -: 2928:int re_search_2(struct re_pattern_buffer *bufp , char const   *string1 , int size1 ,
        -: 2929:                char const   *string2 , int size2 , int startpos , int range , struct re_registers *regs___0 ,
        -: 2930:                int stop ) ;
        -: 2931:int re_match(struct re_pattern_buffer *bufp , char const   *string , int size , int pos ,
        -: 2932:             struct re_registers *regs___0 ) ;
        -: 2933:int re_match_2(struct re_pattern_buffer *bufp , char const   *string1 , int size1 ,
        -: 2934:               char const   *string2 , int size2 , int pos , struct re_registers *regs___0 ,
        -: 2935:               int stop ) ;
        -: 2936:void re_set_registers(struct re_pattern_buffer *bufp , struct re_registers *regs___0 ,
        -: 2937:                      unsigned int num_regs , regoff_t *starts , regoff_t *ends ) ;
        -: 2938:int regcomp(regex_t *preg , char const   *pattern , int cflags ) ;
        -: 2939:int regexec(regex_t const   *preg , char const   *string , size_t nmatch , regmatch_t *pmatch ,
        -: 2940:            int eflags ) ;
        -: 2941:size_t regerror(int errcode , regex_t const   *preg , char *errbuf , size_t errbuf_size ) ;
        -: 2942:void regfree(regex_t *preg ) ;
        -: 2943:void dfasyntax(reg_syntax_t bits , int fold , int eol ) ;
        -: 2944:void dfacomp(char *s , size_t len , struct dfa *d , int searchflag ) ;
        -: 2945:char *dfaexec(struct dfa *d , char *begin , char *end , int newline___0 , int *count ,
        -: 2946:              int *backref ) ;
        -: 2947:void dfafree(struct dfa *d ) ;
        -: 2948:void dfainit(struct dfa *d ) ;
        -: 2949:void dfaparse(char *s , size_t len , struct dfa *d ) ;
        -: 2950:void dfaanalyze(struct dfa *d , int searchflag ) ;
        -: 2951:void dfastate(int s , struct dfa *d , int *trans___0 ) ;
        -: 2952:void dfaerror(char const   *mesg ) ;
        -: 2953:static void dfamust(struct dfa *dfa___0 ) ;
        -: 2954:static ptr_t xcalloc(size_t n , size_t s ) ;
        -: 2955:static ptr_t xmalloc_1(size_t n ) ;
        -: 2956:static ptr_t xrealloc_1(ptr_t p , size_t n ) ;
        -: 2957:static int tstbit(int b , int *c ) ;
        -: 2958:static void setbit(int b , int *c ) ;
        -: 2959:static void clrbit(int b , int *c ) ;
        -: 2960:static void copyset(int *src , int *dst ) ;
        -: 2961:static void zeroset(int *s ) ;
        -: 2962:static void notset(int *s ) ;
        -: 2963:static int equal(int *s1 , int *s2 ) ;
        -: 2964:static int charclass_index(int *s ) ;
        -: 2965:static int looking_at(char const   *s ) ;
        -: 2966:static token lex(void) ;
        -: 2967:static void addtok(token t ) ;
        -: 2968:static void atom(void) ;
        -: 2969:static int nsubtoks(int tindex ) ;
        -: 2970:static void copytoks(int tindex , int ntokens ) ;
        -: 2971:static void closure(void) ;
        -: 2972:static void branch(void) ;
        -: 2973:static void regexp(int toplevel ) ;
        -: 2974:static void copy(position_set *src , position_set *dst ) ;
        -: 2975:static void insert(position p , position_set *s ) ;
        -: 2976:static void merge(position_set *s1 , position_set *s2 , position_set *m ) ;
        -: 2977:static void delete(position p , position_set *s ) ;
        -: 2978:static int state_index(struct dfa *d , position_set *s , int newline___0 , int letter ) ;
        -: 2979:static void build_state(int s , struct dfa *d ) ;
        -: 2980:static void build_state_zero(struct dfa *d ) ;
        -: 2981:static char *icatalloc(char *old , char *new ) ;
        -: 2982:static char *icpyalloc(char *string ) ;
        -: 2983:static char *istrstr(char *lookin , char *lookfor ) ;
        -: 2984:static void ifree(char *cp ) ;
        -: 2985:static void freelist(char **cpp ) ;
        -: 2986:static char **enlist(char **cpp , char *new , size_t len ) ;
        -: 2987:static char **comsubs(char *left , char *right ) ;
        -: 2988:static char **addlists(char **old , char **new ) ;
        -: 2989:static char **inboth(char **left , char **right ) ;
        3: 2990:static ptr_t xcalloc(size_t n , size_t s ) 
        -: 2991:{ 
        -: 2992:  ptr_t r ;
        -: 2993:  void *tmp ;
        -: 2994:  char *tmp___0 ;
        -: 2995:
        -: 2996:  {
        -: 2997:  {
        3: 2998:  tmp = calloc(n, s);
        3: 2999:  r = tmp;
        -: 3000:  }
        -: 3001:            
        -: 3002:     
        -: 3003:
        -: 3004:                                          
        -: 3005:                                      
        -: 3006:     
        -: 3007:
        -: 3008:   
        3: 3009:  return (r);
        -: 3010:}
        -: 3011:}
      137: 3012:static ptr_t xmalloc_1(size_t n ) 
        -: 3013:{ 
        -: 3014:  ptr_t r ;
        -: 3015:  void *tmp ;
        -: 3016:  char *tmp___0 ;
        -: 3017:
        -: 3018:  {
        -: 3019:  {
      137: 3020:  tmp = malloc(n);
      137: 3021:  r = tmp;
        -: 3022:  }
        -: 3023:            
        -: 3024:     
        -: 3025:
        -: 3026:                                          
        -: 3027:                                      
        -: 3028:     
        -: 3029:
        -: 3030:   
      137: 3031:  return (r);
        -: 3032:}
        -: 3033:}
       59: 3034:static ptr_t xrealloc_1(ptr_t p , size_t n ) 
        -: 3035:{ 
        -: 3036:  ptr_t r ;
        -: 3037:  void *tmp ;
        -: 3038:  char *tmp___0 ;
        -: 3039:
        -: 3040:  {
        -: 3041:  {
       59: 3042:  tmp = realloc(p, n);
       59: 3043:  r = tmp;
        -: 3044:  }
        -: 3045:            
        -: 3046:     
        -: 3047:
        -: 3048:                                          
        -: 3049:                                      
        -: 3050:     
        -: 3051:
        -: 3052:   
       59: 3053:  return (r);
        -: 3054:}
        -: 3055:}
       81: 3056:static int tstbit(int b , int *c ) 
        -: 3057:{ 
        -: 3058:
        -: 3059:
        -: 3060:   
        -: 3061:
       81: 3062:  return (*(c + (unsigned long )b / (8UL * sizeof(int ))) & (1 << (unsigned long )b % (8UL * sizeof(int ))));
        -: 3063: 
        -: 3064:
        -: 3065:}
      106: 3066:static void setbit(int b , int *c ) 
        -: 3067:{ 
        -: 3068:
        -: 3069:
        -: 3070:   
        -: 3071:
      106: 3072:  *(c + (unsigned long )b / (8UL * sizeof(int ))) |= 1 << (unsigned long )b % (8UL * sizeof(int ));
        -: 3073:         
        -: 3074: 
        -: 3075:
      106: 3076:}
        2: 3077:static void clrbit(int b , int *c ) 
        -: 3078:{ 
        -: 3079:
        -: 3080:
        -: 3081:   
        -: 3082:
        -: 3083:                                                                                                       
        -: 3084:         
        -: 3085: 
        -: 3086:
        2: 3087:}
       47: 3088:static void copyset(int *src , int *dst ) 
        -: 3089:{ 
        -: 3090:  int i ;
        -: 3091:
        -: 3092:  {
       47: 3093:  i = 0;
        -: 3094:  {
      423: 3095:  while (1) {
        -: 3096:                                     ;
      423: 3097:    if (! ((unsigned long )i < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       47: 3098:      goto while_break;
        -: 3099:    }
      376: 3100:    *(dst + i) = *(src + i);
      376: 3101:    i ++;
        -: 3102:  }
        -: 3103:  while_break: /* CIL Label */ ;
        -: 3104:  }
        -: 3105:         
        -: 3106:}
       47: 3107:}
       49: 3108:static void zeroset(int *s ) 
        -: 3109:{ 
        -: 3110:  int i ;
        -: 3111:
        -: 3112:  {
       49: 3113:  i = 0;
        -: 3114:  {
      441: 3115:  while (1) {
        -: 3116:                                     ;
      441: 3117:    if (! ((unsigned long )i < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       49: 3118:      goto while_break;
        -: 3119:    }
      392: 3120:    *(s + i) = 0;
      392: 3121:    i ++;
        -: 3122:  }
        -: 3123:  while_break: /* CIL Label */ ;
        -: 3124:  }
        -: 3125:         
        -: 3126:}
       49: 3127:}
        1: 3128:static void notset(int *s ) 
        -: 3129:{ 
        -: 3130:  int i ;
        -: 3131:
        -: 3132:  {
        1: 3133:  i = 0;
        -: 3134:  {
        9: 3135:  while (1) {
        -: 3136:                                     ;
        9: 3137:    if (! ((unsigned long )i < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
        1: 3138:      goto while_break;
        -: 3139:    }
        8: 3140:    *(s + i) = ~ *(s + i);
        8: 3141:    i ++;
        -: 3142:  }
        -: 3143:  while_break: /* CIL Label */ ;
        -: 3144:  }
        -: 3145:         
        -: 3146:}
        1: 3147:}
        -: 3148:static int equal(int *s1 , int *s2 ) 
        -: 3149:{ 
        -: 3150:  int i ;
        -: 3151:
        -: 3152:  {
        -: 3153:        
        -: 3154:   
        -: 3155:             
        -: 3156:                                      
        -: 3157:                                                                                                                 
        -: 3158:                       
        -: 3159:     
        -: 3160:                                 
        -: 3161:                 
        -: 3162:     
        -: 3163:         
        -: 3164:   
        -: 3165:                                
        -: 3166:   
        -: 3167:  return (1);
        -: 3168:}
        -: 3169:}
        -: 3170:static struct dfa *dfa  ;
        1: 3171:static int charclass_index(int *s ) 
        -: 3172:{ 
        -: 3173:  int i ;
        -: 3174:  int tmp ;
        -: 3175:  ptr_t tmp___0 ;
        -: 3176:
        -: 3177:  {
        1: 3178:  i = 0;
        -: 3179:   
        -: 3180:             
        -: 3181:                                      
        -: 3182:                              
        -: 3183:                       
        -: 3184:     
        -: 3185:     
        -: 3186:                                            
        -: 3187:     
        -: 3188:              
        -: 3189:                 
        -: 3190:     
        -: 3191:         
        -: 3192:   
        -: 3193:                                
        -: 3194:   
        -: 3195:                                   
        -: 3196:     
        -: 3197:               
        -: 3198:                                            
        -: 3199:                                           
        -: 3200:                             
        -: 3201:       
        -: 3202:                       
        -: 3203:     
        -: 3204:                                      
        -: 3205:     
        -: 3206:     
        -: 3207:                                                                                                     
        -: 3208:                                            
        -: 3209:     
        -: 3210:   
        -: 3211:  {
        -: 3212:                   
        1: 3213:  copyset(s, *(dfa->charclasses + i));
        -: 3214:  }
        1: 3215:  return (i);
        -: 3216:}
        -: 3217:}
        -: 3218:static reg_syntax_t syntax_bits  ;
        -: 3219:static reg_syntax_t syntax_bits_set  ;
        -: 3220:static int case_fold  ;
        -: 3221:static unsigned char eolbyte_1  ;
        1: 3222:void dfasyntax(reg_syntax_t bits , int fold , int eol ) 
        -: 3223:{ 
        -: 3224:
        -: 3225:
        -: 3226:   
        -: 3227:
        1: 3228:  syntax_bits_set = (reg_syntax_t )1;
        1: 3229:  syntax_bits = bits;
        -: 3230:                   
        1: 3231:  eolbyte_1 = (unsigned char )eol;
        -: 3232:         
        -: 3233: 
        -: 3234:
        1: 3235:}
        -: 3236:static char *lexstart  ;
        -: 3237:static char *lexptr  ;
        -: 3238:static int lexleft  ;
        -: 3239:static token lasttok  ;
        -: 3240:static int laststart  ;
        -: 3241:static int parens  ;
        -: 3242:static int minrep  ;
        -: 3243:static int maxrep  ;
    #####: 3244:static int is_alpha(int c ) 
        -: 3245:{ 
        -: 3246:  unsigned short const   **tmp ;
        -: 3247:
        -: 3248:  {
        -: 3249:  {
    #####: 3250:  tmp = __ctype_b_loc();
        -: 3251:  }
    #####: 3252:  return ((int )((int const   )*(*tmp + c) & 1024));
        -: 3253:}
        -: 3254:}
    #####: 3255:static int is_upper(int c ) 
        -: 3256:{ 
        -: 3257:  unsigned short const   **tmp ;
        -: 3258:
        -: 3259:  {
        -: 3260:  {
    #####: 3261:  tmp = __ctype_b_loc();
        -: 3262:  }
    #####: 3263:  return ((int )((int const   )*(*tmp + c) & 256));
        -: 3264:}
        -: 3265:}
    #####: 3266:static int is_lower(int c ) 
        -: 3267:{ 
        -: 3268:  unsigned short const   **tmp ;
        -: 3269:
        -: 3270:  {
        -: 3271:  {
    #####: 3272:  tmp = __ctype_b_loc();
        -: 3273:  }
    #####: 3274:  return ((int )((int const   )*(*tmp + c) & 512));
        -: 3275:}
        -: 3276:}
    #####: 3277:static int is_digit(int c ) 
        -: 3278:{ 
        -: 3279:  unsigned short const   **tmp ;
        -: 3280:
        -: 3281:  {
        -: 3282:  {
    #####: 3283:  tmp = __ctype_b_loc();
        -: 3284:  }
    #####: 3285:  return ((int )((int const   )*(*tmp + c) & 2048));
        -: 3286:}
        -: 3287:}
    #####: 3288:static int is_xdigit(int c ) 
        -: 3289:{ 
        -: 3290:  unsigned short const   **tmp ;
        -: 3291:
        -: 3292:  {
        -: 3293:  {
    #####: 3294:  tmp = __ctype_b_loc();
        -: 3295:  }
    #####: 3296:  return ((int )((int const   )*(*tmp + c) & 4096));
        -: 3297:}
        -: 3298:}
    #####: 3299:static int is_space(int c ) 
        -: 3300:{ 
        -: 3301:  unsigned short const   **tmp ;
        -: 3302:
        -: 3303:  {
        -: 3304:  {
    #####: 3305:  tmp = __ctype_b_loc();
        -: 3306:  }
    #####: 3307:  return ((int )((int const   )*(*tmp + c) & 8192));
        -: 3308:}
        -: 3309:}
    #####: 3310:static int is_punct(int c ) 
        -: 3311:{ 
        -: 3312:  unsigned short const   **tmp ;
        -: 3313:
        -: 3314:  {
        -: 3315:  {
    #####: 3316:  tmp = __ctype_b_loc();
        -: 3317:  }
    #####: 3318:  return ((int )((int const   )*(*tmp + c) & 4));
        -: 3319:}
        -: 3320:}
    #####: 3321:static int is_alnum(int c ) 
        -: 3322:{ 
        -: 3323:  unsigned short const   **tmp ;
        -: 3324:
        -: 3325:  {
        -: 3326:  {
    #####: 3327:  tmp = __ctype_b_loc();
        -: 3328:  }
    #####: 3329:  return ((int )((int const   )*(*tmp + c) & 8));
        -: 3330:}
        -: 3331:}
    #####: 3332:static int is_print(int c ) 
        -: 3333:{ 
        -: 3334:  unsigned short const   **tmp ;
        -: 3335:
        -: 3336:  {
        -: 3337:  {
    #####: 3338:  tmp = __ctype_b_loc();
        -: 3339:  }
    #####: 3340:  return ((int )((int const   )*(*tmp + c) & 16384));
        -: 3341:}
        -: 3342:}
    #####: 3343:static int is_graph(int c ) 
        -: 3344:{ 
        -: 3345:  unsigned short const   **tmp ;
        -: 3346:
        -: 3347:  {
        -: 3348:  {
    #####: 3349:  tmp = __ctype_b_loc();
        -: 3350:  }
    #####: 3351:  return ((int )((int const   )*(*tmp + c) & 32768));
        -: 3352:}
        -: 3353:}
    #####: 3354:static int is_cntrl(int c ) 
        -: 3355:{ 
        -: 3356:  unsigned short const   **tmp ;
        -: 3357:
        -: 3358:  {
        -: 3359:  {
    #####: 3360:  tmp = __ctype_b_loc();
        -: 3361:  }
    #####: 3362:  return ((int )((int const   )*(*tmp + c) & 2));
        -: 3363:}
        -: 3364:}
    #####: 3365:static int is_blank(int c ) 
        -: 3366:{ 
        -: 3367:  int tmp ;
        -: 3368:
        -: 3369:  {
        -: 3370:               {
    #####: 3371:    tmp = 1;
        -: 3372:  }                     
        -: 3373:               
        -: 3374:            
        -: 3375:          
        -: 3376:            
        -: 3377:   
        -: 3378:   
    #####: 3379:  return (tmp);
        -: 3380:}
        -: 3381:}
        -: 3382:static struct __anonstruct_prednames_38 prednames[13]  = 
        -: 3383:  {      {":alpha:]", & is_alpha}, 
        -: 3384:        {":upper:]", & is_upper}, 
        -: 3385:        {":lower:]", & is_lower}, 
        -: 3386:        {":digit:]", & is_digit}, 
        -: 3387:        {":xdigit:]", & is_xdigit}, 
        -: 3388:        {":space:]", & is_space}, 
        -: 3389:        {":punct:]", & is_punct}, 
        -: 3390:        {":alnum:]", & is_alnum}, 
        -: 3391:        {":print:]", & is_print}, 
        -: 3392:        {":graph:]", & is_graph}, 
        -: 3393:        {":cntrl:]", & is_cntrl}, 
        -: 3394:        {":blank:]", & is_blank}, 
        -: 3395:        {(char const   *)0, (int (*)(int  ))0}};
    #####: 3396:static int looking_at(char const   *s ) 
        -: 3397:{ 
        -: 3398:  size_t len ;
        -: 3399:  int tmp ;
        -: 3400:
        -: 3401:  {
        -: 3402:  {
    #####: 3403:  len = strlen(s);
        -: 3404:  }
        -: 3405:                               
        -: 3406:               
        -: 3407:   
        -: 3408:  {
    #####: 3409:  tmp = strncmp(s, (char const   *)lexptr, len);
        -: 3410:  }
    #####: 3411:  return (tmp == 0);
        -: 3412:}
        -: 3413:}
       16: 3414:static token lex(void) 
        -: 3415:{ 
        -: 3416:  token c ;
        -: 3417:  token c1 ;
        -: 3418:  token c2 ;
        -: 3419:  int backslash ;
        -: 3420:  int invert ;
        -: 3421:  charclass ccl ;
        -: 3422:  int i ;
        -: 3423:  char lo[2] ;
        -: 3424:  char hi[2] ;
        -: 3425:  char *tmp ;
        -: 3426:  char *tmp___0 ;
        -: 3427:  int tmp___1 ;
        -: 3428:  int tmp___2 ;
        -: 3429:  int tmp___3 ;
        -: 3430:  int tmp___4 ;
        -: 3431:  int tmp___5 ;
        -: 3432:  int tmp___6 ;
        -: 3433:  int lo___0 ;
        -: 3434:  int hi___0 ;
        -: 3435:  char const   *p ;
        -: 3436:  char const   *lim ;
        -: 3437:  int tmp___7 ;
        -: 3438:  int tmp___8 ;
        -: 3439:  char *tmp___9 ;
        -: 3440:  char *tmp___10 ;
        -: 3441:  char *tmp___11 ;
        -: 3442:  char *tmp___12 ;
        -: 3443:  char *tmp___13 ;
        -: 3444:  char *tmp___14 ;
        -: 3445:  char *tmp___15 ;
        -: 3446:  char *tmp___16 ;
        -: 3447:  char *tmp___17 ;
        -: 3448:  char *tmp___18 ;
        -: 3449:  char *tmp___19 ;
        -: 3450:  char *tmp___20 ;
        -: 3451:  char *tmp___21 ;
        -: 3452:  char *tmp___22 ;
        -: 3453:  char *tmp___23 ;
        -: 3454:  char *tmp___24 ;
        -: 3455:  char *tmp___25 ;
        -: 3456:  char *tmp___26 ;
        -: 3457:  char *tmp___27 ;
        -: 3458:  int tmp___28 ;
        -: 3459:  unsigned short const   **tmp___29 ;
        -: 3460:  int tmp___30 ;
        -: 3461:  char *tmp___31 ;
        -: 3462:  char *tmp___32 ;
        -: 3463:  char *tmp___33 ;
        -: 3464:  char *tmp___34 ;
        -: 3465:  char *tmp___35 ;
        -: 3466:  char *tmp___36 ;
        -: 3467:  int (*pred)() ;
        -: 3468:  int tmp___37 ;
        -: 3469:  size_t tmp___38 ;
        -: 3470:  size_t tmp___39 ;
        -: 3471:  char *tmp___40 ;
        -: 3472:  char *tmp___41 ;
        -: 3473:  char *tmp___42 ;
        -: 3474:  int tmp___43 ;
        -: 3475:  char *tmp___44 ;
        -: 3476:  char *tmp___45 ;
        -: 3477:  char *tmp___46 ;
        -: 3478:  char *tmp___47 ;
        -: 3479:  char *tmp___48 ;
        -: 3480:  char *tmp___49 ;
        -: 3481:  char *tmp___50 ;
        -: 3482:  char *tmp___51 ;
        -: 3483:  char *tmp___52 ;
        -: 3484:  char *tmp___53 ;
        -: 3485:  char *tmp___54 ;
        -: 3486:  char *tmp___55 ;
        -: 3487:  char *tmp___56 ;
        -: 3488:  char *tmp___57 ;
        -: 3489:  char *tmp___58 ;
        -: 3490:  char ch[2] ;
        -: 3491:  int tmp___59 ;
        -: 3492:  int tmp___60 ;
        -: 3493:  unsigned short const   **tmp___61 ;
        -: 3494:  unsigned short const   **tmp___62 ;
        -: 3495:  int tmp___63 ;
        -: 3496:  int tmp___64 ;
        -: 3497:  int tmp___65 ;
        -: 3498:  int tmp___66 ;
        -: 3499:  int tmp___67 ;
        -: 3500:  unsigned short const   **tmp___68 ;
        -: 3501:  int tmp___69 ;
        -: 3502:  unsigned short const   **tmp___70 ;
        -: 3503:
        -: 3504:  {
       16: 3505:  backslash = 0;
       16: 3506:  i = 0;
        -: 3507:  {
       16: 3508:  while (1) {
        -: 3509:                                     ;
       16: 3510:    if (! (i < 2)) {
    #####: 3511:      goto while_break;
        -: 3512:    }
       16: 3513:    if (! lexleft) {
        1: 3514:      lasttok = (token )-1;
        1: 3515:      return (lasttok);
        -: 3516:    }
       15: 3517:    tmp = lexptr;
       15: 3518:    lexptr ++;
       15: 3519:    c = (token )((unsigned char )*tmp);
       15: 3520:    lexleft --;
        -: 3521:    {
       15: 3522:    if ((int )c == 92) {
    #####: 3523:      goto case_92;
        -: 3524:    }
       15: 3525:    if ((int )c == 94) {
    #####: 3526:      goto case_94;
        -: 3527:    }
       15: 3528:    if ((int )c == 36) {
    #####: 3529:      goto case_36;
        -: 3530:    }
       15: 3531:    if ((int )c == 49) {
    #####: 3532:      goto case_49;
        -: 3533:    }
       15: 3534:    if ((int )c == 50) {
    #####: 3535:      goto case_49;
        -: 3536:    }
       15: 3537:    if ((int )c == 51) {
    #####: 3538:      goto case_49;
        -: 3539:    }
       15: 3540:    if ((int )c == 52) {
    #####: 3541:      goto case_49;
        -: 3542:    }
       15: 3543:    if ((int )c == 53) {
    #####: 3544:      goto case_49;
        -: 3545:    }
       15: 3546:    if ((int )c == 54) {
    #####: 3547:      goto case_49;
        -: 3548:    }
       15: 3549:    if ((int )c == 55) {
    #####: 3550:      goto case_49;
        -: 3551:    }
       15: 3552:    if ((int )c == 56) {
    #####: 3553:      goto case_49;
        -: 3554:    }
       15: 3555:    if ((int )c == 57) {
    #####: 3556:      goto case_49;
        -: 3557:    }
       15: 3558:    if ((int )c == 96) {
    #####: 3559:      goto case_96;
        -: 3560:    }
       15: 3561:    if ((int )c == 39) {
    #####: 3562:      goto case_39;
        -: 3563:    }
       15: 3564:    if ((int )c == 60) {
    #####: 3565:      goto case_60;
        -: 3566:    }
       15: 3567:    if ((int )c == 62) {
    #####: 3568:      goto case_62;
        -: 3569:    }
       15: 3570:    if ((int )c == 98) {
    #####: 3571:      goto case_98;
        -: 3572:    }
       15: 3573:    if ((int )c == 66) {
    #####: 3574:      goto case_66;
        -: 3575:    }
       15: 3576:    if ((int )c == 63) {
    #####: 3577:      goto case_63;
        -: 3578:    }
       15: 3579:    if ((int )c == 42) {
    #####: 3580:      goto case_42;
        -: 3581:    }
       15: 3582:    if ((int )c == 43) {
    #####: 3583:      goto case_43;
        -: 3584:    }
       15: 3585:    if ((int )c == 123) {
        1: 3586:      goto case_123;
        -: 3587:    }
       14: 3588:    if ((int )c == 124) {
        1: 3589:      goto case_124;
        -: 3590:    }
       13: 3591:    if ((int )c == 10) {
    #####: 3592:      goto case_10;
        -: 3593:    }
       13: 3594:    if ((int )c == 40) {
    #####: 3595:      goto case_40;
        -: 3596:    }
       13: 3597:    if ((int )c == 41) {
    #####: 3598:      goto case_41;
        -: 3599:    }
       13: 3600:    if ((int )c == 46) {
        1: 3601:      goto case_46;
        -: 3602:    }
       12: 3603:    if ((int )c == 119) {
    #####: 3604:      goto case_119;
        -: 3605:    }
       12: 3606:    if ((int )c == 87) {
    #####: 3607:      goto case_119;
        -: 3608:    }
       12: 3609:    if ((int )c == 91) {
    #####: 3610:      goto case_91;
        -: 3611:    }
       12: 3612:    goto normal_char;
        -: 3613:    case_92: /* CIL Label */ 
    #####: 3614:    if (backslash) {
    #####: 3615:      goto normal_char;
        -: 3616:    }
    #####: 3617:    if (lexleft == 0) {
        -: 3618:       
        -: 3619:
    #####: 3620:      tmp___0 = gettext("Unfinished \\ escape");
    #####: 3621:      dfaerror((char const   *)tmp___0);
        -: 3622:       
        -: 3623:
    #####: 3624:    }
    #####: 3625:    backslash = 1;
    #####: 3626:    goto switch_break;
        -: 3627:    case_94: /* CIL Label */ 
    #####: 3628:    if (backslash) {
    #####: 3629:      goto normal_char;
        -: 3630:    }
        -: 3631:                                                {
    #####: 3632:      lasttok = (token )258;
    #####: 3633:      return (lasttok);
        -: 3634:    }                     
        -: 3635:                              
        -: 3636:                            
        -: 3637:                       
        -: 3638:                          
        -: 3639:                               
        -: 3640:                            
        -: 3641:                       
        -: 3642:                          
        -: 3643:                               
        -: 3644:                            
        -: 3645:                       
        -: 3646:     
        -: 3647:     
        -: 3648:     
        -: 3649:     
        -: 3650:    goto normal_char;
        -: 3651:    case_36: /* CIL Label */ 
        -: 3652:                   {
    #####: 3653:      goto normal_char;
        -: 3654:    }
        -: 3655:                                                {
        -: 3656:      lasttok = (token )259;
        -: 3657:      return (lasttok);
        -: 3658:    }                     
        -: 3659:                       
        -: 3660:                            
        -: 3661:                       
        -: 3662:            
        -: 3663:                                                                                                                         
        -: 3664:                          
        -: 3665:                                    
        -: 3666:                        
        -: 3667:                  
        -: 3668:                        
        -: 3669:           
        -: 3670:                
        -: 3671:                      
        -: 3672:         
        -: 3673:                          
        -: 3674:              
        -: 3675:                          
        -: 3676:                                          
        -: 3677:                                            
        -: 3678:                          
        -: 3679:                    
        -: 3680:                          
        -: 3681:             
        -: 3682:                  
        -: 3683:                        
        -: 3684:           
        -: 3685:                
        -: 3686:                      
        -: 3687:         
        -: 3688:                          
        -: 3689:       
        -: 3690:                    
        -: 3691:                              
        -: 3692:                         
        -: 3693:              
        -: 3694:                                                                                                                                         
        -: 3695:                            
        -: 3696:                                       
        -: 3697:                          
        -: 3698:                    
        -: 3699:                          
        -: 3700:             
        -: 3701:                  
        -: 3702:                        
        -: 3703:           
        -: 3704:                            
        -: 3705:                
        -: 3706:                            
        -: 3707:                                            
        -: 3708:                                               
        -: 3709:                            
        -: 3710:                      
        -: 3711:                            
        -: 3712:               
        -: 3713:                    
        -: 3714:                          
        -: 3715:             
        -: 3716:                  
        -: 3717:                        
        -: 3718:           
        -: 3719:                            
        -: 3720:         
        -: 3721:                      
        -: 3722:                                
        -: 3723:                           
        -: 3724:                              
        -: 3725:                                                                                                             
        -: 3726:                            
        -: 3727:                                      
        -: 3728:                                    
        -: 3729:                               
        -: 3730:             
        -: 3731:           
        -: 3732:         
        -: 3733:         
        -: 3734:       
        -: 3735:     
        -: 3736:     
        -: 3737:    goto normal_char;
        -: 3738:    case_49: /* CIL Label */ 
        -: 3739:                             
        -: 3740:                              
        -: 3741:                              
        -: 3742:                              
        -: 3743:                              
        -: 3744:                              
        -: 3745:                              
        -: 3746:                              
    #####: 3747:     if (backslash) {
        -: 3748:                                                                                                                                   {
    #####: 3749:        laststart = 0;
    #####: 3750:        lasttok = (token )257;
    #####: 3751:        return (lasttok);
        -: 3752:      }
        -: 3753:    }
    #####: 3754:    goto normal_char;
        -: 3755:    case_96: /* CIL Label */ 
        -: 3756:                   {
        -: 3757:                                                                                                                                                                      {
    #####: 3758:        lasttok = (token )258;
    #####: 3759:        return (lasttok);
        -: 3760:      }
        -: 3761:    }
        -: 3762:    goto normal_char;
        -: 3763:    case_39: /* CIL Label */ 
    #####: 3764:    if (backslash) {
        -: 3765:                                                                                                                                                                      {
    #####: 3766:        lasttok = (token )259;
    #####: 3767:        return (lasttok);
        -: 3768:      }
        -: 3769:    }
    #####: 3770:    goto normal_char;
        -: 3771:    case_60: /* CIL Label */ 
    #####: 3772:    if (backslash) {
        -: 3773:                                                                                                                                                                      {
    #####: 3774:        lasttok = (token )260;
    #####: 3775:        return (lasttok);
        -: 3776:      }
        -: 3777:    }
    #####: 3778:    goto normal_char;
        -: 3779:    case_62: /* CIL Label */ 
        -: 3780:                   {
        -: 3781:                                                                                                                                                                      {
    #####: 3782:        lasttok = (token )261;
    #####: 3783:        return (lasttok);
        -: 3784:      }
        -: 3785:    }
        -: 3786:    goto normal_char;
        -: 3787:    case_98: /* CIL Label */ 
        -: 3788:                   {
        -: 3789:                                                                                                                                                                      {
    #####: 3790:        lasttok = (token )262;
    #####: 3791:        return (lasttok);
        -: 3792:      }
        -: 3793:    }
        -: 3794:    goto normal_char;
        -: 3795:    case_66: /* CIL Label */ 
        -: 3796:                   {
        -: 3797:                                                                                                                                                                      {
    #####: 3798:        lasttok = (token )263;
    #####: 3799:        return (lasttok);
        -: 3800:      }
        -: 3801:    }
        -: 3802:    goto normal_char;
        -: 3803:    case_63: /* CIL Label */ 
    #####: 3804:    if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3805:      goto normal_char;
        -: 3806:    }
    #####: 3807:    if (backslash != ((syntax_bits & (1UL << 1)) != 0UL)) {
    #####: 3808:      goto normal_char;
        -: 3809:    }
    #####: 3810:    if (! (syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
    #####: 3811:      if (laststart) {
    #####: 3812:        goto normal_char;
        -: 3813:      }
    #####: 3814:    }
    #####: 3815:    lasttok = (token )264;
    #####: 3816:    return (lasttok);
        -: 3817:    case_42: /* CIL Label */ 
    #####: 3818:    if (backslash) {
    #####: 3819:      goto normal_char;
        -: 3820:    }
        -: 3821:                                                           {
    #####: 3822:      if (laststart) {
    #####: 3823:        goto normal_char;
        -: 3824:      }
        -: 3825:    }
    #####: 3826:    lasttok = (token )265;
    #####: 3827:    return (lasttok);
        -: 3828:    case_43: /* CIL Label */ 
    #####: 3829:    if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3830:      goto normal_char;
        -: 3831:    }
    #####: 3832:    if (backslash != ((syntax_bits & (1UL << 1)) != 0UL)) {
    #####: 3833:      goto normal_char;
        -: 3834:    }
    #####: 3835:    if (! (syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
    #####: 3836:      if (laststart) {
    #####: 3837:        goto normal_char;
        -: 3838:      }
    #####: 3839:    }
    #####: 3840:    lasttok = (token )266;
    #####: 3841:    return (lasttok);
        -: 3842:    case_123: /* CIL Label */ 
        1: 3843:    if (! (syntax_bits & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3844:      goto normal_char;
        -: 3845:    }
        1: 3846:    if (backslash != ((syntax_bits & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
    #####: 3847:      goto normal_char;
        -: 3848:    }
        1: 3849:    if (! (syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
    #####: 3850:      if (laststart) {
    #####: 3851:        goto normal_char;
        -: 3852:      }
    #####: 3853:    }
        1: 3854:    if (syntax_bits & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        1: 3855:      lo___0 = -1;
        1: 3856:      hi___0 = -1;
        1: 3857:      p = (char const   *)lexptr;
        1: 3858:      lim = p + lexleft;
        -: 3859:      {
        -: 3860:                {
        -: 3861:                                             ;
        -: 3862:                                                      {
        -: 3863:                                                 {
        1: 3864:            goto while_break___0;
        -: 3865:          }
        -: 3866:        }       
        -: 3867:                               
        -: 3868:         
        -: 3869:                        {
        -: 3870:          tmp___7 = 0;
        -: 3871:        }       
        -: 3872:                                
        -: 3873:         
        -: 3874:        lo___0 = (tmp___7 + (int )*p) - 48;
        -: 3875:        p ++;
        -: 3876:      }
        -: 3877:      while_break___0: /* CIL Label */ ;
        -: 3878:      }
        -: 3879:                                                    {
        -: 3880:                                     
        -: 3881:           
        -: 3882:
        -: 3883:                     
        -: 3884:                                                  
        -: 3885:                 
        -: 3886:                                                           
        -: 3887:                                                      
        -: 3888:                                     
        -: 3889:               
        -: 3890:                    
        -: 3891:                                   
        -: 3892:             
        -: 3893:                             
        -: 3894:                          
        -: 3895:                    
        -: 3896:                                    
        -: 3897:             
        -: 3898:                                               
        -: 3899:           
        -: 3900:                                            
        -: 3901:           
        -: 3902:
        -: 3903:               {
        1: 3904:          hi___0 = lo___0;
        -: 3905:        }
        -: 3906:      }       
        -: 3907:                        
        -: 3908:       
        -: 3909:                                                     
        -: 3910:                         
        -: 3911:             { //Added block
        -: 3912:                                    
        -: 3913:                         
        -: 3914:             { //Added block
        -: 3915:                       
        -: 3916:                         
        -: 3917:             { //Added block
        -: 3918:                           
        -: 3919:                         
        -: 3920:             { //Added block
        -: 3921:                       {
        1: 3922:        if (hi___0 < lo___0) {
    #####: 3923:          goto normal_char;
        -: 3924:        }
        -: 3925:      }
        -: 3926:      }
        -: 3927:      }
        -: 3928:      }
        -: 3929:      }
        1: 3930:    }
        1: 3931:    minrep = 0;
        1: 3932:    if (! lexleft) {
        -: 3933:      {
    #####: 3934:      tmp___10 = gettext("unfinished repeat count");
        -: 3935:      }
        -: 3936:                                                                   {
        -: 3937:         
        -: 3938:
    #####: 3939:        tmp___9 = gettext("unfinished repeat count");
    #####: 3940:        dfaerror((char const   *)tmp___9);
        -: 3941:         
        -: 3942:
        -: 3943:      }       
        -: 3944:                             
        -: 3945:                         
        -: 3946:       
    #####: 3947:    }
        1: 3948:    tmp___11 = lexptr;
        1: 3949:    lexptr ++;
        1: 3950:    c = (token )((unsigned char )*tmp___11);
        1: 3951:    lexleft --;
        -: 3952:                                      {
        1: 3953:      minrep = (int )c - 48;
        -: 3954:      {
        -: 3955:                {
        -: 3956:                                             ;
        1: 3957:        if (! lexleft) {
        -: 3958:          {
    #####: 3959:          tmp___13 = gettext("unfinished repeat count");
        -: 3960:          }
        -: 3961:                                                                       {
        -: 3962:             
        -: 3963:
    #####: 3964:            tmp___12 = gettext("unfinished repeat count");
    #####: 3965:            dfaerror((char const   *)tmp___12);
        -: 3966:             
        -: 3967:
        -: 3968:          }       
        -: 3969:                                 
        -: 3970:                             
        -: 3971:           
    #####: 3972:        }
        1: 3973:        tmp___14 = lexptr;
        1: 3974:        lexptr ++;
        1: 3975:        c = (token )((unsigned char )*tmp___14);
        1: 3976:        lexleft --;
        -: 3977:                                              {
        1: 3978:          goto while_break___2;
        -: 3979:        }
        -: 3980:        minrep = (10 * minrep + (int )c) - 48;
        -: 3981:      }
        -: 3982:      while_break___2: /* CIL Label */ ;
        -: 3983:      }
        -: 3984:    }       
        -: 3985:       
        -: 3986:
        -: 3987:                                                   
        -: 3988:                                         
        -: 3989:       
        -: 3990:
        -: 3991:     
        -: 3992:                        
        -: 3993:                      
        -: 3994:         
        -: 3995:                                                      
        -: 3996:         
        -: 3997:                                                                      
        -: 3998:           
        -: 3999:
        -: 4000:                                                        
        -: 4001:                                             
        -: 4002:           
        -: 4003:
        -: 4004:                
        -: 4005:                               
        -: 4006:                           
        -: 4007:         
        -: 4008:       
        -: 4009:                        
        -: 4010:                
        -: 4011:                                              
        -: 4012:                 
        -: 4013:                                             
        -: 4014:                    
        -: 4015:              
        -: 4016:                              
        -: 4017:         
        -: 4018:                   
        -: 4019:                                                
        -: 4020:                          
        -: 4021:             
        -: 4022:                                                          
        -: 4023:             
        -: 4024:                                                                          
        -: 4025:               
        -: 4026:
        -: 4027:                                                            
        -: 4028:                                                 
        -: 4029:               
        -: 4030:
        -: 4031:                    
        -: 4032:                                   
        -: 4033:                               
        -: 4034:             
        -: 4035:           
        -: 4036:                            
        -: 4037:                    
        -: 4038:                                                  
        -: 4039:                     
        -: 4040:                                                 
        -: 4041:                                 
        -: 4042:           
        -: 4043:                                                
        -: 4044:         
        -: 4045:                                          
        -: 4046:         
        -: 4047:                          
        -: 4048:                                
        -: 4049:             
        -: 4050:
        -: 4051:                                                         
        -: 4052:                                               
        -: 4053:             
        -: 4054:
        -: 4055:           
        -: 4056:         
        -: 4057:       
        -: 4058:           {
        1: 4059:      maxrep = minrep;
        -: 4060:    }
        1: 4061:    if (! (syntax_bits & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 4062:      if ((int )c != 92) {
        -: 4063:         
        -: 4064:
    #####: 4065:        tmp___23 = gettext("malformed repeat count");
    #####: 4066:        dfaerror((char const   *)tmp___23);
        -: 4067:         
        -: 4068:
    #####: 4069:      }
    #####: 4070:      if (! lexleft) {
        -: 4071:        {
    #####: 4072:        tmp___25 = gettext("unfinished repeat count");
        -: 4073:        }
        -: 4074:                                                                     {
        -: 4075:           
        -: 4076:
    #####: 4077:          tmp___24 = gettext("unfinished repeat count");
    #####: 4078:          dfaerror((char const   *)tmp___24);
        -: 4079:           
        -: 4080:
        -: 4081:        }       
        -: 4082:                               
        -: 4083:                           
        -: 4084:         
    #####: 4085:      }
    #####: 4086:      tmp___26 = lexptr;
    #####: 4087:      lexptr ++;
    #####: 4088:      c = (token )((unsigned char )*tmp___26);
    #####: 4089:      lexleft --;
    #####: 4090:    }
        1: 4091:    if ((int )c != 125) {
        -: 4092:       
        -: 4093:
    #####: 4094:      tmp___27 = gettext("malformed repeat count");
    #####: 4095:      dfaerror((char const   *)tmp___27);
        -: 4096:       
        -: 4097:
    #####: 4098:    }
        1: 4099:    laststart = 0;
        1: 4100:    lasttok = (token )267;
        1: 4101:    return (lasttok);
        -: 4102:    case_124: /* CIL Label */ 
        1: 4103:    if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 4104:      goto normal_char;
        -: 4105:    }
        1: 4106:    if (backslash != ((syntax_bits & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
    #####: 4107:      goto normal_char;
        -: 4108:    }
        1: 4109:    laststart = 1;
        1: 4110:    lasttok = (token )269;
        1: 4111:    return (lasttok);
        -: 4112:    case_10: /* CIL Label */ 
        -: 4113:                                                                                                 {
    #####: 4114:      goto normal_char;
        -: 4115:    }                     
        -: 4116:                    
        -: 4117:                       
        -: 4118:                          
        -: 4119:                                                                                                             
        -: 4120:                       
        -: 4121:     
        -: 4122:     
        -: 4123:     
        -: 4124:    laststart = 1;
        -: 4125:    lasttok = (token )269;
        -: 4126:    return (lasttok);
        -: 4127:    case_40: /* CIL Label */ 
    #####: 4128:    if (backslash != ((syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
    #####: 4129:      goto normal_char;
        -: 4130:    }
    #####: 4131:    parens ++;
    #####: 4132:    laststart = 1;
    #####: 4133:    lasttok = (token )271;
    #####: 4134:    return (lasttok);
        -: 4135:    case_41: /* CIL Label */ 
    #####: 4136:    if (backslash != ((syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
    #####: 4137:      goto normal_char;
        -: 4138:    }
        -: 4139:                     {
    #####: 4140:      if (syntax_bits & (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 4141:        goto normal_char;
        -: 4142:      }
        -: 4143:    }
    #####: 4144:    parens --;
    #####: 4145:    laststart = 0;
    #####: 4146:    lasttok = (token )272;
    #####: 4147:    return (lasttok);
        -: 4148:    case_46: /* CIL Label */ 
        1: 4149:    if (backslash) {
    #####: 4150:      goto normal_char;
        -: 4151:    }
        -: 4152:    {
        1: 4153:    zeroset(ccl);
        1: 4154:    notset(ccl);
        -: 4155:    }
        -: 4156:                                                                         {
        -: 4157:       
        -: 4158:
        1: 4159:      clrbit((int )eolbyte_1, ccl);
        -: 4160:       
        -: 4161:
        -: 4162:    }
        -: 4163:                                                                            {
        -: 4164:       
        -: 4165:
        1: 4166:      clrbit('\000', ccl);
        -: 4167:       
        -: 4168:
        -: 4169:    }
        -: 4170:    {
        1: 4171:    laststart = 0;
        1: 4172:    tmp___28 = charclass_index(ccl);
        1: 4173:    lasttok = (token )(273 + tmp___28);
        -: 4174:    }
        1: 4175:    return (lasttok);
        -: 4176:    case_119: /* CIL Label */ 
        -: 4177:                             
        -: 4178:                       
        -: 4179:                       
        -: 4180:           { //Added block
    #####: 4181:    if (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 4182:      goto normal_char;
        -: 4183:    }
        -: 4184:    }
        -: 4185:    {
    #####: 4186:    zeroset(ccl);
    #####: 4187:    c2 = (token )0;
        -: 4188:    }
        -: 4189:    {
    #####: 4190:    while (1) {
        -: 4191:                                           ;
    #####: 4192:      if (! ((int )c2 < 1 << 8)) {
    #####: 4193:        goto while_break___4;
        -: 4194:      }
        -: 4195:      {
    #####: 4196:      tmp___29 = __ctype_b_loc();
        -: 4197:      }
    #####: 4198:      if ((int const   )*(*tmp___29 + (int )c2) & 8) {
        -: 4199:         
        -: 4200:
    #####: 4201:        setbit((int )c2, ccl);
        -: 4202:         
        -: 4203:
    #####: 4204:      } else { //Added block
    #####: 4205:      if ((int )c2 == 95) {
        -: 4206:         
        -: 4207:
    #####: 4208:        setbit((int )c2, ccl);
        -: 4209:         
        -: 4210:
    #####: 4211:      }
        -: 4212:      }
    #####: 4213:      c2 = (token )((int )c2 + 1);
        -: 4214:    }
        -: 4215:    while_break___4: /* CIL Label */ ;
        -: 4216:    }
    #####: 4217:    if ((int )c == 87) {
        -: 4218:       
        -: 4219:
    #####: 4220:      notset(ccl);
        -: 4221:       
        -: 4222:
    #####: 4223:    }
        -: 4224:    {
    #####: 4225:    laststart = 0;
    #####: 4226:    tmp___30 = charclass_index(ccl);
    #####: 4227:    lasttok = (token )(273 + tmp___30);
        -: 4228:    }
    #####: 4229:    return (lasttok);
        -: 4230:    case_91: /* CIL Label */ 
    #####: 4231:    if (backslash) {
    #####: 4232:      goto normal_char;
        -: 4233:    }
        -: 4234:    {
    #####: 4235:    zeroset(ccl);
        -: 4236:    }
    #####: 4237:    if (! lexleft) {
        -: 4238:      {
    #####: 4239:      tmp___32 = gettext("Unbalanced [");
        -: 4240:      }
        -: 4241:                                                                   {
        -: 4242:         
        -: 4243:
    #####: 4244:        tmp___31 = gettext("Unbalanced [");
    #####: 4245:        dfaerror((char const   *)tmp___31);
        -: 4246:         
        -: 4247:
        -: 4248:      }       
        -: 4249:                             
        -: 4250:                         
        -: 4251:       
    #####: 4252:    }
    #####: 4253:    tmp___33 = lexptr;
    #####: 4254:    lexptr ++;
    #####: 4255:    c = (token )((unsigned char )*tmp___33);
    #####: 4256:    lexleft --;
    #####: 4257:    if ((int )c == 94) {
    #####: 4258:      if (! lexleft) {
        -: 4259:        {
    #####: 4260:        tmp___35 = gettext("Unbalanced [");
        -: 4261:        }
        -: 4262:                                                                     {
        -: 4263:           
        -: 4264:
    #####: 4265:          tmp___34 = gettext("Unbalanced [");
    #####: 4266:          dfaerror((char const   *)tmp___34);
        -: 4267:           
        -: 4268:
        -: 4269:        }       
        -: 4270:                               
        -: 4271:                           
        -: 4272:         
    #####: 4273:      }
    #####: 4274:      tmp___36 = lexptr;
    #####: 4275:      lexptr ++;
    #####: 4276:      c = (token )((unsigned char )*tmp___36);
    #####: 4277:      lexleft --;
    #####: 4278:      invert = 1;
    #####: 4279:    } else {
    #####: 4280:      invert = 0;
        -: 4281:    }
        -: 4282:    {
    #####: 4283:    while (1) {
        -: 4284:                                           ;
        -: 4285:                         {
        -: 4286:                                             {
    #####: 4287:          c1 = (token )0;
        -: 4288:          {
    #####: 4289:          while (1) {
        -: 4290:                                                 ;
    #####: 4291:            if (! prednames[c1].name) {
    #####: 4292:              goto while_break___6;
        -: 4293:            }
        -: 4294:            {
    #####: 4295:            tmp___43 = looking_at(prednames[c1].name);
        -: 4296:            }
    #####: 4297:            if (tmp___43) {
    #####: 4298:              pred = (int (*)())prednames[c1].pred;
        -: 4299:                             {
        -: 4300:                                                                           
        -: 4301:                                                 
        -: 4302:                       { //Added block
    #####: 4303:                if ((unsigned long )pred == (unsigned long )(& is_lower)) {
    #####: 4304:                  pred = (int (*)())(& is_alpha);
    #####: 4305:                }
        -: 4306:                }
        -: 4307:              }
    #####: 4308:              c2 = (token )0;
        -: 4309:              {
    #####: 4310:              while (1) {
        -: 4311:                                                     ;
    #####: 4312:                if (! ((int )c2 < 1 << 8)) {
    #####: 4313:                  goto while_break___7;
        -: 4314:                }
        -: 4315:                {
    #####: 4316:                tmp___37 = (*pred)((int )c2);
        -: 4317:                }
    #####: 4318:                if (tmp___37) {
        -: 4319:                   
        -: 4320:
    #####: 4321:                  setbit((int )c2, ccl);
        -: 4322:                   
        -: 4323:
    #####: 4324:                }
    #####: 4325:                c2 = (token )((int )c2 + 1);
        -: 4326:              }
        -: 4327:              while_break___7: /* CIL Label */ ;
        -: 4328:              }
        -: 4329:              {
    #####: 4330:              tmp___38 = strlen(prednames[c1].name);
    #####: 4331:              lexptr += tmp___38;
    #####: 4332:              tmp___39 = strlen(prednames[c1].name);
    #####: 4333:              lexleft = (int )((size_t )lexleft - tmp___39);
        -: 4334:              }
    #####: 4335:              if (! lexleft) {
        -: 4336:                {
    #####: 4337:                tmp___41 = gettext("Unbalanced [");
        -: 4338:                }
        -: 4339:                                                                             {
        -: 4340:                   
        -: 4341:
    #####: 4342:                  tmp___40 = gettext("Unbalanced [");
    #####: 4343:                  dfaerror((char const   *)tmp___40);
        -: 4344:                   
        -: 4345:
        -: 4346:                }       
        -: 4347:                                       
        -: 4348:                                   
        -: 4349:                 
    #####: 4350:              }
    #####: 4351:              tmp___42 = lexptr;
    #####: 4352:              lexptr ++;
    #####: 4353:              c1 = (token )((unsigned char )*tmp___42);
    #####: 4354:              lexleft --;
    #####: 4355:              goto skip;
        -: 4356:            }
    #####: 4357:            c1 = (token )((int )c1 + 1);
        -: 4358:          }
        -: 4359:          while_break___6: /* CIL Label */ ;
        -: 4360:          }
        -: 4361:        }
        -: 4362:      }
        -: 4363:                         {
    #####: 4364:        if (syntax_bits & 1UL) {
        -: 4365:                         {
        -: 4366:            {
    #####: 4367:            tmp___45 = gettext("Unbalanced [");
        -: 4368:            }
        -: 4369:                                                                         {
        -: 4370:               
        -: 4371:
    #####: 4372:              tmp___44 = gettext("Unbalanced [");
    #####: 4373:              dfaerror((char const   *)tmp___44);
        -: 4374:               
        -: 4375:
        -: 4376:            }       
        -: 4377:                                   
        -: 4378:                               
        -: 4379:             
        -: 4380:          }
    #####: 4381:          tmp___46 = lexptr;
    #####: 4382:          lexptr ++;
    #####: 4383:          c = (token )((unsigned char )*tmp___46);
    #####: 4384:          lexleft --;
    #####: 4385:        }
        -: 4386:      }
    #####: 4387:      if (! lexleft) {
        -: 4388:        {
    #####: 4389:        tmp___48 = gettext("Unbalanced [");
        -: 4390:        }
        -: 4391:                                                                     {
        -: 4392:           
        -: 4393:
    #####: 4394:          tmp___47 = gettext("Unbalanced [");
    #####: 4395:          dfaerror((char const   *)tmp___47);
        -: 4396:           
        -: 4397:
        -: 4398:        }       
        -: 4399:                               
        -: 4400:                           
        -: 4401:         
    #####: 4402:      }
    #####: 4403:      tmp___49 = lexptr;
    #####: 4404:      lexptr ++;
    #####: 4405:      c1 = (token )((unsigned char )*tmp___49);
    #####: 4406:      lexleft --;
    #####: 4407:      if ((int )c1 == 45) {
    #####: 4408:        if (! lexleft) {
        -: 4409:          {
    #####: 4410:          tmp___51 = gettext("Unbalanced [");
        -: 4411:          }
        -: 4412:                                                                       {
        -: 4413:             
        -: 4414:
    #####: 4415:            tmp___50 = gettext("Unbalanced [");
    #####: 4416:            dfaerror((char const   *)tmp___50);
        -: 4417:             
        -: 4418:
        -: 4419:          }       
        -: 4420:                                 
        -: 4421:                             
        -: 4422:           
    #####: 4423:        }
    #####: 4424:        tmp___52 = lexptr;
    #####: 4425:        lexptr ++;
    #####: 4426:        c2 = (token )((unsigned char )*tmp___52);
    #####: 4427:        lexleft --;
        -: 4428:                             
        -: 4429:                    
        -: 4430:                     
        -: 4431:                 
        -: 4432:               {
        -: 4433:                              {
    #####: 4434:            if (syntax_bits & 1UL) {
        -: 4435:                             {
        -: 4436:                {
    #####: 4437:                tmp___54 = gettext("Unbalanced [");
        -: 4438:                }
        -: 4439:                                                                             {
        -: 4440:                   
        -: 4441:
    #####: 4442:                  tmp___53 = gettext("Unbalanced [");
    #####: 4443:                  dfaerror((char const   *)tmp___53);
        -: 4444:                   
        -: 4445:
        -: 4446:                }       
        -: 4447:                                       
        -: 4448:                                   
        -: 4449:                 
        -: 4450:              }
    #####: 4451:              tmp___55 = lexptr;
    #####: 4452:              lexptr ++;
    #####: 4453:              c2 = (token )((unsigned char )*tmp___55);
    #####: 4454:              lexleft --;
    #####: 4455:            }
        -: 4456:          }
    #####: 4457:          if (! lexleft) {
        -: 4458:            {
    #####: 4459:            tmp___57 = gettext("Unbalanced [");
        -: 4460:            }
        -: 4461:                                                                         {
        -: 4462:               
        -: 4463:
    #####: 4464:              tmp___56 = gettext("Unbalanced [");
    #####: 4465:              dfaerror((char const   *)tmp___56);
        -: 4466:               
        -: 4467:
        -: 4468:            }       
        -: 4469:                                   
        -: 4470:                               
        -: 4471:             
    #####: 4472:          }
    #####: 4473:          tmp___58 = lexptr;
    #####: 4474:          lexptr ++;
    #####: 4475:          c1 = (token )((unsigned char )*tmp___58);
    #####: 4476:          lexleft --;
        -: 4477:        }
    #####: 4478:      } else {
    #####: 4479:        c2 = c;
        -: 4480:      }
    #####: 4481:      lo[0] = (char )c;
    #####: 4482:      lo[1] = (char )'\000';
    #####: 4483:      hi[0] = (char )c2;
    #####: 4484:      hi[1] = (char )'\000';
    #####: 4485:      c = (token )0;
        -: 4486:      {
    #####: 4487:      while (1) {
        -: 4488:                                             ;
    #####: 4489:        if (! ((int )c < 1 << 8)) {
    #####: 4490:          goto while_break___8;
        -: 4491:        }
        -: 4492:        {
    #####: 4493:        ch[0] = (char )c;
    #####: 4494:        ch[1] = (char )'\000';
    #####: 4495:        tmp___63 = strcoll((char const   *)(lo), (char const   *)(ch));
        -: 4496:        }
    #####: 4497:        if (tmp___63 <= 0) {
        -: 4498:          {
    #####: 4499:          tmp___64 = strcoll((char const   *)(ch), (char const   *)(hi));
        -: 4500:          }
    #####: 4501:          if (tmp___64 <= 0) {
        -: 4502:            {
    #####: 4503:            setbit((int )c, ccl);
        -: 4504:            }
    #####: 4505:            if (case_fold) {
        -: 4506:              {
    #####: 4507:              tmp___62 = __ctype_b_loc();
        -: 4508:              }
        -: 4509:                                                              {
        -: 4510:                 
        -: 4511:
    #####: 4512:                tmp___59 = tolower((int )c);
    #####: 4513:                setbit(tmp___59, ccl);
        -: 4514:                 
        -: 4515:
        -: 4516:              }       
        -: 4517:                 
        -: 4518:                                           
        -: 4519:                 
        -: 4520:                                                                 
        -: 4521:                   
        -: 4522:
        -: 4523:                                              
        -: 4524:                                        
        -: 4525:                   
        -: 4526:
        -: 4527:                 
        -: 4528:               
    #####: 4529:            }
    #####: 4530:          }
    #####: 4531:        }
    #####: 4532:        c = (token )((int )c + 1);
        -: 4533:      }
        -: 4534:      while_break___8: /* CIL Label */ ;
    #####: 4535:      }
        -: 4536:      skip: 
    #####: 4537:      c = c1;
    #####: 4538:      if (! ((int )c != 93)) {
    #####: 4539:        goto while_break___5;
        -: 4540:      }
        -: 4541:    }
        -: 4542:    while_break___5: /* CIL Label */ ;
        -: 4543:    }
    #####: 4544:    if (invert) {
        -: 4545:      {
    #####: 4546:      notset(ccl);
        -: 4547:      }
        -: 4548:                                                                                     {
        -: 4549:         
        -: 4550:
    #####: 4551:        clrbit((int )eolbyte_1, ccl);
        -: 4552:         
        -: 4553:
        -: 4554:      }
    #####: 4555:    }
        -: 4556:    {
    #####: 4557:    laststart = 0;
    #####: 4558:    tmp___65 = charclass_index(ccl);
    #####: 4559:    lasttok = (token )(273 + tmp___65);
        -: 4560:    }
    #####: 4561:    return (lasttok);
        -: 4562:    normal_char: 
        -: 4563:                                    
       12: 4564:     laststart = 0;
       12: 4565:    if (case_fold) {
        -: 4566:      {
    #####: 4567:      tmp___70 = __ctype_b_loc();
        -: 4568:      }
        -: 4569:                                                       {
        -: 4570:        {
    #####: 4571:        zeroset(ccl);
    #####: 4572:        setbit((int )c, ccl);
    #####: 4573:        tmp___68 = __ctype_b_loc();
        -: 4574:        }
        -: 4575:                                                        {
        -: 4576:           
        -: 4577:
    #####: 4578:          tmp___66 = tolower((int )c);
    #####: 4579:          setbit(tmp___66, ccl);
        -: 4580:           
        -: 4581:
        -: 4582:        }       
        -: 4583:           
        -: 4584:
        -: 4585:                                      
        -: 4586:                                
        -: 4587:           
        -: 4588:
        -: 4589:         
        -: 4590:        {
    #####: 4591:        tmp___69 = charclass_index(ccl);
    #####: 4592:        lasttok = (token )(273 + tmp___69);
        -: 4593:        }
    #####: 4594:        return (lasttok);
        -: 4595:      }
        -: 4596:    }
       12: 4597:    return (c);
        -: 4598:    switch_break: /* CIL Label */ ;
        -: 4599:    }
    #####: 4600:    i ++;
        -: 4601:  }
        -: 4602:  while_break: /* CIL Label */ ;
        -: 4603:  }
        -: 4604:  {
    #####: 4605:  abort();
        -: 4606:  }
        -: 4607:  return ((token )-1);
        -: 4608:}
       16: 4609:}
        -: 4610:static token tok  ;
        -: 4611:static int depth  ;
       27: 4612:static void addtok(token t ) 
        -: 4613:{ 
        -: 4614:  ptr_t tmp ;
        -: 4615:  int tmp___0 ;
        -: 4616:
        -: 4617:  {
        -: 4618:                                  {
        -: 4619:    {
        -: 4620:              {
        -: 4621:                                       ;
       27: 4622:      if (! (dfa->tindex >= dfa->talloc)) {
       22: 4623:        goto while_break;
        -: 4624:      }
        5: 4625:      dfa->talloc *= 2;
        5: 4626:    }
        -: 4627:    while_break: /* CIL Label */ ;
        -: 4628:    }
        -: 4629:    {
       27: 4630:    tmp = xrealloc_1((ptr_t )dfa->tokens, (unsigned long )dfa->talloc * sizeof(token ));
       27: 4631:    dfa->tokens = (token *)tmp;
        -: 4632:    }
        -: 4633:  }
       27: 4634:  tmp___0 = dfa->tindex;
       27: 4635:  (dfa->tindex) ++;
       27: 4636:  *(dfa->tokens + tmp___0) = t;
       27: 4637:  {
        -: 4638:                       
        -: 4639:                  
        -: 4640:   
        -: 4641:                       
        -: 4642:                  
        -: 4643:   
        -: 4644:                       
        -: 4645:                  
        -: 4646:   
        -: 4647:                       
        -: 4648:                  
        -: 4649:   
        -: 4650:                       
        -: 4651:                  
        -: 4652:   
        -: 4653:                       
        -: 4654:                  
        -: 4655:   
        -: 4656:                       
        -: 4657:                  
        -: 4658:   
        -: 4659:                      
        -: 4660:                            
        -: 4661:                            
        -: 4662:                             
        -: 4663:                     
        -: 4664:                            
        -: 4665:                            
        -: 4666:                             
        -: 4667:            
        -: 4668:                    
        -: 4669:  switch_default: /* CIL Label */ 
       27: 4670:  (dfa->nleaves) ++;
        -: 4671:                            
        -: 4672:           
        -: 4673:                    
        -: 4674:                                 
        -: 4675:  }
        -: 4676:                           
        -: 4677:                       
        -: 4678:   
        -: 4679:         
        -: 4680:}
       27: 4681:}
       13: 4682:static void atom(void) 
        -: 4683:{ 
        -: 4684:  char *tmp ;
        -: 4685:
        -: 4686:  {
       13: 4687:  if ((int )tok >= 0) {
       13: 4688:    if ((int )tok < 1 << 8) {
        -: 4689:       
        -: 4690:
       12: 4691:      addtok(tok);
       12: 4692:      tok = lex();
        -: 4693:       
        -: 4694:
       12: 4695:    } else {
        1: 4696:      goto _L;
        -: 4697:    }
       12: 4698:  } else { //Added block
        -: 4699:  _L: 
        1: 4700:  if ((int )tok >= 273) {
        -: 4701:     
        -: 4702:
        1: 4703:    addtok(tok);
        1: 4704:    tok = lex();
        -: 4705:     
        -: 4706:
        1: 4707:  } else { //Added block
        -: 4708:                         
        -: 4709:     
        -: 4710:
        -: 4711:                
        -: 4712:                
        -: 4713:     
        -: 4714:
        -: 4715:         { //Added block
    #####: 4716:  if ((int )tok == 258) {
        -: 4717:     
        -: 4718:
    #####: 4719:    addtok(tok);
    #####: 4720:    tok = lex();
        -: 4721:     
        -: 4722:
    #####: 4723:  } else { //Added block
        -: 4724:                         
        -: 4725:     
        -: 4726:
        -: 4727:                
        -: 4728:                
        -: 4729:     
        -: 4730:
        -: 4731:         { //Added block
    #####: 4732:  if ((int )tok == 260) {
        -: 4733:     
        -: 4734:
    #####: 4735:    addtok(tok);
    #####: 4736:    tok = lex();
        -: 4737:     
        -: 4738:
    #####: 4739:  } else { //Added block
        -: 4740:                         
        -: 4741:     
        -: 4742:
        -: 4743:                
        -: 4744:                
        -: 4745:     
        -: 4746:
        -: 4747:         { //Added block
    #####: 4748:  if ((int )tok == 262) {
        -: 4749:     
        -: 4750:
    #####: 4751:    addtok(tok);
    #####: 4752:    tok = lex();
        -: 4753:     
        -: 4754:
    #####: 4755:  } else { //Added block
        -: 4756:                         
        -: 4757:     
        -: 4758:
        -: 4759:                
        -: 4760:                
        -: 4761:     
        -: 4762:
        -: 4763:         { //Added block
    #####: 4764:  if ((int )tok == 271) {
        -: 4765:    {
    #####: 4766:    tok = lex();
    #####: 4767:    regexp(0);
        -: 4768:    }
        -: 4769:                           
        -: 4770:       
        -: 4771:
        -: 4772:                                    
        -: 4773:                                    
        -: 4774:       
        -: 4775:
        -: 4776:     
        -: 4777:    {
    #####: 4778:    tok = lex();
        -: 4779:    }
    #####: 4780:  } else {
        -: 4781:     
        -: 4782:
    #####: 4783:    addtok((token )256);
        -: 4784:     
        -: 4785:
        -: 4786:  }
        -: 4787:  }
        -: 4788:  }
        -: 4789:  }
        -: 4790:  }
        -: 4791:  }
        -: 4792:  }
        -: 4793:  }
        -: 4794:  }
        -: 4795:  }
        -: 4796:         
        -: 4797:}
       13: 4798:}
        -: 4799:static int nsubtoks(int tindex ) 
        -: 4800:{ 
        -: 4801:  int ntoks1 ;
        -: 4802:  int tmp ;
        -: 4803:  int tmp___0 ;
        -: 4804:
        -: 4805:  {
        -: 4806:   
        -: 4807:
        -: 4808:                                                   
        -: 4809:                  
        -: 4810:   
        -: 4811:                                                   
        -: 4812:                  
        -: 4813:   
        -: 4814:                                                   
        -: 4815:                  
        -: 4816:   
        -: 4817:                                                   
        -: 4818:                  
        -: 4819:   
        -: 4820:                                                   
        -: 4821:                  
        -: 4822:   
        -: 4823:                                                   
        -: 4824:                  
        -: 4825:   
        -: 4826:                      
        -: 4827:  switch_default: /* CIL Label */ 
        -: 4828:  return (1);
        -: 4829:                            
        -: 4830:                            
        -: 4831:                             
        -: 4832:    
        -: 4833:                             
        -: 4834:   
        -: 4835:                   
        -: 4836:                            
        -: 4837:                            
        -: 4838:                             
        -: 4839:    
        -: 4840:                                
        -: 4841:                                            
        -: 4842:   
        -: 4843:                                  
        -: 4844:                                 ;
        -: 4845:   
        -: 4846:
        -: 4847:}
        -: 4848:}
        -: 4849:static void copytoks(int tindex , int ntokens ) 
        -: 4850:{ 
        -: 4851:  int i ;
        -: 4852:
        -: 4853:   
        -: 4854:        
        -: 4855:   
        -: 4856:             
        -: 4857:                                      
        -: 4858:                          
        -: 4859:                       
        -: 4860:     
        -: 4861:     
        -: 4862:                                          
        -: 4863:         
        -: 4864:     
        -: 4865:   
        -: 4866:                                
        -: 4867:   
        -: 4868:         
        -: 4869: 
        -: 4870:}
       13: 4871:static void closure(void) 
        -: 4872:{ 
        -: 4873:  int tindex ;
        -: 4874:  int ntokens ;
        -: 4875:  int i ;
        -: 4876:
        -: 4877:  {
        -: 4878:  {
       13: 4879:  atom();
        -: 4880:  }
        -: 4881:  {
       14: 4882:  while (1) {
        -: 4883:                                     ;
       14: 4884:    if (! ((int )tok == 264)) {
       14: 4885:      if (! ((int )tok == 265)) {
       14: 4886:        if (! ((int )tok == 266)) {
       14: 4887:          if (! ((int )tok == 267)) {
       13: 4888:            goto while_break;
        -: 4889:          }
        1: 4890:        }
        1: 4891:      }
        1: 4892:    }
        1: 4893:    if ((int )tok == 267) {
        -: 4894:       
        -: 4895:                                      
        -: 4896:                                     
        -: 4897:       
        -: 4898:                       
        -: 4899:         
        -: 4900:
        -: 4901:                            
        -: 4902:         
        -: 4903:
        -: 4904:       
        1: 4905:      if (minrep == 0) {
        -: 4906:         
        -: 4907:
    #####: 4908:        addtok((token )264);
        -: 4909:         
        -: 4910:
    #####: 4911:      }
        -: 4912:            
        -: 4913:       
        -: 4914:                 
        -: 4915:                                              
        -: 4916:                             
        -: 4917:                               
        -: 4918:         
        -: 4919:         
        -: 4920:                                  
        -: 4921:                            
        -: 4922:             
        -: 4923:         
        -: 4924:       
        -: 4925:                                        
        -: 4926:       
        -: 4927:       
        -: 4928:                 
        -: 4929:                                              
        -: 4930:                             
        -: 4931:                               
        -: 4932:         
        -: 4933:         
        -: 4934:                                  
        -: 4935:                            
        -: 4936:                            
        -: 4937:             
        -: 4938:         
        -: 4939:       
        -: 4940:                                        
        -: 4941:       
        -: 4942:      {
        1: 4943:      tok = lex();
        -: 4944:      }
        1: 4945:    } else {
        -: 4946:       
        -: 4947:
    #####: 4948:      addtok(tok);
    #####: 4949:      tok = lex();
        -: 4950:       
        -: 4951:
        -: 4952:    }
        -: 4953:  }
        -: 4954:  while_break: /* CIL Label */ ;
        -: 4955:  }
        -: 4956:         
        -: 4957:}
       13: 4958:}
        2: 4959:static void branch(void) 
        -: 4960:{ 
        -: 4961:
        -: 4962:
        -: 4963:   
        -: 4964:
        -: 4965:  {
        2: 4966:  closure();
        -: 4967:  }
        -: 4968:  {
       13: 4969:  while (1) {
        -: 4970:                                     ;
       13: 4971:    if ((int )tok != 272) {
       13: 4972:      if ((int )tok != 269) {
       12: 4973:        if (! ((int )tok >= 0)) {
        1: 4974:          goto while_break;
        -: 4975:        }
       11: 4976:      } else {
        1: 4977:        goto while_break;
        -: 4978:      }
       11: 4979:    } else {
    #####: 4980:      goto while_break;
        -: 4981:    }
        -: 4982:    {
       11: 4983:    closure();
       11: 4984:    addtok((token )268);
        -: 4985:    }
        -: 4986:  }
        -: 4987:  while_break: /* CIL Label */ ;
        -: 4988:  }
        -: 4989:         
        -: 4990: 
        -: 4991:
        2: 4992:}
        1: 4993:static void regexp(int toplevel ) 
        -: 4994:{ 
        -: 4995:
        -: 4996:
        -: 4997:   
        -: 4998:
        -: 4999:  {
        1: 5000:  branch();
        -: 5001:  }
        -: 5002:  {
        -: 5003:            {
        -: 5004:                                     ;
        1: 5005:    if (! ((int )tok == 269)) {
    #####: 5006:      goto while_break;
        -: 5007:    }
        -: 5008:    {
        1: 5009:    tok = lex();
        1: 5010:    branch();
        -: 5011:    }
        -: 5012:                  {
        -: 5013:       
        -: 5014:
        1: 5015:      addtok((token )270);
        -: 5016:       
        -: 5017:
        -: 5018:    }       
        -: 5019:       
        -: 5020:
        -: 5021:                          
        -: 5022:       
        -: 5023:
        -: 5024:     
        1: 5025:  }
        -: 5026:  while_break: /* CIL Label */ ;
        -: 5027:  }
        -: 5028:         
        -: 5029: 
        -: 5030:
        1: 5031:}
        1: 5032:void dfaparse(char *s , size_t len , struct dfa *d ) 
        -: 5033:{ 
        -: 5034:  char *tmp ;
        -: 5035:  char *tmp___0 ;
        -: 5036:
        -: 5037:  {
        1: 5038:  dfa = d;
        1: 5039:  lexptr = s;
        -: 5040:                    
        1: 5041:  lexleft = (int )len;
        -: 5042:                       
        -: 5043:                
        -: 5044:             
        -: 5045:                          
        -: 5046:     
        -: 5047:
        -: 5048:                                         
        -: 5049:                                  
        -: 5050:     
        -: 5051:
        -: 5052:   
        -: 5053:  {
        1: 5054:  tok = lex();
        -: 5055:                   
        1: 5056:  regexp(1);
        -: 5057:  }
        -: 5058:                        
        -: 5059:     
        -: 5060:
        -: 5061:                                      
        -: 5062:                                      
        -: 5063:     
        -: 5064:
        -: 5065:   
        -: 5066:  {
        1: 5067:  addtok((token )(-1 - d->nregexps));
        1: 5068:  addtok((token )268);
        -: 5069:  }
        -: 5070:                    
        -: 5071:     
        -: 5072:
        -: 5073:                        
        -: 5074:     
        -: 5075:
        -: 5076:   
        -: 5077:                   
        -: 5078:         
        -: 5079:}
        1: 5080:}
       76: 5081:static void copy(position_set *src , position_set *dst ) 
        -: 5082:{ 
        -: 5083:  int i ;
        -: 5084:
        -: 5085:  {
       76: 5086:  i = 0;
        -: 5087:  {
      201: 5088:  while (1) {
        -: 5089:                                     ;
      201: 5090:    if (! (i < src->nelem)) {
       76: 5091:      goto while_break;
        -: 5092:    }
      125: 5093:    *(dst->elems + i) = *(src->elems + i);
      125: 5094:    i ++;
        -: 5095:  }
        -: 5096:  while_break: /* CIL Label */ ;
        -: 5097:  }
       76: 5098:  dst->nelem = src->nelem;
        -: 5099:         
        -: 5100:}
       76: 5101:}
      129: 5102:static void insert(position p , position_set *s ) 
        -: 5103:{ 
        -: 5104:  int i ;
        -: 5105:  position t1 ;
        -: 5106:  position t2 ;
        -: 5107:  int tmp ;
        -: 5108:
        -: 5109:  {
      129: 5110:  i = 0;
        -: 5111:  {
        -: 5112:            {
        -: 5113:                                     ;
      205: 5114:    if (i < s->nelem) {
       89: 5115:      if (! (p.strchr < (s->elems + i)->strchr)) {
       13: 5116:        goto while_break;
        -: 5117:      }
       76: 5118:    } else {
       40: 5119:      goto while_break;
        -: 5120:    }
        -: 5121:                
        -: 5122:    __Cont: 
       76: 5123:    i ++;
       76: 5124:  }
        -: 5125:  while_break: /* CIL Label */ ;
        -: 5126:  }
      129: 5127:  if (i < s->nelem) {
       61: 5128:    if (p.strchr == (s->elems + i)->strchr) {
        -: 5129:                                                 
        1: 5130:    } else {
       60: 5131:      goto _L;
        -: 5132:    }
       69: 5133:  } else {
        -: 5134:    _L: 
      128: 5135:    t1 = p;
      128: 5136:    (s->nelem) ++;
        -: 5137:    {
      325: 5138:    while (1) {
        -: 5139:                                           ;
      325: 5140:      if (! (i < s->nelem)) {
      128: 5141:        goto while_break___0;
        -: 5142:      }
      197: 5143:      t2 = *(s->elems + i);
      197: 5144:      tmp = i;
      197: 5145:      i ++;
      197: 5146:      *(s->elems + tmp) = t1;
      197: 5147:      t1 = t2;
        -: 5148:    }
        -: 5149:    while_break___0: /* CIL Label */ ;
        -: 5150:    }
        -: 5151:  }
        -: 5152:         
        -: 5153:}
      129: 5154:}
       13: 5155:static void merge(position_set *s1 , position_set *s2 , position_set *m ) 
        -: 5156:{ 
        -: 5157:  int i ;
        -: 5158:  int j ;
        -: 5159:  int tmp ;
        -: 5160:  int tmp___0 ;
        -: 5161:  int tmp___1 ;
        -: 5162:  int tmp___2 ;
        -: 5163:  int tmp___3 ;
        -: 5164:  int tmp___4 ;
        -: 5165:  int tmp___5 ;
        -: 5166:  int tmp___6 ;
        -: 5167:  int tmp___7 ;
        -: 5168:  int tmp___8 ;
        -: 5169:  int tmp___9 ;
        -: 5170:
        -: 5171:  {
       13: 5172:  i = 0;
       13: 5173:  j = 0;
       13: 5174:  m->nelem = 0;
        -: 5175:   
        -: 5176:             
        -: 5177:                                      
        -: 5178:                        
        -: 5179:                              
        -: 5180:                         
        -: 5181:       
        -: 5182:            
        -: 5183:                       
        -: 5184:     
        -: 5185:                                                            
        -: 5186:                     
        -: 5187:                    
        -: 5188:                  
        -: 5189:           
        -: 5190:                                                 
        -: 5191:                          
        -: 5192:                                                            
        -: 5193:                         
        -: 5194:                    
        -: 5195:                  
        -: 5196:           
        -: 5197:                                                     
        -: 5198:            
        -: 5199:                  
        -: 5200:           
        -: 5201:                                                      
        -: 5202:                         
        -: 5203:                    
        -: 5204:                  
        -: 5205:           
        -: 5206:                                                                            
        -: 5207:     
        -: 5208:     
        -: 5209:   
        -: 5210:                                
        -: 5211:   
        -: 5212:  {
        -: 5213:            {
        -: 5214:                                         ;
        -: 5215:                            
        -: 5216:                           
        -: 5217:     
        -: 5218:                       
       13: 5219:    (m->nelem) ++;
       13: 5220:    tmp___7 = i;
        -: 5221:         
       13: 5222:    *(m->elems + tmp___6) = *(s1->elems + tmp___7);
       13: 5223:  }
        -: 5224:  while_break___0: /* CIL Label */ ;
        -: 5225:  }
        -: 5226:  {
        -: 5227:            {
        -: 5228:                                         ;
       13: 5229:    if (! (j < s2->nelem)) {
       13: 5230:      goto while_break___1;
        -: 5231:    }
    #####: 5232:    tmp___8 = m->nelem;
    #####: 5233:    (m->nelem) ++;
    #####: 5234:    tmp___9 = j;
        -: 5235:         
    #####: 5236:    *(m->elems + tmp___8) = *(s2->elems + tmp___9);
    #####: 5237:  }
        -: 5238:  while_break___1: /* CIL Label */ ;
        -: 5239:  }
        -: 5240:         
        -: 5241:}
       13: 5242:}
    #####: 5243:static void delete(position p , position_set *s ) 
        -: 5244:{ 
        -: 5245:  int i ;
        -: 5246:
        -: 5247:  {
    #####: 5248:  i = 0;
        -: 5249:  {
        -: 5250:            {
        -: 5251:                                     ;
        -: 5252:                           
        -: 5253:                       
        -: 5254:     
    #####: 5255:    if (p.strchr == (s->elems + i)->strchr) {
    #####: 5256:      goto while_break;
        -: 5257:    }
    #####: 5258:    i ++;
    #####: 5259:  }
        -: 5260:  while_break: /* CIL Label */ ;
        -: 5261:  }
        -: 5262:                    {
    #####: 5263:    (s->nelem) --;
        -: 5264:    {
        -: 5265:              {
        -: 5266:                                           ;
        -: 5267:                             
        -: 5268:                             
        -: 5269:       
    #####: 5270:      *(s->elems + i) = *(s->elems + (i + 1));
        -: 5271:           
    #####: 5272:    }
        -: 5273:    while_break___0: /* CIL Label */ ;
        -: 5274:    }
        -: 5275:  }
        -: 5276:         
        -: 5277:}
    #####: 5278:}
       54: 5279:static int state_index(struct dfa *d , position_set *s , int newline___0 , int letter ) 
        -: 5280:{ 
        -: 5281:  int hash ;
        -: 5282:  int constraint ;
        -: 5283:  int i ;
        -: 5284:  int j ;
        -: 5285:  ptr_t tmp ;
        -: 5286:  ptr_t tmp___0 ;
        -: 5287:  int tmp___1 ;
        -: 5288:  int tmp___2 ;
        -: 5289:  int tmp___3 ;
        -: 5290:  int tmp___4 ;
        -: 5291:  int tmp___5 ;
        -: 5292:  int tmp___6 ;
        -: 5293:  int tmp___7 ;
        -: 5294:  int tmp___8 ;
        -: 5295:
        -: 5296:  {
        -: 5297:           
        -: 5298:                    
        -: 5299:                    
        -: 5300:          
        -: 5301:                    
        -: 5302:   
        -: 5303:               
        -: 5304:               
        -: 5305:          
        -: 5306:               
        -: 5307:   
        -: 5308:        
        -: 5309:  {
        -: 5310:            {
        -: 5311:                                     ;
        -: 5312:                          {
       54: 5313:      goto while_break;
        -: 5314:    }
        -: 5315:    hash = (int )((unsigned int )hash ^ ((s->elems + i)->strchr + (s->elems + i)->constraint));
        -: 5316:         
        -: 5317:  }
        -: 5318:  while_break: /* CIL Label */ ;
        -: 5319:  }
       54: 5320:  i = 0;
        -: 5321:  {
      265: 5322:  while (1) {
        -: 5323:                                         ;
      265: 5324:    if (! (i < d->sindex)) {
       16: 5325:      goto while_break___0;
        -: 5326:    }
        -: 5327:                                        
        -: 5328:                  
        -: 5329:           { //Added block
      249: 5330:    if (s->nelem != (d->states + i)->elems.nelem) {
      135: 5331:      goto __Cont;
        -: 5332:    } else { //Added block
      114: 5333:    if (newline___0 != (int )(d->states + i)->newline) {
       14: 5334:      goto __Cont;
        -: 5335:    } else { //Added block
      100: 5336:    if (letter != (int )(d->states + i)->letter) {
    #####: 5337:      goto __Cont;
        -: 5338:    }
        -: 5339:    }
        -: 5340:    }
        -: 5341:    }
      100: 5342:    j = 0;
        -: 5343:    {
      215: 5344:    while (1) {
        -: 5345:                                           ;
      215: 5346:      if (! (j < s->nelem)) {
       38: 5347:        goto while_break___1;
        -: 5348:      }
      177: 5349:      if ((s->elems + j)->constraint != ((d->states + i)->elems.elems + j)->constraint) {
    #####: 5350:        goto while_break___1;
        -: 5351:      } else { //Added block
      177: 5352:      if ((s->elems + j)->strchr != ((d->states + i)->elems.elems + j)->strchr) {
       62: 5353:        goto while_break___1;
        -: 5354:      }
        -: 5355:      }
      115: 5356:      j ++;
        -: 5357:    }
        -: 5358:    while_break___1: /* CIL Label */ ;
        -: 5359:    }
      100: 5360:    if (j == s->nelem) {
       38: 5361:      return (i);
        -: 5362:    }
        -: 5363:    __Cont: 
      211: 5364:    i ++;
        -: 5365:  }
        -: 5366:  while_break___0: /* CIL Label */ ;
        -: 5367:  }
        -: 5368:                              {
        -: 5369:    {
        -: 5370:              {
        -: 5371:                                           ;
        -: 5372:                                       
        -: 5373:                             
        -: 5374:       
       16: 5375:      d->salloc *= 2;
       16: 5376:    }
        -: 5377:    while_break___2: /* CIL Label */ ;
        -: 5378:    }
        -: 5379:    {
       16: 5380:    tmp = xrealloc_1((ptr_t )d->states, (unsigned long )d->salloc * sizeof(dfa_state ));
       16: 5381:    d->states = (dfa_state *)tmp;
        -: 5382:    }
        -: 5383:  }
        -: 5384:  {
        -: 5385:                               
       16: 5386:  tmp___0 = xmalloc_1((unsigned long )s->nelem * sizeof(position ));
       16: 5387:  (d->states + i)->elems.elems = (position *)tmp___0;
       16: 5388:  copy(s, & (d->states + i)->elems);
       16: 5389:  (d->states + i)->newline = (char )newline___0;
       16: 5390:  (d->states + i)->letter = (char )letter;
       16: 5391:  (d->states + i)->backref = (char)0;
       16: 5392:  (d->states + i)->constraint = (unsigned char)0;
        -: 5393:                                 
       16: 5394:  j = 0;
        -: 5395:  }
        -: 5396:  {
        -: 5397:            {
        -: 5398:                                         ;
        -: 5399:                           
        -: 5400:                           
        -: 5401:     
       16: 5402:    if ((int )*(d->tokens + (s->elems + j)->strchr) < 0) {
        1: 5403:      constraint = (int )(s->elems + j)->constraint;
        -: 5404:                       {
        -: 5405:                    
        -: 5406:      }       
        -: 5407:                    
        -: 5408:       
        -: 5409:                                              
        -: 5410:                     
        -: 5411:                      
        -: 5412:                
        -: 5413:                      
        -: 5414:         
        -: 5415:                                          
        -: 5416:                                                                                                         
        -: 5417:                
        -: 5418:                      
        -: 5419:         
        1: 5420:             {
        -: 5421:        _L___1: 
        -: 5422:                         {
        -: 5423:                      
        -: 5424:        }       
        -: 5425:                      
        -: 5426:         
        -: 5427:                                                
        -: 5428:                       
        -: 5429:                        
        -: 5430:                  
        -: 5431:                        
        -: 5432:           
        -: 5433:                                                  
        -: 5434:                                                                                                           
        -: 5435:                  
        -: 5436:                        
        -: 5437:           
        1: 5438:               {
        -: 5439:          _L___0: 
        -: 5440:                           {
        1: 5441:            tmp___5 = 2;
        -: 5442:          }       
        -: 5443:                        
        -: 5444:           
        1: 5445:          if (constraint & (1 << ((tmp___5 + 1) + 4))) {
        -: 5446:                        {
        -: 5447:                          
        -: 5448:            }       
        -: 5449:                          
        -: 5450:             
        -: 5451:                                             {
        1: 5452:              (d->states + i)->constraint = (unsigned char )((int )(d->states + i)->constraint | constraint);
        -: 5453:            }       
        -: 5454:                      
        -: 5455:             
        1: 5456:          } else {
        -: 5457:            _L: 
        -: 5458:                             {
        -: 5459:                          
        -: 5460:            }       
        -: 5461:                          
        -: 5462:             
        -: 5463:                                                          
        -: 5464:                           
        -: 5465:                            
        -: 5466:                      
        -: 5467:                            
        -: 5468:               
        -: 5469:                                                      
        -: 5470:                                                                                                               
        -: 5471:               
        -: 5472:             
        -: 5473:          }
        -: 5474:        }
        -: 5475:      }
        -: 5476:                                         
        -: 5477:                                                                                 
        -: 5478:       
        1: 5479:    } else { //Added block
        -: 5480:                                                             
        -: 5481:                                                       
        -: 5482:                                         
        -: 5483:     
        -: 5484:    }
        -: 5485:         
       16: 5486:  }
        -: 5487:  while_break___3: /* CIL Label */ ;
        -: 5488:  }
       16: 5489:  (d->sindex) ++;
       16: 5490:  return (i);
        -: 5491:}
       54: 5492:}
       15: 5493:static void epsclosure(position_set *s , struct dfa *d ) 
        -: 5494:{ 
        -: 5495:  int i ;
        -: 5496:  int j ;
        -: 5497:  int *visited ;
        -: 5498:  position p ;
        -: 5499:  position old ;
        -: 5500:  ptr_t tmp ;
        -: 5501:
        -: 5502:  {
        -: 5503:  {
       15: 5504:  tmp = xmalloc_1((unsigned long )d->tindex * sizeof(int ));
       15: 5505:  visited = (int *)tmp;
       15: 5506:  i = 0;
        -: 5507:  }
        -: 5508:  {
        -: 5509:            {
        -: 5510:                                     ;
        -: 5511:                            
        -: 5512:                       
        -: 5513:     
       15: 5514:    *(visited + i) = 0;
        -: 5515:         
       15: 5516:  }
        -: 5517:  while_break: /* CIL Label */ ;
        -: 5518:  }
       15: 5519:  i = 0;
        -: 5520:  {
       30: 5521:  while (1) {
        -: 5522:                                         ;
       30: 5523:    if (! (i < s->nelem)) {
       15: 5524:      goto while_break___0;
        -: 5525:    }
       16: 5526:    if ((int )*(d->tokens + (s->elems + i)->strchr) >= 1 << 8) {
        -: 5527:                                                              {
        1: 5528:        if ((int )*(d->tokens + (s->elems + i)->strchr) < 273) {
        -: 5529:          {
    #####: 5530:          old = *(s->elems + i);
    #####: 5531:          p.constraint = old.constraint;
    #####: 5532:          delete(*(s->elems + i), s);
        -: 5533:          }
    #####: 5534:          if (*(visited + old.strchr)) {
        -: 5535:                 
        -: 5536:                        
    #####: 5537:          }
    #####: 5538:          *(visited + old.strchr) = 1;
        -: 5539:          {
        -: 5540:                                                       
        -: 5541:                          
        -: 5542:           
        -: 5543:                                                       
        -: 5544:                          
        -: 5545:           
    #####: 5546:          if ((int )*(d->tokens + old.strchr) == 260) {
    #####: 5547:            goto case_260;
        -: 5548:          }
        -: 5549:                                                       
        -: 5550:                          
        -: 5551:           
    #####: 5552:          if ((int )*(d->tokens + old.strchr) == 262) {
    #####: 5553:            goto case_262;
        -: 5554:          }
        -: 5555:                                                       
        -: 5556:                          
        -: 5557:           
        -: 5558:                              
        -: 5559:          case_258: /* CIL Label */ 
    #####: 5560:          p.constraint &= 207U;
    #####: 5561:          goto switch_break;
        -: 5562:                                    
        -: 5563:                               
        -: 5564:                            
        -: 5565:          case_260: /* CIL Label */ 
    #####: 5566:          p.constraint &= 242U;
        -: 5567:                            
        -: 5568:                                    
        -: 5569:                               
        -: 5570:                            
        -: 5571:          case_262: /* CIL Label */ 
    #####: 5572:          p.constraint &= 246U;
        -: 5573:                            
        -: 5574:                                    
        -: 5575:                               
        -: 5576:                            
        -: 5577:                                          
        -: 5578:                            
        -: 5579:          switch_break: /* CIL Label */ ;
        -: 5580:          }
    #####: 5581:          j = 0;
        -: 5582:          {
        -: 5583:                    {
        -: 5584:                                                 ;
        -: 5585:                                                           
        -: 5586:                                   
        -: 5587:             
        -: 5588:            {
    #####: 5589:            p.strchr = ((d->follows + old.strchr)->elems + j)->strchr;
    #####: 5590:            insert(p, s);
        -: 5591:                 
        -: 5592:            }
    #####: 5593:          }
        -: 5594:          while_break___1: /* CIL Label */ ;
        -: 5595:          }
        -: 5596:                 
    #####: 5597:        }
        -: 5598:      }
        1: 5599:    }
        -: 5600:    __Cont: 
       15: 5601:    i ++;
        -: 5602:  }
        -: 5603:  while_break___0: /* CIL Label */ ;
        -: 5604:  }
        -: 5605:   
        -: 5606:                        
        -: 5607:   
        -: 5608:         
        -: 5609:}
       15: 5610:}
        1: 5611:void dfaanalyze(struct dfa *d , int searchflag ) 
        -: 5612:{ 
        -: 5613:  int *nullable ;
        -: 5614:  int *nfirstpos ;
        -: 5615:  position *firstpos ;
        -: 5616:  int *nlastpos ;
        -: 5617:  position *lastpos ;
        -: 5618:  int *nalloc ;
        -: 5619:  position_set tmp ;
        -: 5620:  position_set merged ;
        -: 5621:  int wants_newline ;
        -: 5622:  int *o_nullable ;
        -: 5623:  int *o_nfirst ;
        -: 5624:  int *o_nlast ;
        -: 5625:  position *o_firstpos ;
        -: 5626:  position *o_lastpos ;
        -: 5627:  int i ;
        -: 5628:  int j ;
        -: 5629:  position *pos ;
        -: 5630:  ptr_t tmp___0 ;
        -: 5631:  ptr_t tmp___1 ;
        -: 5632:  ptr_t tmp___2 ;
        -: 5633:  ptr_t tmp___3 ;
        -: 5634:  ptr_t tmp___4 ;
        -: 5635:  ptr_t tmp___5 ;
        -: 5636:  ptr_t tmp___6 ;
        -: 5637:  ptr_t tmp___7 ;
        -: 5638:  int *tmp___8 ;
        -: 5639:  int *tmp___9 ;
        -: 5640:  int *tmp___10 ;
        -: 5641:  int tmp___11 ;
        -: 5642:  ptr_t tmp___12 ;
        -: 5643:  ptr_t tmp___13 ;
        -: 5644:  int tmp___14 ;
        -: 5645:  int tmp___15 ;
        -: 5646:  int *tmp___16 ;
        -: 5647:  int *tmp___17 ;
        -: 5648:  int *tmp___18 ;
        -: 5649:  int tmp___19 ;
        -: 5650:  unsigned int tmp___20 ;
        -: 5651:  unsigned int tmp___21 ;
        -: 5652:  ptr_t tmp___22 ;
        -: 5653:  ptr_t tmp___23 ;
        -: 5654:  ptr_t tmp___24 ;
        -: 5655:
        -: 5656:  {
        -: 5657:  {
        1: 5658:  d->searchflag = searchflag;
        1: 5659:  tmp___0 = xmalloc_1((unsigned long )d->depth * sizeof(int ));
        1: 5660:  nullable = (int *)tmp___0;
        1: 5661:  o_nullable = nullable;
        1: 5662:  tmp___1 = xmalloc_1((unsigned long )d->depth * sizeof(int ));
        1: 5663:  nfirstpos = (int *)tmp___1;
        1: 5664:  o_nfirst = nfirstpos;
        1: 5665:  tmp___2 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
        1: 5666:  firstpos = (position *)tmp___2;
        1: 5667:  o_firstpos = firstpos;
        1: 5668:  firstpos += d->nleaves;
        1: 5669:  tmp___3 = xmalloc_1((unsigned long )d->depth * sizeof(int ));
        1: 5670:  nlastpos = (int *)tmp___3;
        1: 5671:  o_nlast = nlastpos;
        1: 5672:  tmp___4 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
        1: 5673:  lastpos = (position *)tmp___4;
        1: 5674:  o_lastpos = lastpos;
        1: 5675:  lastpos += d->nleaves;
        1: 5676:  tmp___5 = xmalloc_1((unsigned long )d->tindex * sizeof(int ));
        1: 5677:  nalloc = (int *)tmp___5;
        -: 5678:        
        -: 5679:  }
        -: 5680:   
        -: 5681:             
        -: 5682:                                      
        -: 5683:                            
        -: 5684:                       
        -: 5685:     
        -: 5686:                      
        -: 5687:         
        -: 5688:   
        -: 5689:                                
        -: 5690:   
        -: 5691:  {
        1: 5692:  tmp___6 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
        1: 5693:  merged.elems = (position *)tmp___6;
        1: 5694:  tmp___7 = xcalloc((size_t )d->tindex, sizeof(position_set ));
        1: 5695:  d->follows = (position_set *)tmp___7;
        1: 5696:  i = 0;
        -: 5697:  }
        -: 5698:  {
       28: 5699:  while (1) {
        -: 5700:                                         ;
       28: 5701:    if (! (i < d->tindex)) {
        1: 5702:      goto while_break___0;
        -: 5703:    }
        -: 5704:    {
       27: 5705:    if ((int )*(d->tokens + i) == 256) {
    #####: 5706:      goto case_256;
        -: 5707:    }
       27: 5708:    if ((int )*(d->tokens + i) == 265) {
    #####: 5709:      goto case_265;
        -: 5710:    }
       27: 5711:    if ((int )*(d->tokens + i) == 266) {
    #####: 5712:      goto case_265;
        -: 5713:    }
       27: 5714:    if ((int )*(d->tokens + i) == 264) {
    #####: 5715:      goto case_264;
        -: 5716:    }
       27: 5717:    if ((int )*(d->tokens + i) == 268) {
       12: 5718:      goto case_268;
        -: 5719:    }
        -: 5720:                                        
        -: 5721:                    
        -: 5722:     
       15: 5723:    if ((int )*(d->tokens + i) == 270) {
        1: 5724:      goto case_269;
        -: 5725:    }
       14: 5726:    goto switch_default;
        -: 5727:    case_256: /* CIL Label */ 
    #####: 5728:    tmp___8 = nullable;
        -: 5729:                
        -: 5730:                 
    #####: 5731:    tmp___9 = nfirstpos;
    #####: 5732:    nfirstpos ++;
    #####: 5733:    tmp___10 = nlastpos;
    #####: 5734:    nlastpos ++;
    #####: 5735:    tmp___11 = 0;
    #####: 5736:    *tmp___10 = tmp___11;
    #####: 5737:    *tmp___9 = tmp___11;
        -: 5738:                      
        -: 5739:    case_265: /* CIL Label */ 
        -: 5740:                              
    #####: 5741:     tmp.nelem = *(nfirstpos + -1);
    #####: 5742:    tmp.elems = firstpos;
    #####: 5743:    pos = lastpos;
    #####: 5744:    j = 0;
        -: 5745:    {
    #####: 5746:    while (1) {
        -: 5747:                                           ;
    #####: 5748:      if (! (j < *(nlastpos + -1))) {
    #####: 5749:        goto while_break___1;
        -: 5750:      }
        -: 5751:      {
    #####: 5752:      merge(& tmp, d->follows + (pos + j)->strchr, & merged);
        -: 5753:      }
    #####: 5754:      if (merged.nelem - 1 >= *(nalloc + (pos + j)->strchr)) {
        -: 5755:        {
    #####: 5756:        while (1) {
        -: 5757:                                               ;
    #####: 5758:          if (! (merged.nelem - 1 >= *(nalloc + (pos + j)->strchr))) {
    #####: 5759:            goto while_break___2;
        -: 5760:          }
    #####: 5761:          *(nalloc + (pos + j)->strchr) *= 2;
        -: 5762:        }
        -: 5763:        while_break___2: /* CIL Label */ ;
        -: 5764:        }
        -: 5765:        {
    #####: 5766:        tmp___12 = xrealloc_1((ptr_t )(d->follows + (pos + j)->strchr)->elems, (unsigned long )*(nalloc + (pos + j)->strchr) * sizeof(position ));
    #####: 5767:        (d->follows + (pos + j)->strchr)->elems = (position *)tmp___12;
        -: 5768:        }
    #####: 5769:      }
        -: 5770:      {
    #####: 5771:      copy(& merged, d->follows + (pos + j)->strchr);
    #####: 5772:      j ++;
        -: 5773:      }
        -: 5774:    }
        -: 5775:    while_break___1: /* CIL Label */ ;
    #####: 5776:    }
        -: 5777:    case_264: /* CIL Label */ 
    #####: 5778:    if ((int )*(d->tokens + i) != 266) {
    #####: 5779:      *(nullable + -1) = 1;
    #####: 5780:    }
    #####: 5781:    goto switch_break;
        -: 5782:    case_268: /* CIL Label */ 
       12: 5783:    tmp.nelem = *(nfirstpos + -1);
       12: 5784:    tmp.elems = firstpos;
       12: 5785:    pos = lastpos + *(nlastpos + -1);
       12: 5786:    j = 0;
        -: 5787:    {
       25: 5788:    while (1) {
        -: 5789:                                           ;
       25: 5790:      if (! (j < *(nlastpos + -2))) {
       12: 5791:        goto while_break___3;
        -: 5792:      }
        -: 5793:      {
       13: 5794:      merge(& tmp, d->follows + (pos + j)->strchr, & merged);
        -: 5795:      }
       13: 5796:      if (merged.nelem - 1 >= *(nalloc + (pos + j)->strchr)) {
        -: 5797:        {
    #####: 5798:        while (1) {
        -: 5799:                                               ;
    #####: 5800:          if (! (merged.nelem - 1 >= *(nalloc + (pos + j)->strchr))) {
    #####: 5801:            goto while_break___4;
        -: 5802:          }
    #####: 5803:          *(nalloc + (pos + j)->strchr) *= 2;
        -: 5804:        }
        -: 5805:        while_break___4: /* CIL Label */ ;
        -: 5806:        }
        -: 5807:        {
    #####: 5808:        tmp___13 = xrealloc_1((ptr_t )(d->follows + (pos + j)->strchr)->elems, (unsigned long )*(nalloc + (pos + j)->strchr) * sizeof(position ));
    #####: 5809:        (d->follows + (pos + j)->strchr)->elems = (position *)tmp___13;
        -: 5810:        }
    #####: 5811:      }
        -: 5812:      {
       13: 5813:      copy(& merged, d->follows + (pos + j)->strchr);
       13: 5814:      j ++;
        -: 5815:      }
        -: 5816:    }
        -: 5817:    while_break___3: /* CIL Label */ ;
        -: 5818:    }
       12: 5819:    if (*(nullable + -2)) {
    #####: 5820:      *(nfirstpos + -2) += *(nfirstpos + -1);
    #####: 5821:    } else {
       12: 5822:      firstpos += *(nfirstpos + -1);
        -: 5823:    }
       12: 5824:    nfirstpos --;
       12: 5825:    if (*(nullable + -1)) {
    #####: 5826:      *(nlastpos + -2) += *(nlastpos + -1);
    #####: 5827:    } else {
       12: 5828:      pos = lastpos + *(nlastpos + -2);
       12: 5829:      j = *(nlastpos + -1) - 1;
        -: 5830:      {
       24: 5831:      while (1) {
        -: 5832:                                             ;
       24: 5833:        if (! (j >= 0)) {
       12: 5834:          goto while_break___5;
        -: 5835:        }
       12: 5836:        *(pos + j) = *(lastpos + j);
       12: 5837:        j --;
        -: 5838:      }
        -: 5839:      while_break___5: /* CIL Label */ ;
        -: 5840:      }
       12: 5841:      lastpos += *(nlastpos + -2);
       12: 5842:      *(nlastpos + -2) = *(nlastpos + -1);
        -: 5843:    }
       12: 5844:    nlastpos --;
        -: 5845:                           
        -: 5846:                             
        -: 5847:                     
        -: 5848:              
        -: 5849:                     
        -: 5850:       
        -: 5851:           {
       12: 5852:      tmp___14 = 0;
        -: 5853:    }
       12: 5854:    *(nullable + -2) = tmp___14;
       12: 5855:    nullable --;
       12: 5856:    goto switch_break;
        -: 5857:    case_269: /* CIL Label */ 
        -: 5858:                              
        1: 5859:     *(nfirstpos + -2) += *(nfirstpos + -1);
        1: 5860:    nfirstpos --;
        1: 5861:    *(nlastpos + -2) += *(nlastpos + -1);
        1: 5862:    nlastpos --;
        -: 5863:                           
        -: 5864:                   
        -: 5865:                          
        -: 5866:                           
        -: 5867:                   
        -: 5868:            
        -: 5869:                   
        -: 5870:     
        -: 5871:     
        -: 5872:                                
        -: 5873:                
        1: 5874:    goto switch_break;
        -: 5875:    switch_default: /* CIL Label */ 
        -: 5876:    {
       14: 5877:    tmp___16 = nullable;
       14: 5878:    nullable ++;
       14: 5879:    *tmp___16 = (int )*(d->tokens + i) == 257;
       14: 5880:    tmp___17 = nfirstpos;
       14: 5881:    nfirstpos ++;
       14: 5882:    tmp___18 = nlastpos;
       14: 5883:    nlastpos ++;
       14: 5884:    tmp___19 = 1;
       14: 5885:    *tmp___18 = tmp___19;
       14: 5886:    *tmp___17 = tmp___19;
       14: 5887:    firstpos --;
       14: 5888:    lastpos --;
       14: 5889:    tmp___20 = (unsigned int )i;
       14: 5890:    lastpos->strchr = tmp___20;
       14: 5891:    firstpos->strchr = tmp___20;
       14: 5892:    tmp___21 = 255U;
       14: 5893:    lastpos->constraint = tmp___21;
       14: 5894:    firstpos->constraint = tmp___21;
       14: 5895:    *(nalloc + i) = 1;
       14: 5896:    tmp___22 = xmalloc_1((unsigned long )*(nalloc + i) * sizeof(position ));
       14: 5897:    (d->follows + i)->elems = (position *)tmp___22;
       14: 5898:    }
        -: 5899:                      
        -: 5900:    switch_break: /* CIL Label */ ;
        -: 5901:    }
       27: 5902:    i ++;
        -: 5903:  }
        -: 5904:  while_break___0: /* CIL Label */ ;
        -: 5905:  }
        1: 5906:  i = 0;
        -: 5907:  {
       28: 5908:  while (1) {
        -: 5909:                                         ;
       28: 5910:    if (! (i < d->tindex)) {
        1: 5911:      goto while_break___6;
        -: 5912:    }
       27: 5913:    if ((int )*(d->tokens + i) < 1 << 8) {
       13: 5914:      goto _L;
        -: 5915:    } else { //Added block
       14: 5916:    if ((int )*(d->tokens + i) == 257) {
    #####: 5917:      goto _L;
        -: 5918:    } else { //Added block
       14: 5919:    if ((int )*(d->tokens + i) >= 273) {
        -: 5920:      _L: 
        -: 5921:      {
       14: 5922:      copy(d->follows + i, & merged);
       14: 5923:      epsclosure(& merged, d);
        -: 5924:      }
       14: 5925:      if ((d->follows + i)->nelem < merged.nelem) {
        -: 5926:         
        -: 5927:
    #####: 5928:        tmp___23 = xrealloc_1((ptr_t )(d->follows + i)->elems, (unsigned long )merged.nelem * sizeof(position ));
    #####: 5929:        (d->follows + i)->elems = (position *)tmp___23;
        -: 5930:         
        -: 5931:
    #####: 5932:      }
        -: 5933:      {
       14: 5934:      copy(& merged, d->follows + i);
        -: 5935:      }
       14: 5936:    }
        -: 5937:    }
        -: 5938:    }
       27: 5939:    i ++;
        -: 5940:  }
        -: 5941:  while_break___6: /* CIL Label */ ;
        -: 5942:  }
        -: 5943:                   
        1: 5944:  i = 0;
        -: 5945:  {
        3: 5946:  while (1) {
        -: 5947:                                         ;
        3: 5948:    if (! (i < *(nfirstpos + -1))) {
        1: 5949:      goto while_break___7;
        -: 5950:    }
        -: 5951:    {
        2: 5952:    insert(*(firstpos + i), & merged);
        2: 5953:    i ++;
        -: 5954:    }
        -: 5955:  }
        -: 5956:  while_break___7: /* CIL Label */ ;
        -: 5957:  }
        -: 5958:  {
        1: 5959:  epsclosure(& merged, d);
        -: 5960:                    
        1: 5961:  i = 0;
        -: 5962:  }
        -: 5963:  {
        3: 5964:  while (1) {
        -: 5965:                                         ;
        3: 5966:    if (! (i < merged.nelem)) {
        1: 5967:      goto while_break___8;
        -: 5968:    }
        -: 5969:                                                                                                {
        2: 5970:      wants_newline = 1;
        -: 5971:    }
        2: 5972:    i ++;
        -: 5973:  }
        -: 5974:  while_break___8: /* CIL Label */ ;
        -: 5975:  }
        -: 5976:  {
        1: 5977:  d->salloc = 1;
        -: 5978:                
        -: 5979:                                                                       
        -: 5980:                                    
        1: 5981:  state_index(d, & merged, wants_newline, 0);
        -: 5982:                           
        -: 5983:                         
        -: 5984:                           
        -: 5985:                        
        -: 5986:                          
        -: 5987:                       
        -: 5988:                             
        -: 5989:  }
        -: 5990:         
        -: 5991:}
        1: 5992:}
        -: 5993:static charclass letters  ;
        -: 5994:static charclass newline  ;
        -: 5995:static int initialized  ;
       14: 5996:void dfastate(int s , struct dfa *d , int *trans___0 ) 
        -: 5997:{ 
        -: 5998:  position_set grps[1 << 8] ;
        -: 5999:  charclass labels[1 << 8] ;
        -: 6000:  int ngrps ;
        -: 6001:  position pos ;
        -: 6002:  charclass matches ;
        -: 6003:  int matchesf ;
        -: 6004:  charclass intersect ;
        -: 6005:  int intersectf ;
        -: 6006:  charclass leftovers ;
        -: 6007:  int leftoversf ;
        -: 6008:  position_set follows ;
        -: 6009:  position_set tmp ;
        -: 6010:  int state ;
        -: 6011:  int wants_newline ;
        -: 6012:  int state_newline ;
        -: 6013:  int wants_letter ;
        -: 6014:  int state_letter ;
        -: 6015:  int i ;
        -: 6016:  int j ;
        -: 6017:  int k ;
        -: 6018:  unsigned short const   **tmp___0 ;
        -: 6019:  int tmp___1 ;
        -: 6020:  int tmp___2 ;
        -: 6021:  int tmp___3 ;
        -: 6022:  int tmp___4 ;
        -: 6023:  int tmp___5 ;
        -: 6024:  int tmp___6 ;
        -: 6025:  int match ;
        -: 6026:  int label ;
        -: 6027:  int tmp___7 ;
        -: 6028:  int tmp___8 ;
        -: 6029:  ptr_t tmp___9 ;
        -: 6030:  int tmp___10 ;
        -: 6031:  ptr_t tmp___11 ;
        -: 6032:  ptr_t tmp___12 ;
        -: 6033:  ptr_t tmp___13 ;
        -: 6034:  unsigned short const   **tmp___15 ;
        -: 6035:  int tmp___16 ;
        -: 6036:  int c ;
        -: 6037:  unsigned short const   **tmp___17 ;
        -: 6038:
        -: 6039:  {
       14: 6040:  ngrps = 0;
       14: 6041:  if (! initialized) {
        1: 6042:    initialized = 1;
        1: 6043:    i = 0;
        -: 6044:    {
      257: 6045:    while (1) {
        -: 6046:                                       ;
      257: 6047:      if (! (i < 1 << 8)) {
        1: 6048:        goto while_break;
        -: 6049:      }
        -: 6050:      {
      256: 6051:      tmp___0 = __ctype_b_loc();
        -: 6052:      }
      256: 6053:      if ((int const   )*(*tmp___0 + i) & 8) {
        -: 6054:         
        -: 6055:
       62: 6056:        setbit(i, letters);
        -: 6057:         
        -: 6058:
       62: 6059:      } else { //Added block
      194: 6060:      if (i == 95) {
        -: 6061:         
        -: 6062:
        1: 6063:        setbit(i, letters);
        -: 6064:         
        -: 6065:
        1: 6066:      }
        -: 6067:      }
      256: 6068:      i ++;
        -: 6069:    }
        -: 6070:    while_break: /* CIL Label */ ;
        -: 6071:    }
        -: 6072:    {
        1: 6073:    setbit((int )eolbyte_1, newline);
        -: 6074:    }
        1: 6075:  }
        -: 6076:  {
       14: 6077:  zeroset(matches);
       14: 6078:  i = 0;
        -: 6079:  }
        -: 6080:  {
       59: 6081:  while (1) {
        -: 6082:                                         ;
       59: 6083:    if (! (i < (d->states + s)->elems.nelem)) {
       14: 6084:      goto while_break___0;
        -: 6085:    }
       45: 6086:    pos = *((d->states + s)->elems.elems + i);
       45: 6087:    if ((int )*(d->tokens + pos.strchr) >= 0) {
       44: 6088:      if ((int )*(d->tokens + pos.strchr) < 1 << 8) {
        -: 6089:         
        -: 6090:
       42: 6091:        setbit((int )*(d->tokens + pos.strchr), matches);
        -: 6092:         
        -: 6093:
       42: 6094:      } else {
        2: 6095:        goto _L;
        -: 6096:      }
       43: 6097:    } else { //Added block
        -: 6098:    _L: 
        3: 6099:    if ((int )*(d->tokens + pos.strchr) >= 273) {
        -: 6100:       
        -: 6101:
        2: 6102:      copyset(*(d->charclasses + ((int )*(d->tokens + pos.strchr) - 273)), matches);
        -: 6103:       
        -: 6104:
        2: 6105:    } else {
        1: 6106:      goto __Cont;
        -: 6107:    }
        -: 6108:    }
       44: 6109:    if (pos.constraint != 255U) {
    #####: 6110:      if ((d->states + s)->newline) {
    #####: 6111:        tmp___1 = 2;
    #####: 6112:      } else {
    #####: 6113:        tmp___1 = 0;
        -: 6114:      }
    #####: 6115:      if (! (pos.constraint & (unsigned int )(1 << ((tmp___1 + 1) + 4)))) {
        -: 6116:         
        -: 6117:
    #####: 6118:        clrbit((int )eolbyte_1, matches);
        -: 6119:         
        -: 6120:
    #####: 6121:      }
    #####: 6122:      if ((d->states + s)->newline) {
    #####: 6123:        tmp___2 = 2;
    #####: 6124:      } else {
    #####: 6125:        tmp___2 = 0;
        -: 6126:      }
    #####: 6127:      if (! (pos.constraint & (unsigned int )(1 << (tmp___2 + 4)))) {
    #####: 6128:        j = 0;
        -: 6129:        {
    #####: 6130:        while (1) {
        -: 6131:                                               ;
    #####: 6132:          if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 6133:            goto while_break___1;
        -: 6134:          }
    #####: 6135:          matches[j] &= newline[j];
    #####: 6136:          j ++;
        -: 6137:        }
        -: 6138:        while_break___1: /* CIL Label */ ;
        -: 6139:        }
    #####: 6140:      }
    #####: 6141:      if ((d->states + s)->letter) {
    #####: 6142:        tmp___3 = 2;
    #####: 6143:      } else {
    #####: 6144:        tmp___3 = 0;
        -: 6145:      }
    #####: 6146:      if (! (pos.constraint & (unsigned int )(1 << (tmp___3 + 1)))) {
    #####: 6147:        j = 0;
        -: 6148:        {
    #####: 6149:        while (1) {
        -: 6150:                                               ;
    #####: 6151:          if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 6152:            goto while_break___2;
        -: 6153:          }
    #####: 6154:          matches[j] &= ~ letters[j];
    #####: 6155:          j ++;
        -: 6156:        }
        -: 6157:        while_break___2: /* CIL Label */ ;
        -: 6158:        }
    #####: 6159:      }
    #####: 6160:      if ((d->states + s)->letter) {
    #####: 6161:        tmp___4 = 2;
    #####: 6162:      } else {
    #####: 6163:        tmp___4 = 0;
        -: 6164:      }
    #####: 6165:      if (! (pos.constraint & (unsigned int )(1 << tmp___4))) {
    #####: 6166:        j = 0;
        -: 6167:        {
    #####: 6168:        while (1) {
        -: 6169:                                               ;
    #####: 6170:          if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 6171:            goto while_break___3;
        -: 6172:          }
    #####: 6173:          matches[j] &= letters[j];
    #####: 6174:          j ++;
        -: 6175:        }
        -: 6176:        while_break___3: /* CIL Label */ ;
        -: 6177:        }
    #####: 6178:      }
    #####: 6179:      j = 0;
        -: 6180:      {
    #####: 6181:      while (1) {
        -: 6182:                                             ;
    #####: 6183:        if ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int ))) {
    #####: 6184:          if (! (! matches[j])) {
    #####: 6185:            goto while_break___4;
        -: 6186:          }
    #####: 6187:        } else {
    #####: 6188:          goto while_break___4;
        -: 6189:        }
    #####: 6190:        goto __Cont___0;
        -: 6191:        __Cont___0: 
    #####: 6192:        j ++;
        -: 6193:      }
        -: 6194:      while_break___4: /* CIL Label */ ;
        -: 6195:      }
    #####: 6196:      if ((unsigned long )j == (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int ))) {
    #####: 6197:        goto __Cont;
        -: 6198:      }
    #####: 6199:    }
       44: 6200:    j = 0;
        -: 6201:    {
       76: 6202:    while (1) {
        -: 6203:                                           ;
       76: 6204:      if (! (j < ngrps)) {
       34: 6205:        goto while_break___5;
        -: 6206:      }
       42: 6207:      if ((int )*(d->tokens + pos.strchr) >= 0) {
       42: 6208:        if ((int )*(d->tokens + pos.strchr) < 1 << 8) {
        -: 6209:          {
       42: 6210:          tmp___5 = tstbit((int )*(d->tokens + pos.strchr), labels[j]);
        -: 6211:          }
       42: 6212:          if (! tmp___5) {
       32: 6213:            goto __Cont___1;
        -: 6214:          }
       10: 6215:        }
       10: 6216:      }
       10: 6217:      intersectf = 0;
       10: 6218:      k = 0;
        -: 6219:      {
       90: 6220:      while (1) {
        -: 6221:                                             ;
       90: 6222:        if (! ((unsigned long )k < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       10: 6223:          goto while_break___6;
        -: 6224:        }
       80: 6225:        tmp___6 = matches[k] & labels[j][k];
       80: 6226:        intersect[k] = tmp___6;
       80: 6227:        if (tmp___6) {
       10: 6228:          intersectf = 1;
       10: 6229:        }
       80: 6230:        k ++;
        -: 6231:      }
        -: 6232:      while_break___6: /* CIL Label */ ;
        -: 6233:      }
       10: 6234:      if (! intersectf) {
    #####: 6235:        goto __Cont___1;
        -: 6236:      }
       10: 6237:      matchesf = 0;
       10: 6238:      leftoversf = matchesf;
       10: 6239:      k = 0;
        -: 6240:      {
       90: 6241:      while (1) {
        -: 6242:                                             ;
       90: 6243:        if (! ((unsigned long )k < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       10: 6244:          goto while_break___7;
        -: 6245:        }
       80: 6246:        match = matches[k];
       80: 6247:        label = labels[j][k];
       80: 6248:        tmp___7 = ~ match & label;
       80: 6249:        leftovers[k] = tmp___7;
       80: 6250:        if (tmp___7) {
       40: 6251:          leftoversf = 1;
       40: 6252:        }
       80: 6253:        tmp___8 = match & ~ label;
       80: 6254:        matches[k] = tmp___8;
       80: 6255:        if (tmp___8) {
    #####: 6256:          matchesf = 1;
    #####: 6257:        }
       80: 6258:        k ++;
        -: 6259:      }
        -: 6260:      while_break___7: /* CIL Label */ ;
        -: 6261:      }
       10: 6262:      if (leftoversf) {
        -: 6263:         
        -: 6264:
        5: 6265:        copyset(leftovers, labels[ngrps]);
        5: 6266:        copyset(intersect, labels[j]);
        5: 6267:        tmp___9 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
        5: 6268:        grps[ngrps].elems = (position *)tmp___9;
        5: 6269:        copy(& grps[j], & grps[ngrps]);
        5: 6270:        ngrps ++;
        -: 6271:         
        -: 6272:
        5: 6273:      }
       10: 6274:      tmp___10 = grps[j].nelem;
       10: 6275:      (grps[j].nelem) ++;
       10: 6276:      *(grps[j].elems + tmp___10) = pos;
       10: 6277:      if (! matchesf) {
       10: 6278:        goto while_break___5;
        -: 6279:      }
        -: 6280:      __Cont___1: 
       32: 6281:      j ++;
        -: 6282:    }
        -: 6283:    while_break___5: /* CIL Label */ ;
        -: 6284:    }
       78: 6285:    if (j == ngrps) {
        -: 6286:       
        -: 6287:
       34: 6288:      copyset(matches, labels[ngrps]);
       34: 6289:      zeroset(matches);
       34: 6290:      tmp___11 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
       34: 6291:      grps[ngrps].elems = (position *)tmp___11;
       34: 6292:      grps[ngrps].nelem = 1;
       34: 6293:      *(grps[ngrps].elems + 0) = pos;
       34: 6294:      ngrps ++;
        -: 6295:       
        -: 6296:
       34: 6297:    }
        -: 6298:    __Cont: 
       45: 6299:    i ++;
        -: 6300:  }
        -: 6301:  while_break___0: /* CIL Label */ ;
        -: 6302:  }
        -: 6303:  {
       14: 6304:  tmp___12 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
       14: 6305:  follows.elems = (position *)tmp___12;
       14: 6306:  tmp___13 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
       14: 6307:  tmp.elems = (position *)tmp___13;
        -: 6308:  }
       14: 6309:  if (d->searchflag) {
       14: 6310:    wants_newline = 0;
       14: 6311:    wants_letter = 0;
       14: 6312:    i = 0;
        -: 6313:    {
       42: 6314:    while (1) {
        -: 6315:                                           ;
       42: 6316:      if (! (i < (d->states + 0)->elems.nelem)) {
       14: 6317:        goto while_break___8;
        -: 6318:      }
       28: 6319:      if ((((d->states + 0)->elems.elems + i)->constraint & 192U) >> 2 != (((d->states + 0)->elems.elems + i)->constraint & 48U)) {
    #####: 6320:        wants_newline = 1;
    #####: 6321:      }
       28: 6322:      if ((((d->states + 0)->elems.elems + i)->constraint & 12U) >> 2 != (((d->states + 0)->elems.elems + i)->constraint & 3U)) {
    #####: 6323:        wants_letter = 1;
    #####: 6324:      }
       28: 6325:      i ++;
        -: 6326:    }
        -: 6327:    while_break___8: /* CIL Label */ ;
        -: 6328:    }
        -: 6329:    {
       14: 6330:    copy(& (d->states + 0)->elems, & follows);
       14: 6331:    state = state_index(d, & follows, 0, 0);
        -: 6332:    }
       14: 6333:    if (wants_newline) {
        -: 6334:       
        -: 6335:
    #####: 6336:      state_newline = state_index(d, & follows, 1, 0);
        -: 6337:       
        -: 6338:
    #####: 6339:    } else {
       14: 6340:      state_newline = state;
        -: 6341:    }
       14: 6342:    if (wants_letter) {
        -: 6343:       
        -: 6344:
    #####: 6345:      state_letter = state_index(d, & follows, 0, 1);
        -: 6346:       
        -: 6347:
    #####: 6348:    } else {
       14: 6349:      state_letter = state;
        -: 6350:    }
       14: 6351:    i = 0;
        -: 6352:    {
     3598: 6353:    while (1) {
        -: 6354:                                           ;
     3598: 6355:      if (! (i < 1 << 8)) {
       14: 6356:        goto while_break___9;
        -: 6357:      }
        -: 6358:      {
     3584: 6359:      tmp___15 = __ctype_b_loc();
        -: 6360:      }
     3584: 6361:      if ((int const   )*(*tmp___15 + i) & 8) {
      868: 6362:        *(trans___0 + i) = state_letter;
      868: 6363:      } else { //Added block
     2716: 6364:      if (i == 95) {
       14: 6365:        *(trans___0 + i) = state_letter;
       14: 6366:      } else {
     2702: 6367:        *(trans___0 + i) = state;
        -: 6368:      }
        -: 6369:      }
     3584: 6370:      i ++;
        -: 6371:    }
        -: 6372:    while_break___9: /* CIL Label */ ;
        -: 6373:    }
       14: 6374:    *(trans___0 + (int )eolbyte_1) = state_newline;
       14: 6375:  } else {
    #####: 6376:    i = 0;
        -: 6377:    {
    #####: 6378:    while (1) {
        -: 6379:                                            ;
    #####: 6380:      if (! (i < 1 << 8)) {
    #####: 6381:        goto while_break___10;
        -: 6382:      }
    #####: 6383:      *(trans___0 + i) = -1;
    #####: 6384:      i ++;
        -: 6385:    }
        -: 6386:    while_break___10: /* CIL Label */ ;
        -: 6387:    }
        -: 6388:  }
       14: 6389:  i = 0;
        -: 6390:  {
       53: 6391:  while (1) {
        -: 6392:                                          ;
       53: 6393:    if (! (i < ngrps)) {
       14: 6394:      goto while_break___11;
        -: 6395:    }
       39: 6396:    follows.nelem = 0;
       39: 6397:    j = 0;
        -: 6398:    {
       88: 6399:    while (1) {
        -: 6400:                                            ;
       88: 6401:      if (! (j < grps[i].nelem)) {
       39: 6402:        goto while_break___12;
        -: 6403:      }
       49: 6404:      k = 0;
        -: 6405:      {
       98: 6406:      while (1) {
        -: 6407:                                              ;
       98: 6408:        if (! (k < (d->follows + (grps[i].elems + j)->strchr)->nelem)) {
       49: 6409:          goto while_break___13;
        -: 6410:        }
        -: 6411:        {
       49: 6412:        insert(*((d->follows + (grps[i].elems + j)->strchr)->elems + k), & follows);
       49: 6413:        k ++;
        -: 6414:        }
        -: 6415:      }
        -: 6416:      while_break___13: /* CIL Label */ ;
        -: 6417:      }
       49: 6418:      j ++;
        -: 6419:    }
        -: 6420:    while_break___12: /* CIL Label */ ;
        -: 6421:    }
       39: 6422:    if (d->searchflag) {
       39: 6423:      j = 0;
        -: 6424:      {
      117: 6425:      while (1) {
        -: 6426:                                              ;
      117: 6427:        if (! (j < (d->states + 0)->elems.nelem)) {
       39: 6428:          goto while_break___14;
        -: 6429:        }
        -: 6430:        {
       78: 6431:        insert(*((d->states + 0)->elems.elems + j), & follows);
       78: 6432:        j ++;
        -: 6433:        }
        -: 6434:      }
        -: 6435:      while_break___14: /* CIL Label */ ;
        -: 6436:      }
       39: 6437:    }
        -: 6438:    {
       39: 6439:    wants_newline = 0;
       39: 6440:    tmp___16 = tstbit((int )eolbyte_1, labels[i]);
        -: 6441:    }
       39: 6442:    if (tmp___16) {
        2: 6443:      j = 0;
        -: 6444:      {
        8: 6445:      while (1) {
        -: 6446:                                              ;
        8: 6447:        if (! (j < follows.nelem)) {
        2: 6448:          goto while_break___15;
        -: 6449:        }
        6: 6450:        if (((follows.elems + j)->constraint & 192U) >> 2 != ((follows.elems + j)->constraint & 48U)) {
    #####: 6451:          wants_newline = 1;
    #####: 6452:        }
        6: 6453:        j ++;
        -: 6454:      }
        -: 6455:      while_break___15: /* CIL Label */ ;
        -: 6456:      }
        2: 6457:    }
       39: 6458:    wants_letter = 0;
       39: 6459:    j = 0;
        -: 6460:    {
      138: 6461:    while (1) {
        -: 6462:                                            ;
      138: 6463:      if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 6464:        goto while_break___16;
        -: 6465:      }
      138: 6466:      if (labels[i][j] & letters[j]) {
       39: 6467:        goto while_break___16;
        -: 6468:      }
       99: 6469:      j ++;
        -: 6470:    }
        -: 6471:    while_break___16: /* CIL Label */ ;
        -: 6472:    }
       39: 6473:    if ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int ))) {
       39: 6474:      j = 0;
        -: 6475:      {
      165: 6476:      while (1) {
        -: 6477:                                              ;
      165: 6478:        if (! (j < follows.nelem)) {
       39: 6479:          goto while_break___17;
        -: 6480:        }
      126: 6481:        if (((follows.elems + j)->constraint & 12U) >> 2 != ((follows.elems + j)->constraint & 3U)) {
    #####: 6482:          wants_letter = 1;
    #####: 6483:        }
      126: 6484:        j ++;
        -: 6485:      }
        -: 6486:      while_break___17: /* CIL Label */ ;
        -: 6487:      }
       39: 6488:    }
        -: 6489:    {
       39: 6490:    state = state_index(d, & follows, 0, 0);
        -: 6491:    }
       39: 6492:    if (wants_newline) {
        -: 6493:       
        -: 6494:
    #####: 6495:      state_newline = state_index(d, & follows, 1, 0);
        -: 6496:       
        -: 6497:
    #####: 6498:    } else {
       39: 6499:      state_newline = state;
        -: 6500:    }
       39: 6501:    if (wants_letter) {
        -: 6502:       
        -: 6503:
    #####: 6504:      state_letter = state_index(d, & follows, 0, 1);
        -: 6505:       
        -: 6506:
    #####: 6507:    } else {
       39: 6508:      state_letter = state;
        -: 6509:    }
       39: 6510:    j = 0;
        -: 6511:    {
      351: 6512:    while (1) {
        -: 6513:                                            ;
      351: 6514:      if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       39: 6515:        goto while_break___18;
        -: 6516:      }
      312: 6517:      k = 0;
        -: 6518:      {
    10296: 6519:      while (1) {
        -: 6520:                                              ;
    10296: 6521:        if (! ((unsigned long )k < 8UL * sizeof(int ))) {
      312: 6522:          goto while_break___19;
        -: 6523:        }
     9984: 6524:        if (labels[i][j] & (1 << k)) {
      544: 6525:          c = (int )((unsigned long )j * (8UL * sizeof(int )) + (unsigned long )k);
      544: 6526:          if (c == (int )eolbyte_1) {
        2: 6527:            *(trans___0 + c) = state_newline;
        2: 6528:          } else {
        -: 6529:            {
      542: 6530:            tmp___17 = __ctype_b_loc();
        -: 6531:            }
      542: 6532:            if ((int const   )*(*tmp___17 + c) & 8) {
      156: 6533:              *(trans___0 + c) = state_letter;
      156: 6534:            } else { //Added block
      386: 6535:            if (c == 95) {
        2: 6536:              *(trans___0 + c) = state_letter;
        2: 6537:            } else { //Added block
      384: 6538:            if (c < 1 << 8) {
      384: 6539:              *(trans___0 + c) = state;
      384: 6540:            }
        -: 6541:            }
        -: 6542:            }
        -: 6543:          }
      544: 6544:        }
     9984: 6545:        k ++;
        -: 6546:      }
        -: 6547:      while_break___19: /* CIL Label */ ;
        -: 6548:      }
      312: 6549:      j ++;
        -: 6550:    }
        -: 6551:    while_break___18: /* CIL Label */ ;
        -: 6552:    }
       39: 6553:    i ++;
        -: 6554:  }
        -: 6555:  while_break___11: /* CIL Label */ ;
        -: 6556:  }
       14: 6557:  i = 0;
        -: 6558:  {
       53: 6559:  while (1) {
        -: 6560:                                          ;
       53: 6561:    if (! (i < ngrps)) {
       14: 6562:      goto while_break___20;
        -: 6563:    }
        -: 6564:    {
       39: 6565:    free((void *)grps[i].elems);
       39: 6566:    i ++;
        -: 6567:    }
        -: 6568:  }
        -: 6569:  while_break___20: /* CIL Label */ ;
        -: 6570:  }
        -: 6571:  {
       14: 6572:  free((void *)follows.elems);
       14: 6573:  free((void *)tmp.elems);
        -: 6574:  }
       14: 6575:  return;
        -: 6576:}
        -: 6577:}
       14: 6578:static void build_state(int s , struct dfa *d ) 
        -: 6579:{ 
        -: 6580:  int *trans___0 ;
        -: 6581:  int i ;
        -: 6582:  int tmp ;
        -: 6583:  int tmp___0 ;
        -: 6584:  int tmp___1 ;
        -: 6585:  int tmp___2 ;
        -: 6586:  int tmp___3 ;
        -: 6587:  int tmp___4 ;
        -: 6588:  ptr_t tmp___5 ;
        -: 6589:  int oldalloc ;
        -: 6590:  ptr_t tmp___6 ;
        -: 6591:  ptr_t tmp___7 ;
        -: 6592:  ptr_t tmp___8 ;
        -: 6593:  ptr_t tmp___9 ;
        -: 6594:  int tmp___10 ;
        -: 6595:
        -: 6596:  {
       14: 6597:  if (d->trcount >= 1024) {
    #####: 6598:    i = 0;
        -: 6599:    {
    #####: 6600:    while (1) {
        -: 6601:                                       ;
    #####: 6602:      if (! (i < d->tralloc)) {
    #####: 6603:        goto while_break;
        -: 6604:      }
    #####: 6605:      if (*(d->trans + i)) {
        -: 6606:         
        -: 6607:
    #####: 6608:        free((ptr_t )*(d->trans + i));
    #####: 6609:        *(d->trans + i) = (int *)((void *)0);
        -: 6610:         
        -: 6611:
    #####: 6612:      } else { //Added block
    #####: 6613:      if (*(d->fails + i)) {
        -: 6614:         
        -: 6615:
    #####: 6616:        free((ptr_t )*(d->fails + i));
    #####: 6617:        *(d->fails + i) = (int *)((void *)0);
        -: 6618:         
        -: 6619:
    #####: 6620:      }
        -: 6621:      }
    #####: 6622:      i ++;
        -: 6623:    }
        -: 6624:    while_break: /* CIL Label */ ;
        -: 6625:    }
    #####: 6626:    d->trcount = 0;
    #####: 6627:  }
       14: 6628:  (d->trcount) ++;
       14: 6629:  *(d->success + s) = 0;
       14: 6630:  if ((d->states + s)->newline) {
        1: 6631:    tmp = 2;
        1: 6632:  } else {
       13: 6633:    tmp = 0;
        -: 6634:  }
       14: 6635:  if ((int )(d->states + s)->constraint & (1 << ((tmp + 1) + 4))) {
        1: 6636:    if ((d->states + s)->letter) {
    #####: 6637:      tmp___0 = 2;
    #####: 6638:    } else {
        1: 6639:      tmp___0 = 0;
        -: 6640:    }
        1: 6641:    if ((int )(d->states + s)->constraint & (1 << tmp___0)) {
        1: 6642:      *(d->success + s) |= 4;
        1: 6643:    }
        1: 6644:  }
       14: 6645:  if ((d->states + s)->newline) {
        1: 6646:    tmp___1 = 2;
        1: 6647:  } else {
       13: 6648:    tmp___1 = 0;
        -: 6649:  }
       14: 6650:  if ((int )(d->states + s)->constraint & (1 << (tmp___1 + 4))) {
        1: 6651:    if ((d->states + s)->letter) {
    #####: 6652:      tmp___2 = 2;
    #####: 6653:    } else {
        1: 6654:      tmp___2 = 0;
        -: 6655:    }
        1: 6656:    if ((int )(d->states + s)->constraint & (1 << (tmp___2 + 1))) {
        1: 6657:      *(d->success + s) |= 2;
        1: 6658:    }
        1: 6659:  }
       14: 6660:  if ((d->states + s)->newline) {
        1: 6661:    tmp___3 = 2;
        1: 6662:  } else {
       13: 6663:    tmp___3 = 0;
        -: 6664:  }
       14: 6665:  if ((int )(d->states + s)->constraint & (1 << (tmp___3 + 4))) {
        1: 6666:    if ((d->states + s)->letter) {
    #####: 6667:      tmp___4 = 2;
    #####: 6668:    } else {
        1: 6669:      tmp___4 = 0;
        -: 6670:    }
        1: 6671:    if ((int )(d->states + s)->constraint & (1 << tmp___4)) {
        1: 6672:      *(d->success + s) |= 1;
        1: 6673:    }
        1: 6674:  }
        -: 6675:  {
       14: 6676:  tmp___5 = xmalloc_1((unsigned long )(1 << 8) * sizeof(int ));
       14: 6677:  trans___0 = (int *)tmp___5;
       14: 6678:  dfastate(s, d, trans___0);
       14: 6679:  i = 0;
        -: 6680:  }
        -: 6681:  {
     3598: 6682:  while (1) {
        -: 6683:                                         ;
     3598: 6684:    if (! (i < 1 << 8)) {
       14: 6685:      goto while_break___0;
        -: 6686:    }
     3584: 6687:    if (*(trans___0 + i) >= d->tralloc) {
        4: 6688:      oldalloc = d->tralloc;
        -: 6689:      {
        8: 6690:      while (1) {
        -: 6691:                                             ;
        8: 6692:        if (! (*(trans___0 + i) >= d->tralloc)) {
        4: 6693:          goto while_break___1;
        -: 6694:        }
        4: 6695:        d->tralloc *= 2;
        -: 6696:      }
        -: 6697:      while_break___1: /* CIL Label */ ;
        -: 6698:      }
        -: 6699:      {
        4: 6700:      tmp___6 = xrealloc_1((ptr_t )d->realtrans, (unsigned long )(d->tralloc + 1) * sizeof(int *));
        4: 6701:      d->realtrans = (int **)tmp___6;
        4: 6702:      d->trans = d->realtrans + 1;
        4: 6703:      tmp___7 = xrealloc_1((ptr_t )d->fails, (unsigned long )d->tralloc * sizeof(int *));
        4: 6704:      d->fails = (int **)tmp___7;
        4: 6705:      tmp___8 = xrealloc_1((ptr_t )d->success, (unsigned long )d->tralloc * sizeof(int ));
        4: 6706:      d->success = (int *)tmp___8;
        4: 6707:      tmp___9 = xrealloc_1((ptr_t )d->newlines, (unsigned long )d->tralloc * sizeof(int ));
        4: 6708:      d->newlines = (int *)tmp___9;
        -: 6709:      }
        -: 6710:      {
       19: 6711:      while (1) {
        -: 6712:                                             ;
       19: 6713:        if (! (oldalloc < d->tralloc)) {
        4: 6714:          goto while_break___2;
        -: 6715:        }
       15: 6716:        *(d->trans + oldalloc) = (int *)((void *)0);
       15: 6717:        tmp___10 = oldalloc;
       15: 6718:        oldalloc ++;
       15: 6719:        *(d->fails + tmp___10) = (int *)((void *)0);
        -: 6720:      }
        -: 6721:      while_break___2: /* CIL Label */ ;
        -: 6722:      }
        4: 6723:    }
     3584: 6724:    i ++;
        -: 6725:  }
        -: 6726:  while_break___0: /* CIL Label */ ;
        -: 6727:  }
       14: 6728:  *(d->newlines + s) = *(trans___0 + (int )eolbyte_1);
       14: 6729:  *(trans___0 + (int )eolbyte_1) = -1;
       14: 6730:  if ((d->states + s)->constraint) {
        1: 6731:    *(d->fails + s) = trans___0;
        1: 6732:  } else {
       13: 6733:    *(d->trans + s) = trans___0;
        -: 6734:  }
       14: 6735:  return;
        -: 6736:}
        -: 6737:}
        1: 6738:static void build_state_zero(struct dfa *d ) 
        -: 6739:{ 
        -: 6740:  ptr_t tmp ;
        -: 6741:  ptr_t tmp___0 ;
        -: 6742:  ptr_t tmp___1 ;
        -: 6743:  ptr_t tmp___2 ;
        -: 6744:
        -: 6745:  {
        -: 6746:  {
        1: 6747:  d->tralloc = 1;
        1: 6748:  d->trcount = 0;
        1: 6749:  tmp = xcalloc((size_t )(d->tralloc + 1), sizeof(int *));
        1: 6750:  d->realtrans = (int **)tmp;
        1: 6751:  d->trans = d->realtrans + 1;
        1: 6752:  tmp___0 = xcalloc((size_t )d->tralloc, sizeof(int *));
        1: 6753:  d->fails = (int **)tmp___0;
        1: 6754:  tmp___1 = xmalloc_1((unsigned long )d->tralloc * sizeof(int ));
        1: 6755:  d->success = (int *)tmp___1;
        1: 6756:  tmp___2 = xmalloc_1((unsigned long )d->tralloc * sizeof(int ));
        1: 6757:  d->newlines = (int *)tmp___2;
        1: 6758:  build_state(0, d);
        -: 6759:  }
        1: 6760:  return;
        -: 6761:}
        -: 6762:}
        -: 6763:static int sbit[256]  ;
        -: 6764:static int sbit_init  ;
       76: 6765:char *dfaexec(struct dfa *d , char *begin , char *end , int newline___0 , int *count ,
        -: 6766:              int *backref ) 
        -: 6767:{ 
        -: 6768:  register int s ;
        -: 6769:  register int s1 ;
        -: 6770:  register int tmp ;
        -: 6771:  register unsigned char *p ;
        -: 6772:  register int **trans___0 ;
        -: 6773:  register int *t ;
        -: 6774:  register unsigned char eol ;
        -: 6775:  int i ;
        -: 6776:  unsigned short const   **tmp___1 ;
        -: 6777:  unsigned char *tmp___2 ;
        -: 6778:  unsigned char *tmp___3 ;
        -: 6779:  unsigned char *tmp___4 ;
        -: 6780:
        -: 6781:  {
       76: 6782:  eol = eolbyte_1;
       76: 6783:  if (! sbit_init) {
        1: 6784:    sbit_init = 1;
        1: 6785:    i = 0;
        -: 6786:    {
      257: 6787:    while (1) {
        -: 6788:                                       ;
      257: 6789:      if (! (i < 1 << 8)) {
        1: 6790:        goto while_break;
        -: 6791:      }
        -: 6792:      {
      256: 6793:      tmp___1 = __ctype_b_loc();
        -: 6794:      }
      256: 6795:      if ((int const   )*(*tmp___1 + i) & 8) {
       62: 6796:        sbit[i] = 2;
       62: 6797:      } else { //Added block
      194: 6798:      if (i == 95) {
        1: 6799:        sbit[i] = 2;
        1: 6800:      } else {
      193: 6801:        sbit[i] = 1;
        -: 6802:      }
        -: 6803:      }
      256: 6804:      i ++;
        -: 6805:    }
        -: 6806:    while_break: /* CIL Label */ ;
        -: 6807:    }
        1: 6808:    sbit[eol] = 4;
        1: 6809:  }
       76: 6810:  if (! d->tralloc) {
        -: 6811:     
        -: 6812:
        1: 6813:    build_state_zero(d);
        -: 6814:     
        -: 6815:
        1: 6816:  }
       76: 6817:  s1 = 0;
       76: 6818:  s = s1;
       76: 6819:  p = (unsigned char *)begin;
       76: 6820:  trans___0 = d->trans;
       76: 6821:  *end = (char )eol;
        -: 6822:  {
       89: 6823:  while (1) {
        -: 6824:                                         ;
        -: 6825:    {
      606: 6826:    while (1) {
        -: 6827:                                           ;
      606: 6828:      t = *(trans___0 + s);
      606: 6829:      if (! ((unsigned long )t != (unsigned long )((int *)0))) {
       72: 6830:        goto while_break___1;
        -: 6831:      }
      534: 6832:      tmp___2 = p;
      534: 6833:      p ++;
      534: 6834:      s1 = *(t + (int )*tmp___2);
      534: 6835:      t = *(trans___0 + s1);
      534: 6836:      if ((unsigned long )t == (unsigned long )((int *)0)) {
       17: 6837:        tmp = s;
       17: 6838:        s = s1;
       17: 6839:        s1 = tmp;
       17: 6840:        goto while_break___1;
        -: 6841:      }
      517: 6842:      tmp___3 = p;
      517: 6843:      p ++;
      517: 6844:      s = *(t + (int )*tmp___3);
        -: 6845:    }
        -: 6846:    while_break___1: /* CIL Label */ ;
        -: 6847:    }
       89: 6848:    if (s >= 0) {
       89: 6849:      if ((unsigned long )p <= (unsigned long )((unsigned char *)end)) {
       89: 6850:        if (*(d->fails + s)) {
       76: 6851:          if (*(d->success + s) & sbit[*p]) {
       76: 6852:            if (backref) {
       76: 6853:              *backref = (int )(d->states + s)->backref != 0;
       76: 6854:            }
       76: 6855:            return ((char *)p);
        -: 6856:          }
    #####: 6857:          s1 = s;
    #####: 6858:          tmp___4 = p;
    #####: 6859:          p ++;
    #####: 6860:          s = *(*(d->fails + s) + (int )*tmp___4);
    #####: 6861:          goto __Cont;
        -: 6862:        }
       13: 6863:      }
       13: 6864:    }
       13: 6865:    if (count) {
    #####: 6866:      if ((unsigned long )((char *)p) <= (unsigned long )end) {
    #####: 6867:        if ((int )*(p + -1) == (int )eol) {
    #####: 6868:          (*count) ++;
    #####: 6869:        }
    #####: 6870:      }
    #####: 6871:    }
       13: 6872:    if ((unsigned long )((char *)p) > (unsigned long )end) {
    #####: 6873:      return ((char *)((void *)0));
        -: 6874:    }
       13: 6875:    if (s >= 0) {
        -: 6876:      {
       13: 6877:      build_state(s, d);
       13: 6878:      trans___0 = d->trans;
        -: 6879:      }
       13: 6880:      goto __Cont;
        -: 6881:    }
    #####: 6882:    if ((int )*(p + -1) == (int )eol) {
    #####: 6883:      if (newline___0) {
    #####: 6884:        s = *(d->newlines + s1);
    #####: 6885:        goto __Cont;
        -: 6886:      }
    #####: 6887:    }
    #####: 6888:    s = 0;
        -: 6889:    __Cont: ;
        -: 6890:  }
        -: 6891:                                    ;
        -: 6892:  }
        -: 6893:}
       76: 6894:}
        1: 6895:void dfainit(struct dfa *d ) 
        -: 6896:{ 
        -: 6897:  ptr_t tmp ;
        -: 6898:  ptr_t tmp___0 ;
        -: 6899:  int tmp___1 ;
        -: 6900:  int tmp___2 ;
        -: 6901:  int tmp___3 ;
        -: 6902:
        -: 6903:  {
        -: 6904:  {
        1: 6905:  d->calloc = 1;
        1: 6906:  tmp = xmalloc_1((unsigned long )d->calloc * sizeof(charclass ));
        1: 6907:  d->charclasses = (charclass *)tmp;
        1: 6908:  d->cindex = 0;
        1: 6909:  d->talloc = 1;
        1: 6910:  tmp___0 = xmalloc_1((unsigned long )d->talloc * sizeof(token ));
        1: 6911:  d->tokens = (token *)tmp___0;
        1: 6912:  tmp___3 = 0;
        1: 6913:  d->nregexps = tmp___3;
        1: 6914:  tmp___2 = tmp___3;
        1: 6915:  d->nleaves = tmp___2;
        1: 6916:  tmp___1 = tmp___2;
        1: 6917:  d->depth = tmp___1;
        1: 6918:  d->tindex = tmp___1;
        1: 6919:  d->searchflag = 0;
        1: 6920:  d->tralloc = 0;
        1: 6921:  d->musts = (struct dfamust *)0;
        -: 6922:  }
        1: 6923:  return;
        -: 6924:}
        -: 6925:}
        1: 6926:void dfacomp(char *s , size_t len , struct dfa *d , int searchflag ) 
        -: 6927:{ 
        -: 6928:  char *lcopy ;
        -: 6929:  int i ;
        -: 6930:  void *tmp ;
        -: 6931:  char *tmp___0 ;
        -: 6932:  int tmp___1 ;
        -: 6933:  unsigned short const   **tmp___2 ;
        -: 6934:  int tmp___3 ;
        -: 6935:  int tmp___4 ;
        -: 6936:  int tmp___5 ;
        -: 6937:  int tmp___6 ;
        -: 6938:
        -: 6939:  {
        1: 6940:  if (case_fold) {
        -: 6941:    {
    #####: 6942:    tmp = malloc(len);
    #####: 6943:    lcopy = (char *)tmp;
        -: 6944:    }
    #####: 6945:    if (! lcopy) {
        -: 6946:       
        -: 6947:
    #####: 6948:      tmp___0 = gettext("out of memory");
    #####: 6949:      dfaerror((char const   *)tmp___0);
        -: 6950:       
        -: 6951:
    #####: 6952:    }
    #####: 6953:    case_fold = 0;
    #####: 6954:    i = 0;
        -: 6955:    {
    #####: 6956:    while (1) {
        -: 6957:                                       ;
    #####: 6958:      if (! ((size_t )i < len)) {
    #####: 6959:        goto while_break;
        -: 6960:      }
        -: 6961:      {
    #####: 6962:      tmp___2 = __ctype_b_loc();
        -: 6963:      }
    #####: 6964:      if ((int const   )*(*tmp___2 + (int )((unsigned char )*(s + i))) & 256) {
        -: 6965:         
        -: 6966:
    #####: 6967:        tmp___1 = tolower((int )((unsigned char )*(s + i)));
    #####: 6968:        *(lcopy + i) = (char )tmp___1;
        -: 6969:         
        -: 6970:
    #####: 6971:      } else {
    #####: 6972:        *(lcopy + i) = *(s + i);
        -: 6973:      }
    #####: 6974:      i ++;
        -: 6975:    }
        -: 6976:    while_break: /* CIL Label */ ;
        -: 6977:    }
        -: 6978:    {
    #####: 6979:    dfainit(d);
    #####: 6980:    dfaparse(lcopy, len, d);
    #####: 6981:    free((void *)lcopy);
    #####: 6982:    dfamust(d);
    #####: 6983:    tmp___6 = 0;
    #####: 6984:    d->nregexps = tmp___6;
    #####: 6985:    tmp___5 = tmp___6;
    #####: 6986:    d->nleaves = tmp___5;
    #####: 6987:    tmp___4 = tmp___5;
    #####: 6988:    d->depth = tmp___4;
    #####: 6989:    tmp___3 = tmp___4;
    #####: 6990:    d->tindex = tmp___3;
    #####: 6991:    d->cindex = tmp___3;
    #####: 6992:    case_fold = 1;
    #####: 6993:    dfaparse(s, len, d);
    #####: 6994:    dfaanalyze(d, searchflag);
        -: 6995:    }
    #####: 6996:  } else {
        -: 6997:     
        -: 6998:
        1: 6999:    dfainit(d);
        1: 7000:    dfaparse(s, len, d);
        1: 7001:    dfamust(d);
        1: 7002:    dfaanalyze(d, searchflag);
        -: 7003:     
        -: 7004:
        -: 7005:  }
        1: 7006:  return;
        -: 7007:}
        -: 7008:}
        -: 7009:                             
        -: 7010:  
        -: 7011:         
        -: 7012:                      
        -: 7013:                       
        -: 7014:
        -: 7015:   
        -: 7016:   
        -: 7017:                               
        -: 7018:                          
        -: 7019:        
        -: 7020:   
        -: 7021:   
        -: 7022:             
        -: 7023:                                      
        -: 7024:                            
        -: 7025:                       
        -: 7026:     
        -: 7027:     
        -: 7028:                                               
        -: 7029:         
        -: 7030:     
        -: 7031:   
        -: 7032:                                
        -: 7033:   
        -: 7034:   
        -: 7035:                          
        -: 7036:        
        -: 7037:   
        -: 7038:   
        -: 7039:             
        -: 7040:                                          
        -: 7041:                            
        -: 7042:                           
        -: 7043:     
        -: 7044:                                  
        -: 7045:       
        -: 7046:
        -: 7047:                                            
        -: 7048:       
        -: 7049:
        -: 7050:     
        -: 7051:         
        -: 7052:   
        -: 7053:                                    
        -: 7054:   
        -: 7055:   
        -: 7056:                           
        -: 7057:        
        -: 7058:   
        -: 7059:   
        -: 7060:             
        -: 7061:                                          
        -: 7062:                             
        -: 7063:                           
        -: 7064:     
        -: 7065:                          
        -: 7066:       
        -: 7067:
        -: 7068:                                    
        -: 7069:       
        -: 7070:
        -: 7071:                          
        -: 7072:                          
        -: 7073:       
        -: 7074:
        -: 7075:                                    
        -: 7076:       
        -: 7077:
        -: 7078:     
        -: 7079:     
        -: 7080:         
        -: 7081:   
        -: 7082:                                    
        -: 7083:   
        -: 7084:                     
        -: 7085:     
        -: 7086:
        -: 7087:                               
        -: 7088:     
        -: 7089:
        -: 7090:   
        -: 7091:                 
        -: 7092:     
        -: 7093:
        -: 7094:                           
        -: 7095:     
        -: 7096:
        -: 7097:   
        -: 7098:                    
        -: 7099:     
        -: 7100:
        -: 7101:                              
        -: 7102:     
        -: 7103:
        -: 7104:   
        -: 7105:                   
        -: 7106:     
        -: 7107:
        -: 7108:                             
        -: 7109:     
        -: 7110:
        -: 7111:   
        -: 7112:                
        -: 7113:   
        -: 7114:             
        -: 7115:                                          
        -: 7116:               
        -: 7117:                           
        -: 7118:     
        -: 7119:     
        -: 7120:                   
        -: 7121:                           
        -: 7122:                     
        -: 7123:             
        -: 7124:     
        -: 7125:   
        -: 7126:                                    
        -: 7127:   
        -: 7128:         
        -: 7129: 
        -: 7130: 
       80: 7131:static char *icatalloc(char *old , char *new ) 
        -: 7132:{ 
        -: 7133:  char *result ;
        -: 7134:  size_t oldsize ;
        -: 7135:  size_t newsize ;
        -: 7136:  size_t tmp ;
        -: 7137:  void *tmp___0 ;
        -: 7138:  void *tmp___1 ;
        -: 7139:
        -: 7140:  {
       80: 7141:  if ((unsigned long )new == (unsigned long )((void *)0)) {
    #####: 7142:    newsize = (size_t )0;
    #####: 7143:  } else {
        -: 7144:     
        -: 7145:
       80: 7146:    tmp = strlen((char const   *)new);
       80: 7147:    newsize = tmp;
        -: 7148:     
        -: 7149:
        -: 7150:  }
       80: 7151:  if ((unsigned long )old == (unsigned long )((void *)0)) {
       47: 7152:    oldsize = (size_t )0;
       47: 7153:  } else { //Added block
       33: 7154:  if (newsize == 0UL) {
        2: 7155:    return (old);
        -: 7156:  } else {
        -: 7157:     
        -: 7158:
       31: 7159:    oldsize = strlen((char const   *)old);
        -: 7160:     
        -: 7161:
        -: 7162:  }
        -: 7163:  }
       78: 7164:  if ((unsigned long )old == (unsigned long )((void *)0)) {
        -: 7165:     
        -: 7166:
       47: 7167:    tmp___0 = malloc(newsize + 1UL);
       47: 7168:    result = (char *)tmp___0;
        -: 7169:     
        -: 7170:
       47: 7171:  } else {
        -: 7172:     
        -: 7173:
       31: 7174:    tmp___1 = realloc((void *)old, (oldsize + newsize) + 1UL);
       31: 7175:    result = (char *)tmp___1;
        -: 7176:     
        -: 7177:
        -: 7178:  }
       78: 7179:  if ((unsigned long )result != (unsigned long )((void *)0)) {
       78: 7180:    if ((unsigned long )new != (unsigned long )((void *)0)) {
        -: 7181:       
        -: 7182:
       78: 7183:      strcpy((char * __restrict  )(result + oldsize), (char const   * __restrict  )new);
        -: 7184:       
        -: 7185:
       78: 7186:    }
       78: 7187:  }
       78: 7188:  return (result);
        -: 7189:}
       80: 7190:}
       47: 7191:static char *icpyalloc(char *string ) 
        -: 7192:{ 
        -: 7193:  char *tmp ;
        -: 7194:
        -: 7195:  {
        -: 7196:  {
       47: 7197:  tmp = icatalloc((char *)((void *)0), string);
        -: 7198:  }
       47: 7199:  return (tmp);
        -: 7200:}
        -: 7201:}
       73: 7202:static char *istrstr(char *lookin , char *lookfor ) 
        -: 7203:{ 
        -: 7204:  char *cp ;
        -: 7205:  size_t len ;
        -: 7206:  int tmp ;
        -: 7207:
        -: 7208:  {
        -: 7209:  {
       73: 7210:  len = strlen((char const   *)lookfor);
       73: 7211:  cp = lookin;
        -: 7212:  }
        -: 7213:  {
      203: 7214:  while (1) {
        -: 7215:                                     ;
      203: 7216:    if (! ((int )*cp != 0)) {
       52: 7217:      goto while_break;
        -: 7218:    }
        -: 7219:    {
      151: 7220:    tmp = strncmp((char const   *)cp, (char const   *)lookfor, len);
        -: 7221:    }
      151: 7222:    if (tmp == 0) {
       21: 7223:      return (cp);
        -: 7224:    }
      130: 7225:    cp ++;
        -: 7226:  }
        -: 7227:  while_break: /* CIL Label */ ;
        -: 7228:  }
       52: 7229:  return ((char *)((void *)0));
        -: 7230:}
       73: 7231:}
      112: 7232:static void ifree(char *cp ) 
        -: 7233:{ 
        -: 7234:
        -: 7235:
        -: 7236:   
        -: 7237:
      112: 7238:  if ((unsigned long )cp != (unsigned long )((void *)0)) {
        -: 7239:     
        -: 7240:
      112: 7241:    free((void *)cp);
        -: 7242:     
        -: 7243:
      112: 7244:  }
      112: 7245:  return;
        -: 7246: 
        -: 7247:
        -: 7248:}
       44: 7249:static void freelist(char **cpp ) 
        -: 7250:{ 
        -: 7251:  int i ;
        -: 7252:
        -: 7253:  {
       44: 7254:  if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 7255:    return;
        -: 7256:  }
       44: 7257:  i = 0;
        -: 7258:  {
       61: 7259:  while (1) {
        -: 7260:                                     ;
       61: 7261:    if (! ((unsigned long )*(cpp + i) != (unsigned long )((void *)0))) {
       44: 7262:      goto while_break;
        -: 7263:    }
        -: 7264:    {
       17: 7265:    free((void *)*(cpp + i));
       17: 7266:    *(cpp + i) = (char *)((void *)0);
       17: 7267:    i ++;
        -: 7268:    }
        -: 7269:  }
        -: 7270:  while_break: /* CIL Label */ ;
        -: 7271:  }
       44: 7272:  return;
        -: 7273:}
       44: 7274:}
       38: 7275:static char **enlist(char **cpp , char *new , size_t len ) 
        -: 7276:{ 
        -: 7277:  int i ;
        -: 7278:  int j ;
        -: 7279:  char *tmp ;
        -: 7280:  char *tmp___0 ;
        -: 7281:  void *tmp___1 ;
        -: 7282:
        -: 7283:  {
       38: 7284:  if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 7285:    return ((char **)((void *)0));
        -: 7286:  }
        -: 7287:  {
       38: 7288:  new = icpyalloc(new);
        -: 7289:  }
       38: 7290:  if ((unsigned long )new == (unsigned long )((void *)0)) {
        -: 7291:    {
    #####: 7292:    freelist(cpp);
        -: 7293:    }
    #####: 7294:    return ((char **)((void *)0));
        -: 7295:  }
       38: 7296:  *(new + len) = (char )'\000';
       38: 7297:  i = 0;
        -: 7298:  {
       73: 7299:  while (1) {
        -: 7300:                                     ;
       73: 7301:    if (! ((unsigned long )*(cpp + i) != (unsigned long )((void *)0))) {
       35: 7302:      goto while_break;
        -: 7303:    }
        -: 7304:    {
       38: 7305:    tmp = istrstr(*(cpp + i), new);
        -: 7306:    }
       38: 7307:    if ((unsigned long )tmp != (unsigned long )((void *)0)) {
        -: 7308:      {
        3: 7309:      free((void *)new);
        -: 7310:      }
        3: 7311:      return (cpp);
        -: 7312:    }
       35: 7313:    i ++;
        -: 7314:  }
        -: 7315:  while_break: /* CIL Label */ ;
        -: 7316:  }
       35: 7317:  j = 0;
        -: 7318:  {
       61: 7319:  while (1) {
        -: 7320:                                         ;
       61: 7321:    if (! ((unsigned long )*(cpp + j) != (unsigned long )((void *)0))) {
       26: 7322:      goto while_break___0;
        -: 7323:    }
        -: 7324:    {
       35: 7325:    tmp___0 = istrstr(new, *(cpp + j));
        -: 7326:    }
       35: 7327:    if ((unsigned long )tmp___0 == (unsigned long )((void *)0)) {
       17: 7328:      j ++;
       17: 7329:    } else {
        -: 7330:      {
       18: 7331:      free((void *)*(cpp + j));
       18: 7332:      i --;
        -: 7333:      }
       18: 7334:      if (i == j) {
        9: 7335:        goto while_break___0;
        -: 7336:      }
        9: 7337:      *(cpp + j) = *(cpp + i);
        9: 7338:      *(cpp + i) = (char *)((void *)0);
        -: 7339:    }
        -: 7340:  }
        -: 7341:  while_break___0: /* CIL Label */ ;
        -: 7342:  }
        -: 7343:  {
       35: 7344:  tmp___1 = realloc((void *)((char *)cpp), (unsigned long )(i + 2) * sizeof(*cpp));
       35: 7345:  cpp = (char **)tmp___1;
        -: 7346:  }
       35: 7347:  if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 7348:    return ((char **)((void *)0));
        -: 7349:  }
       35: 7350:  *(cpp + i) = new;
       35: 7351:  *(cpp + (i + 1)) = (char *)((void *)0);
       35: 7352:  return (cpp);
        -: 7353:}
       38: 7354:}
        2: 7355:static char **comsubs(char *left , char *right ) 
        -: 7356:{ 
        -: 7357:  char **cpp ;
        -: 7358:  char *lcp ;
        -: 7359:  char *rcp ;
        -: 7360:  size_t i ;
        -: 7361:  size_t len ;
        -: 7362:  void *tmp ;
        -: 7363:
        -: 7364:  {
        2: 7365:  if ((unsigned long )left == (unsigned long )((void *)0)) {
    #####: 7366:    return ((char **)((void *)0));
        -: 7367:  } else { //Added block
        2: 7368:  if ((unsigned long )right == (unsigned long )((void *)0)) {
    #####: 7369:    return ((char **)((void *)0));
        -: 7370:  }
        -: 7371:  }
        -: 7372:  {
        2: 7373:  tmp = malloc(sizeof(*cpp));
        2: 7374:  cpp = (char **)tmp;
        -: 7375:  }
        2: 7376:  if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 7377:    return ((char **)((void *)0));
        -: 7378:  }
        2: 7379:  *(cpp + 0) = (char *)((void *)0);
        2: 7380:  lcp = left;
        -: 7381:  {
       16: 7382:  while (1) {
        -: 7383:                                     ;
       16: 7384:    if (! ((int )*lcp != 0)) {
        2: 7385:      goto while_break;
        -: 7386:    }
        -: 7387:    {
       14: 7388:    len = (size_t )0;
       14: 7389:    rcp = strchr((char const   *)right, (int )*lcp);
        -: 7390:    }
        -: 7391:    {
       19: 7392:    while (1) {
        -: 7393:                                           ;
       19: 7394:      if (! ((unsigned long )rcp != (unsigned long )((void *)0))) {
       14: 7395:        goto while_break___0;
        -: 7396:      }
        5: 7397:      i = (size_t )1;
        -: 7398:      {
       11: 7399:      while (1) {
        -: 7400:                                             ;
       11: 7401:        if ((int )*(lcp + i) != 0) {
        7: 7402:          if (! ((int )*(lcp + i) == (int )*(rcp + i))) {
        1: 7403:            goto while_break___1;
        -: 7404:          }
        6: 7405:        } else {
        4: 7406:          goto while_break___1;
        -: 7407:        }
        6: 7408:        goto __Cont;
        -: 7409:        __Cont: 
        6: 7410:        i ++;
        -: 7411:      }
        -: 7412:      while_break___1: /* CIL Label */ ;
        -: 7413:      }
        5: 7414:      if (i > len) {
        5: 7415:        len = i;
        5: 7416:      }
        -: 7417:      {
        5: 7418:      rcp = strchr((char const   *)(rcp + 1), (int )*lcp);
        -: 7419:      }
        -: 7420:    }
        -: 7421:    while_break___0: /* CIL Label */ ;
        -: 7422:    }
       14: 7423:    if (len == 0UL) {
        9: 7424:      goto __Cont___0;
        -: 7425:    }
        -: 7426:    {
        5: 7427:    cpp = enlist(cpp, lcp, len);
        -: 7428:    }
        5: 7429:    if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 7430:      goto while_break;
        -: 7431:    }
        -: 7432:    __Cont___0: 
       14: 7433:    lcp ++;
        -: 7434:  }
        -: 7435:  while_break: /* CIL Label */ ;
        -: 7436:  }
        2: 7437:  return (cpp);
        -: 7438:}
        2: 7439:}
       13: 7440:static char **addlists(char **old , char **new ) 
        -: 7441:{ 
        -: 7442:  int i ;
        -: 7443:  size_t tmp ;
        -: 7444:
        -: 7445:  {
       13: 7446:  if ((unsigned long )old == (unsigned long )((void *)0)) {
    #####: 7447:    return ((char **)((void *)0));
        -: 7448:  } else { //Added block
       13: 7449:  if ((unsigned long )new == (unsigned long )((void *)0)) {
    #####: 7450:    return ((char **)((void *)0));
        -: 7451:  }
        -: 7452:  }
       13: 7453:  i = 0;
        -: 7454:  {
       25: 7455:  while (1) {
        -: 7456:                                     ;
       25: 7457:    if (! ((unsigned long )*(new + i) != (unsigned long )((void *)0))) {
       13: 7458:      goto while_break;
        -: 7459:    }
        -: 7460:    {
       12: 7461:    tmp = strlen((char const   *)*(new + i));
       12: 7462:    old = enlist(old, *(new + i), tmp);
        -: 7463:    }
       12: 7464:    if ((unsigned long )old == (unsigned long )((void *)0)) {
    #####: 7465:      goto while_break;
        -: 7466:    }
       12: 7467:    i ++;
        -: 7468:  }
        -: 7469:  while_break: /* CIL Label */ ;
        -: 7470:  }
       13: 7471:  return (old);
        -: 7472:}
       13: 7473:}
        1: 7474:static char **inboth(char **left , char **right ) 
        -: 7475:{ 
        -: 7476:  char **both ;
        -: 7477:  char **temp ;
        -: 7478:  int lnum ;
        -: 7479:  int rnum ;
        -: 7480:  void *tmp ;
        -: 7481:
        -: 7482:  {
        1: 7483:  if ((unsigned long )left == (unsigned long )((void *)0)) {
    #####: 7484:    return ((char **)((void *)0));
        -: 7485:  } else { //Added block
        1: 7486:  if ((unsigned long )right == (unsigned long )((void *)0)) {
    #####: 7487:    return ((char **)((void *)0));
        -: 7488:  }
        -: 7489:  }
        -: 7490:  {
        1: 7491:  tmp = malloc(sizeof(*both));
        1: 7492:  both = (char **)tmp;
        -: 7493:  }
        1: 7494:  if ((unsigned long )both == (unsigned long )((void *)0)) {
    #####: 7495:    return ((char **)((void *)0));
        -: 7496:  }
        1: 7497:  *(both + 0) = (char *)((void *)0);
        1: 7498:  lnum = 0;
        -: 7499:  {
        2: 7500:  while (1) {
        -: 7501:                                     ;
        2: 7502:    if (! ((unsigned long )*(left + lnum) != (unsigned long )((void *)0))) {
        1: 7503:      goto while_break;
        -: 7504:    }
        1: 7505:    rnum = 0;
        -: 7506:    {
        3: 7507:    while (1) {
        -: 7508:                                           ;
        3: 7509:      if (! ((unsigned long )*(right + rnum) != (unsigned long )((void *)0))) {
        1: 7510:        goto while_break___0;
        -: 7511:      }
        -: 7512:      {
        2: 7513:      temp = comsubs(*(left + lnum), *(right + rnum));
        -: 7514:      }
        2: 7515:      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        -: 7516:        {
    #####: 7517:        freelist(both);
        -: 7518:        }
    #####: 7519:        return ((char **)((void *)0));
        -: 7520:      }
        -: 7521:      {
        2: 7522:      both = addlists(both, temp);
        2: 7523:      freelist(temp);
        2: 7524:      free((void *)temp);
        -: 7525:      }
        2: 7526:      if ((unsigned long )both == (unsigned long )((void *)0)) {
    #####: 7527:        return ((char **)((void *)0));
        -: 7528:      }
        2: 7529:      rnum ++;
        -: 7530:    }
        -: 7531:    while_break___0: /* CIL Label */ ;
        -: 7532:    }
        1: 7533:    lnum ++;
        -: 7534:  }
        -: 7535:  while_break: /* CIL Label */ ;
        -: 7536:  }
        1: 7537:  return (both);
        -: 7538:}
        1: 7539:}
       13: 7540:static void resetmust(must *mp ) 
        -: 7541:{ 
        -: 7542:  char tmp ;
        -: 7543:  char tmp___0 ;
        -: 7544:
        -: 7545:  {
        -: 7546:  {
       13: 7547:  tmp___0 = (char )'\000';
       13: 7548:  *(mp->is + 0) = tmp___0;
       13: 7549:  tmp = tmp___0;
       13: 7550:  *(mp->right + 0) = tmp;
       13: 7551:  *(mp->left + 0) = tmp;
       13: 7552:  freelist(mp->in);
        -: 7553:  }
       13: 7554:  return;
        -: 7555:}
        -: 7556:}
        -: 7557:static must must0  ;
        -: 7558:static char empty_string[1]  = {      (char )'\000'};
        1: 7559:static void dfamust(struct dfa *dfa___0 ) 
        -: 7560:{ 
        -: 7561:  must *musts ;
        -: 7562:  must *mp ;
        -: 7563:  char *result ;
        -: 7564:  int ri ;
        -: 7565:  int i ;
        -: 7566:  int exact ;
        -: 7567:  token t ;
        -: 7568:  struct dfamust *dm ;
        -: 7569:  void *tmp ;
        -: 7570:  void *tmp___0 ;
        -: 7571:  void *tmp___1 ;
        -: 7572:  void *tmp___2 ;
        -: 7573:  void *tmp___3 ;
        -: 7574:  char tmp___4 ;
        -: 7575:  char tmp___5 ;
        -: 7576:  char **new ;
        -: 7577:  must *lmp ;
        -: 7578:  must *rmp ;
        -: 7579:  int j ;
        -: 7580:  int ln ;
        -: 7581:  int rn ;
        -: 7582:  int n ;
        -: 7583:  int tmp___6 ;
        -: 7584:  size_t tmp___7 ;
        -: 7585:  size_t tmp___8 ;
        -: 7586:  size_t tmp___9 ;
        -: 7587:  size_t tmp___10 ;
        -: 7588:  int tmp___11 ;
        -: 7589:  must *lmp___0 ;
        -: 7590:  must *rmp___0 ;
        -: 7591:  char *tp ;
        -: 7592:  size_t tmp___12 ;
        -: 7593:  char tmp___13 ;
        -: 7594:  char tmp___14 ;
        -: 7595:  char tmp___15 ;
        -: 7596:  char tmp___16 ;
        -: 7597:  void *tmp___17 ;
        -: 7598:  size_t tmp___18 ;
        -: 7599:  void *tmp___19 ;
        -: 7600:  size_t tmp___20 ;
        -: 7601:
        -: 7602:  {
        -: 7603:  {
        1: 7604:  result = empty_string;
        1: 7605:  exact = 0;
        1: 7606:  tmp = malloc((unsigned long )(dfa___0->tindex + 1) * sizeof(*musts));
        1: 7607:  musts = (must *)tmp;
        -: 7608:  }
        1: 7609:  if ((unsigned long )musts == (unsigned long )((void *)0)) {
    #####: 7610:    return;
        -: 7611:  }
        1: 7612:  mp = musts;
        1: 7613:  i = 0;
        -: 7614:  {
       29: 7615:  while (1) {
        -: 7616:                                     ;
       29: 7617:    if (! (i <= dfa___0->tindex)) {
        1: 7618:      goto while_break;
        -: 7619:    }
       28: 7620:    *(mp + i) = must0;
       28: 7621:    i ++;
        -: 7622:  }
        -: 7623:  while_break: /* CIL Label */ ;
        -: 7624:  }
        1: 7625:  i = 0;
        -: 7626:  {
       29: 7627:  while (1) {
        -: 7628:                                         ;
       29: 7629:    if (! (i <= dfa___0->tindex)) {
        1: 7630:      goto while_break___0;
        -: 7631:    }
        -: 7632:    {
       28: 7633:    tmp___0 = malloc(sizeof(*((mp + i)->in)));
       28: 7634:    (mp + i)->in = (char **)tmp___0;
       28: 7635:    tmp___1 = malloc((size_t )2);
       28: 7636:    (mp + i)->left = (char *)tmp___1;
       28: 7637:    tmp___2 = malloc((size_t )2);
       28: 7638:    (mp + i)->right = (char *)tmp___2;
       28: 7639:    tmp___3 = malloc((size_t )2);
       28: 7640:    (mp + i)->is = (char *)tmp___3;
        -: 7641:    }
       28: 7642:    if ((unsigned long )(mp + i)->in == (unsigned long )((void *)0)) {
    #####: 7643:      goto done;
        -: 7644:    } else { //Added block
       28: 7645:    if ((unsigned long )(mp + i)->left == (unsigned long )((void *)0)) {
    #####: 7646:      goto done;
        -: 7647:    } else { //Added block
       28: 7648:    if ((unsigned long )(mp + i)->right == (unsigned long )((void *)0)) {
    #####: 7649:      goto done;
        -: 7650:    } else { //Added block
       28: 7651:    if ((unsigned long )(mp + i)->is == (unsigned long )((void *)0)) {
    #####: 7652:      goto done;
        -: 7653:    }
        -: 7654:    }
        -: 7655:    }
        -: 7656:    }
       28: 7657:    tmp___5 = (char )'\000';
       28: 7658:    *((mp + i)->is + 0) = tmp___5;
       28: 7659:    tmp___4 = tmp___5;
       28: 7660:    *((mp + i)->right + 0) = tmp___4;
       28: 7661:    *((mp + i)->left + 0) = tmp___4;
       28: 7662:    *((mp + i)->in + 0) = (char *)((void *)0);
       28: 7663:    i ++;
        -: 7664:  }
        -: 7665:  while_break___0: /* CIL Label */ ;
        -: 7666:  }
        1: 7667:  ri = 0;
        -: 7668:  {
       26: 7669:  while (1) {
        -: 7670:                                         ;
       26: 7671:    if (! (ri < dfa___0->tindex)) {
    #####: 7672:      goto while_break___1;
        -: 7673:    }
       26: 7674:    t = *(dfa___0->tokens + ri);
        -: 7675:    {
       26: 7676:    if ((int )t == 271) {
    #####: 7677:      goto case_271;
        -: 7678:    }
       26: 7679:    if ((int )t == 272) {
    #####: 7680:      goto case_271;
        -: 7681:    }
       26: 7682:    if ((int )t == 256) {
    #####: 7683:      goto case_256;
        -: 7684:    }
       26: 7685:    if ((int )t == 258) {
    #####: 7686:      goto case_256;
        -: 7687:    }
       26: 7688:    if ((int )t == 259) {
    #####: 7689:      goto case_256;
        -: 7690:    }
       26: 7691:    if ((int )t == 260) {
    #####: 7692:      goto case_256;
        -: 7693:    }
       26: 7694:    if ((int )t == 261) {
    #####: 7695:      goto case_256;
        -: 7696:    }
       26: 7697:    if ((int )t == 262) {
    #####: 7698:      goto case_256;
        -: 7699:    }
       26: 7700:    if ((int )t == 263) {
    #####: 7701:      goto case_256;
        -: 7702:    }
       26: 7703:    if ((int )t == 257) {
    #####: 7704:      goto case_256;
        -: 7705:    }
       26: 7706:    if ((int )t == 265) {
    #####: 7707:      goto case_265;
        -: 7708:    }
       26: 7709:    if ((int )t == 264) {
    #####: 7710:      goto case_265;
        -: 7711:    }
       26: 7712:    if ((int )t == 269) {
    #####: 7713:      goto case_269;
        -: 7714:    }
       26: 7715:    if ((int )t == 270) {
        1: 7716:      goto case_269;
        -: 7717:    }
       25: 7718:    if ((int )t == 266) {
    #####: 7719:      goto case_266;
        -: 7720:    }
       25: 7721:    if ((int )t == -1) {
        1: 7722:      goto case_neg_1;
        -: 7723:    }
       24: 7724:    if ((int )t == 268) {
       11: 7725:      goto case_268;
        -: 7726:    }
       13: 7727:    goto switch_default;
        -: 7728:    case_271: /* CIL Label */ 
        -: 7729:                              
    #####: 7730:     goto done;
        -: 7731:    case_256: /* CIL Label */ 
        -: 7732:                              
        -: 7733:                               
        -: 7734:                               
        -: 7735:                               
        -: 7736:                               
        -: 7737:                               
        -: 7738:                               
        -: 7739:     {
    #####: 7740:    resetmust(mp);
        -: 7741:    }
    #####: 7742:    goto switch_break;
        -: 7743:    case_265: /* CIL Label */ 
        -: 7744:                              
    #####: 7745:     if ((unsigned long )mp <= (unsigned long )musts) {
    #####: 7746:      goto done;
        -: 7747:    }
        -: 7748:    {
    #####: 7749:    mp --;
    #####: 7750:    resetmust(mp);
        -: 7751:    }
    #####: 7752:    goto switch_break;
        -: 7753:    case_269: /* CIL Label */ 
        -: 7754:                              
        1: 7755:     if ((unsigned long )mp < (unsigned long )(musts + 2)) {
    #####: 7756:      goto done;
        -: 7757:    }
        -: 7758:    {
        1: 7759:    mp --;
        1: 7760:    rmp = mp;
        1: 7761:    mp --;
        1: 7762:    lmp = mp;
        1: 7763:    tmp___6 = strcmp((char const   *)lmp->is, (char const   *)rmp->is);
        -: 7764:    }
        1: 7765:    if (tmp___6 != 0) {
        1: 7766:      *(lmp->is + 0) = (char )'\000';
        1: 7767:    }
        1: 7768:    i = 0;
        -: 7769:    {
        1: 7770:    while (1) {
        -: 7771:                                           ;
        1: 7772:      if ((int )*(lmp->left + i) != 0) {
        1: 7773:        if (! ((int )*(lmp->left + i) == (int )*(rmp->left + i))) {
        1: 7774:          goto while_break___2;
        -: 7775:        }
    #####: 7776:      } else {
    #####: 7777:        goto while_break___2;
        -: 7778:      }
    #####: 7779:      i ++;
        -: 7780:    }
        -: 7781:    while_break___2: /* CIL Label */ ;
        -: 7782:    }
        -: 7783:    {
        1: 7784:    *(lmp->left + i) = (char )'\000';
        1: 7785:    tmp___7 = strlen((char const   *)lmp->right);
        1: 7786:    ln = (int )tmp___7;
        1: 7787:    tmp___8 = strlen((char const   *)rmp->right);
        1: 7788:    rn = (int )tmp___8;
        1: 7789:    n = ln;
        -: 7790:    }
        1: 7791:    if (n > rn) {
        1: 7792:      n = rn;
        1: 7793:    }
        1: 7794:    i = 0;
        -: 7795:    {
        5: 7796:    while (1) {
        -: 7797:                                           ;
        5: 7798:      if (! (i < n)) {
        1: 7799:        goto while_break___3;
        -: 7800:      }
        4: 7801:      if ((int )*(lmp->right + ((ln - i) - 1)) != (int )*(rmp->right + ((rn - i) - 1))) {
    #####: 7802:        goto while_break___3;
        -: 7803:      }
        4: 7804:      i ++;
        -: 7805:    }
        -: 7806:    while_break___3: /* CIL Label */ ;
        -: 7807:    }
        1: 7808:    j = 0;
        -: 7809:    {
        5: 7810:    while (1) {
        -: 7811:                                           ;
        5: 7812:      if (! (j < i)) {
        1: 7813:        goto while_break___4;
        -: 7814:      }
        4: 7815:      *(lmp->right + j) = *(lmp->right + ((ln - i) + j));
        4: 7816:      j ++;
        -: 7817:    }
        -: 7818:    while_break___4: /* CIL Label */ ;
        -: 7819:    }
        -: 7820:    {
        1: 7821:    *(lmp->right + j) = (char )'\000';
        1: 7822:    new = inboth(lmp->in, rmp->in);
        -: 7823:    }
        1: 7824:    if ((unsigned long )new == (unsigned long )((void *)0)) {
    #####: 7825:      goto done;
        -: 7826:    }
        -: 7827:    {
        1: 7828:    freelist(lmp->in);
        1: 7829:    free((void *)((char *)lmp->in));
        1: 7830:    lmp->in = new;
        -: 7831:    }
        1: 7832:    goto switch_break;
        -: 7833:    case_266: /* CIL Label */ 
    #####: 7834:    if ((unsigned long )mp <= (unsigned long )musts) {
    #####: 7835:      goto done;
        -: 7836:    }
    #####: 7837:    mp --;
    #####: 7838:    *(mp->is + 0) = (char )'\000';
    #####: 7839:    goto switch_break;
        -: 7840:    case_neg_1: /* CIL Label */ 
        1: 7841:    if ((unsigned long )mp != (unsigned long )(musts + 1)) {
    #####: 7842:      goto done;
        -: 7843:    }
        1: 7844:    i = 0;
        -: 7845:    {
        3: 7846:    while (1) {
        -: 7847:                                           ;
        3: 7848:      if (! ((unsigned long )*((musts + 0)->in + i) != (unsigned long )((void *)0))) {
        1: 7849:        goto while_break___5;
        -: 7850:      }
        -: 7851:      {
        2: 7852:      tmp___9 = strlen((char const   *)*((musts + 0)->in + i));
        2: 7853:      tmp___10 = strlen((char const   *)result);
        -: 7854:      }
        2: 7855:      if (tmp___9 > tmp___10) {
        2: 7856:        result = *((musts + 0)->in + i);
        2: 7857:      }
        2: 7858:      i ++;
        -: 7859:    }
        -: 7860:    while_break___5: /* CIL Label */ ;
        -: 7861:    }
        -: 7862:    {
        1: 7863:    tmp___11 = strcmp((char const   *)result, (char const   *)(musts + 0)->is);
        -: 7864:    }
        1: 7865:    if (tmp___11 == 0) {
    #####: 7866:      exact = 1;
    #####: 7867:    }
        1: 7868:    goto done;
        -: 7869:    case_268: /* CIL Label */ 
       11: 7870:    if ((unsigned long )mp < (unsigned long )(musts + 2)) {
    #####: 7871:      goto done;
        -: 7872:    }
        -: 7873:    {
       11: 7874:    mp --;
       11: 7875:    rmp___0 = mp;
       11: 7876:    mp --;
       11: 7877:    lmp___0 = mp;
       11: 7878:    lmp___0->in = addlists(lmp___0->in, rmp___0->in);
        -: 7879:    }
       11: 7880:    if ((unsigned long )lmp___0->in == (unsigned long )((void *)0)) {
    #####: 7881:      goto done;
        -: 7882:    }
       11: 7883:    if ((int )*(lmp___0->right + 0) != 0) {
       10: 7884:      if ((int )*(rmp___0->left + 0) != 0) {
        -: 7885:        {
        9: 7886:        tp = icpyalloc(lmp___0->right);
        -: 7887:        }
        9: 7888:        if ((unsigned long )tp == (unsigned long )((void *)0)) {
    #####: 7889:          goto done;
        -: 7890:        }
        -: 7891:        {
        9: 7892:        tp = icatalloc(tp, rmp___0->left);
        -: 7893:        }
        9: 7894:        if ((unsigned long )tp == (unsigned long )((void *)0)) {
    #####: 7895:          goto done;
        -: 7896:        }
        -: 7897:        {
        9: 7898:        tmp___12 = strlen((char const   *)tp);
        9: 7899:        lmp___0->in = enlist(lmp___0->in, tp, tmp___12);
        9: 7900:        free((void *)tp);
        -: 7901:        }
        9: 7902:        if ((unsigned long )lmp___0->in == (unsigned long )((void *)0)) {
    #####: 7903:          goto done;
        -: 7904:        }
        9: 7905:      }
       10: 7906:    }
       11: 7907:    if ((int )*(lmp___0->is + 0) != 0) {
        -: 7908:      {
        7: 7909:      lmp___0->left = icatalloc(lmp___0->left, rmp___0->left);
        -: 7910:      }
        7: 7911:      if ((unsigned long )lmp___0->left == (unsigned long )((void *)0)) {
    #####: 7912:        goto done;
        -: 7913:      }
        7: 7914:    }
       11: 7915:    if ((int )*(rmp___0->is + 0) == 0) {
        1: 7916:      *(lmp___0->right + 0) = (char )'\000';
        1: 7917:    }
        -: 7918:    {
       11: 7919:    lmp___0->right = icatalloc(lmp___0->right, rmp___0->right);
        -: 7920:    }
       11: 7921:    if ((unsigned long )lmp___0->right == (unsigned long )((void *)0)) {
    #####: 7922:      goto done;
        -: 7923:    }
       11: 7924:    if ((int )*(lmp___0->is + 0) != 0) {
        7: 7925:      if ((int )*(rmp___0->is + 0) != 0) {
        -: 7926:        {
        6: 7927:        lmp___0->is = icatalloc(lmp___0->is, rmp___0->is);
        -: 7928:        }
        6: 7929:        if ((unsigned long )lmp___0->is == (unsigned long )((void *)0)) {
    #####: 7930:          goto done;
        -: 7931:        }
        6: 7932:      } else {
        1: 7933:        *(lmp___0->is + 0) = (char )'\000';
        -: 7934:      }
        7: 7935:    } else {
        4: 7936:      *(lmp___0->is + 0) = (char )'\000';
        -: 7937:    }
       11: 7938:    goto switch_break;
        -: 7939:    switch_default: /* CIL Label */ 
       13: 7940:    if ((int )t < -1) {
    #####: 7941:      goto done;
        -: 7942:    } else { //Added block
       13: 7943:    if ((int )t == 0) {
    #####: 7944:      goto done;
        -: 7945:    } else { //Added block
       13: 7946:    if ((int )t >= 273) {
        -: 7947:       
        -: 7948:
        1: 7949:      resetmust(mp);
        -: 7950:       
        -: 7951:
        1: 7952:    } else {
        -: 7953:      {
       12: 7954:      resetmust(mp);
       12: 7955:      tmp___14 = (char )t;
       12: 7956:      *(mp->right + 0) = tmp___14;
       12: 7957:      tmp___13 = tmp___14;
       12: 7958:      *(mp->left + 0) = tmp___13;
       12: 7959:      *(mp->is + 0) = tmp___13;
       12: 7960:      tmp___16 = (char )'\000';
       12: 7961:      *(mp->right + 1) = tmp___16;
       12: 7962:      tmp___15 = tmp___16;
       12: 7963:      *(mp->left + 1) = tmp___15;
       12: 7964:      *(mp->is + 1) = tmp___15;
       12: 7965:      mp->in = enlist(mp->in, mp->is, (size_t )1);
        -: 7966:      }
       12: 7967:      if ((unsigned long )mp->in == (unsigned long )((void *)0)) {
    #####: 7968:        goto done;
        -: 7969:      }
        -: 7970:    }
        -: 7971:    }
        -: 7972:    }
       13: 7973:    goto switch_break;
        -: 7974:    switch_break: /* CIL Label */ ;
        -: 7975:    }
       25: 7976:    mp ++;
       25: 7977:    ri ++;
        -: 7978:  }
        -: 7979:  while_break___1: /* CIL Label */ ;
    #####: 7980:  }
        -: 7981:  done: 
        -: 7982:  {
        1: 7983:  tmp___20 = strlen((char const   *)result);
        -: 7984:  }
        1: 7985:  if (tmp___20) {
        -: 7986:     
        -: 7987:
        1: 7988:    tmp___17 = malloc(sizeof(struct dfamust ));
        1: 7989:    dm = (struct dfamust *)tmp___17;
        1: 7990:    dm->exact = exact;
        1: 7991:    tmp___18 = strlen((char const   *)result);
        1: 7992:    tmp___19 = malloc(tmp___18 + 1UL);
        1: 7993:    dm->must = (char *)tmp___19;
        1: 7994:    strcpy((char * __restrict  )dm->must, (char const   * __restrict  )result);
        1: 7995:    dm->next = dfa___0->musts;
        1: 7996:    dfa___0->musts = dm;
        -: 7997:     
        -: 7998:
        1: 7999:  }
        1: 8000:  mp = musts;
        1: 8001:  i = 0;
        -: 8002:  {
       29: 8003:  while (1) {
        -: 8004:                                         ;
       29: 8005:    if (! (i <= dfa___0->tindex)) {
        1: 8006:      goto while_break___6;
        -: 8007:    }
        -: 8008:    {
       28: 8009:    freelist((mp + i)->in);
       28: 8010:    ifree((char *)(mp + i)->in);
       28: 8011:    ifree((mp + i)->left);
       28: 8012:    ifree((mp + i)->right);
       28: 8013:    ifree((mp + i)->is);
       28: 8014:    i ++;
        -: 8015:    }
        -: 8016:  }
        -: 8017:  while_break___6: /* CIL Label */ ;
        -: 8018:  }
        -: 8019:  {
        1: 8020:  free((void *)((char *)mp));
        -: 8021:  }
        1: 8022:  return;
        -: 8023:}
        1: 8024:}
        -: 8025:kwset_t kwsalloc(char *trans___0 ) ;
        -: 8026:char *kwsincr(kwset_t kws , char *text , size_t len ) ;
        -: 8027:char *kwsprep(kwset_t kws ) ;
        -: 8028:char *kwsexec(kwset_t kws , char *text , size_t size , struct kwsmatch *kwsmatch ) ;
        -: 8029:void kwsfree(kwset_t kws ) ;
        -: 8030:extern void _obstack_newchunk(struct obstack * , int  ) ;
        -: 8031:extern int _obstack_begin(struct obstack * , int  , int  , void *(*)(long  ) , void (*)(void * ) ) ;
        -: 8032:extern void obstack_free(struct obstack *obstack , void *block ) ;
        -: 8033:static void enqueue(struct tree *tree , struct trie **last ) ;
        -: 8034:static void treefails(struct tree *tree , struct trie *fail , struct trie *recourse ) ;
        -: 8035:static void treedelta(struct tree *tree , unsigned int depth___0 , unsigned char *delta ) ;
        -: 8036:static int hasevery(struct tree *a , struct tree *b ) ;
        -: 8037:static void treenext(struct tree *tree , struct trie **next ) ;
        -: 8038:static char *bmexec(kwset_t kws , char *text , size_t size ) ;
        -: 8039:static char *cwexec(kwset_t kws , char *text , size_t len , struct kwsmatch *kwsmatch ) ;
        1: 8040:kwset_t kwsalloc(char *trans___0 ) 
        -: 8041:{ 
        -: 8042:  struct kwset *kwset___0 ;
        -: 8043:  char *tmp ;
        -: 8044:  struct obstack *__h ;
        -: 8045:  struct obstack *__o ;
        -: 8046:  int __len ;
        -: 8047:  struct obstack *__o1 ;
        -: 8048:  void *value ;
        -: 8049:
        -: 8050:  {
        -: 8051:  {
        1: 8052:  tmp = xmalloc(sizeof(struct kwset ));
        1: 8053:  kwset___0 = (struct kwset *)tmp;
        -: 8054:  }
        1: 8055:  if (! kwset___0) {
    #####: 8056:    return ((kwset_t )0);
        -: 8057:  }
        -: 8058:  {
        1: 8059:  _obstack_begin(& kwset___0->obstack, 0, 0, (void *(*)(long  ))(& xmalloc), (void (*)(void * ))(& free));
        1: 8060:  kwset___0->words = 0;
        1: 8061:  __h = & kwset___0->obstack;
        1: 8062:  __o = __h;
        1: 8063:  __len = (int )sizeof(struct trie );
        -: 8064:  }
        1: 8065:  if (__o->chunk_limit - __o->next_free < (long )__len) {
        -: 8066:     
        -: 8067:
    #####: 8068:    _obstack_newchunk(__o, __len);
        -: 8069:     
        -: 8070:
    #####: 8071:  }
        1: 8072:  __o->next_free += __len;
        1: 8073:  __o1 = __h;
        1: 8074:  value = (void *)__o1->object_base;
        1: 8075:  if ((unsigned long )__o1->next_free == (unsigned long )value) {
    #####: 8076:    __o1->maybe_empty_object = 1U;
    #####: 8077:  }
        1: 8078:  __o1->next_free = (char *)0 + (((__o1->next_free - (char *)0) + (long )__o1->alignment_mask) & (long )(~ __o1->alignment_mask));
        1: 8079:  if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
    #####: 8080:    __o1->next_free = __o1->chunk_limit;
    #####: 8081:  }
        1: 8082:  __o1->object_base = __o1->next_free;
        1: 8083:  kwset___0->trie = (struct trie *)value;
        1: 8084:  if (! kwset___0->trie) {
        -: 8085:    {
    #####: 8086:    kwsfree((kwset_t )kwset___0);
        -: 8087:    }
    #####: 8088:    return ((kwset_t )0);
        -: 8089:  }
        1: 8090:  (kwset___0->trie)->accepting = 0U;
        1: 8091:  (kwset___0->trie)->links = (struct tree *)0;
        1: 8092:  (kwset___0->trie)->parent = (struct trie *)0;
        1: 8093:  (kwset___0->trie)->next = (struct trie *)0;
        1: 8094:  (kwset___0->trie)->fail = (struct trie *)0;
        1: 8095:  (kwset___0->trie)->depth = 0;
        1: 8096:  (kwset___0->trie)->shift = 0;
        1: 8097:  kwset___0->mind = 2147483647;
        1: 8098:  kwset___0->maxd = -1;
        1: 8099:  kwset___0->target = (char *)0;
        1: 8100:  kwset___0->trans = trans___0;
        1: 8101:  return ((kwset_t )kwset___0);
        -: 8102:}
        1: 8103:}
        1: 8104:char *kwsincr(kwset_t kws , char *text , size_t len ) 
        -: 8105:{ 
        -: 8106:  struct kwset *kwset___0 ;
        -: 8107:  register struct trie *trie ;
        -: 8108:  register unsigned char label ;
        -: 8109:  register struct tree *link___0 ;
        -: 8110:  register int depth___0 ;
        -: 8111:  struct tree *links[12] ;
        -: 8112:  enum __anonenum_dirs_40 dirs[12] ;
        -: 8113:  struct tree *t ;
        -: 8114:  struct tree *r ;
        -: 8115:  struct tree *l ;
        -: 8116:  struct tree *rl ;
        -: 8117:  struct tree *lr ;
        -: 8118:  int tmp ;
        -: 8119:  int tmp___0 ;
        -: 8120:  struct obstack *__h ;
        -: 8121:  struct obstack *__o ;
        -: 8122:  int __len ;
        -: 8123:  struct obstack *__o1 ;
        -: 8124:  void *value ;
        -: 8125:  char *tmp___1 ;
        -: 8126:  struct obstack *__h___0 ;
        -: 8127:  struct obstack *__o___0 ;
        -: 8128:  int __len___0 ;
        -: 8129:  struct obstack *__o1___0 ;
        -: 8130:  void *value___0 ;
        -: 8131:  char *tmp___2 ;
        -: 8132:  char tmp___3 ;
        -: 8133:  char tmp___4 ;
        -: 8134:  size_t tmp___5 ;
        -: 8135:
        -: 8136:  {
        1: 8137:  kwset___0 = (struct kwset *)kws;
        1: 8138:  trie = kwset___0->trie;
        1: 8139:  text += len;
        -: 8140:  {
        5: 8141:  while (1) {
        -: 8142:                                     ;
        5: 8143:    tmp___5 = len;
        5: 8144:    len --;
        5: 8145:    if (! tmp___5) {
        1: 8146:      goto while_break;
        -: 8147:    }
        4: 8148:    if (kwset___0->trans) {
    #####: 8149:      text --;
    #####: 8150:      label = (unsigned char )*(kwset___0->trans + (int )((unsigned char )*text));
    #####: 8151:    } else {
        4: 8152:      text --;
        4: 8153:      label = (unsigned char )*text;
        -: 8154:    }
        4: 8155:    link___0 = trie->links;
        4: 8156:    links[0] = (struct tree *)(& trie->links);
        4: 8157:    dirs[0] = (enum __anonenum_dirs_40 )0;
        4: 8158:    depth___0 = 1;
        -: 8159:    {
        4: 8160:    while (1) {
        -: 8161:                                           ;
        4: 8162:      if (link___0) {
    #####: 8163:        if (! ((int )label != (int )link___0->label)) {
    #####: 8164:          goto while_break___0;
        -: 8165:        }
    #####: 8166:      } else {
        4: 8167:        goto while_break___0;
        -: 8168:      }
    #####: 8169:      links[depth___0] = link___0;
    #####: 8170:      if ((int )label < (int )link___0->label) {
    #####: 8171:        tmp = depth___0;
    #####: 8172:        depth___0 ++;
    #####: 8173:        dirs[tmp] = (enum __anonenum_dirs_40 )0;
    #####: 8174:        link___0 = link___0->llink;
    #####: 8175:      } else {
    #####: 8176:        tmp___0 = depth___0;
    #####: 8177:        depth___0 ++;
    #####: 8178:        dirs[tmp___0] = (enum __anonenum_dirs_40 )1;
    #####: 8179:        link___0 = link___0->rlink;
        -: 8180:      }
        -: 8181:    }
        -: 8182:    while_break___0: /* CIL Label */ ;
        -: 8183:    }
        4: 8184:    if (! link___0) {
        4: 8185:      __h = & kwset___0->obstack;
        4: 8186:      __o = __h;
        4: 8187:      __len = (int )sizeof(struct tree );
        4: 8188:      if (__o->chunk_limit - __o->next_free < (long )__len) {
        -: 8189:         
        -: 8190:
    #####: 8191:        _obstack_newchunk(__o, __len);
        -: 8192:         
        -: 8193:
    #####: 8194:      }
        4: 8195:      __o->next_free += __len;
        4: 8196:      __o1 = __h;
        4: 8197:      value = (void *)__o1->object_base;
        4: 8198:      if ((unsigned long )__o1->next_free == (unsigned long )value) {
    #####: 8199:        __o1->maybe_empty_object = 1U;
    #####: 8200:      }
        4: 8201:      __o1->next_free = (char *)0 + (((__o1->next_free - (char *)0) + (long )__o1->alignment_mask) & (long )(~ __o1->alignment_mask));
        4: 8202:      if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
    #####: 8203:        __o1->next_free = __o1->chunk_limit;
    #####: 8204:      }
        4: 8205:      __o1->object_base = __o1->next_free;
        4: 8206:      link___0 = (struct tree *)value;
        4: 8207:      if (! link___0) {
        -: 8208:        {
    #####: 8209:        tmp___1 = gettext("memory exhausted");
        -: 8210:        }
    #####: 8211:        return (tmp___1);
        -: 8212:      }
        4: 8213:      link___0->llink = (struct tree *)0;
        4: 8214:      link___0->rlink = (struct tree *)0;
        4: 8215:      __h___0 = & kwset___0->obstack;
        4: 8216:      __o___0 = __h___0;
        4: 8217:      __len___0 = (int )sizeof(struct trie );
        4: 8218:      if (__o___0->chunk_limit - __o___0->next_free < (long )__len___0) {
        -: 8219:         
        -: 8220:
    #####: 8221:        _obstack_newchunk(__o___0, __len___0);
        -: 8222:         
        -: 8223:
    #####: 8224:      }
        4: 8225:      __o___0->next_free += __len___0;
        4: 8226:      __o1___0 = __h___0;
        4: 8227:      value___0 = (void *)__o1___0->object_base;
        4: 8228:      if ((unsigned long )__o1___0->next_free == (unsigned long )value___0) {
    #####: 8229:        __o1___0->maybe_empty_object = 1U;
    #####: 8230:      }
        4: 8231:      __o1___0->next_free = (char *)0 + (((__o1___0->next_free - (char *)0) + (long )__o1___0->alignment_mask) & (long )(~ __o1___0->alignment_mask));
        4: 8232:      if (__o1___0->next_free - (char *)__o1___0->chunk > __o1___0->chunk_limit - (char *)__o1___0->chunk) {
    #####: 8233:        __o1___0->next_free = __o1___0->chunk_limit;
    #####: 8234:      }
        4: 8235:      __o1___0->object_base = __o1___0->next_free;
        4: 8236:      link___0->trie = (struct trie *)value___0;
        4: 8237:      if (! link___0->trie) {
        -: 8238:        {
    #####: 8239:        tmp___2 = gettext("memory exhausted");
        -: 8240:        }
    #####: 8241:        return (tmp___2);
        -: 8242:      }
        4: 8243:      (link___0->trie)->accepting = 0U;
        4: 8244:      (link___0->trie)->links = (struct tree *)0;
        4: 8245:      (link___0->trie)->parent = trie;
        4: 8246:      (link___0->trie)->next = (struct trie *)0;
        4: 8247:      (link___0->trie)->fail = (struct trie *)0;
        4: 8248:      (link___0->trie)->depth = trie->depth + 1;
        4: 8249:      (link___0->trie)->shift = 0;
        4: 8250:      link___0->label = label;
        4: 8251:      link___0->balance = (char)0;
        4: 8252:      depth___0 --;
        4: 8253:      if ((unsigned int )dirs[depth___0] == 0U) {
        4: 8254:        (links[depth___0])->llink = link___0;
        4: 8255:      } else {
    #####: 8256:        (links[depth___0])->rlink = link___0;
        -: 8257:      }
        -: 8258:      {
        4: 8259:      while (1) {
        -: 8260:                                             ;
        4: 8261:        if (depth___0) {
    #####: 8262:          if (! (! (links[depth___0])->balance)) {
    #####: 8263:            goto while_break___1;
        -: 8264:          }
    #####: 8265:        } else {
        4: 8266:          goto while_break___1;
        -: 8267:        }
    #####: 8268:        if ((unsigned int )dirs[depth___0] == 0U) {
    #####: 8269:          (links[depth___0])->balance = (char )((int )(links[depth___0])->balance - 1);
    #####: 8270:        } else {
    #####: 8271:          (links[depth___0])->balance = (char )((int )(links[depth___0])->balance + 1);
        -: 8272:        }
    #####: 8273:        depth___0 --;
        -: 8274:      }
        -: 8275:      while_break___1: /* CIL Label */ ;
        -: 8276:      }
        4: 8277:      if (depth___0) {
    #####: 8278:        if ((unsigned int )dirs[depth___0] == 0U) {
    #####: 8279:          (links[depth___0])->balance = (char )((int )(links[depth___0])->balance - 1);
    #####: 8280:          if ((links[depth___0])->balance) {
    #####: 8281:            goto _L;
        -: 8282:          } else {
    #####: 8283:            goto _L___0;
        -: 8284:          }
    #####: 8285:        } else { //Added block
        -: 8286:        _L___0: 
    #####: 8287:        if ((unsigned int )dirs[depth___0] == 1U) {
    #####: 8288:          (links[depth___0])->balance = (char )((int )(links[depth___0])->balance + 1);
    #####: 8289:          if ((links[depth___0])->balance) {
        -: 8290:            _L: 
        -: 8291:            {
    #####: 8292:            if ((int )(links[depth___0])->balance == -2) {
    #####: 8293:              goto case_neg_2;
        -: 8294:            }
    #####: 8295:            if ((int )(links[depth___0])->balance == 2) {
    #####: 8296:              goto case_2;
        -: 8297:            }
    #####: 8298:            goto switch_default___1;
        -: 8299:            case_neg_2: /* CIL Label */ 
        -: 8300:            {
    #####: 8301:            if ((unsigned int )dirs[depth___0 + 1] == 0U) {
    #####: 8302:              goto case_0;
        -: 8303:            }
    #####: 8304:            if ((unsigned int )dirs[depth___0 + 1] == 1U) {
    #####: 8305:              goto case_1;
        -: 8306:            }
    #####: 8307:            goto switch_default;
        -: 8308:            case_0: /* CIL Label */ 
    #####: 8309:            r = links[depth___0];
    #####: 8310:            t = r->llink;
    #####: 8311:            rl = t->rlink;
    #####: 8312:            t->rlink = r;
    #####: 8313:            r->llink = rl;
    #####: 8314:            tmp___3 = (char)0;
    #####: 8315:            r->balance = tmp___3;
    #####: 8316:            t->balance = tmp___3;
    #####: 8317:            goto switch_break___0;
        -: 8318:            case_1: /* CIL Label */ 
    #####: 8319:            r = links[depth___0];
    #####: 8320:            l = r->llink;
    #####: 8321:            t = l->rlink;
    #####: 8322:            rl = t->rlink;
    #####: 8323:            lr = t->llink;
    #####: 8324:            t->llink = l;
    #####: 8325:            l->rlink = lr;
    #####: 8326:            t->rlink = r;
    #####: 8327:            r->llink = rl;
    #####: 8328:            if ((int )t->balance != 1) {
    #####: 8329:              l->balance = (char)0;
    #####: 8330:            } else {
    #####: 8331:              l->balance = (char)-1;
        -: 8332:            }
    #####: 8333:            if ((int )t->balance != -1) {
    #####: 8334:              r->balance = (char)0;
    #####: 8335:            } else {
    #####: 8336:              r->balance = (char)1;
        -: 8337:            }
    #####: 8338:            t->balance = (char)0;
    #####: 8339:            goto switch_break___0;
        -: 8340:            switch_default: /* CIL Label */ 
        -: 8341:            {
    #####: 8342:            abort();
        -: 8343:            }
        -: 8344:            switch_break___0: /* CIL Label */ ;
        -: 8345:            }
    #####: 8346:            goto switch_break;
        -: 8347:            case_2: /* CIL Label */ 
        -: 8348:            {
    #####: 8349:            if ((unsigned int )dirs[depth___0 + 1] == 1U) {
    #####: 8350:              goto case_1___0;
        -: 8351:            }
    #####: 8352:            if ((unsigned int )dirs[depth___0 + 1] == 0U) {
    #####: 8353:              goto case_0___0;
        -: 8354:            }
    #####: 8355:            goto switch_default___0;
        -: 8356:            case_1___0: /* CIL Label */ 
    #####: 8357:            l = links[depth___0];
    #####: 8358:            t = l->rlink;
    #####: 8359:            lr = t->llink;
    #####: 8360:            t->llink = l;
    #####: 8361:            l->rlink = lr;
    #####: 8362:            tmp___4 = (char)0;
    #####: 8363:            l->balance = tmp___4;
    #####: 8364:            t->balance = tmp___4;
    #####: 8365:            goto switch_break___1;
        -: 8366:            case_0___0: /* CIL Label */ 
    #####: 8367:            l = links[depth___0];
    #####: 8368:            r = l->rlink;
    #####: 8369:            t = r->llink;
    #####: 8370:            lr = t->llink;
    #####: 8371:            rl = t->rlink;
    #####: 8372:            t->llink = l;
    #####: 8373:            l->rlink = lr;
    #####: 8374:            t->rlink = r;
    #####: 8375:            r->llink = rl;
    #####: 8376:            if ((int )t->balance != 1) {
    #####: 8377:              l->balance = (char)0;
    #####: 8378:            } else {
    #####: 8379:              l->balance = (char)-1;
        -: 8380:            }
    #####: 8381:            if ((int )t->balance != -1) {
    #####: 8382:              r->balance = (char)0;
    #####: 8383:            } else {
    #####: 8384:              r->balance = (char)1;
        -: 8385:            }
    #####: 8386:            t->balance = (char)0;
    #####: 8387:            goto switch_break___1;
        -: 8388:            switch_default___0: /* CIL Label */ 
        -: 8389:            {
    #####: 8390:            abort();
        -: 8391:            }
        -: 8392:            switch_break___1: /* CIL Label */ ;
        -: 8393:            }
    #####: 8394:            goto switch_break;
        -: 8395:            switch_default___1: /* CIL Label */ 
        -: 8396:            {
    #####: 8397:            abort();
        -: 8398:            }
        -: 8399:            switch_break: /* CIL Label */ ;
        -: 8400:            }
    #####: 8401:            if ((unsigned int )dirs[depth___0 - 1] == 0U) {
    #####: 8402:              (links[depth___0 - 1])->llink = t;
    #####: 8403:            } else {
    #####: 8404:              (links[depth___0 - 1])->rlink = t;
        -: 8405:            }
    #####: 8406:          }
    #####: 8407:        }
        -: 8408:        }
    #####: 8409:      }
        4: 8410:    }
        4: 8411:    trie = link___0->trie;
        -: 8412:  }
        -: 8413:  while_break: /* CIL Label */ ;
        -: 8414:  }
        1: 8415:  if (! trie->accepting) {
        1: 8416:    trie->accepting = (unsigned int )(1 + 2 * kwset___0->words);
        1: 8417:  }
        1: 8418:  (kwset___0->words) ++;
        1: 8419:  if (trie->depth < kwset___0->mind) {
        1: 8420:    kwset___0->mind = trie->depth;
        1: 8421:  }
        1: 8422:  if (trie->depth > kwset___0->maxd) {
        1: 8423:    kwset___0->maxd = trie->depth;
        1: 8424:  }
        1: 8425:  return ((char *)0);
        -: 8426:}
        1: 8427:}
    #####: 8428:static void enqueue(struct tree *tree , struct trie **last ) 
        -: 8429:{ 
        -: 8430:  struct trie *tmp ;
        -: 8431:
        -: 8432:  {
    #####: 8433:  if (! tree) {
    #####: 8434:    return;
        -: 8435:  }
        -: 8436:  {
    #####: 8437:  enqueue(tree->llink, last);
    #####: 8438:  enqueue(tree->rlink, last);
    #####: 8439:  tmp = tree->trie;
    #####: 8440:  (*last)->next = tmp;
    #####: 8441:  *last = tmp;
        -: 8442:  }
    #####: 8443:  return;
        -: 8444:}
    #####: 8445:}
    #####: 8446:static void treefails(struct tree *tree , struct trie *fail , struct trie *recourse ) 
        -: 8447:{ 
        -: 8448:  register struct tree *link___0 ;
        -: 8449:
        -: 8450:  {
    #####: 8451:  if (! tree) {
    #####: 8452:    return;
        -: 8453:  }
        -: 8454:  {
    #####: 8455:  treefails(tree->llink, fail, recourse);
    #####: 8456:  treefails(tree->rlink, fail, recourse);
        -: 8457:  }
        -: 8458:  {
    #####: 8459:  while (1) {
        -: 8460:                                     ;
    #####: 8461:    if (! fail) {
    #####: 8462:      goto while_break;
        -: 8463:    }
    #####: 8464:    link___0 = fail->links;
        -: 8465:    {
    #####: 8466:    while (1) {
        -: 8467:                                           ;
    #####: 8468:      if (link___0) {
    #####: 8469:        if (! ((int )tree->label != (int )link___0->label)) {
    #####: 8470:          goto while_break___0;
        -: 8471:        }
    #####: 8472:      } else {
    #####: 8473:        goto while_break___0;
        -: 8474:      }
    #####: 8475:      if ((int )tree->label < (int )link___0->label) {
    #####: 8476:        link___0 = link___0->llink;
    #####: 8477:      } else {
    #####: 8478:        link___0 = link___0->rlink;
        -: 8479:      }
        -: 8480:    }
        -: 8481:    while_break___0: /* CIL Label */ ;
        -: 8482:    }
    #####: 8483:    if (link___0) {
    #####: 8484:      (tree->trie)->fail = link___0->trie;
    #####: 8485:      return;
        -: 8486:    }
    #####: 8487:    fail = fail->fail;
        -: 8488:  }
        -: 8489:  while_break: /* CIL Label */ ;
        -: 8490:  }
    #####: 8491:  (tree->trie)->fail = recourse;
    #####: 8492:  return;
        -: 8493:}
    #####: 8494:}
    #####: 8495:static void treedelta(struct tree *tree , unsigned int depth___0 , unsigned char *delta ) 
        -: 8496:{ 
        -: 8497:
        -: 8498:
        -: 8499:   
        -: 8500:
    #####: 8501:  if (! tree) {
    #####: 8502:    return;
        -: 8503:  }
        -: 8504:  {
    #####: 8505:  treedelta(tree->llink, depth___0, delta);
    #####: 8506:  treedelta(tree->rlink, depth___0, delta);
        -: 8507:  }
    #####: 8508:  if (depth___0 < (unsigned int )*(delta + (int )tree->label)) {
    #####: 8509:    *(delta + (int )tree->label) = (unsigned char )depth___0;
    #####: 8510:  }
    #####: 8511:  return;
        -: 8512: 
        -: 8513:
    #####: 8514:}
    #####: 8515:static int hasevery(struct tree *a , struct tree *b ) 
        -: 8516:{ 
        -: 8517:  int tmp ;
        -: 8518:  int tmp___0 ;
        -: 8519:
        -: 8520:  {
    #####: 8521:  if (! b) {
    #####: 8522:    return (1);
        -: 8523:  }
        -: 8524:  {
    #####: 8525:  tmp = hasevery(a, b->llink);
        -: 8526:  }
    #####: 8527:  if (! tmp) {
    #####: 8528:    return (0);
        -: 8529:  }
        -: 8530:  {
    #####: 8531:  tmp___0 = hasevery(a, b->rlink);
        -: 8532:  }
    #####: 8533:  if (! tmp___0) {
    #####: 8534:    return (0);
        -: 8535:  }
        -: 8536:  {
    #####: 8537:  while (1) {
        -: 8538:                                     ;
    #####: 8539:    if (a) {
    #####: 8540:      if (! ((int )b->label != (int )a->label)) {
    #####: 8541:        goto while_break;
        -: 8542:      }
    #####: 8543:    } else {
    #####: 8544:      goto while_break;
        -: 8545:    }
    #####: 8546:    if ((int )b->label < (int )a->label) {
    #####: 8547:      a = a->llink;
    #####: 8548:    } else {
    #####: 8549:      a = a->rlink;
        -: 8550:    }
        -: 8551:  }
        -: 8552:  while_break: /* CIL Label */ ;
        -: 8553:  }
    #####: 8554:  return (! (! a));
        -: 8555:}
    #####: 8556:}
    #####: 8557:static void treenext(struct tree *tree , struct trie **next ) 
        -: 8558:{ 
        -: 8559:
        -: 8560:
        -: 8561:   
        -: 8562:
    #####: 8563:  if (! tree) {
    #####: 8564:    return;
        -: 8565:  }
        -: 8566:  {
    #####: 8567:  treenext(tree->llink, next);
    #####: 8568:  treenext(tree->rlink, next);
    #####: 8569:  *(next + (int )tree->label) = tree->trie;
        -: 8570:  }
    #####: 8571:  return;
        -: 8572: 
        -: 8573:
    #####: 8574:}
        1: 8575:char *kwsprep(kwset_t kws ) 
        -: 8576:{ 
        -: 8577:  register struct kwset *kwset___0 ;
        -: 8578:  register int i ;
        -: 8579:  register struct trie *curr ;
        -: 8580:  register struct trie *fail ;
        -: 8581:  register char *trans___0 ;
        -: 8582:  unsigned char delta[256] ;
        -: 8583:  struct trie *last ;
        -: 8584:  struct trie *next[256] ;
        -: 8585:  struct obstack *__h ;
        -: 8586:  struct obstack *__o ;
        -: 8587:  int __len ;
        -: 8588:  struct obstack *__o1 ;
        -: 8589:  void *value ;
        -: 8590:  int tmp ;
        -: 8591:
        -: 8592:  {
        1: 8593:  kwset___0 = (struct kwset *)kws;
        1: 8594:  if (kwset___0->mind < 256) {
        1: 8595:    i = 0;
        -: 8596:    {
      257: 8597:    while (1) {
        -: 8598:                                       ;
      257: 8599:      if (! (i < 256)) {
        1: 8600:        goto while_break;
        -: 8601:      }
      256: 8602:      delta[i] = (unsigned char )kwset___0->mind;
      256: 8603:      i ++;
        -: 8604:    }
        -: 8605:    while_break: /* CIL Label */ ;
        -: 8606:    }
        1: 8607:  } else {
    #####: 8608:    i = 0;
        -: 8609:    {
    #####: 8610:    while (1) {
        -: 8611:                                           ;
    #####: 8612:      if (! (i < 256)) {
    #####: 8613:        goto while_break___0;
        -: 8614:      }
    #####: 8615:      delta[i] = (unsigned char)255;
    #####: 8616:      i ++;
        -: 8617:    }
        -: 8618:    while_break___0: /* CIL Label */ ;
        -: 8619:    }
        -: 8620:  }
        1: 8621:  if (kwset___0->words == 1) {
        1: 8622:    if ((unsigned long )kwset___0->trans == (unsigned long )((char *)0)) {
        1: 8623:      __h = & kwset___0->obstack;
        1: 8624:      __o = __h;
        1: 8625:      __len = kwset___0->mind;
        1: 8626:      if (__o->chunk_limit - __o->next_free < (long )__len) {
        -: 8627:         
        -: 8628:
    #####: 8629:        _obstack_newchunk(__o, __len);
        -: 8630:         
        -: 8631:
    #####: 8632:      }
        1: 8633:      __o->next_free += __len;
        1: 8634:      __o1 = __h;
        1: 8635:      value = (void *)__o1->object_base;
        1: 8636:      if ((unsigned long )__o1->next_free == (unsigned long )value) {
    #####: 8637:        __o1->maybe_empty_object = 1U;
    #####: 8638:      }
        1: 8639:      __o1->next_free = (char *)0 + (((__o1->next_free - (char *)0) + (long )__o1->alignment_mask) & (long )(~ __o1->alignment_mask));
        1: 8640:      if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
    #####: 8641:        __o1->next_free = __o1->chunk_limit;
    #####: 8642:      }
        1: 8643:      __o1->object_base = __o1->next_free;
        1: 8644:      kwset___0->target = (char *)value;
        1: 8645:      i = kwset___0->mind - 1;
        1: 8646:      curr = kwset___0->trie;
        -: 8647:      {
        5: 8648:      while (1) {
        -: 8649:                                             ;
        5: 8650:        if (! (i >= 0)) {
        1: 8651:          goto while_break___1;
        -: 8652:        }
        4: 8653:        *(kwset___0->target + i) = (char )(curr->links)->label;
        4: 8654:        curr = (curr->links)->trie;
        4: 8655:        i --;
        -: 8656:      }
        -: 8657:      while_break___1: /* CIL Label */ ;
        -: 8658:      }
        1: 8659:      i = 0;
        -: 8660:      {
        5: 8661:      while (1) {
        -: 8662:                                             ;
        5: 8663:        if (! (i < kwset___0->mind)) {
        1: 8664:          goto while_break___2;
        -: 8665:        }
        4: 8666:        delta[(unsigned char )*(kwset___0->target + i)] = (unsigned char )(kwset___0->mind - (i + 1));
        4: 8667:        i ++;
        -: 8668:      }
        -: 8669:      while_break___2: /* CIL Label */ ;
        -: 8670:      }
        1: 8671:      kwset___0->mind2 = kwset___0->mind;
        1: 8672:      i = 0;
        -: 8673:      {
        4: 8674:      while (1) {
        -: 8675:                                             ;
        4: 8676:        if (! (i < kwset___0->mind - 1)) {
        1: 8677:          goto while_break___3;
        -: 8678:        }
        3: 8679:        if ((int )*(kwset___0->target + i) == (int )*(kwset___0->target + (kwset___0->mind - 1))) {
    #####: 8680:          kwset___0->mind2 = kwset___0->mind - (i + 1);
    #####: 8681:        }
        3: 8682:        i ++;
        -: 8683:      }
        -: 8684:      while_break___3: /* CIL Label */ ;
        -: 8685:      }
        1: 8686:    } else {
    #####: 8687:      goto _L;
        -: 8688:    }
        1: 8689:  } else {
        -: 8690:    _L: 
    #####: 8691:    last = kwset___0->trie;
    #####: 8692:    curr = last;
        -: 8693:    {
    #####: 8694:    while (1) {
        -: 8695:                                           ;
    #####: 8696:      if (! curr) {
    #####: 8697:        goto while_break___4;
        -: 8698:      }
        -: 8699:      {
    #####: 8700:      enqueue(curr->links, & last);
    #####: 8701:      curr->shift = kwset___0->mind;
    #####: 8702:      curr->maxshift = kwset___0->mind;
    #####: 8703:      treedelta(curr->links, (unsigned int )curr->depth, delta);
    #####: 8704:      treefails(curr->links, curr->fail, kwset___0->trie);
    #####: 8705:      fail = curr->fail;
        -: 8706:      }
        -: 8707:      {
    #####: 8708:      while (1) {
        -: 8709:                                             ;
    #####: 8710:        if (! fail) {
    #####: 8711:          goto while_break___5;
        -: 8712:        }
        -: 8713:        {
    #####: 8714:        tmp = hasevery(fail->links, curr->links);
        -: 8715:        }
    #####: 8716:        if (! tmp) {
    #####: 8717:          if (curr->depth - fail->depth < fail->shift) {
    #####: 8718:            fail->shift = curr->depth - fail->depth;
    #####: 8719:          }
    #####: 8720:        }
    #####: 8721:        if (curr->accepting) {
    #####: 8722:          if (fail->maxshift > curr->depth - fail->depth) {
    #####: 8723:            fail->maxshift = curr->depth - fail->depth;
    #####: 8724:          }
    #####: 8725:        }
    #####: 8726:        fail = fail->fail;
        -: 8727:      }
        -: 8728:      while_break___5: /* CIL Label */ ;
        -: 8729:      }
    #####: 8730:      curr = curr->next;
        -: 8731:    }
        -: 8732:    while_break___4: /* CIL Label */ ;
        -: 8733:    }
    #####: 8734:    curr = (kwset___0->trie)->next;
        -: 8735:    {
    #####: 8736:    while (1) {
        -: 8737:                                           ;
    #####: 8738:      if (! curr) {
    #####: 8739:        goto while_break___6;
        -: 8740:      }
    #####: 8741:      if (curr->maxshift > (curr->parent)->maxshift) {
    #####: 8742:        curr->maxshift = (curr->parent)->maxshift;
    #####: 8743:      }
    #####: 8744:      if (curr->shift > curr->maxshift) {
    #####: 8745:        curr->shift = curr->maxshift;
    #####: 8746:      }
    #####: 8747:      curr = curr->next;
        -: 8748:    }
        -: 8749:    while_break___6: /* CIL Label */ ;
        -: 8750:    }
    #####: 8751:    i = 0;
        -: 8752:    {
    #####: 8753:    while (1) {
        -: 8754:                                           ;
    #####: 8755:      if (! (i < 256)) {
    #####: 8756:        goto while_break___7;
        -: 8757:      }
    #####: 8758:      next[i] = (struct trie *)0;
    #####: 8759:      i ++;
        -: 8760:    }
        -: 8761:    while_break___7: /* CIL Label */ ;
        -: 8762:    }
        -: 8763:    {
    #####: 8764:    treenext((kwset___0->trie)->links, next);
    #####: 8765:    trans___0 = kwset___0->trans;
        -: 8766:    }
    #####: 8767:    if ((unsigned long )trans___0 != (unsigned long )((char *)0)) {
    #####: 8768:      i = 0;
        -: 8769:      {
    #####: 8770:      while (1) {
        -: 8771:                                             ;
    #####: 8772:        if (! (i < 256)) {
    #####: 8773:          goto while_break___8;
        -: 8774:        }
    #####: 8775:        kwset___0->next[i] = next[(unsigned char )*(trans___0 + i)];
    #####: 8776:        i ++;
        -: 8777:      }
        -: 8778:      while_break___8: /* CIL Label */ ;
        -: 8779:      }
    #####: 8780:    } else {
    #####: 8781:      i = 0;
        -: 8782:      {
    #####: 8783:      while (1) {
        -: 8784:                                             ;
    #####: 8785:        if (! (i < 256)) {
    #####: 8786:          goto while_break___9;
        -: 8787:        }
    #####: 8788:        kwset___0->next[i] = next[i];
    #####: 8789:        i ++;
        -: 8790:      }
        -: 8791:      while_break___9: /* CIL Label */ ;
        -: 8792:      }
        -: 8793:    }
        -: 8794:  }
        1: 8795:  trans___0 = kwset___0->trans;
        1: 8796:  if ((unsigned long )trans___0 != (unsigned long )((char *)0)) {
    #####: 8797:    i = 0;
        -: 8798:    {
    #####: 8799:    while (1) {
        -: 8800:                                            ;
    #####: 8801:      if (! (i < 256)) {
    #####: 8802:        goto while_break___10;
        -: 8803:      }
    #####: 8804:      kwset___0->delta[i] = delta[(unsigned char )*(trans___0 + i)];
    #####: 8805:      i ++;
        -: 8806:    }
        -: 8807:    while_break___10: /* CIL Label */ ;
        -: 8808:    }
    #####: 8809:  } else {
        1: 8810:    i = 0;
        -: 8811:    {
      257: 8812:    while (1) {
        -: 8813:                                            ;
      257: 8814:      if (! (i < 256)) {
        1: 8815:        goto while_break___11;
        -: 8816:      }
      256: 8817:      kwset___0->delta[i] = delta[i];
      256: 8818:      i ++;
        -: 8819:    }
        -: 8820:    while_break___11: /* CIL Label */ ;
        -: 8821:    }
        -: 8822:  }
        1: 8823:  return ((char *)0);
        -: 8824:}
        -: 8825:}
       89: 8826:static char *bmexec(kwset_t kws , char *text , size_t size ) 
        -: 8827:{ 
        -: 8828:  struct kwset *kwset___0 ;
        -: 8829:  register unsigned char *d1 ;
        -: 8830:  register char *ep ;
        -: 8831:  register char *sp ;
        -: 8832:  register char *tp ;
        -: 8833:  register int d ;
        -: 8834:  register int gc ;
        -: 8835:  register int i ;
        -: 8836:  register int len ;
        -: 8837:  register int md2 ;
        -: 8838:  void *tmp ;
        -: 8839:
        -: 8840:  {
       89: 8841:  kwset___0 = (struct kwset *)kws;
       89: 8842:  len = kwset___0->mind;
       89: 8843:  if (len == 0) {
    #####: 8844:    return (text);
        -: 8845:  }
       89: 8846:  if ((size_t )len > size) {
        1: 8847:    return ((char *)0);
        -: 8848:  }
       88: 8849:  if (len == 1) {
        -: 8850:    {
    #####: 8851:    tmp = memchr((void const   *)text, (int )*(kwset___0->target + 0), size);
        -: 8852:    }
    #####: 8853:    return ((char *)tmp);
        -: 8854:  }
       88: 8855:  d1 = kwset___0->delta;
       88: 8856:  sp = kwset___0->target + len;
       88: 8857:  gc = (int )((unsigned char )*(sp + -2));
       88: 8858:  md2 = kwset___0->mind2;
       88: 8859:  tp = text + len;
       88: 8860:  if (size > (size_t )(12 * len)) {
       86: 8861:    ep = (text + size) - 11 * len;
        -: 8862:    {
     5600: 8863:    while (1) {
        -: 8864:                                       ;
        -: 8865:      {
    11679: 8866:      while (1) {
        -: 8867:                                             ;
    11679: 8868:        if (! ((unsigned long )tp <= (unsigned long )ep)) {
       11: 8869:          goto while_break___0;
        -: 8870:        }
    11668: 8871:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
    11668: 8872:        tp += d;
    11668: 8873:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
    11668: 8874:        tp += d;
    11668: 8875:        if (d == 0) {
     2244: 8876:          goto found;
        -: 8877:        }
     9424: 8878:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     9424: 8879:        tp += d;
     9424: 8880:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     9424: 8881:        tp += d;
     9424: 8882:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     9424: 8883:        tp += d;
     9424: 8884:        if (d == 0) {
     1835: 8885:          goto found;
        -: 8886:        }
     7589: 8887:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     7589: 8888:        tp += d;
     7589: 8889:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     7589: 8890:        tp += d;
     7589: 8891:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     7589: 8892:        tp += d;
     7589: 8893:        if (d == 0) {
     1510: 8894:          goto found;
        -: 8895:        }
     6079: 8896:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     6079: 8897:        tp += d;
     6079: 8898:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     6079: 8899:        tp += d;
        -: 8900:      }
        -: 8901:      while_break___0: /* CIL Label */ ;
        -: 8902:      }
       11: 8903:      goto while_break;
        -: 8904:      found: 
     5589: 8905:      if ((int )((unsigned char )*(tp + -2)) == gc) {
      680: 8906:        i = 3;
        -: 8907:        {
      830: 8908:        while (1) {
        -: 8909:                                               ;
      830: 8910:          if (i <= len) {
      755: 8911:            if (! ((int )((unsigned char )*(tp + - i)) == (int )((unsigned char )*(sp + - i)))) {
      605: 8912:              goto while_break___1;
        -: 8913:            }
      150: 8914:          } else {
       75: 8915:            goto while_break___1;
        -: 8916:          }
      150: 8917:          i ++;
        -: 8918:        }
        -: 8919:        while_break___1: /* CIL Label */ ;
        -: 8920:        }
      680: 8921:        if (i > len) {
       75: 8922:          return (tp - len);
        -: 8923:        }
      605: 8924:      }
     5514: 8925:      tp += md2;
        -: 8926:    }
        -: 8927:    while_break: /* CIL Label */ ;
        -: 8928:    }
       11: 8929:  }
       13: 8930:  ep = text + size;
       13: 8931:  d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
        -: 8932:  {
       18: 8933:  while (1) {
        -: 8934:    while_continue___2: /* CIL Label */ ;
       94: 8935:    if (! ((long )d <= ep - tp)) {
       12: 8936:      goto while_break___2;
        -: 8937:    }
       82: 8938:    tp += d;
       82: 8939:    d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
       82: 8940:    if (d != 0) {
       76: 8941:      goto while_continue___2;
        -: 8942:    }
        6: 8943:    if ((int )((unsigned char )*(tp + -2)) == gc) {
        4: 8944:      i = 3;
        -: 8945:      {
        6: 8946:      while (1) {
        -: 8947:                                             ;
        6: 8948:        if (i <= len) {
        5: 8949:          if (! ((int )((unsigned char )*(tp + - i)) == (int )((unsigned char )*(sp + - i)))) {
        3: 8950:            goto while_break___3;
        -: 8951:          }
        2: 8952:        } else {
        1: 8953:          goto while_break___3;
        -: 8954:        }
        2: 8955:        i ++;
        -: 8956:      }
        -: 8957:      while_break___3: /* CIL Label */ ;
        -: 8958:      }
        4: 8959:      if (i > len) {
        1: 8960:        return (tp - len);
        -: 8961:      }
        3: 8962:    }
        5: 8963:    d = md2;
        -: 8964:  }
        -: 8965:  while_break___2: /* CIL Label */ ;
        -: 8966:  }
       12: 8967:  return ((char *)0);
        -: 8968:}
       89: 8969:}
    #####: 8970:static char *cwexec(kwset_t kws , char *text , size_t len , struct kwsmatch *kwsmatch ) 
        -: 8971:{ 
        -: 8972:  struct kwset *kwset___0 ;
        -: 8973:  struct trie **next ;
        -: 8974:  struct trie *trie ;
        -: 8975:  struct trie *accept ;
        -: 8976:  char *beg ;
        -: 8977:  char *lim ;
        -: 8978:  char *mch ;
        -: 8979:  char *lmch ;
        -: 8980:  register unsigned char c ;
        -: 8981:  register unsigned char *delta ;
        -: 8982:  register int d ;
        -: 8983:  register char *end ;
        -: 8984:  register char *qlim ;
        -: 8985:  register struct tree *tree ;
        -: 8986:  register char *trans___0 ;
        -: 8987:
        -: 8988:  {
    #####: 8989:  kwset___0 = (struct kwset *)kws;
    #####: 8990:  if (len < (size_t )kwset___0->mind) {
    #####: 8991:    return ((char *)0);
        -: 8992:  }
    #####: 8993:  next = kwset___0->next;
    #####: 8994:  delta = kwset___0->delta;
    #####: 8995:  trans___0 = kwset___0->trans;
    #####: 8996:  lim = text + len;
    #####: 8997:  end = text;
    #####: 8998:  d = kwset___0->mind;
    #####: 8999:  if (d != 0) {
    #####: 9000:    mch = (char *)0;
    #####: 9001:  } else {
    #####: 9002:    mch = text;
    #####: 9003:    accept = kwset___0->trie;
    #####: 9004:    goto match;
        -: 9005:  }
    #####: 9006:  if (len >= (size_t )(4 * kwset___0->mind)) {
    #####: 9007:    qlim = lim - 4 * kwset___0->mind;
    #####: 9008:  } else {
    #####: 9009:    qlim = (char *)0;
        -: 9010:  }
        -: 9011:  {
    #####: 9012:  while (1) {
        -: 9013:    while_continue: /* CIL Label */ ;
    #####: 9014:    if (! (lim - end >= (long )d)) {
    #####: 9015:      goto while_break;
        -: 9016:    }
    #####: 9017:    if (qlim) {
    #####: 9018:      if ((unsigned long )end <= (unsigned long )qlim) {
    #####: 9019:        end += d - 1;
        -: 9020:        {
    #####: 9021:        while (1) {
        -: 9022:                                               ;
    #####: 9023:          c = (unsigned char )*end;
    #####: 9024:          d = (int )*(delta + (int )c);
    #####: 9025:          if (d) {
    #####: 9026:            if (! ((unsigned long )end < (unsigned long )qlim)) {
    #####: 9027:              goto while_break___0;
        -: 9028:            }
    #####: 9029:          } else {
    #####: 9030:            goto while_break___0;
        -: 9031:          }
    #####: 9032:          end += d;
    #####: 9033:          end += (int )*(delta + (int )((unsigned char )*end));
    #####: 9034:          end += (int )*(delta + (int )((unsigned char )*end));
        -: 9035:        }
        -: 9036:        while_break___0: /* CIL Label */ ;
        -: 9037:        }
    #####: 9038:        end ++;
    #####: 9039:      } else {
    #####: 9040:        end += d;
    #####: 9041:        c = (unsigned char )*(end + -1);
    #####: 9042:        d = (int )*(delta + (int )c);
        -: 9043:      }
    #####: 9044:    } else {
    #####: 9045:      end += d;
    #####: 9046:      c = (unsigned char )*(end + -1);
    #####: 9047:      d = (int )*(delta + (int )c);
        -: 9048:    }
    #####: 9049:    if (d) {
    #####: 9050:      goto while_continue;
        -: 9051:    }
    #####: 9052:    beg = end - 1;
    #####: 9053:    trie = *(next + (int )c);
    #####: 9054:    if (trie->accepting) {
    #####: 9055:      mch = beg;
    #####: 9056:      accept = trie;
    #####: 9057:    }
    #####: 9058:    d = trie->shift;
        -: 9059:    {
    #####: 9060:    while (1) {
        -: 9061:                                           ;
    #####: 9062:      if (! ((unsigned long )beg > (unsigned long )text)) {
    #####: 9063:        goto while_break___1;
        -: 9064:      }
    #####: 9065:      if (trans___0) {
    #####: 9066:        beg --;
    #####: 9067:        c = (unsigned char )*(trans___0 + (int )((unsigned char )*beg));
    #####: 9068:      } else {
    #####: 9069:        beg --;
    #####: 9070:        c = (unsigned char )*beg;
        -: 9071:      }
    #####: 9072:      tree = trie->links;
        -: 9073:      {
    #####: 9074:      while (1) {
        -: 9075:                                             ;
    #####: 9076:        if (tree) {
    #####: 9077:          if (! ((int )c != (int )tree->label)) {
    #####: 9078:            goto while_break___2;
        -: 9079:          }
    #####: 9080:        } else {
    #####: 9081:          goto while_break___2;
        -: 9082:        }
    #####: 9083:        if ((int )c < (int )tree->label) {
    #####: 9084:          tree = tree->llink;
    #####: 9085:        } else {
    #####: 9086:          tree = tree->rlink;
        -: 9087:        }
        -: 9088:      }
        -: 9089:      while_break___2: /* CIL Label */ ;
        -: 9090:      }
    #####: 9091:      if (tree) {
    #####: 9092:        trie = tree->trie;
    #####: 9093:        if (trie->accepting) {
    #####: 9094:          mch = beg;
    #####: 9095:          accept = trie;
    #####: 9096:        }
    #####: 9097:      } else {
    #####: 9098:        goto while_break___1;
        -: 9099:      }
    #####: 9100:      d = trie->shift;
        -: 9101:    }
        -: 9102:    while_break___1: /* CIL Label */ ;
        -: 9103:    }
    #####: 9104:    if (mch) {
    #####: 9105:      goto match;
        -: 9106:    }
        -: 9107:  }
        -: 9108:  while_break: /* CIL Label */ ;
        -: 9109:  }
    #####: 9110:  return ((char *)0);
        -: 9111:  match: 
    #####: 9112:  if (lim - mch > (long )kwset___0->maxd) {
    #####: 9113:    lim = mch + kwset___0->maxd;
    #####: 9114:  }
    #####: 9115:  lmch = (char *)0;
    #####: 9116:  d = 1;
        -: 9117:  {
    #####: 9118:  while (1) {
        -: 9119:    while_continue___3: /* CIL Label */ ;
    #####: 9120:    if (! (lim - end >= (long )d)) {
    #####: 9121:      goto while_break___3;
        -: 9122:    }
    #####: 9123:    end += d;
    #####: 9124:    c = (unsigned char )*(end + -1);
    #####: 9125:    d = (int )*(delta + (int )c);
    #####: 9126:    if (d != 0) {
    #####: 9127:      goto while_continue___3;
        -: 9128:    }
    #####: 9129:    beg = end - 1;
    #####: 9130:    trie = *(next + (int )c);
    #####: 9131:    if (! trie) {
    #####: 9132:      d = 1;
    #####: 9133:      goto while_continue___3;
        -: 9134:    }
    #####: 9135:    if (trie->accepting) {
    #####: 9136:      if ((unsigned long )beg <= (unsigned long )mch) {
    #####: 9137:        lmch = beg;
    #####: 9138:        accept = trie;
    #####: 9139:      }
    #####: 9140:    }
    #####: 9141:    d = trie->shift;
        -: 9142:    {
    #####: 9143:    while (1) {
        -: 9144:                                           ;
    #####: 9145:      if (! ((unsigned long )beg > (unsigned long )text)) {
    #####: 9146:        goto while_break___4;
        -: 9147:      }
    #####: 9148:      if (trans___0) {
    #####: 9149:        beg --;
    #####: 9150:        c = (unsigned char )*(trans___0 + (int )((unsigned char )*beg));
    #####: 9151:      } else {
    #####: 9152:        beg --;
    #####: 9153:        c = (unsigned char )*beg;
        -: 9154:      }
    #####: 9155:      tree = trie->links;
        -: 9156:      {
    #####: 9157:      while (1) {
        -: 9158:                                             ;
    #####: 9159:        if (tree) {
    #####: 9160:          if (! ((int )c != (int )tree->label)) {
    #####: 9161:            goto while_break___5;
        -: 9162:          }
    #####: 9163:        } else {
    #####: 9164:          goto while_break___5;
        -: 9165:        }
    #####: 9166:        if ((int )c < (int )tree->label) {
    #####: 9167:          tree = tree->llink;
    #####: 9168:        } else {
    #####: 9169:          tree = tree->rlink;
        -: 9170:        }
        -: 9171:      }
        -: 9172:      while_break___5: /* CIL Label */ ;
        -: 9173:      }
    #####: 9174:      if (tree) {
    #####: 9175:        trie = tree->trie;
    #####: 9176:        if (trie->accepting) {
    #####: 9177:          if ((unsigned long )beg <= (unsigned long )mch) {
    #####: 9178:            lmch = beg;
    #####: 9179:            accept = trie;
    #####: 9180:          }
    #####: 9181:        }
    #####: 9182:      } else {
    #####: 9183:        goto while_break___4;
        -: 9184:      }
    #####: 9185:      d = trie->shift;
        -: 9186:    }
        -: 9187:    while_break___4: /* CIL Label */ ;
        -: 9188:    }
    #####: 9189:    if (lmch) {
    #####: 9190:      mch = lmch;
    #####: 9191:      goto match;
        -: 9192:    }
    #####: 9193:    if (! d) {
    #####: 9194:      d = 1;
    #####: 9195:    }
        -: 9196:  }
        -: 9197:  while_break___3: /* CIL Label */ ;
        -: 9198:  }
    #####: 9199:  if (kwsmatch) {
    #####: 9200:    kwsmatch->strchr = (int )(accept->accepting / 2U);
    #####: 9201:    kwsmatch->beg[0] = mch;
    #####: 9202:    kwsmatch->size[0] = (size_t )accept->depth;
    #####: 9203:  }
    #####: 9204:  return (mch);
        -: 9205:}
    #####: 9206:}
       89: 9207:char *kwsexec(kwset_t kws , char *text , size_t size , struct kwsmatch *kwsmatch ) 
        -: 9208:{ 
        -: 9209:  struct kwset *kwset___0 ;
        -: 9210:  char *ret ;
        -: 9211:  char *tmp ;
        -: 9212:
        -: 9213:  {
       89: 9214:  kwset___0 = (struct kwset *)kws;
       89: 9215:  if (kwset___0->words == 1) {
       89: 9216:    if ((unsigned long )kwset___0->trans == (unsigned long )((char *)0)) {
        -: 9217:      {
       89: 9218:      ret = bmexec(kws, text, size);
        -: 9219:      }
       89: 9220:      if ((unsigned long )kwsmatch != (unsigned long )((struct kwsmatch *)0)) {
       89: 9221:        if ((unsigned long )ret != (unsigned long )((char *)0)) {
       76: 9222:          kwsmatch->strchr = 0;
       76: 9223:          kwsmatch->beg[0] = ret;
       76: 9224:          kwsmatch->size[0] = (size_t )kwset___0->mind;
       76: 9225:        }
       89: 9226:      }
       89: 9227:      return (ret);
        -: 9228:    } else {
        -: 9229:      {
    #####: 9230:      tmp = cwexec(kws, text, size, kwsmatch);
        -: 9231:      }
    #####: 9232:      return (tmp);
        -: 9233:    }
        -: 9234:  } else {
        -: 9235:    {
    #####: 9236:    tmp = cwexec(kws, text, size, kwsmatch);
        -: 9237:    }
    #####: 9238:    return (tmp);
        -: 9239:  }
        -: 9240:}
       89: 9241:}
    #####: 9242:void kwsfree(kwset_t kws ) 
        -: 9243:{ 
        -: 9244:  struct kwset *kwset___0 ;
        -: 9245:  struct obstack *__o ;
        -: 9246:  void *__obj ;
        -: 9247:  char *tmp ;
        -: 9248:
        -: 9249:  {
    #####: 9250:  kwset___0 = (struct kwset *)kws;
    #####: 9251:  __o = & kwset___0->obstack;
    #####: 9252:  __obj = (void *)0;
    #####: 9253:  if ((unsigned long )__obj > (unsigned long )((void *)__o->chunk)) {
    #####: 9254:    if ((unsigned long )__obj < (unsigned long )((void *)__o->chunk_limit)) {
    #####: 9255:      tmp = (char *)__obj;
    #####: 9256:      __o->object_base = tmp;
    #####: 9257:      __o->next_free = tmp;
    #####: 9258:    } else {
        -: 9259:       
        -: 9260:
    #####: 9261:      obstack_free(__o, __obj);
        -: 9262:       
        -: 9263:
        -: 9264:    }
    #####: 9265:  } else {
        -: 9266:     
        -: 9267:
    #####: 9268:    obstack_free(__o, __obj);
        -: 9269:     
        -: 9270:
        -: 9271:  }
        -: 9272:  {
    #####: 9273:  free(kws);
        -: 9274:  }
    #####: 9275:  return;
        -: 9276:}
        -: 9277:}
        -: 9278:extern DIR *( __attribute__((__nonnull__(1))) opendir)(char const   *__name ) ;
        -: 9279:extern int ( __attribute__((__nonnull__(1))) closedir)(DIR *__dirp ) ;
        -: 9280:extern struct dirent *( __attribute__((__nonnull__(1))) readdir)(DIR *__dirp ) ;
    #####: 9281:char *savedir(char const   *dir , off_t name_size ) 
        -: 9282:{ 
        -: 9283:  DIR *dirp ;
        -: 9284:  struct dirent *dp ;
        -: 9285:  char *name_space ;
        -: 9286:  char *namep ;
        -: 9287:  char *tmp ;
        -: 9288:  off_t size_needed ;
        -: 9289:  size_t tmp___0 ;
        -: 9290:  char *new_name_space ;
        -: 9291:  void *tmp___1 ;
        -: 9292:  char *tmp___2 ;
        -: 9293:  int tmp___3 ;
        -: 9294:
        -: 9295:  {
        -: 9296:  {
    #####: 9297:  dirp = opendir(dir);
        -: 9298:  }
    #####: 9299:  if ((unsigned long )dirp == (unsigned long )((void *)0)) {
    #####: 9300:    return ((char *)((void *)0));
        -: 9301:  }
    #####: 9302:  if (name_size <= 0L) {
    #####: 9303:    name_size = (off_t )1;
    #####: 9304:  }
        -: 9305:  {
    #####: 9306:  tmp = xmalloc((size_t )name_size);
    #####: 9307:  name_space = tmp;
        -: 9308:  }
    #####: 9309:  if ((unsigned long )name_space == (unsigned long )((void *)0)) {
        -: 9310:    {
    #####: 9311:    closedir(dirp);
        -: 9312:    }
    #####: 9313:    return ((char *)((void *)0));
        -: 9314:  }
    #####: 9315:  namep = name_space;
        -: 9316:  {
    #####: 9317:  while (1) {
        -: 9318:                                     ;
        -: 9319:    {
    #####: 9320:    dp = readdir(dirp);
        -: 9321:    }
    #####: 9322:    if (! ((unsigned long )dp != (unsigned long )((void *)0))) {
    #####: 9323:      goto while_break;
        -: 9324:    }
    #####: 9325:    if ((int )dp->d_name[0] != 46) {
    #####: 9326:      goto _L___0;
        -: 9327:    } else { //Added block
    #####: 9328:    if ((int )dp->d_name[1] != 0) {
    #####: 9329:      if ((int )dp->d_name[1] != 46) {
    #####: 9330:        goto _L___0;
        -: 9331:      } else { //Added block
    #####: 9332:      if ((int )dp->d_name[2] != 0) {
        -: 9333:        _L___0: 
        -: 9334:        {
    #####: 9335:        tmp___0 = strlen((char const   *)(dp->d_name));
    #####: 9336:        size_needed = (off_t )(((size_t )(namep - name_space) + tmp___0) + 2UL);
        -: 9337:        }
    #####: 9338:        if (size_needed > name_size) {
        -: 9339:          {
    #####: 9340:          while (1) {
        -: 9341:                                                 ;
    #####: 9342:            if (! (size_needed > name_size)) {
    #####: 9343:              goto while_break___0;
        -: 9344:            }
    #####: 9345:            name_size += 1024L;
        -: 9346:          }
        -: 9347:          while_break___0: /* CIL Label */ ;
        -: 9348:          }
        -: 9349:          {
    #####: 9350:          tmp___1 = realloc((void *)name_space, (size_t )name_size);
    #####: 9351:          new_name_space = (char *)tmp___1;
        -: 9352:          }
    #####: 9353:          if ((unsigned long )new_name_space == (unsigned long )((void *)0)) {
        -: 9354:            {
    #####: 9355:            closedir(dirp);
        -: 9356:            }
    #####: 9357:            return ((char *)((void *)0));
        -: 9358:          }
    #####: 9359:          namep += new_name_space - name_space;
    #####: 9360:          name_space = new_name_space;
    #####: 9361:        }
        -: 9362:        {
    #####: 9363:        tmp___2 = stpcpy((char * __restrict  )namep, (char const   * __restrict  )(dp->d_name));
    #####: 9364:        namep = tmp___2 + 1;
        -: 9365:        }
    #####: 9366:      }
        -: 9367:      }
    #####: 9368:    }
        -: 9369:    }
        -: 9370:  }
        -: 9371:  while_break: /* CIL Label */ ;
        -: 9372:  }
        -: 9373:  {
    #####: 9374:  *namep = (char )'\000';
    #####: 9375:  tmp___3 = closedir(dirp);
        -: 9376:  }
    #####: 9377:  if (tmp___3) {
        -: 9378:    {
    #####: 9379:    free((void *)name_space);
        -: 9380:    }
    #####: 9381:    return ((char *)((void *)0));
        -: 9382:  }
    #####: 9383:  return (name_space);
        -: 9384:}
    #####: 9385:}
        -: 9386:static void Gcompile(char *pattern , size_t size ) ;
        -: 9387:static void Ecompile(char *pattern , size_t size ) ;
        -: 9388:static char *EGexecute(char *buf , size_t size , char **endp ) ;
        -: 9389:static void Fcompile(char *pattern , size_t size ) ;
        -: 9390:static char *Fexecute(char *buf , size_t size , char **endp ) ;
        -: 9391:static void kwsinit(void) ;
        -: 9392:struct matcher matchers[6]  = {      {(char *)"default", & Gcompile, & EGexecute}, 
        -: 9393:        {(char *)"grep", & Gcompile, & EGexecute}, 
        -: 9394:        {(char *)"egrep", & Ecompile, & EGexecute}, 
        -: 9395:        {(char *)"awk", & Ecompile, & EGexecute}, 
        -: 9396:        {(char *)"fgrep", & Fcompile, & Fexecute}, 
        -: 9397:        {(char *)0, (void (*)(char * , size_t  ))0, (char *(*)(char * , size_t  , char ** ))0}};
        -: 9398:static struct dfa dfa_1  ;
        -: 9399:static struct re_pattern_buffer regexbuf  ;
        -: 9400:static kwset_t kwset  ;
        -: 9401:static int lastexact  ;
    #####: 9402:void dfaerror(char const   *mesg ) 
        -: 9403:{ 
        -: 9404:
        -: 9405:
        -: 9406:   
        -: 9407:
        -: 9408:   
        -: 9409:
    #####: 9410:  fatal(mesg, 0);
        -: 9411:   
        -: 9412:
        -: 9413: 
        -: 9414:
        -: 9415:}
        -: 9416:static char trans[256]  ;
        1: 9417:static void kwsinit(void) 
        -: 9418:{ 
        -: 9419:  int i ;
        -: 9420:  int tmp___0 ;
        -: 9421:  unsigned short const   **tmp___1 ;
        -: 9422:  char *tmp___2 ;
        -: 9423:
        -: 9424:  {
        1: 9425:  if (match_icase) {
    #####: 9426:    i = 0;
        -: 9427:    {
    #####: 9428:    while (1) {
        -: 9429:                                       ;
    #####: 9430:      if (! (i < 256)) {
    #####: 9431:        goto while_break;
        -: 9432:      }
        -: 9433:      {
    #####: 9434:      tmp___1 = __ctype_b_loc();
        -: 9435:      }
    #####: 9436:      if ((int const   )*(*tmp___1 + i) & 256) {
        -: 9437:         
        -: 9438:
    #####: 9439:        tmp___0 = tolower(i);
    #####: 9440:        trans[i] = (char )tmp___0;
        -: 9441:         
        -: 9442:
    #####: 9443:      } else {
    #####: 9444:        trans[i] = (char )i;
        -: 9445:      }
    #####: 9446:      i ++;
        -: 9447:    }
        -: 9448:    while_break: /* CIL Label */ ;
        -: 9449:    }
    #####: 9450:  }
        1: 9451:  if (match_icase) {
    #####: 9452:    tmp___2 = trans;
    #####: 9453:  } else {
        1: 9454:    tmp___2 = (char *)0;
        -: 9455:  }
        -: 9456:  {
        1: 9457:  kwset = kwsalloc(tmp___2);
        -: 9458:  }
        1: 9459:  if (! kwset) {
        -: 9460:     
        -: 9461:
    #####: 9462:    fatal("memory exhausted", 0);
        -: 9463:     
        -: 9464:
        -: 9465:  }
        1: 9466:  return;
        -: 9467:}
        -: 9468:}
        1: 9469:static void kwsmusts(void) 
        -: 9470:{ 
        -: 9471:  struct dfamust *dm ;
        -: 9472:  char *err ;
        -: 9473:  size_t tmp ;
        -: 9474:  size_t tmp___0 ;
        -: 9475:
        -: 9476:  {
        1: 9477:  if (dfa_1.musts) {
        -: 9478:    {
        1: 9479:    kwsinit();
        1: 9480:    dm = dfa_1.musts;
        -: 9481:    }
        -: 9482:    {
        2: 9483:    while (1) {
        -: 9484:                                       ;
        2: 9485:      if (! dm) {
        1: 9486:        goto while_break;
        -: 9487:      }
        1: 9488:      if (! dm->exact) {
        1: 9489:        goto __Cont;
        -: 9490:      }
        -: 9491:      {
    #####: 9492:      lastexact ++;
    #####: 9493:      tmp = strlen((char const   *)dm->must);
    #####: 9494:      err = kwsincr(kwset, dm->must, tmp);
        -: 9495:      }
    #####: 9496:      if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9497:         
        -: 9498:
    #####: 9499:        fatal((char const   *)err, 0);
        -: 9500:         
        -: 9501:
        -: 9502:      }
        -: 9503:      __Cont: 
        1: 9504:      dm = dm->next;
        -: 9505:    }
        -: 9506:    while_break: /* CIL Label */ ;
        -: 9507:    }
        1: 9508:    dm = dfa_1.musts;
        -: 9509:    {
        2: 9510:    while (1) {
        -: 9511:                                           ;
        2: 9512:      if (! dm) {
        1: 9513:        goto while_break___0;
        -: 9514:      }
        1: 9515:      if (dm->exact) {
    #####: 9516:        goto __Cont___0;
        -: 9517:      }
        -: 9518:      {
        1: 9519:      tmp___0 = strlen((char const   *)dm->must);
        1: 9520:      err = kwsincr(kwset, dm->must, tmp___0);
        -: 9521:      }
        1: 9522:      if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9523:         
        -: 9524:
    #####: 9525:        fatal((char const   *)err, 0);
        -: 9526:         
        -: 9527:
        -: 9528:      }
        -: 9529:      __Cont___0: 
        1: 9530:      dm = dm->next;
        -: 9531:    }
        -: 9532:    while_break___0: /* CIL Label */ ;
        -: 9533:    }
        -: 9534:    {
        1: 9535:    err = kwsprep(kwset);
        -: 9536:    }
        1: 9537:    if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9538:       
        -: 9539:
    #####: 9540:      fatal((char const   *)err, 0);
        -: 9541:       
        -: 9542:
        -: 9543:    }
        1: 9544:  }
        1: 9545:  return;
        -: 9546:}
        -: 9547:}
    #####: 9548:static void Gcompile(char *pattern , size_t size ) 
        -: 9549:{ 
        -: 9550:  char const   *err ;
        -: 9551:  char *n ;
        -: 9552:  char *tmp ;
        -: 9553:  int i ;
        -: 9554:  size_t tmp___0 ;
        -: 9555:  size_t tmp___1 ;
        -: 9556:
        -: 9557:  {
        -: 9558:  {
    #####: 9559:  re_set_syntax((((((1UL << 1) | ((1UL << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
    #####: 9560:  dfasyntax((((((1UL << 1) | ((1UL << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1),
    #####: 9561:            match_icase, (int )eolbyte);
    #####: 9562:  err = re_compile_pattern((char const   *)pattern, size, & regexbuf);
        -: 9563:  }
    #####: 9564:  if ((unsigned long )err != (unsigned long )((char const   *)0)) {
        -: 9565:     
        -: 9566:
    #####: 9567:    fatal(err, 0);
        -: 9568:     
        -: 9569:
        -: 9570:  }
    #####: 9571:  if (match_words) {
    #####: 9572:    goto _L;
        -: 9573:  } else { //Added block
    #####: 9574:  if (match_lines) {
        -: 9575:    _L: 
        -: 9576:    {
    #####: 9577:    tmp = xmalloc(size + 50UL);
    #####: 9578:    n = tmp;
    #####: 9579:    i = 0;
    #####: 9580:    strcpy((char * __restrict  )n, (char const   * __restrict  )"");
        -: 9581:    }
    #####: 9582:    if (match_lines) {
        -: 9583:       
        -: 9584:
    #####: 9585:      strcpy((char * __restrict  )n, (char const   * __restrict  )"^\\(");
        -: 9586:       
        -: 9587:
    #####: 9588:    }
    #####: 9589:    if (match_words) {
        -: 9590:       
        -: 9591:
    #####: 9592:      strcpy((char * __restrict  )n, (char const   * __restrict  )"\\(^\\|[^[:alnum:]_]\\)\\(");
        -: 9593:       
        -: 9594:
    #####: 9595:    }
        -: 9596:    {
    #####: 9597:    tmp___0 = strlen((char const   *)n);
    #####: 9598:    i = (int )tmp___0;
    #####: 9599:    memcpy((void * __restrict  )(n + i), (void const   * __restrict  )pattern, size);
    #####: 9600:    i = (int )((size_t )i + size);
        -: 9601:    }
    #####: 9602:    if (match_words) {
        -: 9603:       
        -: 9604:
    #####: 9605:      strcpy((char * __restrict  )(n + i), (char const   * __restrict  )"\\)\\([^[:alnum:]_]\\|$\\)");
        -: 9606:       
        -: 9607:
    #####: 9608:    }
    #####: 9609:    if (match_lines) {
        -: 9610:       
        -: 9611:
    #####: 9612:      strcpy((char * __restrict  )(n + i), (char const   * __restrict  )"\\)$");
        -: 9613:       
        -: 9614:
    #####: 9615:    }
        -: 9616:    {
    #####: 9617:    tmp___1 = strlen((char const   *)(n + i));
    #####: 9618:    i = (int )((size_t )i + tmp___1);
    #####: 9619:    dfacomp(n, (size_t )i, & dfa_1, 1);
        -: 9620:    }
    #####: 9621:  } else {
        -: 9622:     
        -: 9623:
    #####: 9624:    dfacomp(pattern, size, & dfa_1, 1);
        -: 9625:     
        -: 9626:
        -: 9627:  }
        -: 9628:  }
        -: 9629:  {
    #####: 9630:  kwsmusts();
        -: 9631:  }
    #####: 9632:  return;
        -: 9633:}
        -: 9634:}
        1: 9635:static void Ecompile(char *pattern , size_t size ) 
        -: 9636:{ 
        -: 9637:  char const   *err ;
        -: 9638:  int tmp ;
        -: 9639:  char *n ;
        -: 9640:  char *tmp___0 ;
        -: 9641:  int i ;
        -: 9642:  size_t tmp___1 ;
        -: 9643:  size_t tmp___2 ;
        -: 9644:
        -: 9645:  {
        -: 9646:  {
        1: 9647:  tmp = strcmp(matcher, "awk");
        -: 9648:  }
        1: 9649:  if (tmp == 0) {
        -: 9650:     
        -: 9651:
    #####: 9652:    re_set_syntax(((((((((1UL | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((1UL << 1) << 1) << 1)) | (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
    #####: 9653:    dfasyntax(((((((((1UL | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((1UL << 1) << 1) << 1)) | (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1),
    #####: 9654:              match_icase, (int )eolbyte);
        -: 9655:     
        -: 9656:
    #####: 9657:  } else {
        -: 9658:     
        -: 9659:
        1: 9660:    re_set_syntax((((((((((1UL << 1) << 1) | (((1UL << 1) << 1) << 1)) | ((((1UL << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
        1: 9661:    dfasyntax((((((((((1UL << 1) << 1) | (((1UL << 1) << 1) << 1)) | ((((1UL << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1),
        1: 9662:              match_icase, (int )eolbyte);
        -: 9663:     
        -: 9664:
        -: 9665:  }
        -: 9666:  {
        1: 9667:  err = re_compile_pattern((char const   *)pattern, size, & regexbuf);
        -: 9668:  }
        1: 9669:  if ((unsigned long )err != (unsigned long )((char const   *)0)) {
        -: 9670:     
        -: 9671:
    #####: 9672:    fatal(err, 0);
        -: 9673:     
        -: 9674:
        -: 9675:  }
        1: 9676:  if (match_words) {
    #####: 9677:    goto _L;
        -: 9678:  } else { //Added block
        1: 9679:  if (match_lines) {
        -: 9680:    _L: 
        -: 9681:    {
    #####: 9682:    tmp___0 = xmalloc(size + 50UL);
    #####: 9683:    n = tmp___0;
    #####: 9684:    i = 0;
    #####: 9685:    strcpy((char * __restrict  )n, (char const   * __restrict  )"");
        -: 9686:    }
    #####: 9687:    if (match_lines) {
        -: 9688:       
        -: 9689:
    #####: 9690:      strcpy((char * __restrict  )n, (char const   * __restrict  )"^(");
        -: 9691:       
        -: 9692:
    #####: 9693:    }
    #####: 9694:    if (match_words) {
        -: 9695:       
        -: 9696:
    #####: 9697:      strcpy((char * __restrict  )n, (char const   * __restrict  )"(^|[^[:alnum:]_])(");
        -: 9698:       
        -: 9699:
    #####: 9700:    }
        -: 9701:    {
    #####: 9702:    tmp___1 = strlen((char const   *)n);
    #####: 9703:    i = (int )tmp___1;
    #####: 9704:    memcpy((void * __restrict  )(n + i), (void const   * __restrict  )pattern, size);
    #####: 9705:    i = (int )((size_t )i + size);
        -: 9706:    }
    #####: 9707:    if (match_words) {
        -: 9708:       
        -: 9709:
    #####: 9710:      strcpy((char * __restrict  )(n + i), (char const   * __restrict  )")([^[:alnum:]_]|$)");
        -: 9711:       
        -: 9712:
    #####: 9713:    }
    #####: 9714:    if (match_lines) {
        -: 9715:       
        -: 9716:
    #####: 9717:      strcpy((char * __restrict  )(n + i), (char const   * __restrict  )")$");
        -: 9718:       
        -: 9719:
    #####: 9720:    }
        -: 9721:    {
    #####: 9722:    tmp___2 = strlen((char const   *)(n + i));
    #####: 9723:    i = (int )((size_t )i + tmp___2);
    #####: 9724:    dfacomp(n, (size_t )i, & dfa_1, 1);
        -: 9725:    }
    #####: 9726:  } else {
        -: 9727:     
        -: 9728:
        1: 9729:    dfacomp(pattern, size, & dfa_1, 1);
        -: 9730:     
        -: 9731:
        -: 9732:  }
        -: 9733:  }
        -: 9734:  {
        1: 9735:  kwsmusts();
        -: 9736:  }
        1: 9737:  return;
        -: 9738:}
        -: 9739:}
        -: 9740:static struct re_registers regs  ;
       89: 9741:static char *EGexecute(char *buf , size_t size , char **endp ) 
        -: 9742:{ 
        -: 9743:  register char *buflim___0 ;
        -: 9744:  register char *beg ;
        -: 9745:  register char *end ;
        -: 9746:  register char save ;
        -: 9747:  char eol ;
        -: 9748:  int backref ;
        -: 9749:  int start ;
        -: 9750:  int len ;
        -: 9751:  struct kwsmatch kwsm ;
        -: 9752:  void *tmp ;
        -: 9753:  char *tmp___0 ;
        -: 9754:  void *tmp___1 ;
        -: 9755:  unsigned short const   **tmp___2 ;
        -: 9756:  unsigned short const   **tmp___3 ;
        -: 9757:
        -: 9758:  {
       89: 9759:  eol = (char )eolbyte;
       89: 9760:  buflim___0 = buf + size;
       89: 9761:  end = buf;
       89: 9762:  beg = end;
        -: 9763:  {
       89: 9764:  while (1) {
        -: 9765:                                     ;
       89: 9766:    if (! ((unsigned long )end < (unsigned long )buflim___0)) {
    #####: 9767:      goto while_break;
        -: 9768:    }
       89: 9769:    if (kwset) {
        -: 9770:      {
       89: 9771:      beg = kwsexec(kwset, beg, (size_t )(buflim___0 - beg), & kwsm);
        -: 9772:      }
       89: 9773:      if (! beg) {
       13: 9774:        goto failure;
        -: 9775:      }
        -: 9776:      {
       76: 9777:      tmp = memchr((void const   *)beg, (int )eol, (size_t )(buflim___0 - beg));
       76: 9778:      end = (char *)tmp;
        -: 9779:      }
       76: 9780:      if (! end) {
    #####: 9781:        end = buflim___0;
    #####: 9782:      }
        -: 9783:      {
      823: 9784:      while (1) {
        -: 9785:                                             ;
      823: 9786:        if ((unsigned long )beg > (unsigned long )buf) {
      810: 9787:          if (! ((int )*(beg + -1) != (int )eol)) {
       63: 9788:            goto while_break___0;
        -: 9789:          }
      747: 9790:        } else {
       13: 9791:          goto while_break___0;
        -: 9792:        }
      747: 9793:        beg --;
        -: 9794:      }
        -: 9795:      while_break___0: /* CIL Label */ ;
        -: 9796:      }
       76: 9797:      save = *end;
       76: 9798:      if (kwsm.strchr < lastexact) {
    #####: 9799:        goto success;
        -: 9800:      }
        -: 9801:      {
       76: 9802:      tmp___0 = dfaexec(& dfa_1, beg, end, 0, (int *)0, & backref);
        -: 9803:      }
       76: 9804:      if (! tmp___0) {
    #####: 9805:        *end = save;
    #####: 9806:        goto __Cont;
        -: 9807:      }
       76: 9808:      *end = save;
       76: 9809:      if (! backref) {
       76: 9810:        goto success;
        -: 9811:      }
    #####: 9812:    } else {
        -: 9813:      {
    #####: 9814:      save = *buflim___0;
    #####: 9815:      beg = dfaexec(& dfa_1, beg, buflim___0, 0, (int *)0, & backref);
    #####: 9816:      *buflim___0 = save;
        -: 9817:      }
    #####: 9818:      if (! beg) {
    #####: 9819:        goto failure;
        -: 9820:      }
        -: 9821:      {
    #####: 9822:      tmp___1 = memchr((void const   *)beg, (int )eol, (size_t )(buflim___0 - beg));
    #####: 9823:      end = (char *)tmp___1;
        -: 9824:      }
    #####: 9825:      if (! end) {
    #####: 9826:        end = buflim___0;
    #####: 9827:      }
        -: 9828:      {
    #####: 9829:      while (1) {
        -: 9830:                                             ;
    #####: 9831:        if ((unsigned long )beg > (unsigned long )buf) {
    #####: 9832:          if (! ((int )*(beg + -1) != (int )eol)) {
    #####: 9833:            goto while_break___1;
        -: 9834:          }
    #####: 9835:        } else {
    #####: 9836:          goto while_break___1;
        -: 9837:        }
    #####: 9838:        beg --;
        -: 9839:      }
        -: 9840:      while_break___1: /* CIL Label */ ;
        -: 9841:      }
    #####: 9842:      if (! backref) {
    #####: 9843:        goto success;
        -: 9844:      }
        -: 9845:    }
        -: 9846:    {
    #####: 9847:    regexbuf.not_eol = 0U;
    #####: 9848:    start = re_search(& regexbuf, (char const   *)beg, (int )(end - beg), 0, (int )(end - beg),
        -: 9849:                      & regs);
        -: 9850:    }
    #####: 9851:    if (start >= 0) {
    #####: 9852:      len = *(regs.end + 0) - start;
    #####: 9853:      if (! match_lines) {
    #####: 9854:        if (! match_words) {
    #####: 9855:          goto success;
        -: 9856:        } else {
    #####: 9857:          goto _L;
        -: 9858:        }
    #####: 9859:      } else { //Added block
        -: 9860:      _L: 
    #####: 9861:      if (match_lines) {
    #####: 9862:        if ((long )len == end - beg) {
    #####: 9863:          goto success;
        -: 9864:        }
    #####: 9865:      }
        -: 9866:      }
    #####: 9867:      if (match_words) {
        -: 9868:         
        -: 9869:
    #####: 9870:        while (1) {
        -: 9871:                                               ;
    #####: 9872:          if (! (start >= 0)) {
    #####: 9873:            goto while_break___2;
        -: 9874:          }
    #####: 9875:          if (start == 0) {
    #####: 9876:            goto _L___0;
        -: 9877:          } else {
        -: 9878:            {
    #####: 9879:            tmp___2 = __ctype_b_loc();
        -: 9880:            }
    #####: 9881:            if (! ((int const   )*(*tmp___2 + (int )((unsigned char )*(beg + (start - 1)))) & 8)) {
    #####: 9882:              if (! ((int )((unsigned char )*(beg + (start - 1))) == 95)) {
        -: 9883:                _L___0: 
    #####: 9884:                if ((long )len == end - beg) {
    #####: 9885:                  goto success;
        -: 9886:                } else {
        -: 9887:                  {
    #####: 9888:                  tmp___3 = __ctype_b_loc();
        -: 9889:                  }
    #####: 9890:                  if (! ((int const   )*(*tmp___3 + (int )((unsigned char )*(beg + (start + len)))) & 8)) {
    #####: 9891:                    if (! ((int )((unsigned char )*(beg + (start + len))) == 95)) {
    #####: 9892:                      goto success;
        -: 9893:                    }
    #####: 9894:                  }
        -: 9895:                }
    #####: 9896:              }
    #####: 9897:            }
        -: 9898:          }
    #####: 9899:          if (len > 0) {
        -: 9900:             
        -: 9901:
    #####: 9902:            len --;
    #####: 9903:            regexbuf.not_eol = 1U;
    #####: 9904:            len = re_match(& regexbuf, (char const   *)beg, start + len, start, & regs);
        -: 9905:             
        -: 9906:
    #####: 9907:          }
    #####: 9908:          if (len <= 0) {
    #####: 9909:            if ((long )start == end - beg) {
    #####: 9910:              goto while_break___2;
        -: 9911:            }
        -: 9912:            {
    #####: 9913:            start ++;
    #####: 9914:            regexbuf.not_eol = 0U;
    #####: 9915:            start = re_search(& regexbuf, (char const   *)beg, (int )(end - beg),
    #####: 9916:                              start, (int )((end - beg) - (long )start), & regs);
    #####: 9917:            len = *(regs.end + 0) - start;
        -: 9918:            }
    #####: 9919:          }
        -: 9920:        }
        -: 9921:        while_break___2: /* CIL Label */ ;
        -: 9922:         
        -: 9923:
    #####: 9924:      }
    #####: 9925:    }
        -: 9926:    __Cont: 
    #####: 9927:    beg = end + 1;
        -: 9928:  }
        -: 9929:  while_break: /* CIL Label */ ;
    #####: 9930:  }
        -: 9931:  failure: 
       13: 9932:  return ((char *)0);
        -: 9933:  success: 
       76: 9934:  if ((unsigned long )end < (unsigned long )buflim___0) {
       76: 9935:    *endp = end + 1;
       76: 9936:  } else {
    #####: 9937:    *endp = end;
        -: 9938:  }
       76: 9939:  return (beg);
        -: 9940:}
       89: 9941:}
    #####: 9942:static void Fcompile(char *pattern , size_t size ) 
        -: 9943:{ 
        -: 9944:  char *beg ;
        -: 9945:  char *lim ;
        -: 9946:  char *err ;
        -: 9947:
        -: 9948:  {
        -: 9949:  {
    #####: 9950:  kwsinit();
    #####: 9951:  beg = pattern;
        -: 9952:  }
        -: 9953:  {
    #####: 9954:  while (1) {
        -: 9955:                                     ;
    #####: 9956:    lim = beg;
        -: 9957:    {
    #####: 9958:    while (1) {
        -: 9959:                                           ;
    #####: 9960:      if ((unsigned long )lim < (unsigned long )(pattern + size)) {
    #####: 9961:        if (! ((int )*lim != 10)) {
    #####: 9962:          goto while_break___0;
        -: 9963:        }
    #####: 9964:      } else {
    #####: 9965:        goto while_break___0;
        -: 9966:      }
    #####: 9967:      lim ++;
        -: 9968:    }
        -: 9969:    while_break___0: /* CIL Label */ ;
        -: 9970:    }
        -: 9971:    {
    #####: 9972:    err = kwsincr(kwset, beg, (size_t )(lim - beg));
        -: 9973:    }
    #####: 9974:    if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9975:       
        -: 9976:
    #####: 9977:      fatal((char const   *)err, 0);
        -: 9978:       
        -: 9979:
        -: 9980:    }
    #####: 9981:    if ((unsigned long )lim < (unsigned long )(pattern + size)) {
    #####: 9982:      lim ++;
    #####: 9983:    }
    #####: 9984:    beg = lim;
    #####: 9985:    if (! ((unsigned long )beg < (unsigned long )(pattern + size))) {
    #####: 9986:      goto while_break;
        -: 9987:    }
        -: 9988:  }
        -: 9989:  while_break: /* CIL Label */ ;
        -: 9990:  }
        -: 9991:  {
    #####: 9992:  err = kwsprep(kwset);
        -: 9993:  }
    #####: 9994:  if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9995:     
        -: 9996:
    #####: 9997:    fatal((char const   *)err, 0);
        -: 9998:     
        -: 9999:
        -:10000:  }
    #####:10001:  return;
        -:10002:}
        -:10003:}
    #####:10004:static char *Fexecute(char *buf , size_t size , char **endp ) 
        -:10005:{ 
        -:10006:  register char *beg ;
        -:10007:  register char *try ;
        -:10008:  register char *end ;
        -:10009:  register size_t len ;
        -:10010:  char eol ;
        -:10011:  struct kwsmatch kwsmatch ;
        -:10012:  unsigned short const   **tmp ;
        -:10013:  unsigned short const   **tmp___0 ;
        -:10014:  void *tmp___1 ;
        -:10015:
        -:10016:  {
    #####:10017:  eol = (char )eolbyte;
    #####:10018:  beg = buf;
        -:10019:  {
    #####:10020:  while (1) {
        -:10021:                                     ;
    #####:10022:    if (! ((unsigned long )beg <= (unsigned long )(buf + size))) {
    #####:10023:      goto while_break;
        -:10024:    }
        -:10025:    {
    #####:10026:    beg = kwsexec(kwset, beg, (size_t )((buf + size) - beg), & kwsmatch);
        -:10027:    }
    #####:10028:    if (! beg) {
    #####:10029:      return ((char *)0);
        -:10030:    }
    #####:10031:    len = kwsmatch.size[0];
    #####:10032:    if (match_lines) {
    #####:10033:      if ((unsigned long )beg > (unsigned long )buf) {
    #####:10034:        if ((int )*(beg + -1) != (int )eol) {
    #####:10035:          goto __Cont;
        -:10036:        }
    #####:10037:      }
    #####:10038:      if ((unsigned long )(beg + len) < (unsigned long )(buf + size)) {
    #####:10039:        if ((int )*(beg + len) != (int )eol) {
    #####:10040:          goto __Cont;
        -:10041:        }
    #####:10042:      }
    #####:10043:      goto success;
        -:10044:    } else { //Added block
    #####:10045:    if (match_words) {
    #####:10046:      try = beg;
        -:10047:      {
    #####:10048:      while (1) {
        -:10049:                                             ;
    #####:10050:        if (len) {
    #####:10051:          if (! try) {
    #####:10052:            goto while_break___0;
        -:10053:          }
    #####:10054:        } else {
    #####:10055:          goto while_break___0;
        -:10056:        }
    #####:10057:        if ((unsigned long )try > (unsigned long )buf) {
        -:10058:          {
    #####:10059:          tmp = __ctype_b_loc();
        -:10060:          }
    #####:10061:          if ((int const   )*(*tmp + (int )((unsigned char )*(try + -1))) & 8) {
    #####:10062:            goto while_break___0;
        -:10063:          } else { //Added block
    #####:10064:          if ((int )((unsigned char )*(try + -1)) == 95) {
    #####:10065:            goto while_break___0;
        -:10066:          }
        -:10067:          }
    #####:10068:        }
    #####:10069:        if ((unsigned long )(try + len) < (unsigned long )(buf + size)) {
        -:10070:          {
    #####:10071:          tmp___0 = __ctype_b_loc();
        -:10072:          }
    #####:10073:          if ((int const   )*(*tmp___0 + (int )((unsigned char )*(try + len))) & 8) {
        -:10074:             
        -:10075:
    #####:10076:            len --;
    #####:10077:            try = kwsexec(kwset, beg, len, & kwsmatch);
    #####:10078:            len = kwsmatch.size[0];
        -:10079:             
        -:10080:
    #####:10081:          } else { //Added block
    #####:10082:          if ((int )((unsigned char )*(try + len)) == 95) {
        -:10083:             
        -:10084:
    #####:10085:            len --;
    #####:10086:            try = kwsexec(kwset, beg, len, & kwsmatch);
    #####:10087:            len = kwsmatch.size[0];
        -:10088:             
        -:10089:
    #####:10090:          } else {
    #####:10091:            goto success;
        -:10092:          }
        -:10093:          }
    #####:10094:        } else {
    #####:10095:          goto success;
        -:10096:        }
        -:10097:      }
        -:10098:      while_break___0: /* CIL Label */ ;
        -:10099:      }
    #####:10100:    } else {
    #####:10101:      goto success;
        -:10102:    }
        -:10103:    }
        -:10104:    __Cont: 
    #####:10105:    beg ++;
        -:10106:  }
        -:10107:  while_break: /* CIL Label */ ;
        -:10108:  }
    #####:10109:  return ((char *)0);
        -:10110:  success: 
        -:10111:  {
    #####:10112:  tmp___1 = memchr((void const   *)(beg + len), (int )eol, (size_t )((buf + size) - (beg + len)));
    #####:10113:  end = (char *)tmp___1;
        -:10114:  }
    #####:10115:  if ((unsigned long )end != (unsigned long )((char *)0)) {
    #####:10116:    end ++;
    #####:10117:  } else {
    #####:10118:    end = buf + size;
        -:10119:  }
    #####:10120:  *endp = end;
        -:10121:  {
    #####:10122:  while (1) {
        -:10123:                                         ;
    #####:10124:    if ((unsigned long )beg > (unsigned long )buf) {
    #####:10125:      if (! ((int )*(beg + -1) != 10)) {
    #####:10126:        goto while_break___1;
        -:10127:      }
    #####:10128:    } else {
    #####:10129:      goto while_break___1;
        -:10130:    }
    #####:10131:    beg --;
        -:10132:  }
        -:10133:  while_break___1: /* CIL Label */ ;
        -:10134:  }
    #####:10135:  return (beg);
        -:10136:}
    #####:10137:}
        -:10138: __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2), __leaf__)) stpcpy)(char * __restrict  dest ,
        -:10139:                                                                                          char const   * __restrict  src ) ;
        -:10140:                                                                                     
        -:10141:                                                                                             
        -:10142:  
        -:10143:                    
        -:10144:                            
        -:10145:             
        -:10146:                         
        -:10147:
        -:10148:   
        -:10149:                   
        -:10150:                          
        -:10151:   
        -:10152:             
        -:10153:                                      
        -:10154:            
        -:10155:         
        -:10156:                     
        -:10157:                
        -:10158:         
        -:10159:                                          
        -:10160:                       
        -:10161:     
        -:10162:   
        -:10163:                                
        -:10164:   
        -:10165:                 
        -:10166: 
        -:10167: 
        -:10168:static char re_syntax_table[256]  ;
        -:10169:static void init_syntax_once(void) ;
        -:10170:static int done  =    0;
        1:10171:static void init_syntax_once(void) 
        -:10172:{ 
        -:10173:  register int c ;
        -:10174:  unsigned short const   **tmp ;
        -:10175:
        -:10176:  {
        1:10177:  if (done) {
    #####:10178:    return;
        -:10179:  }
        -:10180:  {
        1:10181:  memset((void *)(re_syntax_table), '\000', sizeof(re_syntax_table));
        1:10182:  c = 0;
        -:10183:  }
        -:10184:  {
      257:10185:  while (1) {
        -:10186:                                     ;
      257:10187:    if (! (c < 256)) {
        1:10188:      goto while_break;
        -:10189:    }
        -:10190:    {
      256:10191:    tmp = __ctype_b_loc();
        -:10192:    }
      256:10193:    if ((int const   )*(*tmp + c) & 8) {
       62:10194:      re_syntax_table[c] = (char)1;
       62:10195:    }
      256:10196:    c ++;
        -:10197:  }
        -:10198:  while_break: /* CIL Label */ ;
        -:10199:  }
        1:10200:  re_syntax_table['_'] = (char)1;
        1:10201:  done = 1;
        1:10202:  return;
        -:10203:}
        1:10204:}
        -:10205:static int re_match_2_internal(struct re_pattern_buffer *bufp , char const   *string1 ,
        -:10206:                               int size1 , char const   *string2 , int size2 , int pos ,
        -:10207:                               struct re_registers *regs___0 , int stop ) ;
        -:10208:                                                 
        -:10209:  
        -:10210:                    
        -:10211:
        -:10212:   
        -:10213:                          
        -:10214:                             
        -:10215:               
        -:10216: 
        -:10217: 
        -:10218:static char const   re_error_msgid[369]  = 
        -:10219:  {      (char const   )'S',      (char const   )'u',      (char const   )'c',      (char const   )'c', 
        -:10220:        (char const   )'e',      (char const   )'s',      (char const   )'s',      (char const   )'\000', 
        -:10221:        (char const   )'N',      (char const   )'o',      (char const   )' ',      (char const   )'m', 
        -:10222:        (char const   )'a',      (char const   )'t',      (char const   )'c',      (char const   )'h', 
        -:10223:        (char const   )'\000',      (char const   )'I',      (char const   )'n',      (char const   )'v', 
        -:10224:        (char const   )'a',      (char const   )'l',      (char const   )'i',      (char const   )'d', 
        -:10225:        (char const   )' ',      (char const   )'r',      (char const   )'e',      (char const   )'g', 
        -:10226:        (char const   )'u',      (char const   )'l',      (char const   )'a',      (char const   )'r', 
        -:10227:        (char const   )' ',      (char const   )'e',      (char const   )'x',      (char const   )'p', 
        -:10228:        (char const   )'r',      (char const   )'e',      (char const   )'s',      (char const   )'s', 
        -:10229:        (char const   )'i',      (char const   )'o',      (char const   )'n',      (char const   )'\000', 
        -:10230:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -:10231:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -:10232:        (char const   )'c',      (char const   )'o',      (char const   )'l',      (char const   )'l', 
        -:10233:        (char const   )'a',      (char const   )'t',      (char const   )'i',      (char const   )'o', 
        -:10234:        (char const   )'n',      (char const   )' ',      (char const   )'c',      (char const   )'h', 
        -:10235:        (char const   )'a',      (char const   )'r',      (char const   )'a',      (char const   )'c', 
        -:10236:        (char const   )'t',      (char const   )'e',      (char const   )'r',      (char const   )'\000', 
        -:10237:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -:10238:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -:10239:        (char const   )'c',      (char const   )'h',      (char const   )'a',      (char const   )'r', 
        -:10240:        (char const   )'a',      (char const   )'c',      (char const   )'t',      (char const   )'e', 
        -:10241:        (char const   )'r',      (char const   )' ',      (char const   )'c',      (char const   )'l', 
        -:10242:        (char const   )'a',      (char const   )'s',      (char const   )'s',      (char const   )' ', 
        -:10243:        (char const   )'n',      (char const   )'a',      (char const   )'m',      (char const   )'e', 
        -:10244:        (char const   )'\000',      (char const   )'T',      (char const   )'r',      (char const   )'a', 
        -:10245:        (char const   )'i',      (char const   )'l',      (char const   )'i',      (char const   )'n', 
        -:10246:        (char const   )'g',      (char const   )' ',      (char const   )'b',      (char const   )'a', 
        -:10247:        (char const   )'c',      (char const   )'k',      (char const   )'s',      (char const   )'l', 
        -:10248:        (char const   )'a',      (char const   )'s',      (char const   )'h',      (char const   )'\000', 
        -:10249:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -:10250:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -:10251:        (char const   )'b',      (char const   )'a',      (char const   )'c',      (char const   )'k', 
        -:10252:        (char const   )' ',      (char const   )'r',      (char const   )'e',      (char const   )'f', 
        -:10253:        (char const   )'e',      (char const   )'r',      (char const   )'e',      (char const   )'n', 
        -:10254:        (char const   )'c',      (char const   )'e',      (char const   )'\000',      (char const   )'U', 
        -:10255:        (char const   )'n',      (char const   )'m',      (char const   )'a',      (char const   )'t', 
        -:10256:        (char const   )'c',      (char const   )'h',      (char const   )'e',      (char const   )'d', 
        -:10257:        (char const   )' ',      (char const   )'[',      (char const   )' ',      (char const   )'o', 
        -:10258:        (char const   )'r',      (char const   )' ',      (char const   )'[',      (char const   )'^', 
        -:10259:        (char const   )'\000',      (char const   )'U',      (char const   )'n',      (char const   )'m', 
        -:10260:        (char const   )'a',      (char const   )'t',      (char const   )'c',      (char const   )'h', 
        -:10261:        (char const   )'e',      (char const   )'d',      (char const   )' ',      (char const   )'(', 
        -:10262:        (char const   )' ',      (char const   )'o',      (char const   )'r',      (char const   )' ', 
        -:10263:        (char const   )'\\',      (char const   )'(',      (char const   )'\000',      (char const   )'U', 
        -:10264:        (char const   )'n',      (char const   )'m',      (char const   )'a',      (char const   )'t', 
        -:10265:        (char const   )'c',      (char const   )'h',      (char const   )'e',      (char const   )'d', 
        -:10266:        (char const   )' ',      (char const   )'\\',      (char const   )'{',      (char const   )'\000', 
        -:10267:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -:10268:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -:10269:        (char const   )'c',      (char const   )'o',      (char const   )'n',      (char const   )'t', 
        -:10270:        (char const   )'e',      (char const   )'n',      (char const   )'t',      (char const   )' ', 
        -:10271:        (char const   )'o',      (char const   )'f',      (char const   )' ',      (char const   )'\\', 
        -:10272:        (char const   )'{',      (char const   )'\\',      (char const   )'}',      (char const   )'\000', 
        -:10273:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -:10274:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -:10275:        (char const   )'r',      (char const   )'a',      (char const   )'n',      (char const   )'g', 
        -:10276:        (char const   )'e',      (char const   )' ',      (char const   )'e',      (char const   )'n', 
        -:10277:        (char const   )'d',      (char const   )'\000',      (char const   )'M',      (char const   )'e', 
        -:10278:        (char const   )'m',      (char const   )'o',      (char const   )'r',      (char const   )'y', 
        -:10279:        (char const   )' ',      (char const   )'e',      (char const   )'x',      (char const   )'h', 
        -:10280:        (char const   )'a',      (char const   )'u',      (char const   )'s',      (char const   )'t', 
        -:10281:        (char const   )'e',      (char const   )'d',      (char const   )'\000',      (char const   )'I', 
        -:10282:        (char const   )'n',      (char const   )'v',      (char const   )'a',      (char const   )'l', 
        -:10283:        (char const   )'i',      (char const   )'d',      (char const   )' ',      (char const   )'p', 
        -:10284:        (char const   )'r',      (char const   )'e',      (char const   )'c',      (char const   )'e', 
        -:10285:        (char const   )'d',      (char const   )'i',      (char const   )'n',      (char const   )'g', 
        -:10286:        (char const   )' ',      (char const   )'r',      (char const   )'e',      (char const   )'g', 
        -:10287:        (char const   )'u',      (char const   )'l',      (char const   )'a',      (char const   )'r', 
        -:10288:        (char const   )' ',      (char const   )'e',      (char const   )'x',      (char const   )'p', 
        -:10289:        (char const   )'r',      (char const   )'e',      (char const   )'s',      (char const   )'s', 
        -:10290:        (char const   )'i',      (char const   )'o',      (char const   )'n',      (char const   )'\000', 
        -:10291:        (char const   )'P',      (char const   )'r',      (char const   )'e',      (char const   )'m', 
        -:10292:        (char const   )'a',      (char const   )'t',      (char const   )'u',      (char const   )'r', 
        -:10293:        (char const   )'e',      (char const   )' ',      (char const   )'e',      (char const   )'n', 
        -:10294:        (char const   )'d',      (char const   )' ',      (char const   )'o',      (char const   )'f', 
        -:10295:        (char const   )' ',      (char const   )'r',      (char const   )'e',      (char const   )'g', 
        -:10296:        (char const   )'u',      (char const   )'l',      (char const   )'a',      (char const   )'r', 
        -:10297:        (char const   )' ',      (char const   )'e',      (char const   )'x',      (char const   )'p', 
        -:10298:        (char const   )'r',      (char const   )'e',      (char const   )'s',      (char const   )'s', 
        -:10299:        (char const   )'i',      (char const   )'o',      (char const   )'n',      (char const   )'\000', 
        -:10300:        (char const   )'R',      (char const   )'e',      (char const   )'g',      (char const   )'u', 
        -:10301:        (char const   )'l',      (char const   )'a',      (char const   )'r',      (char const   )' ', 
        -:10302:        (char const   )'e',      (char const   )'x',      (char const   )'p',      (char const   )'r', 
        -:10303:        (char const   )'e',      (char const   )'s',      (char const   )'s',      (char const   )'i', 
        -:10304:        (char const   )'o',      (char const   )'n',      (char const   )' ',      (char const   )'t', 
        -:10305:        (char const   )'o',      (char const   )'o',      (char const   )' ',      (char const   )'b', 
        -:10306:        (char const   )'i',      (char const   )'g',      (char const   )'\000',      (char const   )'U', 
        -:10307:        (char const   )'n',      (char const   )'m',      (char const   )'a',      (char const   )'t', 
        -:10308:        (char const   )'c',      (char const   )'h',      (char const   )'e',      (char const   )'d', 
        -:10309:        (char const   )' ',      (char const   )')',      (char const   )' ',      (char const   )'o', 
        -:10310:        (char const   )'r',      (char const   )' ',      (char const   )'\\',      (char const   )')', 
        -:10311:        (char const   )'\000'};
        -:10312:static size_t const   re_error_msgid_idx[17]  = 
        -:10313:  {      (size_t const   )0,      (size_t const   )sizeof("Success"),      (size_t const   )(sizeof("Success") + sizeof("No match")),      (size_t const   )((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")), 
        -:10314:        (size_t const   )(((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")),      (size_t const   )((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")),      (size_t const   )(((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")),      (size_t const   )((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")), 
        -:10315:        (size_t const   )(((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")),      (size_t const   )((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")),      (size_t const   )(((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")),      (size_t const   )((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")), 
        -:10316:        (size_t const   )(((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")),      (size_t const   )((((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")) + sizeof("Memory exhausted")),      (size_t const   )(((((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")) + sizeof("Memory exhausted")) + sizeof("Invalid preceding regular expression")),      (size_t const   )((((((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")) + sizeof("Memory exhausted")) + sizeof("Invalid preceding regular expression")) + sizeof("Premature end of regular expression")), 
        -:10317:        (size_t const   )(((((((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")) + sizeof("Memory exhausted")) + sizeof("Invalid preceding regular expression")) + sizeof("Premature end of regular expression")) + sizeof("Regular expression too big"))};
        -:10318:int re_max_failures  =    20000;
        -:10319:static char reg_unset_dummy  ;
        -:10320:static reg_errcode_t regex_compile(char const   *pattern , size_t size , reg_syntax_t syntax ,
        -:10321:                                   struct re_pattern_buffer *bufp ) ;
        -:10322:static void store_op1(re_opcode_t op , unsigned char *loc , int arg ) ;
        -:10323:static void store_op2(re_opcode_t op , unsigned char *loc , int arg1 , int arg2 ) ;
        -:10324:static void insert_op1(re_opcode_t op , unsigned char *loc , int arg , unsigned char *end ) ;
        -:10325:static void insert_op2(re_opcode_t op , unsigned char *loc , int arg1 , int arg2 ,
        -:10326:                       unsigned char *end ) ;
        -:10327:static boolean at_begline_loc_p(char const   *pattern , char const   *p , reg_syntax_t syntax ) ;
        -:10328:static boolean at_endline_loc_p(char const   *p , char const   *pend , reg_syntax_t syntax ) ;
        -:10329:static reg_errcode_t compile_range(char const   **p_ptr , char const   *pend , char *translate ,
        -:10330:                                   reg_syntax_t syntax , unsigned char *b ) ;
        -:10331:static boolean group_in_compile_stack(compile_stack_type compile_stack , regnum_t regnum ) ;
        1:10332:static reg_errcode_t regex_compile(char const   *pattern , size_t size , reg_syntax_t syntax ,
        -:10333:                                   struct re_pattern_buffer *bufp ) 
        -:10334:{ 
        -:10335:  register unsigned char c ;
        -:10336:  register unsigned char c1 ;
        -:10337:  char const   *p1 ;
        -:10338:  register unsigned char *b ;
        -:10339:  compile_stack_type compile_stack ;
        -:10340:  char const   *p ;
        -:10341:  char const   *pend ;
        -:10342:  char *translate ;
        -:10343:  unsigned char *pending_exact ;
        -:10344:  unsigned char *laststart___0 ;
        -:10345:  unsigned char *begalt ;
        -:10346:  char const   *beg_interval ;
        -:10347:  unsigned char *fixup_alt_jump ;
        -:10348:  regnum_t regnum ;
        -:10349:  char *tmp ;
        -:10350:  unsigned int tmp___0 ;
        -:10351:  void *tmp___1 ;
        -:10352:  char *tmp___2 ;
        -:10353:  char const   *tmp___3 ;
        -:10354:  unsigned char *old_buffer ;
        -:10355:  void *tmp___4 ;
        -:10356:  unsigned char *tmp___5 ;
        -:10357:  boolean tmp___6 ;
        -:10358:  unsigned char *old_buffer___0 ;
        -:10359:  void *tmp___7 ;
        -:10360:  unsigned char *tmp___8 ;
        -:10361:  boolean tmp___9 ;
        -:10362:  boolean keep_string_p ;
        -:10363:  char zero_times_ok ;
        -:10364:  char many_times_ok ;
        -:10365:  char const   *tmp___10 ;
        -:10366:  char const   *tmp___11 ;
        -:10367:  unsigned char *old_buffer___1 ;
        -:10368:  void *tmp___12 ;
        -:10369:  int tmp___13 ;
        -:10370:  int tmp___14 ;
        -:10371:  int tmp___15 ;
        -:10372:  int tmp___16 ;
        -:10373:  unsigned char *old_buffer___2 ;
        -:10374:  void *tmp___17 ;
        -:10375:  int tmp___18 ;
        -:10376:  unsigned char *old_buffer___3 ;
        -:10377:  void *tmp___19 ;
        -:10378:  unsigned char *old_buffer___4 ;
        -:10379:  void *tmp___20 ;
        -:10380:  unsigned char *tmp___21 ;
        -:10381:  boolean had_char_class ;
        -:10382:  unsigned char *old_buffer___5 ;
        -:10383:  void *tmp___22 ;
        -:10384:  unsigned char *old_buffer___6 ;
        -:10385:  void *tmp___23 ;
        -:10386:  unsigned char *tmp___24 ;
        -:10387:  int tmp___25 ;
        -:10388:  unsigned char *old_buffer___7 ;
        -:10389:  void *tmp___26 ;
        -:10390:  unsigned char *tmp___27 ;
        -:10391:  char const   *tmp___28 ;
        -:10392:  char const   *tmp___29 ;
        -:10393:  reg_errcode_t ret ;
        -:10394:  reg_errcode_t tmp___30 ;
        -:10395:  reg_errcode_t ret___0 ;
        -:10396:  char const   *tmp___31 ;
        -:10397:  char str[7] ;
        -:10398:  char const   *tmp___32 ;
        -:10399:  char const   *tmp___33 ;
        -:10400:  unsigned char tmp___34 ;
        -:10401:  int ch ;
        -:10402:  boolean is_alnum___0 ;
        -:10403:  int tmp___35 ;
        -:10404:  boolean is_alpha___0 ;
        -:10405:  int tmp___36 ;
        -:10406:  boolean is_blank___0 ;
        -:10407:  int tmp___37 ;
        -:10408:  boolean is_cntrl___0 ;
        -:10409:  int tmp___38 ;
        -:10410:  boolean is_digit___0 ;
        -:10411:  int tmp___39 ;
        -:10412:  boolean is_graph___0 ;
        -:10413:  int tmp___40 ;
        -:10414:  boolean is_lower___0 ;
        -:10415:  int tmp___41 ;
        -:10416:  boolean is_print___0 ;
        -:10417:  int tmp___42 ;
        -:10418:  boolean is_punct___0 ;
        -:10419:  int tmp___43 ;
        -:10420:  boolean is_space___0 ;
        -:10421:  int tmp___44 ;
        -:10422:  boolean is_upper___0 ;
        -:10423:  int tmp___45 ;
        -:10424:  boolean is_xdigit___0 ;
        -:10425:  int tmp___46 ;
        -:10426:  int tmp___47 ;
        -:10427:  int tmp___48 ;
        -:10428:  int tmp___49 ;
        -:10429:  int tmp___50 ;
        -:10430:  int tmp___51 ;
        -:10431:  int tmp___52 ;
        -:10432:  int tmp___53 ;
        -:10433:  int tmp___54 ;
        -:10434:  int tmp___55 ;
        -:10435:  int tmp___56 ;
        -:10436:  int tmp___57 ;
        -:10437:  int tmp___58 ;
        -:10438:  char const   *tmp___59 ;
        -:10439:  unsigned short const   **tmp___60 ;
        -:10440:  unsigned short const   **tmp___61 ;
        -:10441:  unsigned short const   **tmp___62 ;
        -:10442:  unsigned short const   **tmp___63 ;
        -:10443:  unsigned short const   **tmp___64 ;
        -:10444:  unsigned short const   **tmp___65 ;
        -:10445:  unsigned short const   **tmp___66 ;
        -:10446:  unsigned short const   **tmp___67 ;
        -:10447:  unsigned short const   **tmp___68 ;
        -:10448:  unsigned short const   **tmp___69 ;
        -:10449:  unsigned short const   **tmp___70 ;
        -:10450:  unsigned short const   **tmp___71 ;
        -:10451:  unsigned short const   **tmp___72 ;
        -:10452:  unsigned short const   **tmp___73 ;
        -:10453:  unsigned char tmp___74 ;
        -:10454:  char const   *tmp___75 ;
        -:10455:  void *tmp___76 ;
        -:10456:  unsigned char *old_buffer___8 ;
        -:10457:  void *tmp___77 ;
        -:10458:  unsigned char *tmp___78 ;
        -:10459:  unsigned char *tmp___79 ;
        -:10460:  unsigned char *tmp___80 ;
        -:10461:  unsigned char *old_buffer___9 ;
        -:10462:  void *tmp___81 ;
        -:10463:  unsigned char *tmp___82 ;
        -:10464:  regnum_t this_group_regnum ;
        -:10465:  unsigned char *inner_group_loc ;
        -:10466:  unsigned char *old_buffer___10 ;
        -:10467:  void *tmp___83 ;
        -:10468:  unsigned char *tmp___84 ;
        -:10469:  unsigned char *tmp___85 ;
        -:10470:  unsigned char *tmp___86 ;
        -:10471:  unsigned char *old_buffer___11 ;
        -:10472:  void *tmp___87 ;
        -:10473:  unsigned char *old_buffer___12 ;
        -:10474:  void *tmp___88 ;
        -:10475:  int lower_bound ;
        -:10476:  int upper_bound ;
        -:10477:  char const   *tmp___89 ;
        -:10478:  char const   *tmp___90 ;
        -:10479:  char const   *tmp___91 ;
        -:10480:  char const   *tmp___92 ;
        -:10481:  char const   *tmp___93 ;
        -:10482:  unsigned char *old_buffer___13 ;
        -:10483:  void *tmp___94 ;
        -:10484:  unsigned int nbytes ;
        -:10485:  unsigned char *old_buffer___14 ;
        -:10486:  void *tmp___95 ;
        -:10487:  char const   *tmp___96 ;
        -:10488:  unsigned char *old_buffer___15 ;
        -:10489:  void *tmp___97 ;
        -:10490:  unsigned char *tmp___98 ;
        -:10491:  unsigned char *old_buffer___16 ;
        -:10492:  void *tmp___99 ;
        -:10493:  unsigned char *tmp___100 ;
        -:10494:  unsigned char *old_buffer___17 ;
        -:10495:  void *tmp___101 ;
        -:10496:  unsigned char *tmp___102 ;
        -:10497:  unsigned char *old_buffer___18 ;
        -:10498:  void *tmp___103 ;
        -:10499:  unsigned char *tmp___104 ;
        -:10500:  unsigned char *old_buffer___19 ;
        -:10501:  void *tmp___105 ;
        -:10502:  unsigned char *tmp___106 ;
        -:10503:  unsigned char *old_buffer___20 ;
        -:10504:  void *tmp___107 ;
        -:10505:  unsigned char *tmp___108 ;
        -:10506:  unsigned char *old_buffer___21 ;
        -:10507:  void *tmp___109 ;
        -:10508:  unsigned char *tmp___110 ;
        -:10509:  unsigned char *old_buffer___22 ;
        -:10510:  void *tmp___111 ;
        -:10511:  unsigned char *tmp___112 ;
        -:10512:  boolean tmp___113 ;
        -:10513:  unsigned char *old_buffer___23 ;
        -:10514:  void *tmp___114 ;
        -:10515:  unsigned char *tmp___115 ;
        -:10516:  unsigned char *tmp___116 ;
        -:10517:  unsigned char *old_buffer___24 ;
        -:10518:  void *tmp___117 ;
        -:10519:  unsigned char *tmp___118 ;
        -:10520:  unsigned char *tmp___119 ;
        -:10521:  int tmp___120 ;
        -:10522:  int tmp___121 ;
        -:10523:  int tmp___122 ;
        -:10524:  int tmp___123 ;
        -:10525:  int tmp___124 ;
        -:10526:  unsigned char *old_buffer___25 ;
        -:10527:  void *tmp___125 ;
        -:10528:  unsigned char *tmp___126 ;
        -:10529:  unsigned char *old_buffer___26 ;
        -:10530:  void *tmp___127 ;
        -:10531:  unsigned char *tmp___128 ;
        -:10532:
        -:10533:  {
        -:10534:  {
        1:10535:  p = pattern;
        1:10536:  pend = pattern + size;
        1:10537:  translate = bufp->translate;
        1:10538:  pending_exact = (unsigned char *)0;
        1:10539:  laststart___0 = (unsigned char *)0;
        1:10540:  fixup_alt_jump = (unsigned char *)0;
        1:10541:  regnum = (regnum_t )0;
        1:10542:  tmp = xmalloc(32UL * sizeof(compile_stack_elt_t ));
        1:10543:  compile_stack.stack = (compile_stack_elt_t *)tmp;
        -:10544:  }
        1:10545:  if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
    #####:10546:    return ((reg_errcode_t )12);
        -:10547:  }
        -:10548:  {
        1:10549:  compile_stack.size = 32U;
        1:10550:  compile_stack.avail = 0U;
        1:10551:  bufp->syntax = syntax;
        1:10552:  bufp->fastmap_accurate = 0U;
        1:10553:  tmp___0 = 0U;
        1:10554:  bufp->not_eol = tmp___0;
        1:10555:  bufp->not_bol = tmp___0;
        1:10556:  bufp->used = 0UL;
        1:10557:  bufp->re_nsub = (size_t )0;
        1:10558:  init_syntax_once();
        -:10559:  }
        1:10560:  if (bufp->allocated == 0UL) {
        1:10561:    if (bufp->buffer) {
        -:10562:       
        -:10563:
    #####:10564:      tmp___1 = realloc((void *)bufp->buffer, 32UL * sizeof(unsigned char ));
    #####:10565:      bufp->buffer = (unsigned char *)tmp___1;
        -:10566:       
        -:10567:
    #####:10568:    } else {
        -:10569:       
        -:10570:
        1:10571:      tmp___2 = xmalloc(32UL * sizeof(unsigned char ));
        1:10572:      bufp->buffer = (unsigned char *)tmp___2;
        -:10573:       
        -:10574:
        -:10575:    }
        1:10576:    if (! bufp->buffer) {
        -:10577:      {
    #####:10578:      free((void *)compile_stack.stack);
        -:10579:      }
    #####:10580:      return ((reg_errcode_t )12);
        -:10581:    }
        1:10582:    bufp->allocated = 32UL;
        1:10583:  }
        1:10584:  b = bufp->buffer;
        1:10585:  begalt = b;
        -:10586:  {
       16:10587:  while (1) {
        -:10588:                                     ;
       16:10589:    if (! ((unsigned long )p != (unsigned long )pend)) {
        1:10590:      goto while_break;
        -:10591:    }
        -:10592:    {
       15:10593:    while (1) {
        -:10594:                                           ;
       15:10595:      if ((unsigned long )p == (unsigned long )pend) {
    #####:10596:        return ((reg_errcode_t )14);
        -:10597:      }
       15:10598:      tmp___3 = p;
       15:10599:      p ++;
       15:10600:      c = (unsigned char )*tmp___3;
       15:10601:      if (translate) {
    #####:10602:        c = (unsigned char )*(translate + (int )c);
    #####:10603:      }
       15:10604:      goto while_break___0;
        -:10605:    }
        -:10606:    while_break___0: /* CIL Label */ ;
        -:10607:    }
        -:10608:    {
       15:10609:    if ((int )c == 94) {
    #####:10610:      goto case_94;
        -:10611:    }
       15:10612:    if ((int )c == 36) {
    #####:10613:      goto case_36;
        -:10614:    }
       15:10615:    if ((int )c == 43) {
    #####:10616:      goto case_43;
        -:10617:    }
       15:10618:    if ((int )c == 63) {
    #####:10619:      goto case_43;
        -:10620:    }
       15:10621:    if ((int )c == 42) {
    #####:10622:      goto handle_plus;
        -:10623:    }
       15:10624:    if ((int )c == 46) {
        1:10625:      goto case_46;
        -:10626:    }
       14:10627:    if ((int )c == 91) {
    #####:10628:      goto case_91;
        -:10629:    }
       14:10630:    if ((int )c == 40) {
    #####:10631:      goto case_40;
        -:10632:    }
       14:10633:    if ((int )c == 41) {
    #####:10634:      goto case_41;
        -:10635:    }
       14:10636:    if ((int )c == 10) {
    #####:10637:      goto case_10;
        -:10638:    }
       14:10639:    if ((int )c == 124) {
        1:10640:      goto case_124;
        -:10641:    }
       13:10642:    if ((int )c == 123) {
        1:10643:      goto case_123;
        -:10644:    }
       12:10645:    if ((int )c == 92) {
    #####:10646:      goto case_92;
        -:10647:    }
       12:10648:    goto normal_char;
        -:10649:    case_94: /* CIL Label */ 
    #####:10650:    if ((unsigned long )p == (unsigned long )(pattern + 1)) {
    #####:10651:      goto _L;
        -:10652:    } else { //Added block
    #####:10653:    if (syntax & (((1UL << 1) << 1) << 1)) {
    #####:10654:      goto _L;
        -:10655:    } else {
        -:10656:      {
    #####:10657:      tmp___6 = at_begline_loc_p(pattern, p, syntax);
        -:10658:      }
    #####:10659:      if (tmp___6) {
        -:10660:        _L: 
        -:10661:        {
    #####:10662:        while (1) {
        -:10663:                                               ;
        -:10664:          {
    #####:10665:          while (1) {
        -:10666:                                                 ;
    #####:10667:            if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:10668:              goto while_break___2;
        -:10669:            }
        -:10670:            {
    #####:10671:            while (1) {
        -:10672:                                                   ;
    #####:10673:              old_buffer = bufp->buffer;
    #####:10674:              if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10675:                return ((reg_errcode_t )15);
        -:10676:              }
    #####:10677:              bufp->allocated <<= 1;
    #####:10678:              if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10679:                bufp->allocated = (unsigned long )(1L << 16);
    #####:10680:              }
        -:10681:              {
    #####:10682:              tmp___4 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10683:              bufp->buffer = (unsigned char *)tmp___4;
        -:10684:              }
    #####:10685:              if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10686:                return ((reg_errcode_t )12);
        -:10687:              }
    #####:10688:              if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
    #####:10689:                b = bufp->buffer + (b - old_buffer);
    #####:10690:                begalt = bufp->buffer + (begalt - old_buffer);
    #####:10691:                if (fixup_alt_jump) {
    #####:10692:                  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
    #####:10693:                }
    #####:10694:                if (laststart___0) {
    #####:10695:                  laststart___0 = bufp->buffer + (laststart___0 - old_buffer);
    #####:10696:                }
    #####:10697:                if (pending_exact) {
    #####:10698:                  pending_exact = bufp->buffer + (pending_exact - old_buffer);
    #####:10699:                }
    #####:10700:              }
    #####:10701:              goto while_break___3;
        -:10702:            }
        -:10703:            while_break___3: /* CIL Label */ ;
        -:10704:            }
        -:10705:          }
        -:10706:          while_break___2: /* CIL Label */ ;
        -:10707:          }
    #####:10708:          tmp___5 = b;
    #####:10709:          b ++;
    #####:10710:          *tmp___5 = (unsigned char)9;
    #####:10711:          goto while_break___1;
        -:10712:        }
        -:10713:        while_break___1: /* CIL Label */ ;
        -:10714:        }
    #####:10715:      } else {
    #####:10716:        goto normal_char;
        -:10717:      }
        -:10718:    }
        -:10719:    }
    #####:10720:    goto switch_break;
        -:10721:    case_36: /* CIL Label */ 
    #####:10722:    if ((unsigned long )p == (unsigned long )pend) {
    #####:10723:      goto _L___0;
        -:10724:    } else { //Added block
    #####:10725:    if (syntax & (((1UL << 1) << 1) << 1)) {
    #####:10726:      goto _L___0;
        -:10727:    } else {
        -:10728:      {
    #####:10729:      tmp___9 = at_endline_loc_p(p, pend, syntax);
        -:10730:      }
    #####:10731:      if (tmp___9) {
        -:10732:        _L___0: 
        -:10733:        {
    #####:10734:        while (1) {
        -:10735:                                               ;
        -:10736:          {
    #####:10737:          while (1) {
        -:10738:                                                 ;
    #####:10739:            if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:10740:              goto while_break___5;
        -:10741:            }
        -:10742:            {
    #####:10743:            while (1) {
        -:10744:                                                   ;
    #####:10745:              old_buffer___0 = bufp->buffer;
    #####:10746:              if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10747:                return ((reg_errcode_t )15);
        -:10748:              }
    #####:10749:              bufp->allocated <<= 1;
    #####:10750:              if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10751:                bufp->allocated = (unsigned long )(1L << 16);
    #####:10752:              }
        -:10753:              {
    #####:10754:              tmp___7 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10755:              bufp->buffer = (unsigned char *)tmp___7;
        -:10756:              }
    #####:10757:              if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10758:                return ((reg_errcode_t )12);
        -:10759:              }
    #####:10760:              if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
    #####:10761:                b = bufp->buffer + (b - old_buffer___0);
    #####:10762:                begalt = bufp->buffer + (begalt - old_buffer___0);
    #####:10763:                if (fixup_alt_jump) {
    #####:10764:                  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
    #####:10765:                }
    #####:10766:                if (laststart___0) {
    #####:10767:                  laststart___0 = bufp->buffer + (laststart___0 - old_buffer___0);
    #####:10768:                }
    #####:10769:                if (pending_exact) {
    #####:10770:                  pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
    #####:10771:                }
    #####:10772:              }
    #####:10773:              goto while_break___6;
        -:10774:            }
        -:10775:            while_break___6: /* CIL Label */ ;
        -:10776:            }
        -:10777:          }
        -:10778:          while_break___5: /* CIL Label */ ;
        -:10779:          }
    #####:10780:          tmp___8 = b;
    #####:10781:          b ++;
    #####:10782:          *tmp___8 = (unsigned char)10;
    #####:10783:          goto while_break___4;
        -:10784:        }
        -:10785:        while_break___4: /* CIL Label */ ;
        -:10786:        }
    #####:10787:      } else {
    #####:10788:        goto normal_char;
        -:10789:      }
        -:10790:    }
        -:10791:    }
    #####:10792:    goto switch_break;
        -:10793:    case_43: /* CIL Label */ 
        -:10794:                             
    #####:10795:     if (syntax & (1UL << 1)) {
    #####:10796:      goto normal_char;
        -:10797:    } else { //Added block
    #####:10798:    if (syntax & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:10799:      goto normal_char;
        -:10800:    }
        -:10801:    }
        -:10802:    handle_plus: 
        -:10803:                             
    #####:10804:     if (! laststart___0) {
    #####:10805:      if (syntax & (((((1UL << 1) << 1) << 1) << 1) << 1)) {
        -:10806:        {
    #####:10807:        free((void *)compile_stack.stack);
        -:10808:        }
    #####:10809:        return ((reg_errcode_t )13);
        -:10810:      } else { //Added block
    #####:10811:      if (! (syntax & ((((1UL << 1) << 1) << 1) << 1))) {
    #####:10812:        goto normal_char;
        -:10813:      }
        -:10814:      }
    #####:10815:    }
    #####:10816:    keep_string_p = (boolean )0;
    #####:10817:    zero_times_ok = (char)0;
    #####:10818:    many_times_ok = (char)0;
        -:10819:    {
    #####:10820:    while (1) {
        -:10821:                                           ;
    #####:10822:      zero_times_ok = (char )((int )zero_times_ok | ((int )c != 43));
    #####:10823:      many_times_ok = (char )((int )many_times_ok | ((int )c != 63));
    #####:10824:      if ((unsigned long )p == (unsigned long )pend) {
    #####:10825:        goto while_break___7;
        -:10826:      }
        -:10827:      {
    #####:10828:      while (1) {
        -:10829:                                             ;
    #####:10830:        if ((unsigned long )p == (unsigned long )pend) {
    #####:10831:          return ((reg_errcode_t )14);
        -:10832:        }
    #####:10833:        tmp___10 = p;
    #####:10834:        p ++;
    #####:10835:        c = (unsigned char )*tmp___10;
    #####:10836:        if (translate) {
    #####:10837:          c = (unsigned char )*(translate + (int )c);
    #####:10838:        }
    #####:10839:        goto while_break___8;
        -:10840:      }
        -:10841:      while_break___8: /* CIL Label */ ;
        -:10842:      }
    #####:10843:      if (! ((int )c == 42)) {
    #####:10844:        if (! (syntax & (1UL << 1))) {
    #####:10845:          if (! ((int )c == 43)) {
    #####:10846:            if (! ((int )c == 63)) {
    #####:10847:              goto _L___1;
        -:10848:            }
    #####:10849:          }
    #####:10850:        } else { //Added block
        -:10851:        _L___1: 
    #####:10852:        if (syntax & (1UL << 1)) {
    #####:10853:          if ((int )c == 92) {
    #####:10854:            if ((unsigned long )p == (unsigned long )pend) {
        -:10855:              {
    #####:10856:              free((void *)compile_stack.stack);
        -:10857:              }
    #####:10858:              return ((reg_errcode_t )5);
        -:10859:            }
        -:10860:            {
    #####:10861:            while (1) {
        -:10862:                                                   ;
    #####:10863:              if ((unsigned long )p == (unsigned long )pend) {
    #####:10864:                return ((reg_errcode_t )14);
        -:10865:              }
    #####:10866:              tmp___11 = p;
    #####:10867:              p ++;
    #####:10868:              c1 = (unsigned char )*tmp___11;
    #####:10869:              if (translate) {
    #####:10870:                c1 = (unsigned char )*(translate + (int )c1);
    #####:10871:              }
    #####:10872:              goto while_break___9;
        -:10873:            }
        -:10874:            while_break___9: /* CIL Label */ ;
        -:10875:            }
    #####:10876:            if (! ((int )c1 == 43)) {
    #####:10877:              if (! ((int )c1 == 63)) {
    #####:10878:                p --;
    #####:10879:                p --;
    #####:10880:                goto while_break___7;
        -:10881:              }
    #####:10882:            }
    #####:10883:            c = c1;
    #####:10884:          } else {
    #####:10885:            p --;
    #####:10886:            goto while_break___7;
        -:10887:          }
    #####:10888:        } else {
    #####:10889:          p --;
    #####:10890:          goto while_break___7;
        -:10891:        }
        -:10892:        }
    #####:10893:      }
        -:10894:    }
        -:10895:    while_break___7: /* CIL Label */ ;
        -:10896:    }
    #####:10897:    if (! laststart___0) {
    #####:10898:      goto switch_break;
        -:10899:    }
    #####:10900:    if (many_times_ok) {
        -:10901:      {
    #####:10902:      while (1) {
        -:10903:                                              ;
    #####:10904:        if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:10905:          goto while_break___10;
        -:10906:        }
        -:10907:        {
    #####:10908:        while (1) {
        -:10909:                                                ;
    #####:10910:          old_buffer___1 = bufp->buffer;
    #####:10911:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10912:            return ((reg_errcode_t )15);
        -:10913:          }
    #####:10914:          bufp->allocated <<= 1;
    #####:10915:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10916:            bufp->allocated = (unsigned long )(1L << 16);
    #####:10917:          }
        -:10918:          {
    #####:10919:          tmp___12 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10920:          bufp->buffer = (unsigned char *)tmp___12;
        -:10921:          }
    #####:10922:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10923:            return ((reg_errcode_t )12);
        -:10924:          }
    #####:10925:          if ((unsigned long )old_buffer___1 != (unsigned long )bufp->buffer) {
    #####:10926:            b = bufp->buffer + (b - old_buffer___1);
    #####:10927:            begalt = bufp->buffer + (begalt - old_buffer___1);
    #####:10928:            if (fixup_alt_jump) {
    #####:10929:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
    #####:10930:            }
    #####:10931:            if (laststart___0) {
    #####:10932:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___1);
    #####:10933:            }
    #####:10934:            if (pending_exact) {
    #####:10935:              pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
    #####:10936:            }
    #####:10937:          }
    #####:10938:          goto while_break___11;
        -:10939:        }
        -:10940:        while_break___11: /* CIL Label */ ;
        -:10941:        }
        -:10942:      }
        -:10943:      while_break___10: /* CIL Label */ ;
        -:10944:      }
    #####:10945:      if (translate) {
    #####:10946:        tmp___13 = (int )*(translate + (int )((unsigned char )*(p - 2)));
    #####:10947:      } else {
    #####:10948:        tmp___13 = (int )*(p - 2);
        -:10949:      }
    #####:10950:      if (translate) {
    #####:10951:        tmp___14 = (int )*(translate + 46);
    #####:10952:      } else {
    #####:10953:        tmp___14 = '.';
        -:10954:      }
    #####:10955:      if (tmp___13 == tmp___14) {
    #####:10956:        if (zero_times_ok) {
    #####:10957:          if ((unsigned long )p < (unsigned long )pend) {
    #####:10958:            if (translate) {
    #####:10959:              tmp___15 = (int )*(translate + (int )((unsigned char )*p));
    #####:10960:            } else {
    #####:10961:              tmp___15 = (int )*p;
        -:10962:            }
    #####:10963:            if (translate) {
    #####:10964:              tmp___16 = (int )*(translate + 10);
    #####:10965:            } else {
    #####:10966:              tmp___16 = '\n';
        -:10967:            }
    #####:10968:            if (tmp___15 == tmp___16) {
    #####:10969:              if (! (syntax & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
        -:10970:                 
        -:10971:
    #####:10972:                store_op1((re_opcode_t )13, b, (int )((laststart___0 - b) - 3L));
    #####:10973:                keep_string_p = (boolean )1;
        -:10974:                 
        -:10975:
    #####:10976:              } else {
        -:10977:                 
        -:10978:
    #####:10979:                store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:10980:                 
        -:10981:
        -:10982:              }
    #####:10983:            } else {
        -:10984:               
        -:10985:
    #####:10986:              store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:10987:               
        -:10988:
        -:10989:            }
    #####:10990:          } else {
        -:10991:             
        -:10992:
    #####:10993:            store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:10994:             
        -:10995:
        -:10996:          }
    #####:10997:        } else {
        -:10998:           
        -:10999:
    #####:11000:          store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:11001:           
        -:11002:
        -:11003:        }
    #####:11004:      } else {
        -:11005:         
        -:11006:
    #####:11007:        store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:11008:         
        -:11009:
        -:11010:      }
    #####:11011:      b += 3;
    #####:11012:    }
        -:11013:    {
    #####:11014:    while (1) {
        -:11015:                                            ;
    #####:11016:      if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:11017:        goto while_break___12;
        -:11018:      }
        -:11019:      {
    #####:11020:      while (1) {
        -:11021:                                              ;
    #####:11022:        old_buffer___2 = bufp->buffer;
    #####:11023:        if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11024:          return ((reg_errcode_t )15);
        -:11025:        }
    #####:11026:        bufp->allocated <<= 1;
    #####:11027:        if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11028:          bufp->allocated = (unsigned long )(1L << 16);
    #####:11029:        }
        -:11030:        {
    #####:11031:        tmp___17 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11032:        bufp->buffer = (unsigned char *)tmp___17;
        -:11033:        }
    #####:11034:        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11035:          return ((reg_errcode_t )12);
        -:11036:        }
    #####:11037:        if ((unsigned long )old_buffer___2 != (unsigned long )bufp->buffer) {
    #####:11038:          b = bufp->buffer + (b - old_buffer___2);
    #####:11039:          begalt = bufp->buffer + (begalt - old_buffer___2);
    #####:11040:          if (fixup_alt_jump) {
    #####:11041:            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
    #####:11042:          }
    #####:11043:          if (laststart___0) {
    #####:11044:            laststart___0 = bufp->buffer + (laststart___0 - old_buffer___2);
    #####:11045:          }
    #####:11046:          if (pending_exact) {
    #####:11047:            pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
    #####:11048:          }
    #####:11049:        }
    #####:11050:        goto while_break___13;
        -:11051:      }
        -:11052:      while_break___13: /* CIL Label */ ;
        -:11053:      }
        -:11054:    }
        -:11055:    while_break___12: /* CIL Label */ ;
        -:11056:    }
    #####:11057:    if (keep_string_p) {
    #####:11058:      tmp___18 = 16;
    #####:11059:    } else {
    #####:11060:      tmp___18 = 15;
        -:11061:    }
        -:11062:    {
    #####:11063:    insert_op1((re_opcode_t )tmp___18, laststart___0, (int )(((b + 3) - laststart___0) - 3L),
    #####:11064:               b);
    #####:11065:    pending_exact = (unsigned char *)0;
    #####:11066:    b += 3;
        -:11067:    }
    #####:11068:    if (! zero_times_ok) {
        -:11069:      {
    #####:11070:      while (1) {
        -:11071:                                              ;
    #####:11072:        if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:11073:          goto while_break___14;
        -:11074:        }
        -:11075:        {
    #####:11076:        while (1) {
        -:11077:                                                ;
    #####:11078:          old_buffer___3 = bufp->buffer;
    #####:11079:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11080:            return ((reg_errcode_t )15);
        -:11081:          }
    #####:11082:          bufp->allocated <<= 1;
    #####:11083:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11084:            bufp->allocated = (unsigned long )(1L << 16);
    #####:11085:          }
        -:11086:          {
    #####:11087:          tmp___19 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11088:          bufp->buffer = (unsigned char *)tmp___19;
        -:11089:          }
    #####:11090:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11091:            return ((reg_errcode_t )12);
        -:11092:          }
    #####:11093:          if ((unsigned long )old_buffer___3 != (unsigned long )bufp->buffer) {
    #####:11094:            b = bufp->buffer + (b - old_buffer___3);
    #####:11095:            begalt = bufp->buffer + (begalt - old_buffer___3);
    #####:11096:            if (fixup_alt_jump) {
    #####:11097:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
    #####:11098:            }
    #####:11099:            if (laststart___0) {
    #####:11100:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___3);
    #####:11101:            }
    #####:11102:            if (pending_exact) {
    #####:11103:              pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
    #####:11104:            }
    #####:11105:          }
    #####:11106:          goto while_break___15;
        -:11107:        }
        -:11108:        while_break___15: /* CIL Label */ ;
        -:11109:        }
        -:11110:      }
        -:11111:      while_break___14: /* CIL Label */ ;
        -:11112:      }
        -:11113:      {
    #####:11114:      insert_op1((re_opcode_t )19, laststart___0, (int )(((laststart___0 + 6) - laststart___0) - 3L),
    #####:11115:                 b);
    #####:11116:      b += 3;
        -:11117:      }
    #####:11118:    }
    #####:11119:    goto switch_break;
        -:11120:    case_46: /* CIL Label */ 
        1:11121:    laststart___0 = b;
        -:11122:    {
        1:11123:    while (1) {
        -:11124:                                            ;
        -:11125:      {
        1:11126:      while (1) {
        -:11127:                                              ;
        1:11128:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
        1:11129:          goto while_break___17;
        -:11130:        }
        -:11131:        {
    #####:11132:        while (1) {
        -:11133:                                                ;
    #####:11134:          old_buffer___4 = bufp->buffer;
    #####:11135:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11136:            return ((reg_errcode_t )15);
        -:11137:          }
    #####:11138:          bufp->allocated <<= 1;
    #####:11139:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11140:            bufp->allocated = (unsigned long )(1L << 16);
    #####:11141:          }
        -:11142:          {
    #####:11143:          tmp___20 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11144:          bufp->buffer = (unsigned char *)tmp___20;
        -:11145:          }
    #####:11146:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11147:            return ((reg_errcode_t )12);
        -:11148:          }
    #####:11149:          if ((unsigned long )old_buffer___4 != (unsigned long )bufp->buffer) {
    #####:11150:            b = bufp->buffer + (b - old_buffer___4);
    #####:11151:            begalt = bufp->buffer + (begalt - old_buffer___4);
    #####:11152:            if (fixup_alt_jump) {
    #####:11153:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
    #####:11154:            }
    #####:11155:            if (laststart___0) {
    #####:11156:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___4);
    #####:11157:            }
    #####:11158:            if (pending_exact) {
    #####:11159:              pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
    #####:11160:            }
    #####:11161:          }
    #####:11162:          goto while_break___18;
        -:11163:        }
        -:11164:        while_break___18: /* CIL Label */ ;
        -:11165:        }
        -:11166:      }
        -:11167:      while_break___17: /* CIL Label */ ;
        -:11168:      }
        1:11169:      tmp___21 = b;
        1:11170:      b ++;
        1:11171:      *tmp___21 = (unsigned char)3;
        1:11172:      goto while_break___16;
        -:11173:    }
        -:11174:    while_break___16: /* CIL Label */ ;
        -:11175:    }
        1:11176:    goto switch_break;
        -:11177:    case_91: /* CIL Label */ 
    #####:11178:    had_char_class = (boolean )0;
    #####:11179:    if ((unsigned long )p == (unsigned long )pend) {
        -:11180:      {
    #####:11181:      free((void *)compile_stack.stack);
        -:11182:      }
    #####:11183:      return ((reg_errcode_t )7);
        -:11184:    }
        -:11185:    {
    #####:11186:    while (1) {
        -:11187:                                            ;
    #####:11188:      if (! ((unsigned long )((b - bufp->buffer) + 34L) > bufp->allocated)) {
    #####:11189:        goto while_break___19;
        -:11190:      }
        -:11191:      {
    #####:11192:      while (1) {
        -:11193:                                              ;
    #####:11194:        old_buffer___5 = bufp->buffer;
    #####:11195:        if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11196:          return ((reg_errcode_t )15);
        -:11197:        }
    #####:11198:        bufp->allocated <<= 1;
    #####:11199:        if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11200:          bufp->allocated = (unsigned long )(1L << 16);
    #####:11201:        }
        -:11202:        {
    #####:11203:        tmp___22 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11204:        bufp->buffer = (unsigned char *)tmp___22;
        -:11205:        }
    #####:11206:        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11207:          return ((reg_errcode_t )12);
        -:11208:        }
    #####:11209:        if ((unsigned long )old_buffer___5 != (unsigned long )bufp->buffer) {
    #####:11210:          b = bufp->buffer + (b - old_buffer___5);
    #####:11211:          begalt = bufp->buffer + (begalt - old_buffer___5);
    #####:11212:          if (fixup_alt_jump) {
    #####:11213:            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
    #####:11214:          }
    #####:11215:          if (laststart___0) {
    #####:11216:            laststart___0 = bufp->buffer + (laststart___0 - old_buffer___5);
    #####:11217:          }
    #####:11218:          if (pending_exact) {
    #####:11219:            pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
    #####:11220:          }
    #####:11221:        }
    #####:11222:        goto while_break___20;
        -:11223:      }
        -:11224:      while_break___20: /* CIL Label */ ;
        -:11225:      }
        -:11226:    }
        -:11227:    while_break___19: /* CIL Label */ ;
        -:11228:    }
    #####:11229:    laststart___0 = b;
        -:11230:    {
    #####:11231:    while (1) {
        -:11232:                                            ;
        -:11233:      {
    #####:11234:      while (1) {
        -:11235:                                              ;
    #####:11236:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:11237:          goto while_break___22;
        -:11238:        }
        -:11239:        {
    #####:11240:        while (1) {
        -:11241:                                                ;
    #####:11242:          old_buffer___6 = bufp->buffer;
    #####:11243:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11244:            return ((reg_errcode_t )15);
        -:11245:          }
    #####:11246:          bufp->allocated <<= 1;
    #####:11247:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11248:            bufp->allocated = (unsigned long )(1L << 16);
    #####:11249:          }
        -:11250:          {
    #####:11251:          tmp___23 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11252:          bufp->buffer = (unsigned char *)tmp___23;
        -:11253:          }
    #####:11254:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11255:            return ((reg_errcode_t )12);
        -:11256:          }
    #####:11257:          if ((unsigned long )old_buffer___6 != (unsigned long )bufp->buffer) {
    #####:11258:            b = bufp->buffer + (b - old_buffer___6);
    #####:11259:            begalt = bufp->buffer + (begalt - old_buffer___6);
    #####:11260:            if (fixup_alt_jump) {
    #####:11261:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
    #####:11262:            }
    #####:11263:            if (laststart___0) {
    #####:11264:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___6);
    #####:11265:            }
    #####:11266:            if (pending_exact) {
    #####:11267:              pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
    #####:11268:            }
    #####:11269:          }
    #####:11270:          goto while_break___23;
        -:11271:        }
        -:11272:        while_break___23: /* CIL Label */ ;
        -:11273:        }
        -:11274:      }
        -:11275:      while_break___22: /* CIL Label */ ;
        -:11276:      }
    #####:11277:      tmp___24 = b;
    #####:11278:      b ++;
    #####:11279:      if ((int const   )*p == 94) {
    #####:11280:        tmp___25 = 5;
    #####:11281:      } else {
    #####:11282:        tmp___25 = 4;
        -:11283:      }
    #####:11284:      *tmp___24 = (unsigned char )tmp___25;
    #####:11285:      goto while_break___21;
        -:11286:    }
        -:11287:    while_break___21: /* CIL Label */ ;
        -:11288:    }
    #####:11289:    if ((int const   )*p == 94) {
    #####:11290:      p ++;
    #####:11291:    }
    #####:11292:    p1 = p;
        -:11293:    {
    #####:11294:    while (1) {
        -:11295:                                            ;
        -:11296:      {
    #####:11297:      while (1) {
        -:11298:                                              ;
    #####:11299:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:11300:          goto while_break___25;
        -:11301:        }
        -:11302:        {
    #####:11303:        while (1) {
        -:11304:                                                ;
    #####:11305:          old_buffer___7 = bufp->buffer;
    #####:11306:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11307:            return ((reg_errcode_t )15);
        -:11308:          }
    #####:11309:          bufp->allocated <<= 1;
    #####:11310:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11311:            bufp->allocated = (unsigned long )(1L << 16);
    #####:11312:          }
        -:11313:          {
    #####:11314:          tmp___26 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11315:          bufp->buffer = (unsigned char *)tmp___26;
        -:11316:          }
    #####:11317:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11318:            return ((reg_errcode_t )12);
        -:11319:          }
    #####:11320:          if ((unsigned long )old_buffer___7 != (unsigned long )bufp->buffer) {
    #####:11321:            b = bufp->buffer + (b - old_buffer___7);
    #####:11322:            begalt = bufp->buffer + (begalt - old_buffer___7);
    #####:11323:            if (fixup_alt_jump) {
    #####:11324:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
    #####:11325:            }
    #####:11326:            if (laststart___0) {
    #####:11327:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___7);
    #####:11328:            }
    #####:11329:            if (pending_exact) {
    #####:11330:              pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
    #####:11331:            }
    #####:11332:          }
    #####:11333:          goto while_break___26;
        -:11334:        }
        -:11335:        while_break___26: /* CIL Label */ ;
        -:11336:        }
        -:11337:      }
        -:11338:      while_break___25: /* CIL Label */ ;
        -:11339:      }
    #####:11340:      tmp___27 = b;
    #####:11341:      b ++;
    #####:11342:      *tmp___27 = (unsigned char )((1 << 8) / 8);
    #####:11343:      goto while_break___24;
        -:11344:    }
        -:11345:    while_break___24: /* CIL Label */ ;
        -:11346:    }
        -:11347:    {
    #####:11348:    memset((void *)b, '\000', (size_t )((1 << 8) / 8));
        -:11349:    }
    #####:11350:    if ((unsigned int )((re_opcode_t )*(b + -2)) == 5U) {
    #####:11351:      if (syntax & ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11352:        *(b + 1) = (unsigned char )((int )*(b + 1) | (1 << 2));
    #####:11353:      }
    #####:11354:    }
        -:11355:    {
    #####:11356:    while (1) {
        -:11357:                                            ;
    #####:11358:      if ((unsigned long )p == (unsigned long )pend) {
        -:11359:        {
    #####:11360:        free((void *)compile_stack.stack);
        -:11361:        }
    #####:11362:        return ((reg_errcode_t )7);
        -:11363:      }
        -:11364:      {
    #####:11365:      while (1) {
        -:11366:                                              ;
    #####:11367:        if ((unsigned long )p == (unsigned long )pend) {
    #####:11368:          return ((reg_errcode_t )14);
        -:11369:        }
    #####:11370:        tmp___28 = p;
    #####:11371:        p ++;
    #####:11372:        c = (unsigned char )*tmp___28;
    #####:11373:        if (translate) {
    #####:11374:          c = (unsigned char )*(translate + (int )c);
    #####:11375:        }
    #####:11376:        goto while_break___28;
        -:11377:      }
        -:11378:      while_break___28: /* CIL Label */ ;
        -:11379:      }
    #####:11380:      if (syntax & 1UL) {
    #####:11381:        if ((int )c == 92) {
    #####:11382:          if ((unsigned long )p == (unsigned long )pend) {
        -:11383:            {
    #####:11384:            free((void *)compile_stack.stack);
        -:11385:            }
    #####:11386:            return ((reg_errcode_t )5);
        -:11387:          }
        -:11388:          {
    #####:11389:          while (1) {
        -:11390:                                                  ;
    #####:11391:            if ((unsigned long )p == (unsigned long )pend) {
    #####:11392:              return ((reg_errcode_t )14);
        -:11393:            }
    #####:11394:            tmp___29 = p;
    #####:11395:            p ++;
    #####:11396:            c1 = (unsigned char )*tmp___29;
    #####:11397:            if (translate) {
    #####:11398:              c1 = (unsigned char )*(translate + (int )c1);
    #####:11399:            }
    #####:11400:            goto while_break___29;
        -:11401:          }
        -:11402:          while_break___29: /* CIL Label */ ;
        -:11403:          }
    #####:11404:          *(b + (int )c1 / 8) = (unsigned char )((int )*(b + (int )c1 / 8) | (1 << (int )c1 % 8));
    #####:11405:          goto __Cont;
        -:11406:        }
    #####:11407:      }
    #####:11408:      if ((int )c == 93) {
    #####:11409:        if ((unsigned long )p != (unsigned long )(p1 + 1)) {
    #####:11410:          goto while_break___27;
        -:11411:        }
    #####:11412:      }
    #####:11413:      if (had_char_class) {
    #####:11414:        if ((int )c == 45) {
    #####:11415:          if ((int const   )*p != 93) {
        -:11416:            {
    #####:11417:            free((void *)compile_stack.stack);
        -:11418:            }
    #####:11419:            return ((reg_errcode_t )11);
        -:11420:          }
    #####:11421:        }
    #####:11422:      }
    #####:11423:      if ((int )c == 45) {
    #####:11424:        if ((unsigned long )(p - 2) >= (unsigned long )pattern) {
    #####:11425:          if ((int const   )*(p + -2) == 91) {
    #####:11426:            goto _L___19;
        -:11427:          } else {
    #####:11428:            goto _L___20;
        -:11429:          }
    #####:11430:        } else { //Added block
        -:11431:        _L___20: 
    #####:11432:        if ((unsigned long )(p - 3) >= (unsigned long )pattern) {
    #####:11433:          if ((int const   )*(p + -3) == 91) {
    #####:11434:            if ((int const   )*(p + -2) == 94) {
    #####:11435:              goto _L___19;
        -:11436:            } else {
    #####:11437:              goto _L___18;
        -:11438:            }
        -:11439:          } else {
    #####:11440:            goto _L___18;
        -:11441:          }
    #####:11442:        } else { //Added block
        -:11443:        _L___18: 
    #####:11444:        if ((int const   )*p != 93) {
        -:11445:          {
    #####:11446:          tmp___30 = compile_range(& p, pend, translate, syntax, b);
    #####:11447:          ret = tmp___30;
        -:11448:          }
    #####:11449:          if ((unsigned int )ret != 0U) {
        -:11450:            {
    #####:11451:            free((void *)compile_stack.stack);
        -:11452:            }
    #####:11453:            return (ret);
        -:11454:          }
    #####:11455:        } else {
    #####:11456:          goto _L___19;
        -:11457:        }
        -:11458:        }
        -:11459:        }
    #####:11460:      } else { //Added block
        -:11461:      _L___19: 
    #####:11462:      if ((int const   )*(p + 0) == 45) {
    #####:11463:        if ((int const   )*(p + 1) != 93) {
        -:11464:          {
    #####:11465:          while (1) {
        -:11466:                                                  ;
    #####:11467:            if ((unsigned long )p == (unsigned long )pend) {
    #####:11468:              return ((reg_errcode_t )14);
        -:11469:            }
    #####:11470:            tmp___31 = p;
    #####:11471:            p ++;
    #####:11472:            c1 = (unsigned char )*tmp___31;
    #####:11473:            if (translate) {
    #####:11474:              c1 = (unsigned char )*(translate + (int )c1);
    #####:11475:            }
    #####:11476:            goto while_break___30;
        -:11477:          }
        -:11478:          while_break___30: /* CIL Label */ ;
        -:11479:          }
        -:11480:          {
    #####:11481:          ret___0 = compile_range(& p, pend, translate, syntax, b);
        -:11482:          }
    #####:11483:          if ((unsigned int )ret___0 != 0U) {
        -:11484:            {
    #####:11485:            free((void *)compile_stack.stack);
        -:11486:            }
    #####:11487:            return (ret___0);
        -:11488:          }
    #####:11489:        } else {
    #####:11490:          goto _L___14;
        -:11491:        }
    #####:11492:      } else { //Added block
        -:11493:      _L___14: 
    #####:11494:      if (syntax & ((1UL << 1) << 1)) {
    #####:11495:        if ((int )c == 91) {
    #####:11496:          if ((int const   )*p == 58) {
        -:11497:            {
    #####:11498:            while (1) {
        -:11499:                                                    ;
    #####:11500:              if ((unsigned long )p == (unsigned long )pend) {
    #####:11501:                return ((reg_errcode_t )14);
        -:11502:              }
    #####:11503:              tmp___32 = p;
    #####:11504:              p ++;
    #####:11505:              c = (unsigned char )*tmp___32;
    #####:11506:              if (translate) {
    #####:11507:                c = (unsigned char )*(translate + (int )c);
    #####:11508:              }
    #####:11509:              goto while_break___31;
        -:11510:            }
        -:11511:            while_break___31: /* CIL Label */ ;
        -:11512:            }
    #####:11513:            c1 = (unsigned char)0;
    #####:11514:            if ((unsigned long )p == (unsigned long )pend) {
        -:11515:              {
    #####:11516:              free((void *)compile_stack.stack);
        -:11517:              }
    #####:11518:              return ((reg_errcode_t )7);
        -:11519:            }
        -:11520:            {
    #####:11521:            while (1) {
        -:11522:                                                    ;
        -:11523:              {
    #####:11524:              while (1) {
        -:11525:                                                      ;
    #####:11526:                if ((unsigned long )p == (unsigned long )pend) {
    #####:11527:                  return ((reg_errcode_t )14);
        -:11528:                }
    #####:11529:                tmp___33 = p;
    #####:11530:                p ++;
    #####:11531:                c = (unsigned char )*tmp___33;
    #####:11532:                if (translate) {
    #####:11533:                  c = (unsigned char )*(translate + (int )c);
    #####:11534:                }
    #####:11535:                goto while_break___33;
        -:11536:              }
        -:11537:              while_break___33: /* CIL Label */ ;
        -:11538:              }
    #####:11539:              if ((int )c == 58) {
    #####:11540:                if ((int const   )*p == 93) {
    #####:11541:                  goto while_break___32;
        -:11542:                } else {
    #####:11543:                  goto _L___2;
        -:11544:                }
    #####:11545:              } else { //Added block
        -:11546:              _L___2: 
    #####:11547:              if ((unsigned long )p == (unsigned long )pend) {
    #####:11548:                goto while_break___32;
        -:11549:              }
        -:11550:              }
    #####:11551:              if ((int )c1 < 6) {
    #####:11552:                tmp___34 = c1;
    #####:11553:                c1 = (unsigned char )((int )c1 + 1);
    #####:11554:                str[tmp___34] = (char )c;
    #####:11555:              } else {
    #####:11556:                str[0] = (char )'\000';
        -:11557:              }
        -:11558:            }
        -:11559:            while_break___32: /* CIL Label */ ;
        -:11560:            }
    #####:11561:            str[c1] = (char )'\000';
    #####:11562:            if ((int )c == 58) {
    #####:11563:              if ((int const   )*p == 93) {
        -:11564:                {
    #####:11565:                tmp___35 = strcmp((char const   *)(str), "alnum");
    #####:11566:                is_alnum___0 = (boolean )(tmp___35 == 0);
    #####:11567:                tmp___36 = strcmp((char const   *)(str), "alpha");
    #####:11568:                is_alpha___0 = (boolean )(tmp___36 == 0);
    #####:11569:                tmp___37 = strcmp((char const   *)(str), "blank");
    #####:11570:                is_blank___0 = (boolean )(tmp___37 == 0);
    #####:11571:                tmp___38 = strcmp((char const   *)(str), "cntrl");
    #####:11572:                is_cntrl___0 = (boolean )(tmp___38 == 0);
    #####:11573:                tmp___39 = strcmp((char const   *)(str), "digit");
    #####:11574:                is_digit___0 = (boolean )(tmp___39 == 0);
    #####:11575:                tmp___40 = strcmp((char const   *)(str), "graph");
    #####:11576:                is_graph___0 = (boolean )(tmp___40 == 0);
    #####:11577:                tmp___41 = strcmp((char const   *)(str), "lower");
    #####:11578:                is_lower___0 = (boolean )(tmp___41 == 0);
    #####:11579:                tmp___42 = strcmp((char const   *)(str), "print");
    #####:11580:                is_print___0 = (boolean )(tmp___42 == 0);
    #####:11581:                tmp___43 = strcmp((char const   *)(str), "punct");
    #####:11582:                is_punct___0 = (boolean )(tmp___43 == 0);
    #####:11583:                tmp___44 = strcmp((char const   *)(str), "space");
    #####:11584:                is_space___0 = (boolean )(tmp___44 == 0);
    #####:11585:                tmp___45 = strcmp((char const   *)(str), "upper");
    #####:11586:                is_upper___0 = (boolean )(tmp___45 == 0);
    #####:11587:                tmp___46 = strcmp((char const   *)(str), "xdigit");
    #####:11588:                is_xdigit___0 = (boolean )(tmp___46 == 0);
    #####:11589:                tmp___47 = strcmp((char const   *)(str), "alpha");
        -:11590:                }
    #####:11591:                if (! (tmp___47 == 0)) {
        -:11592:                  {
    #####:11593:                  tmp___48 = strcmp((char const   *)(str), "upper");
        -:11594:                  }
    #####:11595:                  if (! (tmp___48 == 0)) {
        -:11596:                    {
    #####:11597:                    tmp___49 = strcmp((char const   *)(str), "lower");
        -:11598:                    }
    #####:11599:                    if (! (tmp___49 == 0)) {
        -:11600:                      {
    #####:11601:                      tmp___50 = strcmp((char const   *)(str), "digit");
        -:11602:                      }
    #####:11603:                      if (! (tmp___50 == 0)) {
        -:11604:                        {
    #####:11605:                        tmp___51 = strcmp((char const   *)(str), "alnum");
        -:11606:                        }
    #####:11607:                        if (! (tmp___51 == 0)) {
        -:11608:                          {
    #####:11609:                          tmp___52 = strcmp((char const   *)(str), "xdigit");
        -:11610:                          }
    #####:11611:                          if (! (tmp___52 == 0)) {
        -:11612:                            {
    #####:11613:                            tmp___53 = strcmp((char const   *)(str), "space");
        -:11614:                            }
    #####:11615:                            if (! (tmp___53 == 0)) {
        -:11616:                              {
    #####:11617:                              tmp___54 = strcmp((char const   *)(str), "print");
        -:11618:                              }
    #####:11619:                              if (! (tmp___54 == 0)) {
        -:11620:                                {
    #####:11621:                                tmp___55 = strcmp((char const   *)(str), "punct");
        -:11622:                                }
    #####:11623:                                if (! (tmp___55 == 0)) {
        -:11624:                                  {
    #####:11625:                                  tmp___56 = strcmp((char const   *)(str), "graph");
        -:11626:                                  }
    #####:11627:                                  if (! (tmp___56 == 0)) {
        -:11628:                                    {
    #####:11629:                                    tmp___57 = strcmp((char const   *)(str), "cntrl");
        -:11630:                                    }
    #####:11631:                                    if (! (tmp___57 == 0)) {
        -:11632:                                      {
    #####:11633:                                      tmp___58 = strcmp((char const   *)(str), "blank");
        -:11634:                                      }
    #####:11635:                                      if (! (tmp___58 == 0)) {
        -:11636:                                        {
    #####:11637:                                        free((void *)compile_stack.stack);
        -:11638:                                        }
    #####:11639:                                        return ((reg_errcode_t )4);
        -:11640:                                      }
    #####:11641:                                    }
    #####:11642:                                  }
    #####:11643:                                }
    #####:11644:                              }
    #####:11645:                            }
    #####:11646:                          }
    #####:11647:                        }
    #####:11648:                      }
    #####:11649:                    }
    #####:11650:                  }
    #####:11651:                }
        -:11652:                {
    #####:11653:                while (1) {
        -:11654:                                                        ;
    #####:11655:                  if ((unsigned long )p == (unsigned long )pend) {
    #####:11656:                    return ((reg_errcode_t )14);
        -:11657:                  }
    #####:11658:                  tmp___59 = p;
    #####:11659:                  p ++;
    #####:11660:                  c = (unsigned char )*tmp___59;
    #####:11661:                  if (translate) {
    #####:11662:                    c = (unsigned char )*(translate + (int )c);
    #####:11663:                  }
    #####:11664:                  goto while_break___34;
        -:11665:                }
        -:11666:                while_break___34: /* CIL Label */ ;
        -:11667:                }
    #####:11668:                if ((unsigned long )p == (unsigned long )pend) {
        -:11669:                  {
    #####:11670:                  free((void *)compile_stack.stack);
        -:11671:                  }
    #####:11672:                  return ((reg_errcode_t )7);
        -:11673:                }
    #####:11674:                ch = 0;
        -:11675:                {
    #####:11676:                while (1) {
        -:11677:                                                        ;
    #####:11678:                  if (! (ch < 1 << 8)) {
    #####:11679:                    goto while_break___35;
        -:11680:                  }
    #####:11681:                  if (is_alnum___0) {
        -:11682:                    {
    #####:11683:                    tmp___60 = __ctype_b_loc();
        -:11684:                    }
    #####:11685:                    if ((int const   )*(*tmp___60 + ch) & 8) {
    #####:11686:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11687:                    } else {
    #####:11688:                      goto _L___5;
        -:11689:                    }
    #####:11690:                  } else { //Added block
        -:11691:                  _L___5: 
    #####:11692:                  if (is_alpha___0) {
        -:11693:                    {
    #####:11694:                    tmp___61 = __ctype_b_loc();
        -:11695:                    }
    #####:11696:                    if ((int const   )*(*tmp___61 + ch) & 1024) {
    #####:11697:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11698:                    } else {
    #####:11699:                      goto _L___4;
        -:11700:                    }
    #####:11701:                  } else { //Added block
        -:11702:                  _L___4: 
    #####:11703:                  if (is_blank___0) {
        -:11704:                    {
    #####:11705:                    tmp___62 = __ctype_b_loc();
        -:11706:                    }
    #####:11707:                    if ((int const   )*(*tmp___62 + ch) & 1) {
    #####:11708:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11709:                    } else {
    #####:11710:                      goto _L___3;
        -:11711:                    }
    #####:11712:                  } else { //Added block
        -:11713:                  _L___3: 
    #####:11714:                  if (is_cntrl___0) {
        -:11715:                    {
    #####:11716:                    tmp___63 = __ctype_b_loc();
        -:11717:                    }
    #####:11718:                    if ((int const   )*(*tmp___63 + ch) & 2) {
    #####:11719:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11720:                    }
    #####:11721:                  }
        -:11722:                  }
        -:11723:                  }
        -:11724:                  }
    #####:11725:                  if (is_digit___0) {
        -:11726:                    {
    #####:11727:                    tmp___64 = __ctype_b_loc();
        -:11728:                    }
    #####:11729:                    if ((int const   )*(*tmp___64 + ch) & 2048) {
    #####:11730:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11731:                    } else {
    #####:11732:                      goto _L___8;
        -:11733:                    }
    #####:11734:                  } else { //Added block
        -:11735:                  _L___8: 
    #####:11736:                  if (is_graph___0) {
        -:11737:                    {
    #####:11738:                    tmp___65 = __ctype_b_loc();
        -:11739:                    }
    #####:11740:                    if ((int const   )*(*tmp___65 + ch) & 32768) {
    #####:11741:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11742:                    } else {
    #####:11743:                      goto _L___7;
        -:11744:                    }
    #####:11745:                  } else { //Added block
        -:11746:                  _L___7: 
    #####:11747:                  if (is_lower___0) {
        -:11748:                    {
    #####:11749:                    tmp___66 = __ctype_b_loc();
        -:11750:                    }
    #####:11751:                    if ((int const   )*(*tmp___66 + ch) & 512) {
    #####:11752:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11753:                    } else {
    #####:11754:                      goto _L___6;
        -:11755:                    }
    #####:11756:                  } else { //Added block
        -:11757:                  _L___6: 
    #####:11758:                  if (is_print___0) {
        -:11759:                    {
    #####:11760:                    tmp___67 = __ctype_b_loc();
        -:11761:                    }
    #####:11762:                    if ((int const   )*(*tmp___67 + ch) & 16384) {
    #####:11763:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11764:                    }
    #####:11765:                  }
        -:11766:                  }
        -:11767:                  }
        -:11768:                  }
    #####:11769:                  if (is_punct___0) {
        -:11770:                    {
    #####:11771:                    tmp___68 = __ctype_b_loc();
        -:11772:                    }
    #####:11773:                    if ((int const   )*(*tmp___68 + ch) & 4) {
    #####:11774:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11775:                    } else {
    #####:11776:                      goto _L___11;
        -:11777:                    }
    #####:11778:                  } else { //Added block
        -:11779:                  _L___11: 
    #####:11780:                  if (is_space___0) {
        -:11781:                    {
    #####:11782:                    tmp___69 = __ctype_b_loc();
        -:11783:                    }
    #####:11784:                    if ((int const   )*(*tmp___69 + ch) & 8192) {
    #####:11785:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11786:                    } else {
    #####:11787:                      goto _L___10;
        -:11788:                    }
    #####:11789:                  } else { //Added block
        -:11790:                  _L___10: 
    #####:11791:                  if (is_upper___0) {
        -:11792:                    {
    #####:11793:                    tmp___70 = __ctype_b_loc();
        -:11794:                    }
    #####:11795:                    if ((int const   )*(*tmp___70 + ch) & 256) {
    #####:11796:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11797:                    } else {
    #####:11798:                      goto _L___9;
        -:11799:                    }
    #####:11800:                  } else { //Added block
        -:11801:                  _L___9: 
    #####:11802:                  if (is_xdigit___0) {
        -:11803:                    {
    #####:11804:                    tmp___71 = __ctype_b_loc();
        -:11805:                    }
    #####:11806:                    if ((int const   )*(*tmp___71 + ch) & 4096) {
    #####:11807:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11808:                    }
    #####:11809:                  }
        -:11810:                  }
        -:11811:                  }
        -:11812:                  }
    #####:11813:                  if (translate) {
    #####:11814:                    if (is_upper___0) {
    #####:11815:                      goto _L___12;
        -:11816:                    } else { //Added block
    #####:11817:                    if (is_lower___0) {
        -:11818:                      _L___12: 
        -:11819:                      {
    #####:11820:                      tmp___72 = __ctype_b_loc();
        -:11821:                      }
    #####:11822:                      if ((int const   )*(*tmp___72 + ch) & 256) {
    #####:11823:                        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11824:                      } else {
        -:11825:                        {
    #####:11826:                        tmp___73 = __ctype_b_loc();
        -:11827:                        }
    #####:11828:                        if ((int const   )*(*tmp___73 + ch) & 512) {
    #####:11829:                          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11830:                        }
        -:11831:                      }
    #####:11832:                    }
        -:11833:                    }
    #####:11834:                  }
    #####:11835:                  ch ++;
        -:11836:                }
        -:11837:                while_break___35: /* CIL Label */ ;
        -:11838:                }
    #####:11839:                had_char_class = (boolean )1;
    #####:11840:              } else {
    #####:11841:                goto _L___13;
        -:11842:              }
    #####:11843:            } else {
        -:11844:              _L___13: 
    #####:11845:              c1 = (unsigned char )((int )c1 + 1);
        -:11846:              {
    #####:11847:              while (1) {
        -:11848:                                                      ;
    #####:11849:                tmp___74 = c1;
    #####:11850:                c1 = (unsigned char )((int )c1 - 1);
    #####:11851:                if (! tmp___74) {
    #####:11852:                  goto while_break___36;
        -:11853:                }
    #####:11854:                p --;
        -:11855:              }
        -:11856:              while_break___36: /* CIL Label */ ;
        -:11857:              }
    #####:11858:              *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
    #####:11859:              *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
    #####:11860:              had_char_class = (boolean )0;
        -:11861:            }
    #####:11862:          } else {
    #####:11863:            had_char_class = (boolean )0;
    #####:11864:            *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
        -:11865:          }
    #####:11866:        } else {
    #####:11867:          had_char_class = (boolean )0;
    #####:11868:          *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
        -:11869:        }
    #####:11870:      } else {
    #####:11871:        had_char_class = (boolean )0;
    #####:11872:        *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
        -:11873:      }
        -:11874:      }
        -:11875:      }
        -:11876:      __Cont: ;
        -:11877:    }
        -:11878:    while_break___27: /* CIL Label */ ;
        -:11879:    }
        -:11880:    {
    #####:11881:    while (1) {
        -:11882:                                            ;
    #####:11883:      if ((int )*(b + -1) > 0) {
    #####:11884:        if (! ((int )*(b + ((int )*(b + -1) - 1)) == 0)) {
    #####:11885:          goto while_break___37;
        -:11886:        }
    #####:11887:      } else {
    #####:11888:        goto while_break___37;
        -:11889:      }
    #####:11890:      *(b + -1) = (unsigned char )((int )*(b + -1) - 1);
        -:11891:    }
        -:11892:    while_break___37: /* CIL Label */ ;
        -:11893:    }
    #####:11894:    b += (int )*(b + -1);
    #####:11895:    goto switch_break;
        -:11896:    case_40: /* CIL Label */ 
    #####:11897:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11898:      goto handle_open;
        -:11899:    } else {
    #####:11900:      goto normal_char;
        -:11901:    }
        -:11902:    case_41: /* CIL Label */ 
    #####:11903:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11904:      goto handle_close;
        -:11905:    } else {
    #####:11906:      goto normal_char;
        -:11907:    }
        -:11908:    case_10: /* CIL Label */ 
    #####:11909:    if (syntax & (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11910:      goto handle_alt;
        -:11911:    } else {
    #####:11912:      goto normal_char;
        -:11913:    }
        -:11914:    case_124: /* CIL Label */ 
        1:11915:    if (syntax & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        1:11916:      goto handle_alt;
        -:11917:    } else {
    #####:11918:      goto normal_char;
        -:11919:    }
        -:11920:    case_123: /* CIL Label */ 
        1:11921:    if (syntax & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        1:11922:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        1:11923:        goto handle_interval;
        -:11924:      } else {
    #####:11925:        goto normal_char;
        -:11926:      }
        -:11927:    } else {
    #####:11928:      goto normal_char;
        -:11929:    }
        -:11930:    case_92: /* CIL Label */ 
    #####:11931:    if ((unsigned long )p == (unsigned long )pend) {
        -:11932:      {
    #####:11933:      free((void *)compile_stack.stack);
        -:11934:      }
    #####:11935:      return ((reg_errcode_t )5);
        -:11936:    }
        -:11937:    {
    #####:11938:    while (1) {
        -:11939:                                            ;
    #####:11940:      if ((unsigned long )p == (unsigned long )pend) {
    #####:11941:        return ((reg_errcode_t )14);
        -:11942:      }
    #####:11943:      tmp___75 = p;
    #####:11944:      p ++;
    #####:11945:      c = (unsigned char )*tmp___75;
    #####:11946:      goto while_break___38;
        -:11947:    }
        -:11948:    while_break___38: /* CIL Label */ ;
        -:11949:    }
        -:11950:    {
    #####:11951:    if ((int )c == 40) {
    #####:11952:      goto case_40___0;
        -:11953:    }
    #####:11954:    if ((int )c == 41) {
    #####:11955:      goto case_41___0;
        -:11956:    }
    #####:11957:    if ((int )c == 124) {
    #####:11958:      goto case_124___0;
        -:11959:    }
    #####:11960:    if ((int )c == 123) {
    #####:11961:      goto case_123___0;
        -:11962:    }
    #####:11963:    if ((int )c == 119) {
    #####:11964:      goto case_119;
        -:11965:    }
    #####:11966:    if ((int )c == 87) {
    #####:11967:      goto case_87;
        -:11968:    }
    #####:11969:    if ((int )c == 60) {
    #####:11970:      goto case_60;
        -:11971:    }
    #####:11972:    if ((int )c == 62) {
    #####:11973:      goto case_62;
        -:11974:    }
    #####:11975:    if ((int )c == 98) {
    #####:11976:      goto case_98;
        -:11977:    }
    #####:11978:    if ((int )c == 66) {
    #####:11979:      goto case_66;
        -:11980:    }
    #####:11981:    if ((int )c == 96) {
    #####:11982:      goto case_96;
        -:11983:    }
    #####:11984:    if ((int )c == 39) {
    #####:11985:      goto case_39;
        -:11986:    }
    #####:11987:    if ((int )c == 49) {
    #####:11988:      goto case_49;
        -:11989:    }
    #####:11990:    if ((int )c == 50) {
    #####:11991:      goto case_49;
        -:11992:    }
    #####:11993:    if ((int )c == 51) {
    #####:11994:      goto case_49;
        -:11995:    }
    #####:11996:    if ((int )c == 52) {
    #####:11997:      goto case_49;
        -:11998:    }
    #####:11999:    if ((int )c == 53) {
    #####:12000:      goto case_49;
        -:12001:    }
    #####:12002:    if ((int )c == 54) {
    #####:12003:      goto case_49;
        -:12004:    }
    #####:12005:    if ((int )c == 55) {
    #####:12006:      goto case_49;
        -:12007:    }
    #####:12008:    if ((int )c == 56) {
    #####:12009:      goto case_49;
        -:12010:    }
    #####:12011:    if ((int )c == 57) {
    #####:12012:      goto case_49;
        -:12013:    }
    #####:12014:    if ((int )c == 43) {
    #####:12015:      goto case_43___0;
        -:12016:    }
    #####:12017:    if ((int )c == 63) {
    #####:12018:      goto case_43___0;
        -:12019:    }
    #####:12020:    goto normal_backslash;
        -:12021:    case_40___0: /* CIL Label */ 
    #####:12022:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12023:      goto normal_backslash;
        -:12024:    }
        -:12025:    handle_open: 
    #####:12026:    (bufp->re_nsub) ++;
    #####:12027:    regnum ++;
    #####:12028:    if (compile_stack.avail == compile_stack.size) {
        -:12029:      {
    #####:12030:      tmp___76 = realloc((void *)compile_stack.stack, (unsigned long )(compile_stack.size << 1) * sizeof(compile_stack_elt_t ));
    #####:12031:      compile_stack.stack = (compile_stack_elt_t *)tmp___76;
        -:12032:      }
    #####:12033:      if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
    #####:12034:        return ((reg_errcode_t )12);
        -:12035:      }
    #####:12036:      compile_stack.size <<= 1;
    #####:12037:    }
    #####:12038:    (compile_stack.stack + compile_stack.avail)->begalt_offset = begalt - bufp->buffer;
    #####:12039:    if (fixup_alt_jump) {
    #####:12040:      (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (fixup_alt_jump - bufp->buffer) + 1L;
    #####:12041:    } else {
    #####:12042:      (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (pattern_offset_t )0;
        -:12043:    }
    #####:12044:    (compile_stack.stack + compile_stack.avail)->laststart_offset = b - bufp->buffer;
    #####:12045:    (compile_stack.stack + compile_stack.avail)->regnum = regnum;
    #####:12046:    if (regnum <= 255U) {
    #####:12047:      (compile_stack.stack + compile_stack.avail)->inner_group_offset = (b - bufp->buffer) + 2L;
        -:12048:      {
    #####:12049:      while (1) {
        -:12050:                                              ;
        -:12051:        {
    #####:12052:        while (1) {
        -:12053:                                                ;
    #####:12054:          if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:12055:            goto while_break___40;
        -:12056:          }
        -:12057:          {
    #####:12058:          while (1) {
        -:12059:                                                  ;
    #####:12060:            old_buffer___8 = bufp->buffer;
    #####:12061:            if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12062:              return ((reg_errcode_t )15);
        -:12063:            }
    #####:12064:            bufp->allocated <<= 1;
    #####:12065:            if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12066:              bufp->allocated = (unsigned long )(1L << 16);
    #####:12067:            }
        -:12068:            {
    #####:12069:            tmp___77 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12070:            bufp->buffer = (unsigned char *)tmp___77;
        -:12071:            }
    #####:12072:            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12073:              return ((reg_errcode_t )12);
        -:12074:            }
    #####:12075:            if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
    #####:12076:              b = bufp->buffer + (b - old_buffer___8);
    #####:12077:              begalt = bufp->buffer + (begalt - old_buffer___8);
    #####:12078:              if (fixup_alt_jump) {
    #####:12079:                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
    #####:12080:              }
    #####:12081:              if (laststart___0) {
    #####:12082:                laststart___0 = bufp->buffer + (laststart___0 - old_buffer___8);
    #####:12083:              }
    #####:12084:              if (pending_exact) {
    #####:12085:                pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
    #####:12086:              }
    #####:12087:            }
    #####:12088:            goto while_break___41;
        -:12089:          }
        -:12090:          while_break___41: /* CIL Label */ ;
        -:12091:          }
        -:12092:        }
        -:12093:        while_break___40: /* CIL Label */ ;
        -:12094:        }
    #####:12095:        tmp___78 = b;
    #####:12096:        b ++;
    #####:12097:        *tmp___78 = (unsigned char)6;
    #####:12098:        tmp___79 = b;
    #####:12099:        b ++;
    #####:12100:        *tmp___79 = (unsigned char )regnum;
    #####:12101:        tmp___80 = b;
    #####:12102:        b ++;
    #####:12103:        *tmp___80 = (unsigned char)0;
    #####:12104:        goto while_break___39;
        -:12105:      }
        -:12106:      while_break___39: /* CIL Label */ ;
        -:12107:      }
    #####:12108:    }
    #####:12109:    (compile_stack.avail) ++;
    #####:12110:    fixup_alt_jump = (unsigned char *)0;
    #####:12111:    laststart___0 = (unsigned char *)0;
    #####:12112:    begalt = b;
    #####:12113:    pending_exact = (unsigned char *)0;
    #####:12114:    goto switch_break___0;
        -:12115:    case_41___0: /* CIL Label */ 
    #####:12116:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12117:      goto normal_backslash;
        -:12118:    }
    #####:12119:    if (compile_stack.avail == 0U) {
    #####:12120:      if (syntax & (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12121:        goto normal_backslash;
        -:12122:      } else {
        -:12123:        {
    #####:12124:        free((void *)compile_stack.stack);
        -:12125:        }
    #####:12126:        return ((reg_errcode_t )16);
        -:12127:      }
        -:12128:    }
        -:12129:    handle_close: 
    #####:12130:    if (fixup_alt_jump) {
        -:12131:      {
    #####:12132:      while (1) {
        -:12133:                                              ;
        -:12134:        {
    #####:12135:        while (1) {
        -:12136:                                                ;
    #####:12137:          if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12138:            goto while_break___43;
        -:12139:          }
        -:12140:          {
    #####:12141:          while (1) {
        -:12142:                                                  ;
    #####:12143:            old_buffer___9 = bufp->buffer;
    #####:12144:            if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12145:              return ((reg_errcode_t )15);
        -:12146:            }
    #####:12147:            bufp->allocated <<= 1;
    #####:12148:            if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12149:              bufp->allocated = (unsigned long )(1L << 16);
    #####:12150:            }
        -:12151:            {
    #####:12152:            tmp___81 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12153:            bufp->buffer = (unsigned char *)tmp___81;
        -:12154:            }
    #####:12155:            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12156:              return ((reg_errcode_t )12);
        -:12157:            }
    #####:12158:            if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
    #####:12159:              b = bufp->buffer + (b - old_buffer___9);
    #####:12160:              begalt = bufp->buffer + (begalt - old_buffer___9);
    #####:12161:              if (fixup_alt_jump) {
    #####:12162:                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
    #####:12163:              }
    #####:12164:              if (laststart___0) {
    #####:12165:                laststart___0 = bufp->buffer + (laststart___0 - old_buffer___9);
    #####:12166:              }
    #####:12167:              if (pending_exact) {
    #####:12168:                pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
    #####:12169:              }
    #####:12170:            }
    #####:12171:            goto while_break___44;
        -:12172:          }
        -:12173:          while_break___44: /* CIL Label */ ;
        -:12174:          }
        -:12175:        }
        -:12176:        while_break___43: /* CIL Label */ ;
        -:12177:        }
    #####:12178:        tmp___82 = b;
    #####:12179:        b ++;
    #####:12180:        *tmp___82 = (unsigned char)20;
    #####:12181:        goto while_break___42;
        -:12182:      }
        -:12183:      while_break___42: /* CIL Label */ ;
        -:12184:      }
        -:12185:      {
    #####:12186:      store_op1((re_opcode_t )14, fixup_alt_jump, (int )(((b - 1) - fixup_alt_jump) - 3L));
        -:12187:      }
    #####:12188:    }
    #####:12189:    if (compile_stack.avail == 0U) {
    #####:12190:      if (syntax & (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12191:        goto normal_char;
        -:12192:      } else {
        -:12193:        {
    #####:12194:        free((void *)compile_stack.stack);
        -:12195:        }
    #####:12196:        return ((reg_errcode_t )16);
        -:12197:      }
        -:12198:    }
    #####:12199:    (compile_stack.avail) --;
    #####:12200:    begalt = bufp->buffer + (compile_stack.stack + compile_stack.avail)->begalt_offset;
    #####:12201:    if ((compile_stack.stack + compile_stack.avail)->fixup_alt_jump) {
    #####:12202:      fixup_alt_jump = (bufp->buffer + (compile_stack.stack + compile_stack.avail)->fixup_alt_jump) - 1;
    #####:12203:    } else {
    #####:12204:      fixup_alt_jump = (unsigned char *)0;
        -:12205:    }
    #####:12206:    laststart___0 = bufp->buffer + (compile_stack.stack + compile_stack.avail)->laststart_offset;
    #####:12207:    this_group_regnum = (compile_stack.stack + compile_stack.avail)->regnum;
    #####:12208:    pending_exact = (unsigned char *)0;
    #####:12209:    if (this_group_regnum <= 255U) {
    #####:12210:      inner_group_loc = bufp->buffer + (compile_stack.stack + compile_stack.avail)->inner_group_offset;
    #####:12211:      *inner_group_loc = (unsigned char )(regnum - this_group_regnum);
        -:12212:      {
    #####:12213:      while (1) {
        -:12214:                                              ;
        -:12215:        {
    #####:12216:        while (1) {
        -:12217:                                                ;
    #####:12218:          if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:12219:            goto while_break___46;
        -:12220:          }
        -:12221:          {
    #####:12222:          while (1) {
        -:12223:                                                  ;
    #####:12224:            old_buffer___10 = bufp->buffer;
    #####:12225:            if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12226:              return ((reg_errcode_t )15);
        -:12227:            }
    #####:12228:            bufp->allocated <<= 1;
    #####:12229:            if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12230:              bufp->allocated = (unsigned long )(1L << 16);
    #####:12231:            }
        -:12232:            {
    #####:12233:            tmp___83 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12234:            bufp->buffer = (unsigned char *)tmp___83;
        -:12235:            }
    #####:12236:            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12237:              return ((reg_errcode_t )12);
        -:12238:            }
    #####:12239:            if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
    #####:12240:              b = bufp->buffer + (b - old_buffer___10);
    #####:12241:              begalt = bufp->buffer + (begalt - old_buffer___10);
    #####:12242:              if (fixup_alt_jump) {
    #####:12243:                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
    #####:12244:              }
    #####:12245:              if (laststart___0) {
    #####:12246:                laststart___0 = bufp->buffer + (laststart___0 - old_buffer___10);
    #####:12247:              }
    #####:12248:              if (pending_exact) {
    #####:12249:                pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
    #####:12250:              }
    #####:12251:            }
    #####:12252:            goto while_break___47;
        -:12253:          }
        -:12254:          while_break___47: /* CIL Label */ ;
        -:12255:          }
        -:12256:        }
        -:12257:        while_break___46: /* CIL Label */ ;
        -:12258:        }
    #####:12259:        tmp___84 = b;
    #####:12260:        b ++;
    #####:12261:        *tmp___84 = (unsigned char)7;
    #####:12262:        tmp___85 = b;
    #####:12263:        b ++;
    #####:12264:        *tmp___85 = (unsigned char )this_group_regnum;
    #####:12265:        tmp___86 = b;
    #####:12266:        b ++;
    #####:12267:        *tmp___86 = (unsigned char )(regnum - this_group_regnum);
    #####:12268:        goto while_break___45;
        -:12269:      }
        -:12270:      while_break___45: /* CIL Label */ ;
        -:12271:      }
    #####:12272:    }
    #####:12273:    goto switch_break___0;
        -:12274:    case_124___0: /* CIL Label */ 
    #####:12275:    if (syntax & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12276:      goto normal_backslash;
        -:12277:    } else { //Added block
    #####:12278:    if (syntax & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12279:      goto normal_backslash;
        -:12280:    }
        -:12281:    }
        -:12282:    handle_alt: 
        1:12283:    if (syntax & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12284:      goto normal_char;
        -:12285:    }
        -:12286:    {
        1:12287:    while (1) {
        -:12288:                                            ;
        1:12289:      if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
        1:12290:        goto while_break___48;
        -:12291:      }
        -:12292:      {
    #####:12293:      while (1) {
        -:12294:                                              ;
    #####:12295:        old_buffer___11 = bufp->buffer;
    #####:12296:        if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12297:          return ((reg_errcode_t )15);
        -:12298:        }
    #####:12299:        bufp->allocated <<= 1;
    #####:12300:        if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12301:          bufp->allocated = (unsigned long )(1L << 16);
    #####:12302:        }
        -:12303:        {
    #####:12304:        tmp___87 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12305:        bufp->buffer = (unsigned char *)tmp___87;
        -:12306:        }
    #####:12307:        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12308:          return ((reg_errcode_t )12);
        -:12309:        }
    #####:12310:        if ((unsigned long )old_buffer___11 != (unsigned long )bufp->buffer) {
    #####:12311:          b = bufp->buffer + (b - old_buffer___11);
    #####:12312:          begalt = bufp->buffer + (begalt - old_buffer___11);
    #####:12313:          if (fixup_alt_jump) {
    #####:12314:            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
    #####:12315:          }
    #####:12316:          if (laststart___0) {
    #####:12317:            laststart___0 = bufp->buffer + (laststart___0 - old_buffer___11);
    #####:12318:          }
    #####:12319:          if (pending_exact) {
    #####:12320:            pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
    #####:12321:          }
    #####:12322:        }
    #####:12323:        goto while_break___49;
        -:12324:      }
        -:12325:      while_break___49: /* CIL Label */ ;
        -:12326:      }
        -:12327:    }
        -:12328:    while_break___48: /* CIL Label */ ;
        -:12329:    }
        -:12330:    {
        1:12331:    insert_op1((re_opcode_t )15, begalt, (int )(((b + 6) - begalt) - 3L), b);
        1:12332:    pending_exact = (unsigned char *)0;
        1:12333:    b += 3;
        -:12334:    }
        1:12335:    if (fixup_alt_jump) {
        -:12336:       
        -:12337:
    #####:12338:      store_op1((re_opcode_t )14, fixup_alt_jump, (int )((b - fixup_alt_jump) - 3L));
        -:12339:       
        -:12340:
    #####:12341:    }
        1:12342:    fixup_alt_jump = b;
        -:12343:    {
        1:12344:    while (1) {
        -:12345:                                            ;
        1:12346:      if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
        1:12347:        goto while_break___50;
        -:12348:      }
        -:12349:      {
    #####:12350:      while (1) {
        -:12351:                                              ;
    #####:12352:        old_buffer___12 = bufp->buffer;
    #####:12353:        if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12354:          return ((reg_errcode_t )15);
        -:12355:        }
    #####:12356:        bufp->allocated <<= 1;
    #####:12357:        if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12358:          bufp->allocated = (unsigned long )(1L << 16);
    #####:12359:        }
        -:12360:        {
    #####:12361:        tmp___88 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12362:        bufp->buffer = (unsigned char *)tmp___88;
        -:12363:        }
    #####:12364:        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12365:          return ((reg_errcode_t )12);
        -:12366:        }
    #####:12367:        if ((unsigned long )old_buffer___12 != (unsigned long )bufp->buffer) {
    #####:12368:          b = bufp->buffer + (b - old_buffer___12);
    #####:12369:          begalt = bufp->buffer + (begalt - old_buffer___12);
    #####:12370:          if (fixup_alt_jump) {
    #####:12371:            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
    #####:12372:          }
    #####:12373:          if (laststart___0) {
    #####:12374:            laststart___0 = bufp->buffer + (laststart___0 - old_buffer___12);
    #####:12375:          }
    #####:12376:          if (pending_exact) {
    #####:12377:            pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
    #####:12378:          }
    #####:12379:        }
    #####:12380:        goto while_break___51;
        -:12381:      }
        -:12382:      while_break___51: /* CIL Label */ ;
        -:12383:      }
        -:12384:    }
        -:12385:    while_break___50: /* CIL Label */ ;
        -:12386:    }
        1:12387:    b += 3;
        1:12388:    laststart___0 = (unsigned char *)0;
        1:12389:    begalt = b;
        1:12390:    goto switch_break___0;
        -:12391:    case_123___0: /* CIL Label */ 
    #####:12392:    if (! (syntax & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:12393:      goto normal_backslash;
        -:12394:    } else { //Added block
    #####:12395:    if (syntax & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12396:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12397:        goto normal_backslash;
        -:12398:      } else {
    #####:12399:        goto _L___21;
        -:12400:      }
    #####:12401:    } else { //Added block
        -:12402:    _L___21: 
    #####:12403:    if ((unsigned long )(p - 2) == (unsigned long )pattern) {
    #####:12404:      if ((unsigned long )p == (unsigned long )pend) {
    #####:12405:        goto normal_backslash;
        -:12406:      }
    #####:12407:    }
        -:12408:    }
        -:12409:    }
        -:12410:    handle_interval: 
        1:12411:    lower_bound = -1;
        1:12412:    upper_bound = -1;
        1:12413:    beg_interval = p - 1;
        1:12414:    if ((unsigned long )p == (unsigned long )pend) {
    #####:12415:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12416:        goto unfetch_interval;
        -:12417:      } else {
        -:12418:        {
    #####:12419:        free((void *)compile_stack.stack);
        -:12420:        }
    #####:12421:        return ((reg_errcode_t )9);
        -:12422:      }
        -:12423:    }
        1:12424:    if ((unsigned long )p != (unsigned long )pend) {
        -:12425:      {
        1:12426:      while (1) {
        -:12427:                                              ;
        1:12428:        if ((unsigned long )p == (unsigned long )pend) {
    #####:12429:          return ((reg_errcode_t )14);
        -:12430:        }
        1:12431:        tmp___89 = p;
        1:12432:        p ++;
        1:12433:        c = (unsigned char )*tmp___89;
        1:12434:        if (translate) {
    #####:12435:          c = (unsigned char )*(translate + (int )c);
    #####:12436:        }
        1:12437:        goto while_break___52;
        -:12438:      }
        -:12439:      while_break___52: /* CIL Label */ ;
        -:12440:      }
        -:12441:      {
        2:12442:      while (1) {
        -:12443:                                              ;
        2:12444:        if (48 <= (int )c) {
        2:12445:          if (! ((int )c <= 57)) {
        1:12446:            goto while_break___53;
        -:12447:          }
        1:12448:        } else {
    #####:12449:          goto while_break___53;
        -:12450:        }
        1:12451:        if (lower_bound < 0) {
        1:12452:          lower_bound = 0;
        1:12453:        }
        1:12454:        lower_bound = (lower_bound * 10 + (int )c) - 48;
        1:12455:        if ((unsigned long )p == (unsigned long )pend) {
    #####:12456:          goto while_break___53;
        -:12457:        }
        -:12458:        {
        1:12459:        while (1) {
        -:12460:                                                ;
        1:12461:          if ((unsigned long )p == (unsigned long )pend) {
    #####:12462:            return ((reg_errcode_t )14);
        -:12463:          }
        1:12464:          tmp___90 = p;
        1:12465:          p ++;
        1:12466:          c = (unsigned char )*tmp___90;
        1:12467:          if (translate) {
    #####:12468:            c = (unsigned char )*(translate + (int )c);
    #####:12469:          }
        1:12470:          goto while_break___54;
        -:12471:        }
        -:12472:        while_break___54: /* CIL Label */ ;
        -:12473:        }
        -:12474:      }
        -:12475:      while_break___53: /* CIL Label */ ;
        -:12476:      }
        1:12477:    }
        1:12478:    if ((int )c == 44) {
    #####:12479:      if ((unsigned long )p != (unsigned long )pend) {
        -:12480:        {
    #####:12481:        while (1) {
        -:12482:                                                ;
    #####:12483:          if ((unsigned long )p == (unsigned long )pend) {
    #####:12484:            return ((reg_errcode_t )14);
        -:12485:          }
    #####:12486:          tmp___91 = p;
    #####:12487:          p ++;
    #####:12488:          c = (unsigned char )*tmp___91;
    #####:12489:          if (translate) {
    #####:12490:            c = (unsigned char )*(translate + (int )c);
    #####:12491:          }
    #####:12492:          goto while_break___55;
        -:12493:        }
        -:12494:        while_break___55: /* CIL Label */ ;
        -:12495:        }
        -:12496:        {
    #####:12497:        while (1) {
        -:12498:                                                ;
    #####:12499:          if (48 <= (int )c) {
    #####:12500:            if (! ((int )c <= 57)) {
    #####:12501:              goto while_break___56;
        -:12502:            }
    #####:12503:          } else {
    #####:12504:            goto while_break___56;
        -:12505:          }
    #####:12506:          if (upper_bound < 0) {
    #####:12507:            upper_bound = 0;
    #####:12508:          }
    #####:12509:          upper_bound = (upper_bound * 10 + (int )c) - 48;
    #####:12510:          if ((unsigned long )p == (unsigned long )pend) {
    #####:12511:            goto while_break___56;
        -:12512:          }
        -:12513:          {
    #####:12514:          while (1) {
        -:12515:                                                  ;
    #####:12516:            if ((unsigned long )p == (unsigned long )pend) {
    #####:12517:              return ((reg_errcode_t )14);
        -:12518:            }
    #####:12519:            tmp___92 = p;
    #####:12520:            p ++;
    #####:12521:            c = (unsigned char )*tmp___92;
    #####:12522:            if (translate) {
    #####:12523:              c = (unsigned char )*(translate + (int )c);
    #####:12524:            }
    #####:12525:            goto while_break___57;
        -:12526:          }
        -:12527:          while_break___57: /* CIL Label */ ;
        -:12528:          }
        -:12529:        }
        -:12530:        while_break___56: /* CIL Label */ ;
        -:12531:        }
    #####:12532:      }
    #####:12533:      if (upper_bound < 0) {
    #####:12534:        upper_bound = 32767;
    #####:12535:      }
    #####:12536:    } else {
        1:12537:      upper_bound = lower_bound;
        -:12538:    }
        1:12539:    if (lower_bound < 0) {
    #####:12540:      goto _L___22;
        -:12541:    } else { //Added block
        1:12542:    if (upper_bound > 32767) {
    #####:12543:      goto _L___22;
        -:12544:    } else { //Added block
        1:12545:    if (lower_bound > upper_bound) {
        -:12546:      _L___22: 
    #####:12547:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12548:        goto unfetch_interval;
        -:12549:      } else {
        -:12550:        {
    #####:12551:        free((void *)compile_stack.stack);
        -:12552:        }
    #####:12553:        return ((reg_errcode_t )10);
        -:12554:      }
        -:12555:    }
        -:12556:    }
        -:12557:    }
        1:12558:    if (! (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:12559:      if ((int )c != 92) {
        -:12560:        {
    #####:12561:        free((void *)compile_stack.stack);
        -:12562:        }
    #####:12563:        return ((reg_errcode_t )9);
        -:12564:      }
        -:12565:      {
    #####:12566:      while (1) {
        -:12567:                                              ;
    #####:12568:        if ((unsigned long )p == (unsigned long )pend) {
    #####:12569:          return ((reg_errcode_t )14);
        -:12570:        }
    #####:12571:        tmp___93 = p;
    #####:12572:        p ++;
    #####:12573:        c = (unsigned char )*tmp___93;
    #####:12574:        if (translate) {
    #####:12575:          c = (unsigned char )*(translate + (int )c);
    #####:12576:        }
    #####:12577:        goto while_break___58;
        -:12578:      }
        -:12579:      while_break___58: /* CIL Label */ ;
        -:12580:      }
    #####:12581:    }
        1:12582:    if ((int )c != 125) {
    #####:12583:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12584:        goto unfetch_interval;
        -:12585:      } else {
        -:12586:        {
    #####:12587:        free((void *)compile_stack.stack);
        -:12588:        }
    #####:12589:        return ((reg_errcode_t )10);
        -:12590:      }
        -:12591:    }
        1:12592:    if (! laststart___0) {
    #####:12593:      if (syntax & (((((1UL << 1) << 1) << 1) << 1) << 1)) {
        -:12594:        {
    #####:12595:        free((void *)compile_stack.stack);
        -:12596:        }
    #####:12597:        return ((reg_errcode_t )13);
        -:12598:      } else { //Added block
    #####:12599:      if (syntax & ((((1UL << 1) << 1) << 1) << 1)) {
    #####:12600:        laststart___0 = b;
    #####:12601:      } else {
    #####:12602:        goto unfetch_interval;
        -:12603:      }
        -:12604:      }
    #####:12605:    }
        1:12606:    if (upper_bound == 0) {
        -:12607:      {
    #####:12608:      while (1) {
        -:12609:                                              ;
    #####:12610:        if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:12611:          goto while_break___59;
        -:12612:        }
        -:12613:        {
    #####:12614:        while (1) {
        -:12615:                                                ;
    #####:12616:          old_buffer___13 = bufp->buffer;
    #####:12617:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12618:            return ((reg_errcode_t )15);
        -:12619:          }
    #####:12620:          bufp->allocated <<= 1;
    #####:12621:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12622:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12623:          }
        -:12624:          {
    #####:12625:          tmp___94 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12626:          bufp->buffer = (unsigned char *)tmp___94;
        -:12627:          }
    #####:12628:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12629:            return ((reg_errcode_t )12);
        -:12630:          }
    #####:12631:          if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
    #####:12632:            b = bufp->buffer + (b - old_buffer___13);
    #####:12633:            begalt = bufp->buffer + (begalt - old_buffer___13);
    #####:12634:            if (fixup_alt_jump) {
    #####:12635:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
    #####:12636:            }
    #####:12637:            if (laststart___0) {
    #####:12638:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___13);
    #####:12639:            }
    #####:12640:            if (pending_exact) {
    #####:12641:              pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
    #####:12642:            }
    #####:12643:          }
    #####:12644:          goto while_break___60;
        -:12645:        }
        -:12646:        while_break___60: /* CIL Label */ ;
        -:12647:        }
        -:12648:      }
        -:12649:      while_break___59: /* CIL Label */ ;
        -:12650:      }
        -:12651:      {
    #####:12652:      insert_op1((re_opcode_t )13, laststart___0, (int )(((b + 3) - laststart___0) - 3L),
    #####:12653:                 b);
    #####:12654:      b += 3;
        -:12655:      }
    #####:12656:    } else {
        1:12657:      nbytes = (unsigned int )(10 + (upper_bound > 1) * 10);
        -:12658:      {
        1:12659:      while (1) {
        -:12660:                                              ;
        1:12661:        if (! ((unsigned long )((b - bufp->buffer) + (long )nbytes) > bufp->allocated)) {
        1:12662:          goto while_break___61;
        -:12663:        }
        -:12664:        {
    #####:12665:        while (1) {
        -:12666:                                                ;
    #####:12667:          old_buffer___14 = bufp->buffer;
    #####:12668:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12669:            return ((reg_errcode_t )15);
        -:12670:          }
    #####:12671:          bufp->allocated <<= 1;
    #####:12672:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12673:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12674:          }
        -:12675:          {
    #####:12676:          tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12677:          bufp->buffer = (unsigned char *)tmp___95;
        -:12678:          }
    #####:12679:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12680:            return ((reg_errcode_t )12);
        -:12681:          }
    #####:12682:          if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
    #####:12683:            b = bufp->buffer + (b - old_buffer___14);
    #####:12684:            begalt = bufp->buffer + (begalt - old_buffer___14);
    #####:12685:            if (fixup_alt_jump) {
    #####:12686:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
    #####:12687:            }
    #####:12688:            if (laststart___0) {
    #####:12689:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___14);
    #####:12690:            }
    #####:12691:            if (pending_exact) {
    #####:12692:              pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
    #####:12693:            }
    #####:12694:          }
    #####:12695:          goto while_break___62;
        -:12696:        }
        -:12697:        while_break___62: /* CIL Label */ ;
        -:12698:        }
        -:12699:      }
        -:12700:      while_break___61: /* CIL Label */ ;
        -:12701:      }
        -:12702:      {
        2:12703:      insert_op2((re_opcode_t )21, laststart___0, (int )((((b + 5) + (upper_bound > 1) * 5) - laststart___0) - 3L),
        1:12704:                 lower_bound, b);
        1:12705:      b += 5;
        1:12706:      insert_op2((re_opcode_t )23, laststart___0, 5, lower_bound, b);
        1:12707:      b += 5;
        -:12708:      }
        1:12709:      if (upper_bound > 1) {
        -:12710:         
        -:12711:
    #####:12712:        store_op2((re_opcode_t )22, b, (int )(((laststart___0 + 5) - b) - 3L), upper_bound - 1);
    #####:12713:        b += 5;
    #####:12714:        insert_op2((re_opcode_t )23, laststart___0, (int )(b - laststart___0), upper_bound - 1,
    #####:12715:                   b);
    #####:12716:        b += 5;
        -:12717:         
        -:12718:
    #####:12719:      }
        -:12720:    }
        1:12721:    pending_exact = (unsigned char *)0;
        1:12722:    beg_interval = (char const   *)((void *)0);
        1:12723:    goto switch_break___0;
        -:12724:    unfetch_interval: 
    #####:12725:    p = beg_interval;
    #####:12726:    beg_interval = (char const   *)((void *)0);
        -:12727:    {
    #####:12728:    while (1) {
        -:12729:                                            ;
    #####:12730:      if ((unsigned long )p == (unsigned long )pend) {
    #####:12731:        return ((reg_errcode_t )14);
        -:12732:      }
    #####:12733:      tmp___96 = p;
    #####:12734:      p ++;
    #####:12735:      c = (unsigned char )*tmp___96;
    #####:12736:      if (translate) {
    #####:12737:        c = (unsigned char )*(translate + (int )c);
    #####:12738:      }
    #####:12739:      goto while_break___63;
        -:12740:    }
        -:12741:    while_break___63: /* CIL Label */ ;
        -:12742:    }
    #####:12743:    if (! (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:12744:      if ((unsigned long )p > (unsigned long )pattern) {
    #####:12745:        if ((int const   )*(p + -1) == 92) {
    #####:12746:          goto normal_backslash;
        -:12747:        }
    #####:12748:      }
    #####:12749:    }
    #####:12750:    goto normal_char;
        -:12751:    case_119: /* CIL Label */ 
    #####:12752:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12753:      goto normal_char;
        -:12754:    }
    #####:12755:    laststart___0 = b;
        -:12756:    {
    #####:12757:    while (1) {
        -:12758:                                            ;
        -:12759:      {
    #####:12760:      while (1) {
        -:12761:                                              ;
    #####:12762:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12763:          goto while_break___65;
        -:12764:        }
        -:12765:        {
    #####:12766:        while (1) {
        -:12767:                                                ;
    #####:12768:          old_buffer___15 = bufp->buffer;
    #####:12769:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12770:            return ((reg_errcode_t )15);
        -:12771:          }
    #####:12772:          bufp->allocated <<= 1;
    #####:12773:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12774:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12775:          }
        -:12776:          {
    #####:12777:          tmp___97 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12778:          bufp->buffer = (unsigned char *)tmp___97;
        -:12779:          }
    #####:12780:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12781:            return ((reg_errcode_t )12);
        -:12782:          }
    #####:12783:          if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
    #####:12784:            b = bufp->buffer + (b - old_buffer___15);
    #####:12785:            begalt = bufp->buffer + (begalt - old_buffer___15);
    #####:12786:            if (fixup_alt_jump) {
    #####:12787:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
    #####:12788:            }
    #####:12789:            if (laststart___0) {
    #####:12790:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___15);
    #####:12791:            }
    #####:12792:            if (pending_exact) {
    #####:12793:              pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
    #####:12794:            }
    #####:12795:          }
    #####:12796:          goto while_break___66;
        -:12797:        }
        -:12798:        while_break___66: /* CIL Label */ ;
        -:12799:        }
        -:12800:      }
        -:12801:      while_break___65: /* CIL Label */ ;
        -:12802:      }
    #####:12803:      tmp___98 = b;
    #####:12804:      b ++;
    #####:12805:      *tmp___98 = (unsigned char)24;
    #####:12806:      goto while_break___64;
        -:12807:    }
        -:12808:    while_break___64: /* CIL Label */ ;
        -:12809:    }
    #####:12810:    goto switch_break___0;
        -:12811:    case_87: /* CIL Label */ 
    #####:12812:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12813:      goto normal_char;
        -:12814:    }
    #####:12815:    laststart___0 = b;
        -:12816:    {
    #####:12817:    while (1) {
        -:12818:                                            ;
        -:12819:      {
    #####:12820:      while (1) {
        -:12821:                                              ;
    #####:12822:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12823:          goto while_break___68;
        -:12824:        }
        -:12825:        {
    #####:12826:        while (1) {
        -:12827:                                                ;
    #####:12828:          old_buffer___16 = bufp->buffer;
    #####:12829:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12830:            return ((reg_errcode_t )15);
        -:12831:          }
    #####:12832:          bufp->allocated <<= 1;
    #####:12833:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12834:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12835:          }
        -:12836:          {
    #####:12837:          tmp___99 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12838:          bufp->buffer = (unsigned char *)tmp___99;
        -:12839:          }
    #####:12840:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12841:            return ((reg_errcode_t )12);
        -:12842:          }
    #####:12843:          if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
    #####:12844:            b = bufp->buffer + (b - old_buffer___16);
    #####:12845:            begalt = bufp->buffer + (begalt - old_buffer___16);
    #####:12846:            if (fixup_alt_jump) {
    #####:12847:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
    #####:12848:            }
    #####:12849:            if (laststart___0) {
    #####:12850:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___16);
    #####:12851:            }
    #####:12852:            if (pending_exact) {
    #####:12853:              pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
    #####:12854:            }
    #####:12855:          }
    #####:12856:          goto while_break___69;
        -:12857:        }
        -:12858:        while_break___69: /* CIL Label */ ;
        -:12859:        }
        -:12860:      }
        -:12861:      while_break___68: /* CIL Label */ ;
        -:12862:      }
    #####:12863:      tmp___100 = b;
    #####:12864:      b ++;
    #####:12865:      *tmp___100 = (unsigned char)25;
    #####:12866:      goto while_break___67;
        -:12867:    }
        -:12868:    while_break___67: /* CIL Label */ ;
        -:12869:    }
    #####:12870:    goto switch_break___0;
        -:12871:    case_60: /* CIL Label */ 
    #####:12872:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12873:      goto normal_char;
        -:12874:    }
        -:12875:    {
    #####:12876:    while (1) {
        -:12877:                                            ;
        -:12878:      {
    #####:12879:      while (1) {
        -:12880:                                              ;
    #####:12881:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12882:          goto while_break___71;
        -:12883:        }
        -:12884:        {
    #####:12885:        while (1) {
        -:12886:                                                ;
    #####:12887:          old_buffer___17 = bufp->buffer;
    #####:12888:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12889:            return ((reg_errcode_t )15);
        -:12890:          }
    #####:12891:          bufp->allocated <<= 1;
    #####:12892:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12893:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12894:          }
        -:12895:          {
    #####:12896:          tmp___101 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12897:          bufp->buffer = (unsigned char *)tmp___101;
        -:12898:          }
    #####:12899:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12900:            return ((reg_errcode_t )12);
        -:12901:          }
    #####:12902:          if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
    #####:12903:            b = bufp->buffer + (b - old_buffer___17);
    #####:12904:            begalt = bufp->buffer + (begalt - old_buffer___17);
    #####:12905:            if (fixup_alt_jump) {
    #####:12906:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
    #####:12907:            }
    #####:12908:            if (laststart___0) {
    #####:12909:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___17);
    #####:12910:            }
    #####:12911:            if (pending_exact) {
    #####:12912:              pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
    #####:12913:            }
    #####:12914:          }
    #####:12915:          goto while_break___72;
        -:12916:        }
        -:12917:        while_break___72: /* CIL Label */ ;
        -:12918:        }
        -:12919:      }
        -:12920:      while_break___71: /* CIL Label */ ;
        -:12921:      }
    #####:12922:      tmp___102 = b;
    #####:12923:      b ++;
    #####:12924:      *tmp___102 = (unsigned char)26;
    #####:12925:      goto while_break___70;
        -:12926:    }
        -:12927:    while_break___70: /* CIL Label */ ;
        -:12928:    }
    #####:12929:    goto switch_break___0;
        -:12930:    case_62: /* CIL Label */ 
    #####:12931:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12932:      goto normal_char;
        -:12933:    }
        -:12934:    {
    #####:12935:    while (1) {
        -:12936:                                            ;
        -:12937:      {
    #####:12938:      while (1) {
        -:12939:                                              ;
    #####:12940:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12941:          goto while_break___74;
        -:12942:        }
        -:12943:        {
    #####:12944:        while (1) {
        -:12945:                                                ;
    #####:12946:          old_buffer___18 = bufp->buffer;
    #####:12947:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12948:            return ((reg_errcode_t )15);
        -:12949:          }
    #####:12950:          bufp->allocated <<= 1;
    #####:12951:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12952:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12953:          }
        -:12954:          {
    #####:12955:          tmp___103 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12956:          bufp->buffer = (unsigned char *)tmp___103;
        -:12957:          }
    #####:12958:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12959:            return ((reg_errcode_t )12);
        -:12960:          }
    #####:12961:          if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
    #####:12962:            b = bufp->buffer + (b - old_buffer___18);
    #####:12963:            begalt = bufp->buffer + (begalt - old_buffer___18);
    #####:12964:            if (fixup_alt_jump) {
    #####:12965:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
    #####:12966:            }
    #####:12967:            if (laststart___0) {
    #####:12968:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___18);
    #####:12969:            }
    #####:12970:            if (pending_exact) {
    #####:12971:              pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
    #####:12972:            }
    #####:12973:          }
    #####:12974:          goto while_break___75;
        -:12975:        }
        -:12976:        while_break___75: /* CIL Label */ ;
        -:12977:        }
        -:12978:      }
        -:12979:      while_break___74: /* CIL Label */ ;
        -:12980:      }
    #####:12981:      tmp___104 = b;
    #####:12982:      b ++;
    #####:12983:      *tmp___104 = (unsigned char)27;
    #####:12984:      goto while_break___73;
        -:12985:    }
        -:12986:    while_break___73: /* CIL Label */ ;
        -:12987:    }
    #####:12988:    goto switch_break___0;
        -:12989:    case_98: /* CIL Label */ 
    #####:12990:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12991:      goto normal_char;
        -:12992:    }
        -:12993:    {
    #####:12994:    while (1) {
        -:12995:                                            ;
        -:12996:      {
    #####:12997:      while (1) {
        -:12998:                                              ;
    #####:12999:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:13000:          goto while_break___77;
        -:13001:        }
        -:13002:        {
    #####:13003:        while (1) {
        -:13004:                                                ;
    #####:13005:          old_buffer___19 = bufp->buffer;
    #####:13006:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13007:            return ((reg_errcode_t )15);
        -:13008:          }
    #####:13009:          bufp->allocated <<= 1;
    #####:13010:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13011:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13012:          }
        -:13013:          {
    #####:13014:          tmp___105 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:13015:          bufp->buffer = (unsigned char *)tmp___105;
        -:13016:          }
    #####:13017:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13018:            return ((reg_errcode_t )12);
        -:13019:          }
    #####:13020:          if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
    #####:13021:            b = bufp->buffer + (b - old_buffer___19);
    #####:13022:            begalt = bufp->buffer + (begalt - old_buffer___19);
    #####:13023:            if (fixup_alt_jump) {
    #####:13024:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
    #####:13025:            }
    #####:13026:            if (laststart___0) {
    #####:13027:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___19);
    #####:13028:            }
    #####:13029:            if (pending_exact) {
    #####:13030:              pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
    #####:13031:            }
    #####:13032:          }
    #####:13033:          goto while_break___78;
        -:13034:        }
        -:13035:        while_break___78: /* CIL Label */ ;
        -:13036:        }
        -:13037:      }
        -:13038:      while_break___77: /* CIL Label */ ;
        -:13039:      }
    #####:13040:      tmp___106 = b;
    #####:13041:      b ++;
    #####:13042:      *tmp___106 = (unsigned char)28;
    #####:13043:      goto while_break___76;
        -:13044:    }
        -:13045:    while_break___76: /* CIL Label */ ;
        -:13046:    }
    #####:13047:    goto switch_break___0;
        -:13048:    case_66: /* CIL Label */ 
    #####:13049:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13050:      goto normal_char;
        -:13051:    }
        -:13052:    {
    #####:13053:    while (1) {
        -:13054:                                            ;
        -:13055:      {
    #####:13056:      while (1) {
        -:13057:                                              ;
    #####:13058:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:13059:          goto while_break___80;
        -:13060:        }
        -:13061:        {
    #####:13062:        while (1) {
        -:13063:                                                ;
    #####:13064:          old_buffer___20 = bufp->buffer;
    #####:13065:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13066:            return ((reg_errcode_t )15);
        -:13067:          }
    #####:13068:          bufp->allocated <<= 1;
    #####:13069:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13070:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13071:          }
        -:13072:          {
    #####:13073:          tmp___107 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:13074:          bufp->buffer = (unsigned char *)tmp___107;
        -:13075:          }
    #####:13076:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13077:            return ((reg_errcode_t )12);
        -:13078:          }
    #####:13079:          if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
    #####:13080:            b = bufp->buffer + (b - old_buffer___20);
    #####:13081:            begalt = bufp->buffer + (begalt - old_buffer___20);
    #####:13082:            if (fixup_alt_jump) {
    #####:13083:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
    #####:13084:            }
    #####:13085:            if (laststart___0) {
    #####:13086:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___20);
    #####:13087:            }
    #####:13088:            if (pending_exact) {
    #####:13089:              pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
    #####:13090:            }
    #####:13091:          }
    #####:13092:          goto while_break___81;
        -:13093:        }
        -:13094:        while_break___81: /* CIL Label */ ;
        -:13095:        }
        -:13096:      }
        -:13097:      while_break___80: /* CIL Label */ ;
        -:13098:      }
    #####:13099:      tmp___108 = b;
    #####:13100:      b ++;
    #####:13101:      *tmp___108 = (unsigned char)29;
    #####:13102:      goto while_break___79;
        -:13103:    }
        -:13104:    while_break___79: /* CIL Label */ ;
        -:13105:    }
    #####:13106:    goto switch_break___0;
        -:13107:    case_96: /* CIL Label */ 
    #####:13108:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13109:      goto normal_char;
        -:13110:    }
        -:13111:    {
    #####:13112:    while (1) {
        -:13113:                                            ;
        -:13114:      {
    #####:13115:      while (1) {
        -:13116:                                              ;
    #####:13117:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:13118:          goto while_break___83;
        -:13119:        }
        -:13120:        {
    #####:13121:        while (1) {
        -:13122:                                                ;
    #####:13123:          old_buffer___21 = bufp->buffer;
    #####:13124:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13125:            return ((reg_errcode_t )15);
        -:13126:          }
    #####:13127:          bufp->allocated <<= 1;
    #####:13128:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13129:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13130:          }
        -:13131:          {
    #####:13132:          tmp___109 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:13133:          bufp->buffer = (unsigned char *)tmp___109;
        -:13134:          }
    #####:13135:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13136:            return ((reg_errcode_t )12);
        -:13137:          }
    #####:13138:          if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
    #####:13139:            b = bufp->buffer + (b - old_buffer___21);
    #####:13140:            begalt = bufp->buffer + (begalt - old_buffer___21);
    #####:13141:            if (fixup_alt_jump) {
    #####:13142:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
    #####:13143:            }
    #####:13144:            if (laststart___0) {
    #####:13145:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___21);
    #####:13146:            }
    #####:13147:            if (pending_exact) {
    #####:13148:              pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
    #####:13149:            }
    #####:13150:          }
    #####:13151:          goto while_break___84;
        -:13152:        }
        -:13153:        while_break___84: /* CIL Label */ ;
        -:13154:        }
        -:13155:      }
        -:13156:      while_break___83: /* CIL Label */ ;
        -:13157:      }
    #####:13158:      tmp___110 = b;
    #####:13159:      b ++;
    #####:13160:      *tmp___110 = (unsigned char)11;
    #####:13161:      goto while_break___82;
        -:13162:    }
        -:13163:    while_break___82: /* CIL Label */ ;
        -:13164:    }
    #####:13165:    goto switch_break___0;
        -:13166:    case_39: /* CIL Label */ 
    #####:13167:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13168:      goto normal_char;
        -:13169:    }
        -:13170:    {
    #####:13171:    while (1) {
        -:13172:                                            ;
        -:13173:      {
    #####:13174:      while (1) {
        -:13175:                                              ;
    #####:13176:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:13177:          goto while_break___86;
        -:13178:        }
        -:13179:        {
    #####:13180:        while (1) {
        -:13181:                                                ;
    #####:13182:          old_buffer___22 = bufp->buffer;
    #####:13183:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13184:            return ((reg_errcode_t )15);
        -:13185:          }
    #####:13186:          bufp->allocated <<= 1;
    #####:13187:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13188:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13189:          }
        -:13190:          {
    #####:13191:          tmp___111 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:13192:          bufp->buffer = (unsigned char *)tmp___111;
        -:13193:          }
    #####:13194:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13195:            return ((reg_errcode_t )12);
        -:13196:          }
    #####:13197:          if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
    #####:13198:            b = bufp->buffer + (b - old_buffer___22);
    #####:13199:            begalt = bufp->buffer + (begalt - old_buffer___22);
    #####:13200:            if (fixup_alt_jump) {
    #####:13201:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
    #####:13202:            }
    #####:13203:            if (laststart___0) {
    #####:13204:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___22);
    #####:13205:            }
    #####:13206:            if (pending_exact) {
    #####:13207:              pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
    #####:13208:            }
    #####:13209:          }
    #####:13210:          goto while_break___87;
        -:13211:        }
        -:13212:        while_break___87: /* CIL Label */ ;
        -:13213:        }
        -:13214:      }
        -:13215:      while_break___86: /* CIL Label */ ;
        -:13216:      }
    #####:13217:      tmp___112 = b;
    #####:13218:      b ++;
    #####:13219:      *tmp___112 = (unsigned char)12;
    #####:13220:      goto while_break___85;
        -:13221:    }
        -:13222:    while_break___85: /* CIL Label */ ;
        -:13223:    }
    #####:13224:    goto switch_break___0;
        -:13225:    case_49: /* CIL Label */ 
        -:13226:                             
        -:13227:                              
        -:13228:                              
        -:13229:                              
        -:13230:                              
        -:13231:                              
        -:13232:                              
        -:13233:                              
    #####:13234:     if (syntax & ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13235:      goto normal_char;
        -:13236:    }
    #####:13237:    c1 = (unsigned char )((int )c - 48);
    #####:13238:    if ((regnum_t )c1 > regnum) {
        -:13239:      {
    #####:13240:      free((void *)compile_stack.stack);
        -:13241:      }
    #####:13242:      return ((reg_errcode_t )6);
        -:13243:    }
        -:13244:    {
    #####:13245:    tmp___113 = group_in_compile_stack(compile_stack, (regnum_t )c1);
        -:13246:    }
    #####:13247:    if (tmp___113) {
    #####:13248:      goto normal_char;
        -:13249:    }
    #####:13250:    laststart___0 = b;
        -:13251:    {
    #####:13252:    while (1) {
        -:13253:                                            ;
        -:13254:      {
    #####:13255:      while (1) {
        -:13256:                                              ;
    #####:13257:        if (! ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated)) {
    #####:13258:          goto while_break___89;
        -:13259:        }
        -:13260:        {
    #####:13261:        while (1) {
        -:13262:                                                ;
    #####:13263:          old_buffer___23 = bufp->buffer;
    #####:13264:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13265:            return ((reg_errcode_t )15);
        -:13266:          }
    #####:13267:          bufp->allocated <<= 1;
    #####:13268:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13269:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13270:          }
        -:13271:          {
    #####:13272:          tmp___114 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:13273:          bufp->buffer = (unsigned char *)tmp___114;
        -:13274:          }
    #####:13275:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13276:            return ((reg_errcode_t )12);
        -:13277:          }
    #####:13278:          if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
    #####:13279:            b = bufp->buffer + (b - old_buffer___23);
    #####:13280:            begalt = bufp->buffer + (begalt - old_buffer___23);
    #####:13281:            if (fixup_alt_jump) {
    #####:13282:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
    #####:13283:            }
    #####:13284:            if (laststart___0) {
    #####:13285:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___23);
    #####:13286:            }
    #####:13287:            if (pending_exact) {
    #####:13288:              pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
    #####:13289:            }
    #####:13290:          }
    #####:13291:          goto while_break___90;
        -:13292:        }
        -:13293:        while_break___90: /* CIL Label */ ;
        -:13294:        }
        -:13295:      }
        -:13296:      while_break___89: /* CIL Label */ ;
        -:13297:      }
    #####:13298:      tmp___115 = b;
    #####:13299:      b ++;
    #####:13300:      *tmp___115 = (unsigned char)8;
    #####:13301:      tmp___116 = b;
    #####:13302:      b ++;
    #####:13303:      *tmp___116 = c1;
    #####:13304:      goto while_break___88;
        -:13305:    }
        -:13306:    while_break___88: /* CIL Label */ ;
        -:13307:    }
    #####:13308:    goto switch_break___0;
        -:13309:    case_43___0: /* CIL Label */ 
        -:13310:                                 
    #####:13311:     if (syntax & (1UL << 1)) {
    #####:13312:      goto handle_plus;
        -:13313:    }
        -:13314:    normal_backslash: 
        -:13315:                                    
    #####:13316:     if (translate) {
    #####:13317:      c = (unsigned char )*(translate + (int )c);
    #####:13318:    } else {
    #####:13319:      c = c;
        -:13320:    }
    #####:13321:    goto normal_char;
        -:13322:    switch_break___0: /* CIL Label */ ;
        -:13323:    }
        2:13324:    goto switch_break;
        -:13325:    normal_char: 
        -:13326:                                        
       12:13327:     if (! pending_exact) {
        3:13328:      goto _L___23;
        -:13329:    } else { //Added block
        9:13330:    if ((unsigned long )((pending_exact + (int )*pending_exact) + 1) != (unsigned long )b) {
    #####:13331:      goto _L___23;
        -:13332:    } else { //Added block
        9:13333:    if ((int )*pending_exact == (1 << 8) - 1) {
    #####:13334:      goto _L___23;
        -:13335:    } else { //Added block
        9:13336:    if ((int const   )*p == 42) {
    #####:13337:      goto _L___23;
        -:13338:    } else { //Added block
        9:13339:    if ((int const   )*p == 94) {
    #####:13340:      goto _L___23;
        -:13341:    } else {
        9:13342:      if (syntax & (1UL << 1)) {
    #####:13343:        if ((int const   )*p == 92) {
    #####:13344:          if ((int const   )*(p + 1) == 43) {
    #####:13345:            tmp___120 = 1;
    #####:13346:          } else { //Added block
    #####:13347:          if ((int const   )*(p + 1) == 63) {
    #####:13348:            tmp___120 = 1;
    #####:13349:          } else {
    #####:13350:            tmp___120 = 0;
        -:13351:          }
        -:13352:          }
    #####:13353:        } else {
    #####:13354:          tmp___120 = 0;
        -:13355:        }
    #####:13356:        tmp___122 = tmp___120;
    #####:13357:      } else {
        9:13358:        if ((int const   )*p == 43) {
    #####:13359:          tmp___121 = 1;
    #####:13360:        } else { //Added block
        9:13361:        if ((int const   )*p == 63) {
    #####:13362:          tmp___121 = 1;
    #####:13363:        } else {
        9:13364:          tmp___121 = 0;
        -:13365:        }
        -:13366:        }
        9:13367:        tmp___122 = tmp___121;
        -:13368:      }
        9:13369:      if (tmp___122) {
    #####:13370:        goto _L___23;
        -:13371:      } else { //Added block
        9:13372:      if (syntax & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        9:13373:        if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        9:13374:          tmp___124 = (int const   )*p == 123;
        9:13375:        } else {
    #####:13376:          if ((int const   )*(p + 0) == 92) {
    #####:13377:            if ((int const   )*(p + 1) == 123) {
    #####:13378:              tmp___123 = 1;
    #####:13379:            } else {
    #####:13380:              tmp___123 = 0;
        -:13381:            }
    #####:13382:          } else {
    #####:13383:            tmp___123 = 0;
        -:13384:          }
    #####:13385:          tmp___124 = tmp___123;
        -:13386:        }
        9:13387:        if (tmp___124) {
        -:13388:          _L___23: 
        3:13389:          laststart___0 = b;
        -:13390:          {
        3:13391:          while (1) {
        -:13392:                                                  ;
        -:13393:            {
        3:13394:            while (1) {
        -:13395:                                                    ;
        3:13396:              if (! ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated)) {
        3:13397:                goto while_break___92;
        -:13398:              }
        -:13399:              {
    #####:13400:              while (1) {
        -:13401:                                                      ;
    #####:13402:                old_buffer___24 = bufp->buffer;
    #####:13403:                if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13404:                  return ((reg_errcode_t )15);
        -:13405:                }
    #####:13406:                bufp->allocated <<= 1;
    #####:13407:                if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13408:                  bufp->allocated = (unsigned long )(1L << 16);
    #####:13409:                }
        -:13410:                {
    #####:13411:                tmp___117 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:13412:                bufp->buffer = (unsigned char *)tmp___117;
        -:13413:                }
    #####:13414:                if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13415:                  return ((reg_errcode_t )12);
        -:13416:                }
    #####:13417:                if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
    #####:13418:                  b = bufp->buffer + (b - old_buffer___24);
    #####:13419:                  begalt = bufp->buffer + (begalt - old_buffer___24);
    #####:13420:                  if (fixup_alt_jump) {
    #####:13421:                    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
    #####:13422:                  }
    #####:13423:                  if (laststart___0) {
    #####:13424:                    laststart___0 = bufp->buffer + (laststart___0 - old_buffer___24);
    #####:13425:                  }
    #####:13426:                  if (pending_exact) {
    #####:13427:                    pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
    #####:13428:                  }
    #####:13429:                }
    #####:13430:                goto while_break___93;
        -:13431:              }
        -:13432:              while_break___93: /* CIL Label */ ;
        -:13433:              }
        -:13434:            }
        -:13435:            while_break___92: /* CIL Label */ ;
        -:13436:            }
        3:13437:            tmp___118 = b;
        3:13438:            b ++;
        3:13439:            *tmp___118 = (unsigned char)2;
        3:13440:            tmp___119 = b;
        3:13441:            b ++;
        3:13442:            *tmp___119 = (unsigned char)0;
        3:13443:            goto while_break___91;
        -:13444:          }
        -:13445:          while_break___91: /* CIL Label */ ;
        -:13446:          }
        3:13447:          pending_exact = b - 1;
        3:13448:        }
       12:13449:      }
        -:13450:      }
        -:13451:    }
        -:13452:    }
        -:13453:    }
        -:13454:    }
        -:13455:    }
        -:13456:    {
       12:13457:    while (1) {
        -:13458:                                            ;
        -:13459:      {
       13:13460:      while (1) {
        -:13461:                                              ;
       13:13462:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
       12:13463:          goto while_break___95;
        -:13464:        }
        -:13465:        {
        1:13466:        while (1) {
        -:13467:                                                ;
        1:13468:          old_buffer___25 = bufp->buffer;
        1:13469:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13470:            return ((reg_errcode_t )15);
        -:13471:          }
        1:13472:          bufp->allocated <<= 1;
        1:13473:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13474:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13475:          }
        -:13476:          {
        1:13477:          tmp___125 = realloc((void *)bufp->buffer, bufp->allocated);
        1:13478:          bufp->buffer = (unsigned char *)tmp___125;
        -:13479:          }
        1:13480:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13481:            return ((reg_errcode_t )12);
        -:13482:          }
        1:13483:          if ((unsigned long )old_buffer___25 != (unsigned long )bufp->buffer) {
    #####:13484:            b = bufp->buffer + (b - old_buffer___25);
    #####:13485:            begalt = bufp->buffer + (begalt - old_buffer___25);
    #####:13486:            if (fixup_alt_jump) {
    #####:13487:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
    #####:13488:            }
    #####:13489:            if (laststart___0) {
    #####:13490:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___25);
    #####:13491:            }
    #####:13492:            if (pending_exact) {
    #####:13493:              pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
    #####:13494:            }
    #####:13495:          }
        1:13496:          goto while_break___96;
        -:13497:        }
        -:13498:        while_break___96: /* CIL Label */ ;
        -:13499:        }
        -:13500:      }
        -:13501:      while_break___95: /* CIL Label */ ;
        -:13502:      }
       12:13503:      tmp___126 = b;
       12:13504:      b ++;
       12:13505:      *tmp___126 = c;
       12:13506:      goto while_break___94;
        -:13507:    }
        -:13508:    while_break___94: /* CIL Label */ ;
        -:13509:    }
       12:13510:    *pending_exact = (unsigned char )((int )*pending_exact + 1);
       12:13511:    goto switch_break;
        -:13512:    switch_break: /* CIL Label */ ;
        -:13513:    }
        -:13514:  }
        -:13515:  while_break: /* CIL Label */ ;
        -:13516:  }
        1:13517:  if (fixup_alt_jump) {
        -:13518:     
        -:13519:
        1:13520:    store_op1((re_opcode_t )14, fixup_alt_jump, (int )((b - fixup_alt_jump) - 3L));
        -:13521:     
        -:13522:
        1:13523:  }
        1:13524:  if (! (compile_stack.avail == 0U)) {
        -:13525:    {
    #####:13526:    free((void *)compile_stack.stack);
        -:13527:    }
    #####:13528:    return ((reg_errcode_t )8);
        -:13529:  }
        1:13530:  if (syntax & ((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        -:13531:     
        -:13532:
    #####:13533:    while (1) {
        -:13534:                                            ;
        -:13535:      {
    #####:13536:      while (1) {
        -:13537:                                              ;
    #####:13538:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:13539:          goto while_break___98;
        -:13540:        }
        -:13541:        {
    #####:13542:        while (1) {
        -:13543:                                                ;
    #####:13544:          old_buffer___26 = bufp->buffer;
    #####:13545:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13546:            return ((reg_errcode_t )15);
        -:13547:          }
    #####:13548:          bufp->allocated <<= 1;
    #####:13549:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13550:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13551:          }
        -:13552:          {
    #####:13553:          tmp___127 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:13554:          bufp->buffer = (unsigned char *)tmp___127;
        -:13555:          }
    #####:13556:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13557:            return ((reg_errcode_t )12);
        -:13558:          }
    #####:13559:          if ((unsigned long )old_buffer___26 != (unsigned long )bufp->buffer) {
    #####:13560:            b = bufp->buffer + (b - old_buffer___26);
    #####:13561:            begalt = bufp->buffer + (begalt - old_buffer___26);
    #####:13562:            if (fixup_alt_jump) {
    #####:13563:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___26);
    #####:13564:            }
    #####:13565:            if (laststart___0) {
    #####:13566:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___26);
    #####:13567:            }
    #####:13568:            if (pending_exact) {
    #####:13569:              pending_exact = bufp->buffer + (pending_exact - old_buffer___26);
    #####:13570:            }
    #####:13571:          }
    #####:13572:          goto while_break___99;
        -:13573:        }
        -:13574:        while_break___99: /* CIL Label */ ;
        -:13575:        }
        -:13576:      }
        -:13577:      while_break___98: /* CIL Label */ ;
        -:13578:      }
    #####:13579:      tmp___128 = b;
    #####:13580:      b ++;
    #####:13581:      *tmp___128 = (unsigned char)1;
    #####:13582:      goto while_break___97;
        -:13583:    }
        -:13584:    while_break___97: /* CIL Label */ ;
        -:13585:     
        -:13586:
    #####:13587:  }
        -:13588:  {
        1:13589:  free((void *)compile_stack.stack);
        1:13590:  bufp->used = (unsigned long )(b - bufp->buffer);
        -:13591:  }
        1:13592:  return ((reg_errcode_t )0);
        -:13593:}
        1:13594:}
        2:13595:static void store_op1(re_opcode_t op , unsigned char *loc , int arg ) 
        -:13596:{ 
        -:13597:
        -:13598:
        -:13599:   
        -:13600:
        2:13601:  *loc = (unsigned char )op;
        -:13602:  {
        2:13603:  while (1) {
        -:13604:                                     ;
        2:13605:    *((loc + 1) + 0) = (unsigned char )(arg & 255);
        2:13606:    *((loc + 1) + 1) = (unsigned char )(arg >> 8);
        2:13607:    goto while_break;
        -:13608:  }
        -:13609:  while_break: /* CIL Label */ ;
        -:13610:  }
        2:13611:  return;
        -:13612: 
        -:13613:
        -:13614:}
        2:13615:static void store_op2(re_opcode_t op , unsigned char *loc , int arg1 , int arg2 ) 
        -:13616:{ 
        -:13617:
        -:13618:
        -:13619:   
        -:13620:
        2:13621:  *loc = (unsigned char )op;
        -:13622:  {
        2:13623:  while (1) {
        -:13624:                                     ;
        2:13625:    *((loc + 1) + 0) = (unsigned char )(arg1 & 255);
        2:13626:    *((loc + 1) + 1) = (unsigned char )(arg1 >> 8);
        2:13627:    goto while_break;
        -:13628:  }
        -:13629:  while_break: /* CIL Label */ ;
        -:13630:  }
        -:13631:  {
        2:13632:  while (1) {
        -:13633:                                         ;
        2:13634:    *((loc + 3) + 0) = (unsigned char )(arg2 & 255);
        2:13635:    *((loc + 3) + 1) = (unsigned char )(arg2 >> 8);
        2:13636:    goto while_break___0;
        -:13637:  }
        -:13638:  while_break___0: /* CIL Label */ ;
        -:13639:  }
        2:13640:  return;
        -:13641: 
        -:13642:
        -:13643:}
        1:13644:static void insert_op1(re_opcode_t op , unsigned char *loc , int arg , unsigned char *end ) 
        -:13645:{ 
        -:13646:  register unsigned char *pfrom ;
        -:13647:  register unsigned char *pto ;
        -:13648:
        -:13649:  {
        1:13650:  pfrom = end;
        1:13651:  pto = end + 3;
        -:13652:  {
       10:13653:  while (1) {
        -:13654:                                     ;
       10:13655:    if (! ((unsigned long )pfrom != (unsigned long )loc)) {
        1:13656:      goto while_break;
        -:13657:    }
        9:13658:    pto --;
        9:13659:    pfrom --;
        9:13660:    *pto = *pfrom;
        -:13661:  }
        -:13662:  while_break: /* CIL Label */ ;
        -:13663:  }
        -:13664:  {
        1:13665:  store_op1(op, loc, arg);
        -:13666:  }
        1:13667:  return;
        -:13668:}
        -:13669:}
        2:13670:static void insert_op2(re_opcode_t op , unsigned char *loc , int arg1 , int arg2 ,
        -:13671:                       unsigned char *end ) 
        -:13672:{ 
        -:13673:  register unsigned char *pfrom ;
        -:13674:  register unsigned char *pto ;
        -:13675:
        -:13676:  {
        2:13677:  pfrom = end;
        2:13678:  pto = end + 5;
        -:13679:  {
       13:13680:  while (1) {
        -:13681:                                     ;
       13:13682:    if (! ((unsigned long )pfrom != (unsigned long )loc)) {
        2:13683:      goto while_break;
        -:13684:    }
       11:13685:    pto --;
       11:13686:    pfrom --;
       11:13687:    *pto = *pfrom;
        -:13688:  }
        -:13689:  while_break: /* CIL Label */ ;
        -:13690:  }
        -:13691:  {
        2:13692:  store_op2(op, loc, arg1, arg2);
        -:13693:  }
        2:13694:  return;
        -:13695:}
        -:13696:}
    #####:13697:static boolean at_begline_loc_p(char const   *pattern , char const   *p , reg_syntax_t syntax ) 
        -:13698:{ 
        -:13699:  char const   *prev ;
        -:13700:  boolean prev_prev_backslash ;
        -:13701:  int tmp ;
        -:13702:  int tmp___0 ;
        -:13703:
        -:13704:  {
    #####:13705:  prev = p - 2;
    #####:13706:  if ((unsigned long )prev > (unsigned long )pattern) {
    #####:13707:    if ((int const   )*(prev + -1) == 92) {
    #####:13708:      tmp = 1;
    #####:13709:    } else {
    #####:13710:      tmp = 0;
        -:13711:    }
    #####:13712:  } else {
    #####:13713:    tmp = 0;
        -:13714:  }
    #####:13715:  prev_prev_backslash = (boolean )tmp;
    #####:13716:  if ((int const   )*prev == 40) {
    #####:13717:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13718:      tmp___0 = 1;
    #####:13719:    } else { //Added block
    #####:13720:    if (prev_prev_backslash) {
    #####:13721:      tmp___0 = 1;
    #####:13722:    } else {
    #####:13723:      goto _L;
        -:13724:    }
        -:13725:    }
    #####:13726:  } else { //Added block
        -:13727:  _L: 
    #####:13728:  if ((int const   )*prev == 124) {
    #####:13729:    if (syntax & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13730:      tmp___0 = 1;
    #####:13731:    } else { //Added block
    #####:13732:    if (prev_prev_backslash) {
    #####:13733:      tmp___0 = 1;
    #####:13734:    } else {
    #####:13735:      tmp___0 = 0;
        -:13736:    }
        -:13737:    }
    #####:13738:  } else {
    #####:13739:    tmp___0 = 0;
        -:13740:  }
        -:13741:  }
    #####:13742:  return ((boolean )tmp___0);
        -:13743:}
        -:13744:}
    #####:13745:static boolean at_endline_loc_p(char const   *p , char const   *pend , reg_syntax_t syntax ) 
        -:13746:{ 
        -:13747:  char const   *next ;
        -:13748:  boolean next_backslash ;
        -:13749:  char const   *next_next ;
        -:13750:  char const   *tmp ;
        -:13751:  int tmp___0 ;
        -:13752:  int tmp___1 ;
        -:13753:  int tmp___2 ;
        -:13754:  int tmp___3 ;
        -:13755:  int tmp___4 ;
        -:13756:
        -:13757:  {
    #####:13758:  next = p;
    #####:13759:  next_backslash = (boolean )((int const   )*next == 92);
    #####:13760:  if ((unsigned long )(p + 1) < (unsigned long )pend) {
    #####:13761:    tmp = p + 1;
    #####:13762:  } else {
    #####:13763:    tmp = (char const   *)0;
        -:13764:  }
    #####:13765:  next_next = tmp;
    #####:13766:  if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13767:    tmp___1 = (int const   )*next == 41;
    #####:13768:  } else {
    #####:13769:    if (next_backslash) {
    #####:13770:      if (next_next) {
    #####:13771:        if ((int const   )*next_next == 41) {
    #####:13772:          tmp___0 = 1;
    #####:13773:        } else {
    #####:13774:          tmp___0 = 0;
        -:13775:        }
    #####:13776:      } else {
    #####:13777:        tmp___0 = 0;
        -:13778:      }
    #####:13779:    } else {
    #####:13780:      tmp___0 = 0;
        -:13781:    }
    #####:13782:    tmp___1 = tmp___0;
        -:13783:  }
    #####:13784:  if (tmp___1) {
    #####:13785:    tmp___4 = 1;
    #####:13786:  } else {
    #####:13787:    if (syntax & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13788:      tmp___3 = (int const   )*next == 124;
    #####:13789:    } else {
    #####:13790:      if (next_backslash) {
    #####:13791:        if (next_next) {
    #####:13792:          if ((int const   )*next_next == 124) {
    #####:13793:            tmp___2 = 1;
    #####:13794:          } else {
    #####:13795:            tmp___2 = 0;
        -:13796:          }
    #####:13797:        } else {
    #####:13798:          tmp___2 = 0;
        -:13799:        }
    #####:13800:      } else {
    #####:13801:        tmp___2 = 0;
        -:13802:      }
    #####:13803:      tmp___3 = tmp___2;
        -:13804:    }
    #####:13805:    if (tmp___3) {
    #####:13806:      tmp___4 = 1;
    #####:13807:    } else {
    #####:13808:      tmp___4 = 0;
        -:13809:    }
        -:13810:  }
    #####:13811:  return ((boolean )tmp___4);
        -:13812:}
        -:13813:}
    #####:13814:static boolean group_in_compile_stack(compile_stack_type compile_stack , regnum_t regnum ) 
        -:13815:{ 
        -:13816:  int this_element ;
        -:13817:
        -:13818:  {
    #####:13819:  this_element = (int )(compile_stack.avail - 1U);
        -:13820:  {
    #####:13821:  while (1) {
        -:13822:                                     ;
    #####:13823:    if (! (this_element >= 0)) {
    #####:13824:      goto while_break;
        -:13825:    }
    #####:13826:    if ((compile_stack.stack + this_element)->regnum == regnum) {
    #####:13827:      return ((boolean )1);
        -:13828:    }
    #####:13829:    this_element --;
        -:13830:  }
        -:13831:  while_break: /* CIL Label */ ;
        -:13832:  }
    #####:13833:  return ((boolean )0);
        -:13834:}
    #####:13835:}
    #####:13836:static reg_errcode_t compile_range(char const   **p_ptr , char const   *pend , char *translate ,
        -:13837:                                   reg_syntax_t syntax , unsigned char *b ) 
        -:13838:{ 
        -:13839:  unsigned int this_char ;
        -:13840:  char const   *p ;
        -:13841:  reg_errcode_t ret ;
        -:13842:  char range_start[2] ;
        -:13843:  char range_end[2] ;
        -:13844:  char ch[2] ;
        -:13845:  unsigned int tmp ;
        -:13846:  unsigned int tmp___0 ;
        -:13847:  int tmp___1 ;
        -:13848:  int tmp___2 ;
        -:13849:
        -:13850:  {
    #####:13851:  p = *p_ptr;
    #####:13852:  if ((unsigned long )p == (unsigned long )pend) {
    #####:13853:    return ((reg_errcode_t )11);
        -:13854:  }
    #####:13855:  range_start[0] = (char )*(p + -2);
    #####:13856:  range_start[1] = (char )'\000';
    #####:13857:  range_end[0] = (char )*(p + 0);
    #####:13858:  range_end[1] = (char )'\000';
    #####:13859:  (*p_ptr) ++;
    #####:13860:  if (syntax & ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13861:    ret = (reg_errcode_t )11;
    #####:13862:  } else {
    #####:13863:    ret = (reg_errcode_t )0;
        -:13864:  }
    #####:13865:  this_char = 0U;
        -:13866:  {
    #####:13867:  while (1) {
        -:13868:                                     ;
    #####:13869:    if (! (this_char <= 255U)) {
    #####:13870:      goto while_break;
        -:13871:    }
        -:13872:    {
    #####:13873:    ch[0] = (char )this_char;
    #####:13874:    ch[1] = (char )'\000';
    #####:13875:    tmp___1 = strcoll((char const   *)(range_start), (char const   *)(ch));
        -:13876:    }
    #####:13877:    if (tmp___1 <= 0) {
        -:13878:      {
    #####:13879:      tmp___2 = strcoll((char const   *)(ch), (char const   *)(range_end));
        -:13880:      }
    #####:13881:      if (tmp___2 <= 0) {
    #####:13882:        if (translate) {
    #####:13883:          tmp = (unsigned int )*(translate + (int )((unsigned char )this_char));
    #####:13884:        } else {
    #####:13885:          tmp = this_char;
        -:13886:        }
    #####:13887:        if (translate) {
    #####:13888:          tmp___0 = (unsigned int )*(translate + (int )((unsigned char )this_char));
    #####:13889:        } else {
    #####:13890:          tmp___0 = this_char;
        -:13891:        }
    #####:13892:        *(b + (int )((unsigned char )tmp) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )tmp) / 8) | (1 << (int )((unsigned char )tmp___0) % 8));
    #####:13893:        ret = (reg_errcode_t )0;
    #####:13894:      }
    #####:13895:    }
    #####:13896:    this_char ++;
        -:13897:  }
        -:13898:  while_break: /* CIL Label */ ;
        -:13899:  }
    #####:13900:  return (ret);
        -:13901:}
    #####:13902:}
    #####:13903:int re_compile_fastmap(struct re_pattern_buffer *bufp ) 
        -:13904:{ 
        -:13905:  int j ;
        -:13906:  int k ;
        -:13907:  fail_stack_type fail_stack ;
        -:13908:  char *destination ;
        -:13909:  register char *fastmap ;
        -:13910:  unsigned char *pattern ;
        -:13911:  unsigned char *p ;
        -:13912:  register unsigned char *pend ;
        -:13913:  boolean path_can_be_null ;
        -:13914:  boolean succeed_n_p ;
        -:13915:  void *tmp ;
        -:13916:  unsigned char *tmp___0 ;
        -:13917:  unsigned char *tmp___1 ;
        -:13918:  unsigned char *tmp___2 ;
        -:13919:  int fastmap_newline ;
        -:13920:  unsigned int tmp___7 ;
        -:13921:  int tmp___8 ;
        -:13922:  void *tmp___9 ;
        -:13923:  void *tmp___10 ;
        -:13924:  int tmp___11 ;
        -:13925:  int tmp___12 ;
        -:13926:
        -:13927:  {
    #####:13928:  fastmap = bufp->fastmap;
    #####:13929:  pattern = bufp->buffer;
    #####:13930:  p = pattern;
    #####:13931:  pend = pattern + bufp->used;
    #####:13932:  path_can_be_null = (boolean )1;
    #####:13933:  succeed_n_p = (boolean )0;
        -:13934:  {
    #####:13935:  while (1) {
        -:13936:                                     ;
        -:13937:    {
    #####:13938:    tmp = __builtin_alloca(5UL * sizeof(fail_stack_elt_t ));
    #####:13939:    fail_stack.stack = (fail_stack_elt_t *)tmp;
        -:13940:    }
    #####:13941:    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:13942:      return (-2);
        -:13943:    }
    #####:13944:    fail_stack.size = 5U;
    #####:13945:    fail_stack.avail = 0U;
    #####:13946:    goto while_break;
        -:13947:  }
        -:13948:  while_break: /* CIL Label */ ;
        -:13949:  }
        -:13950:  {
    #####:13951:  memset((void *)fastmap, '\000', (size_t )(1 << 8));
    #####:13952:  bufp->fastmap_accurate = 1U;
    #####:13953:  bufp->can_be_null = 0U;
        -:13954:  }
        -:13955:  {
    #####:13956:  while (1) {
        -:13957:    while_continue___0: /* CIL Label */ ;
    #####:13958:    if ((unsigned long )p == (unsigned long )pend) {
    #####:13959:      goto _L;
        -:13960:    } else { //Added block
    #####:13961:    if ((int )*p == 1) {
        -:13962:      _L: 
    #####:13963:      if (! (fail_stack.avail == 0U)) {
    #####:13964:        bufp->can_be_null |= (unsigned int )path_can_be_null;
    #####:13965:        path_can_be_null = (boolean )1;
    #####:13966:        (fail_stack.avail) --;
    #####:13967:        p = (fail_stack.stack + fail_stack.avail)->pointer;
    #####:13968:        goto while_continue___0;
        -:13969:      } else {
    #####:13970:        goto while_break___0;
        -:13971:      }
        -:13972:    }
        -:13973:    }
    #####:13974:    tmp___0 = p;
    #####:13975:    p ++;
        -:13976:    {
    #####:13977:    if ((unsigned int )((re_opcode_t )*tmp___0) == 8U) {
    #####:13978:      goto case_8;
        -:13979:    }
    #####:13980:    if ((unsigned int )((re_opcode_t )*tmp___0) == 2U) {
    #####:13981:      goto case_2;
        -:13982:    }
    #####:13983:    if ((unsigned int )((re_opcode_t )*tmp___0) == 4U) {
    #####:13984:      goto case_4;
        -:13985:    }
    #####:13986:    if ((unsigned int )((re_opcode_t )*tmp___0) == 5U) {
    #####:13987:      goto case_5;
        -:13988:    }
    #####:13989:    if ((unsigned int )((re_opcode_t )*tmp___0) == 24U) {
    #####:13990:      goto case_24;
        -:13991:    }
    #####:13992:    if ((unsigned int )((re_opcode_t )*tmp___0) == 25U) {
    #####:13993:      goto case_25;
        -:13994:    }
    #####:13995:    if ((unsigned int )((re_opcode_t )*tmp___0) == 3U) {
    #####:13996:      goto case_3;
        -:13997:    }
    #####:13998:    if ((unsigned int )((re_opcode_t )*tmp___0) == 0U) {
    #####:13999:      goto case_0;
        -:14000:    }
    #####:14001:    if ((unsigned int )((re_opcode_t )*tmp___0) == 9U) {
    #####:14002:      goto case_0;
        -:14003:    }
    #####:14004:    if ((unsigned int )((re_opcode_t )*tmp___0) == 10U) {
    #####:14005:      goto case_0;
        -:14006:    }
    #####:14007:    if ((unsigned int )((re_opcode_t )*tmp___0) == 11U) {
    #####:14008:      goto case_0;
        -:14009:    }
    #####:14010:    if ((unsigned int )((re_opcode_t )*tmp___0) == 12U) {
    #####:14011:      goto case_0;
        -:14012:    }
    #####:14013:    if ((unsigned int )((re_opcode_t )*tmp___0) == 28U) {
    #####:14014:      goto case_0;
        -:14015:    }
    #####:14016:    if ((unsigned int )((re_opcode_t )*tmp___0) == 29U) {
    #####:14017:      goto case_0;
        -:14018:    }
    #####:14019:    if ((unsigned int )((re_opcode_t )*tmp___0) == 26U) {
    #####:14020:      goto case_0;
        -:14021:    }
    #####:14022:    if ((unsigned int )((re_opcode_t )*tmp___0) == 27U) {
    #####:14023:      goto case_0;
        -:14024:    }
    #####:14025:    if ((unsigned int )((re_opcode_t )*tmp___0) == 20U) {
    #####:14026:      goto case_0;
        -:14027:    }
    #####:14028:    if ((unsigned int )((re_opcode_t )*tmp___0) == 22U) {
    #####:14029:      goto case_22;
        -:14030:    }
    #####:14031:    if ((unsigned int )((re_opcode_t )*tmp___0) == 17U) {
    #####:14032:      goto case_22;
        -:14033:    }
    #####:14034:    if ((unsigned int )((re_opcode_t )*tmp___0) == 18U) {
    #####:14035:      goto case_22;
        -:14036:    }
    #####:14037:    if ((unsigned int )((re_opcode_t )*tmp___0) == 13U) {
    #####:14038:      goto case_22;
        -:14039:    }
    #####:14040:    if ((unsigned int )((re_opcode_t )*tmp___0) == 14U) {
    #####:14041:      goto case_22;
        -:14042:    }
    #####:14043:    if ((unsigned int )((re_opcode_t )*tmp___0) == 19U) {
    #####:14044:      goto case_22;
        -:14045:    }
    #####:14046:    if ((unsigned int )((re_opcode_t )*tmp___0) == 15U) {
    #####:14047:      goto handle_on_failure_jump;
        -:14048:    }
    #####:14049:    if ((unsigned int )((re_opcode_t )*tmp___0) == 16U) {
    #####:14050:      goto handle_on_failure_jump;
        -:14051:    }
    #####:14052:    if ((unsigned int )((re_opcode_t )*tmp___0) == 21U) {
    #####:14053:      goto case_21;
        -:14054:    }
    #####:14055:    if ((unsigned int )((re_opcode_t )*tmp___0) == 23U) {
    #####:14056:      goto case_23;
        -:14057:    }
    #####:14058:    if ((unsigned int )((re_opcode_t )*tmp___0) == 6U) {
    #####:14059:      goto case_6;
        -:14060:    }
    #####:14061:    if ((unsigned int )((re_opcode_t )*tmp___0) == 7U) {
    #####:14062:      goto case_6;
        -:14063:    }
    #####:14064:    goto switch_default;
        -:14065:    case_8: /* CIL Label */ 
    #####:14066:    bufp->can_be_null = 1U;
    #####:14067:    goto done;
        -:14068:    case_2: /* CIL Label */ 
    #####:14069:    *(fastmap + (int )*(p + 1)) = (char)1;
    #####:14070:    goto switch_break;
        -:14071:    case_4: /* CIL Label */ 
    #####:14072:    tmp___1 = p;
    #####:14073:    p ++;
    #####:14074:    j = (int )*tmp___1 * 8 - 1;
        -:14075:    {
    #####:14076:    while (1) {
        -:14077:                                           ;
    #####:14078:      if (! (j >= 0)) {
    #####:14079:        goto while_break___1;
        -:14080:      }
    #####:14081:      if ((int )*(p + j / 8) & (1 << j % 8)) {
    #####:14082:        *(fastmap + j) = (char)1;
    #####:14083:      }
    #####:14084:      j --;
        -:14085:    }
        -:14086:    while_break___1: /* CIL Label */ ;
        -:14087:    }
    #####:14088:    goto switch_break;
        -:14089:    case_5: /* CIL Label */ 
    #####:14090:    j = (int )*p * 8;
        -:14091:    {
    #####:14092:    while (1) {
        -:14093:                                           ;
    #####:14094:      if (! (j < 1 << 8)) {
    #####:14095:        goto while_break___2;
        -:14096:      }
    #####:14097:      *(fastmap + j) = (char)1;
    #####:14098:      j ++;
        -:14099:    }
        -:14100:    while_break___2: /* CIL Label */ ;
        -:14101:    }
    #####:14102:    tmp___2 = p;
    #####:14103:    p ++;
    #####:14104:    j = (int )*tmp___2 * 8 - 1;
        -:14105:    {
    #####:14106:    while (1) {
        -:14107:                                           ;
    #####:14108:      if (! (j >= 0)) {
    #####:14109:        goto while_break___3;
        -:14110:      }
    #####:14111:      if (! ((int )*(p + j / 8) & (1 << j % 8))) {
    #####:14112:        *(fastmap + j) = (char)1;
    #####:14113:      }
    #####:14114:      j --;
        -:14115:    }
        -:14116:    while_break___3: /* CIL Label */ ;
        -:14117:    }
    #####:14118:    goto switch_break;
        -:14119:    case_24: /* CIL Label */ 
    #####:14120:    j = 0;
        -:14121:    {
    #####:14122:    while (1) {
        -:14123:                                           ;
    #####:14124:      if (! (j < 1 << 8)) {
    #####:14125:        goto while_break___4;
        -:14126:      }
    #####:14127:      if ((int )re_syntax_table[j & 255] == 1) {
    #####:14128:        *(fastmap + j) = (char)1;
    #####:14129:      }
    #####:14130:      j ++;
        -:14131:    }
        -:14132:    while_break___4: /* CIL Label */ ;
        -:14133:    }
    #####:14134:    goto switch_break;
        -:14135:    case_25: /* CIL Label */ 
    #####:14136:    j = 0;
        -:14137:    {
    #####:14138:    while (1) {
        -:14139:                                           ;
    #####:14140:      if (! (j < 1 << 8)) {
    #####:14141:        goto while_break___5;
        -:14142:      }
    #####:14143:      if ((int )re_syntax_table[j & 255] != 1) {
    #####:14144:        *(fastmap + j) = (char)1;
    #####:14145:      }
    #####:14146:      j ++;
        -:14147:    }
        -:14148:    while_break___5: /* CIL Label */ ;
        -:14149:    }
    #####:14150:    goto switch_break;
        -:14151:    case_3: /* CIL Label */ 
    #####:14152:    fastmap_newline = (int )*(fastmap + 10);
    #####:14153:    j = 0;
        -:14154:    {
    #####:14155:    while (1) {
        -:14156:                                           ;
    #####:14157:      if (! (j < 1 << 8)) {
    #####:14158:        goto while_break___6;
        -:14159:      }
    #####:14160:      *(fastmap + j) = (char)1;
    #####:14161:      j ++;
        -:14162:    }
        -:14163:    while_break___6: /* CIL Label */ ;
        -:14164:    }
    #####:14165:    if (! (bufp->syntax & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:14166:      *(fastmap + 10) = (char )fastmap_newline;
    #####:14167:    } else { //Added block
    #####:14168:    if (bufp->can_be_null) {
    #####:14169:      goto done;
        -:14170:    }
        -:14171:    }
    #####:14172:    goto switch_break;
        -:14173:    case_0: /* CIL Label */ 
        -:14174:                            
        -:14175:                              
        -:14176:                              
        -:14177:                              
        -:14178:                              
        -:14179:                              
        -:14180:                              
        -:14181:                              
        -:14182:                              
    #####:14183:     goto while_continue___0;
        -:14184:    case_22: /* CIL Label */ 
        -:14185:                             
        -:14186:                              
        -:14187:                              
        -:14188:                              
        -:14189:                              
        -:14190:     {
    #####:14191:    while (1) {
        -:14192:                                           ;
        -:14193:      {
    #####:14194:      while (1) {
        -:14195:                                             ;
    #####:14196:        j = (int )*p & 255;
    #####:14197:        j += (int )((signed char )*(p + 1)) << 8;
    #####:14198:        goto while_break___8;
        -:14199:      }
        -:14200:      while_break___8: /* CIL Label */ ;
        -:14201:      }
    #####:14202:      p += 2;
    #####:14203:      goto while_break___7;
        -:14204:    }
        -:14205:    while_break___7: /* CIL Label */ ;
        -:14206:    }
    #####:14207:    p += j;
    #####:14208:    if (j > 0) {
    #####:14209:      goto while_continue___0;
        -:14210:    }
    #####:14211:    if ((unsigned int )((re_opcode_t )*p) != 15U) {
    #####:14212:      if ((unsigned int )((re_opcode_t )*p) != 21U) {
    #####:14213:        goto while_continue___0;
        -:14214:      }
    #####:14215:    }
    #####:14216:    p ++;
        -:14217:    {
    #####:14218:    while (1) {
        -:14219:                                           ;
        -:14220:      {
    #####:14221:      while (1) {
        -:14222:                                              ;
    #####:14223:        j = (int )*p & 255;
    #####:14224:        j += (int )((signed char )*(p + 1)) << 8;
    #####:14225:        goto while_break___10;
        -:14226:      }
        -:14227:      while_break___10: /* CIL Label */ ;
        -:14228:      }
    #####:14229:      p += 2;
    #####:14230:      goto while_break___9;
        -:14231:    }
        -:14232:    while_break___9: /* CIL Label */ ;
        -:14233:    }
    #####:14234:    p += j;
    #####:14235:    if (! (fail_stack.avail == 0U)) {
    #####:14236:      if ((unsigned long )(fail_stack.stack + (fail_stack.avail - 1U))->pointer == (unsigned long )p) {
    #####:14237:        (fail_stack.avail) --;
    #####:14238:      }
    #####:14239:    }
    #####:14240:    goto while_continue___0;
        -:14241:    handle_on_failure_jump: 
        -:14242:                             
        -:14243:                              
        -:14244:     {
    #####:14245:    while (1) {
        -:14246:                                            ;
        -:14247:      {
    #####:14248:      while (1) {
        -:14249:                                              ;
    #####:14250:        j = (int )*p & 255;
    #####:14251:        j += (int )((signed char )*(p + 1)) << 8;
    #####:14252:        goto while_break___12;
        -:14253:      }
        -:14254:      while_break___12: /* CIL Label */ ;
        -:14255:      }
    #####:14256:      p += 2;
    #####:14257:      goto while_break___11;
        -:14258:    }
        -:14259:    while_break___11: /* CIL Label */ ;
        -:14260:    }
    #####:14261:    if ((unsigned long )(p + j) < (unsigned long )pend) {
    #####:14262:      if (fail_stack.avail == fail_stack.size) {
    #####:14263:        if (fail_stack.size > (unsigned int )(re_max_failures * 19)) {
    #####:14264:          tmp___12 = 0;
    #####:14265:        } else {
        -:14266:          {
    #####:14267:          tmp___9 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
    #####:14268:          destination = (char *)tmp___9;
    #####:14269:          tmp___10 = memcpy((void * __restrict  )destination, (void const   * __restrict  )fail_stack.stack,
    #####:14270:                            (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
    #####:14271:          fail_stack.stack = (fail_stack_elt_t *)tmp___10;
        -:14272:          }
    #####:14273:          if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:14274:            tmp___11 = 0;
    #####:14275:          } else {
    #####:14276:            fail_stack.size <<= 1;
    #####:14277:            tmp___11 = 1;
        -:14278:          }
    #####:14279:          tmp___12 = tmp___11;
        -:14280:        }
    #####:14281:        if (tmp___12) {
    #####:14282:          tmp___7 = fail_stack.avail;
    #####:14283:          (fail_stack.avail) ++;
    #####:14284:          (fail_stack.stack + tmp___7)->pointer = p + j;
    #####:14285:          tmp___8 = 1;
    #####:14286:        } else {
    #####:14287:          tmp___8 = 0;
        -:14288:        }
    #####:14289:      } else {
    #####:14290:        tmp___7 = fail_stack.avail;
    #####:14291:        (fail_stack.avail) ++;
    #####:14292:        (fail_stack.stack + tmp___7)->pointer = p + j;
    #####:14293:        tmp___8 = 1;
        -:14294:      }
    #####:14295:      if (! tmp___8) {
    #####:14296:        return (-2);
        -:14297:      }
    #####:14298:    } else {
    #####:14299:      bufp->can_be_null = 1U;
        -:14300:    }
    #####:14301:    if (succeed_n_p) {
        -:14302:      {
    #####:14303:      while (1) {
        -:14304:                                              ;
        -:14305:        {
    #####:14306:        while (1) {
        -:14307:                                                ;
    #####:14308:          k = (int )*p & 255;
    #####:14309:          k += (int )((signed char )*(p + 1)) << 8;
    #####:14310:          goto while_break___14;
        -:14311:        }
        -:14312:        while_break___14: /* CIL Label */ ;
        -:14313:        }
    #####:14314:        p += 2;
    #####:14315:        goto while_break___13;
        -:14316:      }
        -:14317:      while_break___13: /* CIL Label */ ;
        -:14318:      }
    #####:14319:      succeed_n_p = (boolean )0;
    #####:14320:    }
    #####:14321:    goto while_continue___0;
        -:14322:    case_21: /* CIL Label */ 
    #####:14323:    p += 2;
        -:14324:    {
    #####:14325:    while (1) {
        -:14326:                                            ;
        -:14327:      {
    #####:14328:      while (1) {
        -:14329:                                              ;
    #####:14330:        k = (int )*p & 255;
    #####:14331:        k += (int )((signed char )*(p + 1)) << 8;
    #####:14332:        goto while_break___16;
        -:14333:      }
        -:14334:      while_break___16: /* CIL Label */ ;
        -:14335:      }
    #####:14336:      p += 2;
    #####:14337:      goto while_break___15;
        -:14338:    }
        -:14339:    while_break___15: /* CIL Label */ ;
        -:14340:    }
    #####:14341:    if (k == 0) {
    #####:14342:      p -= 4;
    #####:14343:      succeed_n_p = (boolean )1;
    #####:14344:      goto handle_on_failure_jump;
        -:14345:    }
    #####:14346:    goto while_continue___0;
        -:14347:    case_23: /* CIL Label */ 
    #####:14348:    p += 4;
    #####:14349:    goto while_continue___0;
        -:14350:    case_6: /* CIL Label */ 
        -:14351:                            
    #####:14352:     p += 2;
    #####:14353:    goto while_continue___0;
        -:14354:    switch_default: /* CIL Label */ 
        -:14355:    {
    #####:14356:    abort();
        -:14357:    }
        -:14358:    switch_break: /* CIL Label */ ;
        -:14359:    }
    #####:14360:    path_can_be_null = (boolean )0;
    #####:14361:    p = pend;
        -:14362:  }
        -:14363:  while_break___0: /* CIL Label */ ;
        -:14364:  }
    #####:14365:  bufp->can_be_null |= (unsigned int )path_can_be_null;
        -:14366:  done: ;
    #####:14367:  return (0);
        -:14368:}
    #####:14369:}
        -:14370:                                                                                      
        -:14371:                                                                                  
        -:14372:  
        -:14373:                 
        -:14374:
        -:14375:   
        -:14376:                 
        -:14377:                              
        -:14378:                                  
        -:14379:                             
        -:14380:                         
        -:14381:          
        -:14382:                              
        -:14383:                            
        -:14384:                        
        -:14385:                        
        -:14386:                          
        -:14387:   
        -:14388:         
        -:14389: 
        -:14390: 
    #####:14391:int re_search(struct re_pattern_buffer *bufp , char const   *string , int size , int startpos ,
        -:14392:              int range , struct re_registers *regs___0 ) 
        -:14393:{ 
        -:14394:  int tmp ;
        -:14395:
        -:14396:  {
        -:14397:  {
    #####:14398:  tmp = re_search_2(bufp, (char const   *)((void *)0), 0, string, size, startpos,
    #####:14399:                    range, regs___0, size);
        -:14400:  }
    #####:14401:  return (tmp);
        -:14402:}
        -:14403:}
        -:14404:                                                                                    
        -:14405:                                                                                                              
        -:14406:                           
        -:14407:  
        -:14408:           
        -:14409:                          
        -:14410:                            
        -:14411:                  
        -:14412:              
        -:14413:           
        -:14414:                            
        -:14415:                    
        -:14416:              
        -:14417:                         
        -:14418:                         
        -:14419:                         
        -:14420:                   
        -:14421:               
        -:14422:               
        -:14423:
        -:14424:   
        -:14425:                          
        -:14426:                              
        -:14427:                             
        -:14428:                            
        -:14429:                     
        -:14430:                
        -:14431:                        
        -:14432:                              
        -:14433:                
        -:14434:   
        -:14435:   
        -:14436:                   
        -:14437:                         
        -:14438:                        
        -:14439:                            
        -:14440:                                  
        -:14441:   
        -:14442:   
        -:14443:                         
        -:14444:                    
        -:14445:                                                                      
        -:14446:                
        -:14447:                            
        -:14448:                                                                     
        -:14449:                                     
        -:14450:              
        -:14451:                             
        -:14452:                        
        -:14453:                  
        -:14454:                      
        -:14455:           
        -:14456:         
        -:14457:       
        -:14458:       
        -:14459:     
        -:14460:   
        -:14461:                
        -:14462:                                   
        -:14463:       
        -:14464:                                     
        -:14465:       
        -:14466:                      
        -:14467:                    
        -:14468:       
        -:14469:     
        -:14470:   
        -:14471:   
        -:14472:             
        -:14473:                                      
        -:14474:                  
        -:14475:                                  
        -:14476:                                  
        -:14477:                          
        -:14478:                    
        -:14479:                           
        -:14480:                                   
        -:14481:                                              
        -:14482:                                                 
        -:14483:               
        -:14484:             
        -:14485:                                    
        -:14486:                                        
        -:14487:                    
        -:14488:                                
        -:14489:             
        -:14490:                                   
        -:14491:                            
        -:14492:               
        -:14493:
        -:14494:                         
        -:14495:                                                      
        -:14496:                                  
        -:14497:                              
        -:14498:                       
        -:14499:                                                                                                             
        -:14500:                                         
        -:14501:                   
        -:14502:                        
        -:14503:                                       
        -:14504:                 
        -:14505:                         
        -:14506:               
        -:14507:                                                
        -:14508:               
        -:14509:
        -:14510:                    
        -:14511:               
        -:14512:
        -:14513:                         
        -:14514:                                                      
        -:14515:                                  
        -:14516:                              
        -:14517:                       
        -:14518:                                                                      
        -:14519:                                         
        -:14520:                   
        -:14521:                        
        -:14522:                                       
        -:14523:                 
        -:14524:                         
        -:14525:               
        -:14526:                                                
        -:14527:               
        -:14528:
        -:14529:             
        -:14530:                                       
        -:14531:                  
        -:14532:                             
        -:14533:                                                                              
        -:14534:                                  
        -:14535:                                    
        -:14536:                                                                              
        -:14537:                    
        -:14538:                                                                    
        -:14539:             
        -:14540:             
        -:14541:                               
        -:14542:                            
        -:14543:                                                                       
        -:14544:                    
        -:14545:                                
        -:14546:             
        -:14547:                                                                 
        -:14548:                           
        -:14549:             
        -:14550:           
        -:14551:         
        -:14552:       
        -:14553:     
        -:14554:                     
        -:14555:                                   
        -:14556:                      
        -:14557:                                    
        -:14558:                        
        -:14559:           
        -:14560:         
        -:14561:       
        -:14562:     
        -:14563:     
        -:14564:                                                                                       
        -:14565:                                    
        -:14566:     
        -:14567:                   
        -:14568:                        
        -:14569:     
        -:14570:                    
        -:14571:                  
        -:14572:     
        -:14573:             
        -:14574:                  
        -:14575:                       
        -:14576:                          
        -:14577:                    
        -:14578:               
        -:14579:                  
        -:14580:            
        -:14581:               
        -:14582:                  
        -:14583:     
        -:14584:     
        -:14585:   
        -:14586:                                
        -:14587:   
        -:14588:              
        -:14589: 
        -:14590: 
        -:14591:                                                                                         
        -:14592:                                             
        -:14593:  
        -:14594:              
        -:14595:           
        -:14596:
        -:14597:   
        -:14598:   
        -:14599:                                                                                    
        -:14600:                                            
        -:14601:               
        -:14602:   
        -:14603:                  
        -:14604: 
        -:14605: 
        -:14606:static boolean group_match_null_string_p(unsigned char **p , unsigned char *end ,
        -:14607:                                         register_info_type *reg_info ) ;
        -:14608:static boolean alt_match_null_string_p(unsigned char *p , unsigned char *end , register_info_type *reg_info ) ;
        -:14609:static boolean common_op_match_null_string_p(unsigned char **p , unsigned char *end ,
        -:14610:                                             register_info_type *reg_info ) ;
        -:14611:static int bcmp_translate(char const   *s1 , char const   *s2 , int len , char *translate ) ;
        -:14612:                                                                                   
        -:14613:                                                                                            
        -:14614:                          
        -:14615:  
        -:14616:              
        -:14617:           
        -:14618:
        -:14619:   
        -:14620:   
        -:14621:                                                                                       
        -:14622:               
        -:14623:   
        -:14624:                  
        -:14625: 
        -:14626: 
        -:14627:                                                                                       
        -:14628:                                                                                        
        -:14629:                                                                          
        -:14630:  
        -:14631:            
        -:14632:                     
        -:14633:                      
        -:14634:                      
        -:14635:                             
        -:14636:                             
        -:14637:                   
        -:14638:                      
        -:14639:                    
        -:14640:                                
        -:14641:                                      
        -:14642:                   
        -:14643:                              
        -:14644:                   
        -:14645:                                  
        -:14646:                                   
        -:14647:                           
        -:14648:                         
        -:14649:                               
        -:14650:                             
        -:14651:                                
        -:14652:                              
        -:14653:                                
        -:14654:                              
        -:14655:                           
        -:14656:                             
        -:14657:                            
        -:14658:                                      
        -:14659:             
        -:14660:                 
        -:14661:                 
        -:14662:                 
        -:14663:                 
        -:14664:                 
        -:14665:                 
        -:14666:                 
        -:14667:                 
        -:14668:                 
        -:14669:                         
        -:14670:                          
        -:14671:                          
        -:14672:                      
        -:14673:                
        -:14674:                        
        -:14675:                  
        -:14676:                  
        -:14677:                  
        -:14678:                  
        -:14679:                     
        -:14680:                     
        -:14681:                     
        -:14682:                   
        -:14683:                     
        -:14684:                          
        -:14685:                           
        -:14686:                           
        -:14687:                          
        -:14688:                           
        -:14689:                          
        -:14690:                           
        -:14691:                  
        -:14692:                         
        -:14693:                
        -:14694:                
        -:14695:                      
        -:14696:                         
        -:14697:                            
        -:14698:               
        -:14699:                      
        -:14700:                         
        -:14701:                    
        -:14702:                          
        -:14703:                          
        -:14704:                       
        -:14705:                       
        -:14706:                           
        -:14707:                      
        -:14708:                     
        -:14709:                         
        -:14710:                  
        -:14711:                  
        -:14712:                
        -:14713:                
        -:14714:                         
        -:14715:                         
        -:14716:                         
        -:14717:                         
        -:14718:                         
        -:14719:                         
        -:14720:                         
        -:14721:                             
        -:14722:                                
        -:14723:             
        -:14724:                           
        -:14725:                
        -:14726:                
        -:14727:                
        -:14728:                
        -:14729:                
        -:14730:                      
        -:14731:                         
        -:14732:                          
        -:14733:                
        -:14734:                          
        -:14735:                         
        -:14736:                             
        -:14737:                  
        -:14738:                  
        -:14739:                
        -:14740:                
        -:14741:                         
        -:14742:                         
        -:14743:                         
        -:14744:                         
        -:14745:                         
        -:14746:                         
        -:14747:                         
        -:14748:                         
        -:14749:                             
        -:14750:                  
        -:14751:                  
        -:14752:                
        -:14753:                
        -:14754:                         
        -:14755:                         
        -:14756:                         
        -:14757:                         
        -:14758:                         
        -:14759:                         
        -:14760:                         
        -:14761:                              
        -:14762:                                
        -:14763:                
        -:14764:               
        -:14765:           
        -:14766:               
        -:14767:                              
        -:14768:                               
        -:14769:                         
        -:14770:                        
        -:14771:                             
        -:14772:                                      
        -:14773:                         
        -:14774:                             
        -:14775:                  
        -:14776:                  
        -:14777:                
        -:14778:                
        -:14779:                         
        -:14780:                         
        -:14781:                         
        -:14782:                         
        -:14783:                         
        -:14784:                         
        -:14785:                         
        -:14786:                         
        -:14787:                             
        -:14788:                  
        -:14789:                  
        -:14790:                
        -:14791:                
        -:14792:                         
        -:14793:                          
        -:14794:                          
        -:14795:                          
        -:14796:                          
        -:14797:                          
        -:14798:                          
        -:14799:                    
        -:14800:                    
        -:14801:                           
        -:14802:                 
        -:14803:                 
        -:14804:                 
        -:14805:                 
        -:14806:                        
        -:14807:                        
        -:14808:                           
        -:14809:                 
        -:14810:                 
        -:14811:                 
        -:14812:                 
        -:14813:                 
        -:14814:                 
        -:14815:                           
        -:14816:                 
        -:14817:                 
        -:14818:                           
        -:14819:                 
        -:14820:                 
        -:14821:                 
        -:14822:                 
        -:14823:                 
        -:14824:                 
        -:14825:                      
        -:14826:                          
        -:14827:                 
        -:14828:                 
        -:14829:                      
        -:14830:                          
        -:14831:                             
        -:14832:                                          
        -:14833:                           
        -:14834:
        -:14835:   
        -:14836:                   
        -:14837:                        
        -:14838:                                           
        -:14839:                              
        -:14840:                                 
        -:14841:                                                    
        -:14842:                                               
        -:14843:                     
        -:14844:                                          
        -:14845:                            
        -:14846:   
        -:14847:             
        -:14848:                                      
        -:14849:     
        -:14850:                                                            
        -:14851:                                               
        -:14852:     
        -:14853:                                                                          
        -:14854:                  
        -:14855:     
        -:14856:                         
        -:14857:                          
        -:14858:                     
        -:14859:   
        -:14860:                                
        -:14861:   
        -:14862:                      
        -:14863:     
        -:14864:                                                                  
        -:14865:                                        
        -:14866:                                                                  
        -:14867:                                      
        -:14868:                                                                  
        -:14869:                                            
        -:14870:                                                                  
        -:14871:                                          
        -:14872:                                                                  
        -:14873:                                             
        -:14874:                                                                  
        -:14875:                                           
        -:14876:                                                                       
        -:14877:                                             
        -:14878:                                                                  
        -:14879:                                         
        -:14880:                                                                       
        -:14881:                                                   
        -:14882:     
        -:14883:                   
        -:14884:                   
        -:14885:                           
        -:14886:                           
        -:14887:                           
        -:14888:                                  
        -:14889:                                  
        -:14890:                                  
        -:14891:                                           
        -:14892:                                  
        -:14893:                     
        -:14894:                          
        -:14895:                                
        -:14896:                   
        -:14897:                        
        -:14898:                              
        -:14899:                 
        -:14900:                      
        -:14901:                            
        -:14902:               
        -:14903:                    
        -:14904:                          
        -:14905:             
        -:14906:                  
        -:14907:                        
        -:14908:           
        -:14909:                
        -:14910:                      
        -:14911:         
        -:14912:              
        -:14913:                    
        -:14914:       
        -:14915:            
        -:14916:              
        -:14917:       
        -:14918:                 
        -:14919:                                              
        -:14920:                                                
        -:14921:                                              
        -:14922:                                                    
        -:14923:                                                  
        -:14924:                                                     
        -:14925:                                                   
        -:14926:                                                     
        -:14927:                                                 
        -:14928:                                                           
        -:14929:                             
        -:14930:       
        -:14931:                                        
        -:14932:       
        -:14933:                  
        -:14934:     
        -:14935:          
        -:14936:                                             
        -:14937:                            
        -:14938:                                
        -:14939:                               
        -:14940:                              
        -:14941:                          
        -:14942:                      
        -:14943:                                                       
        -:14944:                              
        -:14945:   
        -:14946:                
        -:14947:                
        -:14948:                        
        -:14949:                            
        -:14950:            
        -:14951:     
        -:14952:               
        -:14953:                                            
        -:14954:                                              
        -:14955:                                            
        -:14956:                                                  
        -:14957:                                                
        -:14958:                                                   
        -:14959:                                                 
        -:14960:                                                   
        -:14961:                                               
        -:14962:                                                         
        -:14963:                           
        -:14964:     
        -:14965:                                      
        -:14966:     
        -:14967:                
        -:14968:   
        -:14969:   
        -:14970:           
        -:14971:   
        -:14972:             
        -:14973:                                          
        -:14974:                                                        
        -:14975:                           
        -:14976:     
        -:14977:                                                   
        -:14978:                                    
        -:14979:                        
        -:14980:                                      
        -:14981:                       
        -:14982:                               
        -:14983:                                 
        -:14984:                                                     
        -:14985:                                           
        -:14986:                                                   
        -:14987:                                                        
        -:14988:            
        -:14989:   
        -:14990:                                    
        -:14991:   
        -:14992:                   
        -:14993:                                                                 
        -:14994:                        
        -:14995:                    
        -:14996:                                  
        -:14997:                
        -:14998:     
        -:14999:   
        -:15000:                         
        -:15001:                         
        -:15002:                      
        -:15003:                                 
        -:15004:                          
        -:15005:          
        -:15006:                       
        -:15007:                                           
        -:15008:   
        -:15009:                  
        -:15010:                       
        -:15011:                        
        -:15012:                         
        -:15013:            
        -:15014:                                  
        -:15015:                         
        -:15016:     
        -:15017:          
        -:15018:                                
        -:15019:                       
        -:15020:   
        -:15021:   
        -:15022:             
        -:15023:                                          
        -:15024:                                                    
        -:15025:                                                             
        -:15026:                    
        -:15027:                                                                     
        -:15028:                                                                                 
        -:15029:                           
        -:15030:                    
        -:15031:                           
        -:15032:             
        -:15033:                  
        -:15034:                         
        -:15035:           
        -:15036:                
        -:15037:                       
        -:15038:         
        -:15039:                                                                                                   
        -:15040:                         
        -:15041:                                                                                   
        -:15042:                
        -:15043:                                                                                             
        -:15044:         
        -:15045:                                         
        -:15046:                                
        -:15047:                        
        -:15048:                                
        -:15049:                             
        -:15050:                    
        -:15051:                               
        -:15052:                          
        -:15053:                     
        -:15054:             
        -:15055:                       
        -:15056:                                                    
        -:15057:                                                                  
        -:15058:                                     
        -:15059:               
        -:15060:                                                           
        -:15061:                                                       
        -:15062:                      
        -:15063:             
        -:15064:                                              
        -:15065:             
        -:15066:           
        -:15067:           
        -:15068:                    
        -:15069:                              
        -:15070:                            
        -:15071:                               
        -:15072:                               
        -:15073:                          
        -:15074:                                                               
        -:15075:                                                              
        -:15076:                                   
        -:15077:                      
        -:15078:                                   
        -:15079:               
        -:15080:                    
        -:15081:                                 
        -:15082:             
        -:15083:                     
        -:15084:             
        -:15085:                       
        -:15086:                                                    
        -:15087:                                                                  
        -:15088:                                     
        -:15089:               
        -:15090:                                                           
        -:15091:                                                       
        -:15092:                      
        -:15093:             
        -:15094:                                              
        -:15095:             
        -:15096:           
        -:15097:         
        -:15098:         
        -:15099:       
        -:15100:                      
        -:15101:                     
        -:15102:                             
        -:15103:                                           
        -:15104:                                        
        -:15105:                                       
        -:15106:                    
        -:15107:                                                                   
        -:15108:             
        -:15109:             
        -:15110:                                                                                       
        -:15111:                                                   
        -:15112:                                                                                       
        -:15113:                                                 
        -:15114:             
        -:15115:                                                                                 
        -:15116:                          
        -:15117:                                  
        -:15118:                                                                               
        -:15119:                      
        -:15120:               
        -:15121:                         
        -:15122:                                                      
        -:15123:                                                        
        -:15124:                                                      
        -:15125:                                                            
        -:15126:                                                          
        -:15127:                                                             
        -:15128:                                                           
        -:15129:                                                             
        -:15130:                                                         
        -:15131:                                                                   
        -:15132:                                     
        -:15133:               
        -:15134:                                                
        -:15135:               
        -:15136:                          
        -:15137:             
        -:15138:             
        -:15139:                                      
        -:15140:                                
        -:15141:                                           
        -:15142:                                                               
        -:15143:               
        -:15144:                                                                   
        -:15145:                                                                                                                  
        -:15146:                                                     
        -:15147:                                                                                                                
        -:15148:                                                   
        -:15149:               
        -:15150:                                                                                   
        -:15151:                             
        -:15152:                                    
        -:15153:                                                                                 
        -:15154:                         
        -:15155:                 
        -:15156:                           
        -:15157:                                                        
        -:15158:                                                          
        -:15159:                                                        
        -:15160:                                                              
        -:15161:                                                            
        -:15162:                                                               
        -:15163:                                                             
        -:15164:                                                               
        -:15165:                                                           
        -:15166:                                                                     
        -:15167:                                       
        -:15168:                 
        -:15169:                                                  
        -:15170:                 
        -:15171:                            
        -:15172:               
        -:15173:               
        -:15174:             
        -:15175:           
        -:15176:           
        -:15177:                                        
        -:15178:                                         
        -:15179:                                                                      
        -:15180:                                                              
        -:15181:                    
        -:15182:                                                                               
        -:15183:             
        -:15184:           
        -:15185:                   
        -:15186:           
        -:15187:                     
        -:15188:                                                  
        -:15189:                                                         
        -:15190:                                  
        -:15191:                    
        -:15192:                                                     
        -:15193:             
        -:15194:                                                                
        -:15195:                                   
        -:15196:             
        -:15197:                                                                                            
        -:15198:                            
        -:15199:                                                 
        -:15200:                                                   
        -:15201:                                  
        -:15202:                                                                                          
        -:15203:                            
        -:15204:                                                 
        -:15205:                                                   
        -:15206:                    
        -:15207:                          
        -:15208:                                                                                    
        -:15209:                                                                                                
        -:15210:                                                                         
        -:15211:                          
        -:15212:                                                                                          
        -:15213:                   
        -:15214:                        
        -:15215:                                                                                        
        -:15216:                 
        -:15217:                      
        -:15218:                                                                                      
        -:15219:               
        -:15220:                                                   
        -:15221:                          
        -:15222:                                                                                  
        -:15223:                                                                                              
        -:15224:                                                                       
        -:15225:                          
        -:15226:                                                                                        
        -:15227:                   
        -:15228:                        
        -:15229:                                                                                      
        -:15230:                 
        -:15231:                      
        -:15232:                                                                                    
        -:15233:               
        -:15234:                                                 
        -:15235:             
        -:15236:             
        -:15237:                    
        -:15238:           
        -:15239:                                            
        -:15240:           
        -:15241:                                
        -:15242:           
        -:15243:                     
        -:15244:                                                  
        -:15245:                                                               
        -:15246:                                   
        -:15247:             
        -:15248:                          
        -:15249:                                               
        -:15250:                                                 
        -:15251:                    
        -:15252:           
        -:15253:                                            
        -:15254:           
        -:15255:         
        -:15256:       
        -:15257:                                                                
        -:15258:                           
        -:15259:              
        -:15260:                                   
        -:15261:       
        -:15262:                                          
        -:15263:       
        -:15264:                 
        -:15265:                                               
        -:15266:                                                
        -:15267:                                              
        -:15268:                                                    
        -:15269:                                                  
        -:15270:                                                     
        -:15271:                                                   
        -:15272:                                                     
        -:15273:                                                 
        -:15274:                                                           
        -:15275:                              
        -:15276:       
        -:15277:                                         
        -:15278:       
        -:15279:                    
        -:15280:     
        -:15281:                 
        -:15282:         
        -:15283:     
        -:15284:                                                         
        -:15285:                  
        -:15286:     
        -:15287:                                                         
        -:15288:                  
        -:15289:     
        -:15290:                                                         
        -:15291:                  
        -:15292:     
        -:15293:                                                         
        -:15294:                  
        -:15295:     
        -:15296:                                                         
        -:15297:                  
        -:15298:     
        -:15299:                                                         
        -:15300:                  
        -:15301:     
        -:15302:                                                         
        -:15303:                  
        -:15304:     
        -:15305:                                                         
        -:15306:                  
        -:15307:     
        -:15308:                                                         
        -:15309:                  
        -:15310:     
        -:15311:                                                         
        -:15312:                  
        -:15313:     
        -:15314:                                                          
        -:15315:                   
        -:15316:     
        -:15317:                                                          
        -:15318:                   
        -:15319:     
        -:15320:                                                          
        -:15321:                   
        -:15322:     
        -:15323:                                                          
        -:15324:                   
        -:15325:     
        -:15326:                                                          
        -:15327:                      
        -:15328:     
        -:15329:                                                          
        -:15330:                       
        -:15331:     
        -:15332:                                                          
        -:15333:                       
        -:15334:     
        -:15335:                                                          
        -:15336:                       
        -:15337:     
        -:15338:                                                          
        -:15339:                   
        -:15340:     
        -:15341:                                                          
        -:15342:                       
        -:15343:     
        -:15344:                                                          
        -:15345:                   
        -:15346:     
        -:15347:                                                          
        -:15348:                   
        -:15349:     
        -:15350:                                                          
        -:15351:                       
        -:15352:     
        -:15353:                                                          
        -:15354:                   
        -:15355:     
        -:15356:                                                          
        -:15357:                   
        -:15358:     
        -:15359:                                                          
        -:15360:                   
        -:15361:     
        -:15362:                                                          
        -:15363:                   
        -:15364:     
        -:15365:                                                          
        -:15366:                   
        -:15367:     
        -:15368:                                                          
        -:15369:                   
        -:15370:     
        -:15371:                                                          
        -:15372:                   
        -:15373:     
        -:15374:                            
        -:15375:                             
        -:15376:                      
        -:15377:                             
        -:15378:                       
        -:15379:                            
        -:15380:                 
        -:15381:         
        -:15382:                           
        -:15383:                    
        -:15384:       
        -:15385:
        -:15386:                 
        -:15387:                                               
        -:15388:         
        -:15389:                   
        -:15390:                                                 
        -:15391:                                                              
        -:15392:                                  
        -:15393:           
        -:15394:                                                                    
        -:15395:                      
        -:15396:           
        -:15397:                      
        -:15398:                             
        -:15399:         
        -:15400:                                           
        -:15401:         
        -:15402:                     
        -:15403:             
        -:15404:                     
        -:15405:             
        -:15406:                                                                                                          
        -:15407:                    
        -:15408:         
        -:15409:                
        -:15410:                     
        -:15411:                                
        -:15412:         
        -:15413:       
        -:15414:                                         
        -:15415:       
        -:15416:
        -:15417:            
        -:15418:       
        -:15419:
        -:15420:                 
        -:15421:                                               
        -:15422:         
        -:15423:                   
        -:15424:                                                 
        -:15425:                                                              
        -:15426:                                  
        -:15427:           
        -:15428:                                                                    
        -:15429:                      
        -:15430:           
        -:15431:                      
        -:15432:                             
        -:15433:         
        -:15434:                                           
        -:15435:         
        -:15436:                     
        -:15437:             
        -:15438:                     
        -:15439:             
        -:15440:                                                                          
        -:15441:                    
        -:15442:         
        -:15443:                
        -:15444:                     
        -:15445:                                
        -:15446:         
        -:15447:       
        -:15448:                                         
        -:15449:       
        -:15450:
        -:15451:     
        -:15452:     
        -:15453:               
        -:15454:                                             
        -:15455:                                    
        -:15456:                                  
        -:15457:                              
        -:15458:         
        -:15459:                   
        -:15460:                                                 
        -:15461:                                            
        -:15462:                                  
        -:15463:           
        -:15464:                        
        -:15465:                                                                 
        -:15466:                                                            
        -:15467:               
        -:15468:         
        -:15469:                                           
        -:15470:         
        -:15471:       
        -:15472:                            
        -:15473:     
        -:15474:                                       
        -:15475:     
        -:15476:                      
        -:15477:                             
        -:15478:     
        -:15479:               
        -:15480:                                             
        -:15481:                                                          
        -:15482:                              
        -:15483:       
        -:15484:                                                                
        -:15485:                  
        -:15486:       
        -:15487:                  
        -:15488:                         
        -:15489:     
        -:15490:                                       
        -:15491:     
        -:15492:                                                                           
        -:15493:                      
        -:15494:                                                                   
        -:15495:              
        -:15496:                            
        -:15497:       
        -:15498:                           
        -:15499:                  
        -:15500:              
        -:15501:                     
        -:15502:       
        -:15503:                          
        -:15504:             
        -:15505:                                                                              
        -:15506:                      
        -:15507:                                                                   
        -:15508:              
        -:15509:                            
        -:15510:       
        -:15511:                          
        -:15512:                  
        -:15513:       
        -:15514:     
        -:15515:     
        -:15516:     
        -:15517:               
        -:15518:                                             
        -:15519:                                    
        -:15520:                                  
        -:15521:                                  
        -:15522:         
        -:15523:                   
        -:15524:                                                 
        -:15525:                                                
        -:15526:                                  
        -:15527:           
        -:15528:                        
        -:15529:                                                                     
        -:15530:                                                                
        -:15531:                   
        -:15532:         
        -:15533:                                           
        -:15534:         
        -:15535:       
        -:15536:                            
        -:15537:     
        -:15538:                                       
        -:15539:     
        -:15540:         
        -:15541:                      
        -:15542:                            
        -:15543:                            
        -:15544:                                                                     
        -:15545:     
        -:15546:               
        -:15547:                                             
        -:15548:                                                          
        -:15549:                              
        -:15550:       
        -:15551:                                                                
        -:15552:                  
        -:15553:       
        -:15554:                  
        -:15555:                         
        -:15556:     
        -:15557:                                       
        -:15558:     
        -:15559:                    
        -:15560:                                                                    
        -:15561:            
        -:15562:                             
        -:15563:     
        -:15564:                                                           
        -:15565:                                                                
        -:15566:                                
        -:15567:       
        -:15568:     
        -:15569:                      
        -:15570:                
        -:15571:                
        -:15572:     
        -:15573:     
        -:15574:               
        -:15575:                                             
        -:15576:                                    
        -:15577:                                  
        -:15578:                                  
        -:15579:         
        -:15580:                   
        -:15581:                                                 
        -:15582:                                                
        -:15583:                                  
        -:15584:           
        -:15585:                        
        -:15586:                                                                     
        -:15587:                                                                
        -:15588:                   
        -:15589:         
        -:15590:                                           
        -:15591:         
        -:15592:       
        -:15593:                            
        -:15594:     
        -:15595:                                       
        -:15596:     
        -:15597:         
        -:15598:                      
        -:15599:                            
        -:15600:           
        -:15601:                                                                
        -:15602:       
        -:15603:
        -:15604:                                                                 
        -:15605:                                                                                
        -:15606:       
        -:15607:
        -:15608:     
        -:15609:                                                          
        -:15610:                                                                                          
        -:15611:                     
        -:15612:              
        -:15613:                                          
        -:15614:       
        -:15615:                                            
        -:15616:            
        -:15617:                                                          
        -:15618:     
        -:15619:                               
        -:15620:                                               
        -:15621:                                                       
        -:15622:                              
        -:15623:                                           
        -:15624:                                                             
        -:15625:                                            
        -:15626:     
        -:15627:           
        -:15628:                            
        -:15629:                      
        -:15630:                             
        -:15631:                                                          
        -:15632:                                                                                        
        -:15633:                     
        -:15634:              
        -:15635:                                        
        -:15636:       
        -:15637:                                          
        -:15638:            
        -:15639:                                                      
        -:15640:     
        -:15641:                             
        -:15642:                                               
        -:15643:                              
        -:15644:                                                  
        -:15645:                                                        
        -:15646:                                                   
        -:15647:            
        -:15648:                                             
        -:15649:       
        -:15650:                 
        -:15651:                                               
        -:15652:                              
        -:15653:                                                               
        -:15654:                                  
        -:15655:           
        -:15656:                
        -:15657:                                
        -:15658:         
        -:15659:                                                  
        -:15660:       
        -:15661:                                         
        -:15662:       
        -:15663:                             
        -:15664:                                                          
        -:15665:                                                     
        -:15666:              
        -:15667:                                                  
        -:15668:       
        -:15669:     
        -:15670:                                                          
        -:15671:                   
        -:15672:                          
        -:15673:                                                                         
        -:15674:               
        -:15675:                                                           
        -:15676:                                  
        -:15677:                   
        -:15678:                 
        -:15679:                      
        -:15680:              
        -:15681:         
        -:15682:                                                              
        -:15683:                       
        -:15684:         
        -:15685:                                                              
        -:15686:                       
        -:15687:         
        -:15688:                                                              
        -:15689:                       
        -:15690:         
        -:15691:                                                              
        -:15692:                       
        -:15693:         
        -:15694:                                                              
        -:15695:                       
        -:15696:         
        -:15697:                            
        -:15698:                                 
        -:15699:                                  
        -:15700:                                 
        -:15701:                                 
        -:15702:                                  
        -:15703:                                  
        -:15704:          
        -:15705:                   
        -:15706:                                                 
        -:15707:           
        -:15708:                     
        -:15709:                                                   
        -:15710:                                   
        -:15711:                                                         
        -:15712:                                  
        -:15713:           
        -:15714:                                             
        -:15715:           
        -:15716:                  
        -:15717:                                
        -:15718:         
        -:15719:                                           
        -:15720:         
        -:15721:                          
        -:15722:                  
        -:15723:         
        -:15724:                              
        -:15725:                                         
        -:15726:                                           
        -:15727:         
        -:15728:                   
        -:15729:                       
        -:15730:                                                          
        -:15731:                                                                 
        -:15732:                                                
        -:15733:                                                                         
        -:15734:                                                                          
        -:15735:                                            
        -:15736:                   
        -:15737:                             
        -:15738:                                                           
        -:15739:                                                                                  
        -:15740:                                            
        -:15741:                     
        -:15742:                                                                  
        -:15743:                                                                                                       
        -:15744:                                                                
        -:15745:                     
        -:15746:                             
        -:15747:                   
        -:15748:                                                     
        -:15749:                   
        -:15750:                 
        -:15751:                      
        -:15752:                 
        -:15753:                           
        -:15754:                                                         
        -:15755:                   
        -:15756:                             
        -:15757:                                                           
        -:15758:                                           
        -:15759:                                                                 
        -:15760:                                          
        -:15761:                   
        -:15762:                                                     
        -:15763:                   
        -:15764:                          
        -:15765:                                        
        -:15766:                 
        -:15767:                                                   
        -:15768:                 
        -:15769:                 
        -:15770:                           
        -:15771:                                                         
        -:15772:                   
        -:15773:                             
        -:15774:                                                           
        -:15775:                                                                                                                                                 
        -:15776:                                            
        -:15777:                     
        -:15778:                                                                                  
        -:15779:                                   
        -:15780:                            
        -:15781:                       
        -:15782:                                                                                                                      
        -:15783:                                                     
        -:15784:                                                                                                                        
        -:15785:                                                                                                     
        -:15786:                                                                      
        -:15787:                       
        -:15788:                                                                                            
        -:15789:                                     
        -:15790:                              
        -:15791:                                              
        -:15792:                                     
        -:15793:                       
        -:15794:                                          
        -:15795:                     
        -:15796:                                     
        -:15797:                                  
        -:15798:                     
        -:15799:                   
        -:15800:                                                     
        -:15801:                   
        -:15802:                                               
        -:15803:                   
        -:15804:                             
        -:15805:                                                           
        -:15806:                                                             
        -:15807:                                            
        -:15808:                     
        -:15809:                                                
        -:15810:                                          
        -:15811:                                                                                                     
        -:15812:                                                
        -:15813:                                          
        -:15814:                                                                                                   
        -:15815:                                                
        -:15816:                                          
        -:15817:                                                                                 
        -:15818:                                
        -:15819:                   
        -:15820:                                                     
        -:15821:                   
        -:15822:                                              
        -:15823:                                        
        -:15824:                                                                                   
        -:15825:                                              
        -:15826:                                        
        -:15827:                                                                                    
        -:15828:                                              
        -:15829:                                        
        -:15830:                                                                     
        -:15831:                                              
        -:15832:                                        
        -:15833:                                                                              
        -:15834:                                        
        -:15835:                 
        -:15836:                                                   
        -:15837:                 
        -:15838:                          
        -:15839:               
        -:15840:             
        -:15841:           
        -:15842:         
        -:15843:       
        -:15844:     
        -:15845:     
        -:15846:           
        -:15847:                      
        -:15848:                            
        -:15849:                 
        -:15850:         
        -:15851:                            
        -:15852:                                                                                     
        -:15853:                
        -:15854:                          
        -:15855:                                                                                   
        -:15856:                
        -:15857:     
        -:15858:     
        -:15859:                             
        -:15860:                
        -:15861:                                                                           
        -:15862:                                                                                       
        -:15863:                       
        -:15864:                
        -:15865:                       
        -:15866:         
        -:15867:              
        -:15868:                     
        -:15869:       
        -:15870:            
        -:15871:                   
        -:15872:     
        -:15873:                
        -:15874:                                                                         
        -:15875:                                                                                     
        -:15876:                       
        -:15877:                
        -:15878:                       
        -:15879:         
        -:15880:              
        -:15881:                     
        -:15882:       
        -:15883:            
        -:15884:                   
        -:15885:     
        -:15886:                               
        -:15887:                                
        -:15888:            
        -:15889:                          
        -:15890:     
        -:15891:     
        -:15892:               
        -:15893:                                             
        -:15894:       
        -:15895:                 
        -:15896:                                               
        -:15897:                                                              
        -:15898:                                
        -:15899:         
        -:15900:                                                                   
        -:15901:                                
        -:15902:         
        -:15903:                                                                         
        -:15904:                                
        -:15905:         
        -:15906:                     
        -:15907:                                  
        -:15908:       
        -:15909:                                         
        -:15910:       
        -:15911:                                                        
        -:15912:                              
        -:15913:       
        -:15914:       
        -:15915:                 
        -:15916:                                               
        -:15917:                                                            
        -:15918:                                
        -:15919:         
        -:15920:                                                                  
        -:15921:                    
        -:15922:         
        -:15923:                    
        -:15924:                           
        -:15925:       
        -:15926:                                         
        -:15927:       
        -:15928:                              
        -:15929:                                     
        -:15930:                                  
        -:15931:       
        -:15932:                      
        -:15933:         
        -:15934:
        -:15935:                                                          
        -:15936:                            
        -:15937:         
        -:15938:
        -:15939:              
        -:15940:         
        -:15941:
        -:15942:                                                                                
        -:15943:                            
        -:15944:         
        -:15945:
        -:15946:       
        -:15947:                     
        -:15948:                  
        -:15949:       
        -:15950:                
        -:15951:                 
        -:15952:       
        -:15953:                 
        -:15954:                                               
        -:15955:                                      
        -:15956:                                    
        -:15957:                                    
        -:15958:           
        -:15959:                     
        -:15960:                                                   
        -:15961:                                                  
        -:15962:                                    
        -:15963:             
        -:15964:                          
        -:15965:                                                                       
        -:15966:                                                                  
        -:15967:                     
        -:15968:           
        -:15969:                                             
        -:15970:           
        -:15971:         
        -:15972:                              
        -:15973:       
        -:15974:                                         
        -:15975:       
        -:15976:     
        -:15977:                                       
        -:15978:     
        -:15979:                      
        -:15980:                             
        -:15981:                
        -:15982:                         
        -:15983:            
        -:15984:                         
        -:15985:     
        -:15986:                                                        
        -:15987:                   
        -:15988:                          
        -:15989:                  
        -:15990:               
        -:15991:                            
        -:15992:                          
        -:15993:       
        -:15994:                          
        -:15995:                                        
        -:15996:                                 
        -:15997:                          
        -:15998:       
        -:15999:     
        -:16000:     
        -:16001:     
        -:16002:              
        -:16003:                              
        -:16004:                                                    
        -:16005:                            
        -:16006:                          
        -:16007:       
        -:16008:            
        -:16009:                                                      
        -:16010:                                                  
        -:16011:              
        -:16012:                                            
        -:16013:       
        -:16014:                           
        -:16015:                                   
        -:16016:                            
        -:16017:         
        -:16018:       
        -:16019:     
        -:16020:              
        -:16021:                              
        -:16022:                
        -:16023:                         
        -:16024:            
        -:16025:                         
        -:16026:     
        -:16027:                                                        
        -:16028:                        
        -:16029:                          
        -:16030:                  
        -:16031:                        
        -:16032:     
        -:16033:     
        -:16034:              
        -:16035:                              
        -:16036:                                                    
        -:16037:                        
        -:16038:     
        -:16039:              
        -:16040:                              
        -:16041:     
        -:16042:               
        -:16043:                                             
        -:16044:       
        -:16045:                 
        -:16046:                                               
        -:16047:                              
        -:16048:                                                    
        -:16049:                              
        -:16050:       
        -:16051:                                         
        -:16052:       
        -:16053:             
        -:16054:                            
        -:16055:     
        -:16056:                                       
        -:16057:     
        -:16058:     
        -:16059:               
        -:16060:                                             
        -:16061:       
        -:16062:                 
        -:16063:                                               
        -:16064:                                                                                                                                     
        -:16065:                                
        -:16066:         
        -:16067:                                                                      
        -:16068:                       
        -:16069:                
        -:16070:           
        -:16071:                                                                                                          
        -:16072:                                             
        -:16073:                                                                                                                
        -:16074:                                                                                         
        -:16075:                                                          
        -:16076:           
        -:16077:                                                                                
        -:16078:                         
        -:16079:                  
        -:16080:                                  
        -:16081:                         
        -:16082:           
        -:16083:                              
        -:16084:         
        -:16085:                         
        -:16086:                      
        -:16087:         
        -:16088:       
        -:16089:                                         
        -:16090:       
        -:16091:                                       
        -:16092:       
        -:16093:                 
        -:16094:                                               
        -:16095:                                                     
        -:16096:                                
        -:16097:         
        -:16098:                                    
        -:16099:                              
        -:16100:                                                                                             
        -:16101:                                    
        -:16102:                              
        -:16103:                                                                                           
        -:16104:                                    
        -:16105:                              
        -:16106:                                                                         
        -:16107:                        
        -:16108:       
        -:16109:                                         
        -:16110:       
        -:16111:                                  
        -:16112:                            
        -:16113:                                                                       
        -:16114:                                  
        -:16115:                            
        -:16116:                                                                        
        -:16117:                                  
        -:16118:                            
        -:16119:                                                        
        -:16120:                                  
        -:16121:                            
        -:16122:                                                                            
        -:16123:                            
        -:16124:     
        -:16125:                                       
        -:16126:     
        -:16127:                      
        -:16128:                
        -:16129:                               
        -:16130:     
        -:16131:               
        -:16132:                                             
        -:16133:       
        -:16134:                 
        -:16135:                                               
        -:16136:                              
        -:16137:                                                    
        -:16138:                              
        -:16139:       
        -:16140:                                         
        -:16141:       
        -:16142:             
        -:16143:                            
        -:16144:     
        -:16145:                                       
        -:16146:     
        -:16147:           
        -:16148:     
        -:16149:               
        -:16150:                                             
        -:16151:                                                      
        -:16152:                                                           
        -:16153:                                
        -:16154:         
        -:16155:              
        -:16156:                              
        -:16157:       
        -:16158:            
        -:16159:     
        -:16160:                                       
        -:16161:     
        -:16162:                                                    
        -:16163:                                                     
        -:16164:                                                                                
        -:16165:                                                                 
        -:16166:                                                       
        -:16167:         
        -:16168:       
        -:16169:     
        -:16170:     
        -:16171:               
        -:16172:                                             
        -:16173:       
        -:16174:                 
        -:16175:                                               
        -:16176:                                                                                                                                     
        -:16177:                                
        -:16178:         
        -:16179:                                                                      
        -:16180:                       
        -:16181:                
        -:16182:           
        -:16183:                                                                                                          
        -:16184:                                             
        -:16185:                                                                                                                
        -:16186:                                                                                         
        -:16187:                                                          
        -:16188:           
        -:16189:                                                                                
        -:16190:                         
        -:16191:                  
        -:16192:                                  
        -:16193:                         
        -:16194:           
        -:16195:                              
        -:16196:         
        -:16197:                         
        -:16198:                      
        -:16199:         
        -:16200:       
        -:16201:                                         
        -:16202:       
        -:16203:                                       
        -:16204:       
        -:16205:                 
        -:16206:                                               
        -:16207:                                                     
        -:16208:                                
        -:16209:         
        -:16210:                                    
        -:16211:                              
        -:16212:                                                                                             
        -:16213:                                    
        -:16214:                              
        -:16215:                                                                                           
        -:16216:                                    
        -:16217:                              
        -:16218:                                                                         
        -:16219:                        
        -:16220:       
        -:16221:                                         
        -:16222:       
        -:16223:                                  
        -:16224:                            
        -:16225:                                                                       
        -:16226:                                  
        -:16227:                            
        -:16228:                                                                        
        -:16229:                                  
        -:16230:                            
        -:16231:                                                        
        -:16232:                                  
        -:16233:                            
        -:16234:                                                                  
        -:16235:                            
        -:16236:     
        -:16237:                                       
        -:16238:     
        -:16239:                      
        -:16240:                                 
        -:16241:     
        -:16242:               
        -:16243:                                             
        -:16244:       
        -:16245:                 
        -:16246:                                               
        -:16247:                              
        -:16248:                                                    
        -:16249:                              
        -:16250:       
        -:16251:                                         
        -:16252:       
        -:16253:             
        -:16254:                            
        -:16255:     
        -:16256:                                       
        -:16257:     
        -:16258:           
        -:16259:     
        -:16260:               
        -:16261:                                             
        -:16262:                                                            
        -:16263:                                                       
        -:16264:                  
        -:16265:                              
        -:16266:                                                       
        -:16267:                  
        -:16268:                
        -:16269:                       
        -:16270:         
        -:16271:         
        -:16272:                            
        -:16273:               
        -:16274:                                                            
        -:16275:                                                        
        -:16276:                  
        -:16277:                
        -:16278:                                
        -:16279:         
        -:16280:              
        -:16281:                              
        -:16282:       
        -:16283:       
        -:16284:     
        -:16285:                                       
        -:16286:     
        -:16287:                  
        -:16288:                                                     
        -:16289:                                    
        -:16290:                          
        -:16291:                                                   
        -:16292:                   
        -:16293:                          
        -:16294:                               
        -:16295:                                                      
        -:16296:                 
        -:16297:                              
        -:16298:                          
        -:16299:                
        -:16300:                                     
        -:16301:         
        -:16302:                                         
        -:16303:                                                             
        -:16304:                                               
        -:16305:                                          
        -:16306:                  
        -:16307:                         
        -:16308:           
        -:16309:                              
        -:16310:                 
        -:16311:                                                             
        -:16312:                       
        -:16313:                              
        -:16314:                                                             
        -:16315:                   
        -:16316:                                                                   
        -:16317:                                                                            
        -:16318:                                                                               
        -:16319:                                  
        -:16320:             
        -:16321:           
        -:16322:                          
        -:16323:                                          
        -:16324:           
        -:16325:         
        -:16326:         
        -:16327:         
        -:16328:              
        -:16329:                     
        -:16330:       
        -:16331:                          
        -:16332:             
        -:16333:                                                   
        -:16334:                                                           
        -:16335:                                                    
        -:16336:                                                                                     
        -:16337:                         
        -:16338:                  
        -:16339:                                          
        -:16340:           
        -:16341:                
        -:16342:                                        
        -:16343:         
        -:16344:                            
        -:16345:               
        -:16346:                                                           
        -:16347:                
        -:16348:         
        -:16349:                   
        -:16350:                                                 
        -:16351:                                          
        -:16352:                                  
        -:16353:           
        -:16354:                                                 
        -:16355:                                        
        -:16356:                                                                                     
        -:16357:                                      
        -:16358:               
        -:16359:                    
        -:16360:                                    
        -:16361:             
        -:16362:           
        -:16363:                 
        -:16364:         
        -:16365:                                           
        -:16366:         
        -:16367:                                     
        -:16368:                                        
        -:16369:         
        -:16370:                            
        -:16371:                                                           
        -:16372:                    
        -:16373:         
        -:16374:                   
        -:16375:                                                 
        -:16376:                                          
        -:16377:                                                
        -:16378:                                    
        -:16379:             
        -:16380:                  
        -:16381:                                  
        -:16382:           
        -:16383:                                                                                 
        -:16384:                                  
        -:16385:           
        -:16386:                     
        -:16387:         
        -:16388:                                           
        -:16389:         
        -:16390:                                         
        -:16391:                                        
        -:16392:                              
        -:16393:                                         
        -:16394:                                        
        -:16395:         
        -:16396:         
        -:16397:       
        -:16398:       
        -:16399:       
        -:16400:     
        -:16401:     
        -:16402:     
        -:16403:     
        -:16404:           
        -:16405:                                                          
        -:16406:                                    
        -:16407:                              
        -:16408:     
        -:16409:                                 
        -:16410:                          
        -:16411:                                                                                          
        -:16412:                                                                     
        -:16413:                                           
        -:16414:     
        -:16415:                          
        -:16416:                                                            
        -:16417:                          
        -:16418:                                                                                   
        -:16419:                          
        -:16420:                                                                                  
        -:16421:                                  
        -:16422:     
        -:16423:               
        -:16424:                                             
        -:16425:                                              
        -:16426:                              
        -:16427:       
        -:16428:                            
        -:16429:                                                                                     
        -:16430:                            
        -:16431:                                                                                                   
        -:16432:                            
        -:16433:                                                                                                   
        -:16434:                      
        -:16435:     
        -:16436:                                       
        -:16437:     
        -:16438:                              
        -:16439:                         
        -:16440:                                 
        -:16441:     
        -:16442:               
        -:16443:                                             
        -:16444:       
        -:16445:                 
        -:16446:                                               
        -:16447:                              
        -:16448:                                                    
        -:16449:                              
        -:16450:       
        -:16451:                                         
        -:16452:       
        -:16453:             
        -:16454:                            
        -:16455:     
        -:16456:                                       
        -:16457:     
        -:16458:              
        -:16459:                      
        -:16460:                              
        -:16461:                            
        -:16462:                                  
        -:16463:     
        -:16464:               
        -:16465:                                             
        -:16466:       
        -:16467:                 
        -:16468:                                               
        -:16469:                                                                                                                                     
        -:16470:                                
        -:16471:         
        -:16472:                                                                      
        -:16473:                       
        -:16474:                
        -:16475:           
        -:16476:                                                                                                          
        -:16477:                                             
        -:16478:                                                                                                                
        -:16479:                                                                                         
        -:16480:                                                          
        -:16481:           
        -:16482:                                                                                
        -:16483:                         
        -:16484:                  
        -:16485:                                  
        -:16486:                         
        -:16487:           
        -:16488:                              
        -:16489:         
        -:16490:                         
        -:16491:                      
        -:16492:         
        -:16493:       
        -:16494:                                         
        -:16495:       
        -:16496:                                       
        -:16497:       
        -:16498:                 
        -:16499:                                               
        -:16500:                                                     
        -:16501:                                
        -:16502:         
        -:16503:                                    
        -:16504:                              
        -:16505:                                                                                             
        -:16506:                                    
        -:16507:                              
        -:16508:                                                                                           
        -:16509:                                    
        -:16510:                              
        -:16511:                                                                         
        -:16512:                        
        -:16513:       
        -:16514:                                         
        -:16515:       
        -:16516:                                  
        -:16517:                            
        -:16518:                                                                       
        -:16519:                                  
        -:16520:                            
        -:16521:                                                                        
        -:16522:                                  
        -:16523:                            
        -:16524:                                                                            
        -:16525:                                  
        -:16526:                            
        -:16527:                                                                            
        -:16528:                            
        -:16529:     
        -:16530:                                       
        -:16531:     
        -:16532:                            
        -:16533:                              
        -:16534:     
        -:16535:               
        -:16536:                                             
        -:16537:       
        -:16538:                 
        -:16539:                                               
        -:16540:                                                                                                                                     
        -:16541:                                
        -:16542:         
        -:16543:                                                                      
        -:16544:                       
        -:16545:                
        -:16546:           
        -:16547:                                                                                                          
        -:16548:                                             
        -:16549:                                                                                                                
        -:16550:                                                                                         
        -:16551:                                                          
        -:16552:           
        -:16553:                                                                                
        -:16554:                         
        -:16555:                  
        -:16556:                                  
        -:16557:                         
        -:16558:           
        -:16559:                              
        -:16560:         
        -:16561:                         
        -:16562:                      
        -:16563:         
        -:16564:       
        -:16565:                                         
        -:16566:       
        -:16567:                                       
        -:16568:       
        -:16569:                 
        -:16570:                                               
        -:16571:                                                     
        -:16572:                                
        -:16573:         
        -:16574:                                    
        -:16575:                              
        -:16576:                                                                                             
        -:16577:                                     
        -:16578:                              
        -:16579:                                                                                            
        -:16580:                                     
        -:16581:                              
        -:16582:                                                                          
        -:16583:                        
        -:16584:       
        -:16585:                                         
        -:16586:       
        -:16587:                                   
        -:16588:                            
        -:16589:                                                                        
        -:16590:                                   
        -:16591:                            
        -:16592:                                                                         
        -:16593:                                   
        -:16594:                            
        -:16595:                                                                             
        -:16596:                                   
        -:16597:                            
        -:16598:                                                                             
        -:16599:                            
        -:16600:     
        -:16601:                                       
        -:16602:     
        -:16603:                      
        -:16604:                             
        -:16605:     
        -:16606:               
        -:16607:                                             
        -:16608:                                  
        -:16609:                                                        
        -:16610:                            
        -:16611:     
        -:16612:                                       
        -:16613:     
        -:16614:                   
        -:16615:              
        -:16616:             
        -:16617:       
        -:16618:                 
        -:16619:                                               
        -:16620:         
        -:16621:                   
        -:16622:                                                 
        -:16623:                                                  
        -:16624:                                                 
        -:16625:                                
        -:16626:         
        -:16627:                                           
        -:16628:         
        -:16629:               
        -:16630:                              
        -:16631:       
        -:16632:                                         
        -:16633:       
        -:16634:                          
        -:16635:                    
        -:16636:                                  
        -:16637:                                  
        -:16638:                      
        -:16639:     
        -:16640:     
        -:16641:                      
        -:16642:                                 
        -:16643:     
        -:16644:               
        -:16645:                                             
        -:16646:                                  
        -:16647:                                                        
        -:16648:                            
        -:16649:     
        -:16650:                                       
        -:16651:     
        -:16652:               
        -:16653:              
        -:16654:       
        -:16655:                 
        -:16656:                                               
        -:16657:                                                      
        -:16658:                                                     
        -:16659:                              
        -:16660:       
        -:16661:                                         
        -:16662:       
        -:16663:                              
        -:16664:            
        -:16665:             
        -:16666:     
        -:16667:                      
        -:16668:                             
        -:16669:     
        -:16670:               
        -:16671:                                             
        -:16672:       
        -:16673:                 
        -:16674:                                               
        -:16675:                              
        -:16676:                                                    
        -:16677:                              
        -:16678:       
        -:16679:                                         
        -:16680:       
        -:16681:             
        -:16682:                            
        -:16683:     
        -:16684:                                       
        -:16685:     
        -:16686:                  
        -:16687:     
        -:16688:               
        -:16689:                                             
        -:16690:       
        -:16691:                 
        -:16692:                                               
        -:16693:                              
        -:16694:                                                    
        -:16695:                              
        -:16696:       
        -:16697:                                         
        -:16698:       
        -:16699:             
        -:16700:                            
        -:16701:     
        -:16702:                                       
        -:16703:     
        -:16704:     
        -:16705:               
        -:16706:                                             
        -:16707:                                               
        -:16708:                                              
        -:16709:                            
        -:16710:     
        -:16711:                                       
        -:16712:     
        -:16713:                      
        -:16714:                             
        -:16715:                
        -:16716:                          
        -:16717:            
        -:16718:                          
        -:16719:     
        -:16720:                                                         
        -:16721:                        
        -:16722:                          
        -:16723:                  
        -:16724:                        
        -:16725:                          
        -:16726:                                                    
        -:16727:                        
        -:16728:     
        -:16729:     
        -:16730:     
        -:16731:                                                          
        -:16732:                                                 
        -:16733:            
        -:16734:                                                                     
        -:16735:                                                      
        -:16736:              
        -:16737:                                                   
        -:16738:       
        -:16739:                            
        -:16740:     
        -:16741:                                                                       
        -:16742:                                                    
        -:16743:                                                 
        -:16744:            
        -:16745:                                                               
        -:16746:                                                      
        -:16747:              
        -:16748:                                             
        -:16749:       
        -:16750:                            
        -:16751:     
        -:16752:                                                                       
        -:16753:                                           
        -:16754:                        
        -:16755:     
        -:16756:              
        -:16757:                             
        -:16758:                
        -:16759:                          
        -:16760:            
        -:16761:                          
        -:16762:     
        -:16763:                                                         
        -:16764:                
        -:16765:                          
        -:16766:                  
        -:16767:                
        -:16768:                          
        -:16769:                                                    
        -:16770:                
        -:16771:     
        -:16772:     
        -:16773:     
        -:16774:                                                          
        -:16775:                                                 
        -:16776:            
        -:16777:                                                                     
        -:16778:                                                      
        -:16779:              
        -:16780:                                                   
        -:16781:       
        -:16782:                            
        -:16783:     
        -:16784:                                                                           
        -:16785:                                                    
        -:16786:                                                 
        -:16787:            
        -:16788:                                                               
        -:16789:                                                      
        -:16790:              
        -:16791:                                             
        -:16792:       
        -:16793:                            
        -:16794:     
        -:16795:                                                                           
        -:16796:                                                   
        -:16797:                
        -:16798:     
        -:16799:                      
        -:16800:                              
        -:16801:                                                    
        -:16802:                                                 
        -:16803:            
        -:16804:                                                               
        -:16805:                                                      
        -:16806:              
        -:16807:                                             
        -:16808:       
        -:16809:                            
        -:16810:     
        -:16811:                                                      
        -:16812:                  
        -:16813:                            
        -:16814:              
        -:16815:                            
        -:16816:       
        -:16817:                                                           
        -:16818:                          
        -:16819:                            
        -:16820:                    
        -:16821:                          
        -:16822:              
        -:16823:                                                              
        -:16824:                                                     
        -:16825:                
        -:16826:                                                                         
        -:16827:                                                          
        -:16828:                  
        -:16829:                                                       
        -:16830:           
        -:16831:                                
        -:16832:         
        -:16833:                                                              
        -:16834:                            
        -:16835:         
        -:16836:       
        -:16837:       
        -:16838:     
        -:16839:              
        -:16840:                              
        -:16841:                
        -:16842:                          
        -:16843:            
        -:16844:                          
        -:16845:     
        -:16846:                                                             
        -:16847:                        
        -:16848:                                                              
        -:16849:                                                     
        -:16850:                
        -:16851:                                                                         
        -:16852:                                                          
        -:16853:                  
        -:16854:                                                       
        -:16855:           
        -:16856:                                
        -:16857:         
        -:16858:                                                          
        -:16859:                                                          
        -:16860:                                                       
        -:16861:                  
        -:16862:                                                                     
        -:16863:                                                            
        -:16864:                    
        -:16865:                                                   
        -:16866:             
        -:16867:                                  
        -:16868:           
        -:16869:                                                            
        -:16870:                                                            
        -:16871:                                
        -:16872:             
        -:16873:                  
        -:16874:                              
        -:16875:           
        -:16876:         
        -:16877:       
        -:16878:     
        -:16879:              
        -:16880:                              
        -:16881:     
        -:16882:               
        -:16883:                                             
        -:16884:                                                          
        -:16885:                              
        -:16886:       
        -:16887:                                                                
        -:16888:                  
        -:16889:       
        -:16890:                  
        -:16891:                         
        -:16892:     
        -:16893:                                       
        -:16894:     
        -:16895:                                                    
        -:16896:                                                 
        -:16897:            
        -:16898:                                                               
        -:16899:                                                      
        -:16900:              
        -:16901:                                             
        -:16902:       
        -:16903:                            
        -:16904:     
        -:16905:                                                          
        -:16906:                
        -:16907:     
        -:16908:     
        -:16909:               
        -:16910:                                             
        -:16911:                                    
        -:16912:                                  
        -:16913:                                  
        -:16914:         
        -:16915:                   
        -:16916:                                                 
        -:16917:                                                
        -:16918:                                  
        -:16919:           
        -:16920:                         
        -:16921:                                                                      
        -:16922:                                                                 
        -:16923:                   
        -:16924:         
        -:16925:                                           
        -:16926:         
        -:16927:       
        -:16928:                            
        -:16929:     
        -:16930:                                       
        -:16931:     
        -:16932:         
        -:16933:                      
        -:16934:                              
        -:16935:     
        -:16936:               
        -:16937:                                             
        -:16938:                                                          
        -:16939:                              
        -:16940:       
        -:16941:                                                                
        -:16942:                  
        -:16943:       
        -:16944:                  
        -:16945:                         
        -:16946:     
        -:16947:                                       
        -:16948:     
        -:16949:                                                    
        -:16950:                                                 
        -:16951:            
        -:16952:                                                               
        -:16953:                                                      
        -:16954:              
        -:16955:                                             
        -:16956:       
        -:16957:                            
        -:16958:     
        -:16959:                                                      
        -:16960:                
        -:16961:     
        -:16962:     
        -:16963:               
        -:16964:                                             
        -:16965:                                    
        -:16966:                                  
        -:16967:                                  
        -:16968:         
        -:16969:                   
        -:16970:                                                 
        -:16971:                                                
        -:16972:                                  
        -:16973:           
        -:16974:                         
        -:16975:                                                                      
        -:16976:                                                                 
        -:16977:                   
        -:16978:         
        -:16979:                                           
        -:16980:         
        -:16981:       
        -:16982:                            
        -:16983:     
        -:16984:                                       
        -:16985:     
        -:16986:         
        -:16987:                      
        -:16988:                                        
        -:16989:     
        -:16990:            
        -:16991:     
        -:16992:                                   
        -:16993:     
        -:16994:                
        -:16995:          
        -:16996:                                     
        -:16997:                            
        -:16998:                                                                                                
        -:16999:                                                                           
        -:17000:                                            
        -:17001:       
        -:17002:                            
        -:17003:                                                         
        -:17004:                            
        -:17005:                                                                                         
        -:17006:                            
        -:17007:                                                                                        
        -:17008:                                        
        -:17009:       
        -:17010:                 
        -:17011:                                               
        -:17012:                                                    
        -:17013:                                
        -:17014:         
        -:17015:                              
        -:17016:                                                                                 
        -:17017:                              
        -:17018:                                                                                                  
        -:17019:                              
        -:17020:                                                                                                    
        -:17021:                        
        -:17022:       
        -:17023:                                         
        -:17024:       
        -:17025:                                
        -:17026:                
        -:17027:                  
        -:17028:       
        -:17029:                                                     
        -:17030:                                      
        -:17031:         
        -:17032:                                                       
        -:17033:                           
        -:17034:         
        -:17035:                                                       
        -:17036:                           
        -:17037:         
        -:17038:                                                       
        -:17039:                           
        -:17040:         
        -:17041:                                                       
        -:17042:                           
        -:17043:         
        -:17044:                                
        -:17045:                                     
        -:17046:                                      
        -:17047:                                     
        -:17048:                                     
        -:17049:                                      
        -:17050:                    
        -:17051:         
        -:17052:                   
        -:17053:                                                 
        -:17054:           
        -:17055:                     
        -:17056:                                                   
        -:17057:                                   
        -:17058:                                                         
        -:17059:                                  
        -:17060:           
        -:17061:                                             
        -:17062:           
        -:17063:                  
        -:17064:                                
        -:17065:         
        -:17066:                                           
        -:17067:         
        -:17068:                   
        -:17069:                              
        -:17070:                                                          
        -:17071:                      
        -:17072:                  
        -:17073:                         
        -:17074:           
        -:17075:                              
        -:17076:                 
        -:17077:                                
        -:17078:                                                          
        -:17079:                      
        -:17080:           
        -:17081:         
        -:17082:         
        -:17083:                              
        -:17084:                                             
        -:17085:                                           
        -:17086:         
        -:17087:       
        -:17088:                                                         
        -:17089:                                                        
        -:17090:                             
        -:17091:         
        -:17092:       
        -:17093:            
        -:17094:                           
        -:17095:     
        -:17096:             
        -:17097:   
        -:17098:                                    
        -:17099:   
        -:17100:                      
        -:17101:                           
        -:17102:   
        -:17103:   
        -:17104:             
        -:17105:                                           
        -:17106:                                            
        -:17107:                                          
        -:17108:                                                
        -:17109:                                              
        -:17110:                                                 
        -:17111:                                               
        -:17112:                                                 
        -:17113:                                             
        -:17114:                                                       
        -:17115:                          
        -:17116:   
        -:17117:                                     
        -:17118:   
        -:17119:              
        -:17120: 
        -:17121: 
        -:17122:static boolean group_match_null_string_p(unsigned char **p , unsigned char *end ,
        -:17123:                                         register_info_type *reg_info ) 
        -:17124:{ 
        -:17125:  int mcnt ;
        -:17126:  unsigned char *p1 ;
        -:17127:  boolean tmp ;
        -:17128:  boolean tmp___0 ;
        -:17129:  boolean tmp___1 ;
        -:17130:
        -:17131:  {
        -:17132:  p1 = *p + 2;
        -:17133:  {
        -:17134:  while (1) {
        -:17135:                                     ;
        -:17136:    if (! ((unsigned long )p1 < (unsigned long )end)) {
        -:17137:      goto while_break;
        -:17138:    }
        -:17139:    {
        -:17140:    if ((unsigned int )((re_opcode_t )*p1) == 15U) {
        -:17141:      goto case_15;
        -:17142:    }
        -:17143:    if ((unsigned int )((re_opcode_t )*p1) == 7U) {
        -:17144:      goto case_7;
        -:17145:    }
        -:17146:    goto switch_default;
        -:17147:    case_15: /* CIL Label */ 
        -:17148:    p1 ++;
        -:17149:    {
        -:17150:    while (1) {
        -:17151:                                           ;
        -:17152:      {
        -:17153:      while (1) {
        -:17154:                                             ;
        -:17155:        mcnt = (int )*p1 & 255;
        -:17156:        mcnt += (int )((signed char )*(p1 + 1)) << 8;
        -:17157:        goto while_break___1;
        -:17158:      }
        -:17159:      while_break___1: /* CIL Label */ ;
        -:17160:      }
        -:17161:      p1 += 2;
        -:17162:      goto while_break___0;
        -:17163:    }
        -:17164:    while_break___0: /* CIL Label */ ;
        -:17165:    }
        -:17166:    if (mcnt >= 0) {
        -:17167:      {
        -:17168:      while (1) {
        -:17169:                                             ;
        -:17170:        if (! ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) == 14U)) {
        -:17171:          goto while_break___2;
        -:17172:        }
        -:17173:        {
        -:17174:        tmp = alt_match_null_string_p(p1, (p1 + mcnt) - 3, reg_info);
        -:17175:        }
        -:17176:        if (! tmp) {
        -:17177:          return ((boolean )0);
        -:17178:        }
        -:17179:        p1 += mcnt;
        -:17180:        if ((unsigned int )((re_opcode_t )*p1) != 15U) {
        -:17181:          goto while_break___2;
        -:17182:        }
        -:17183:        p1 ++;
        -:17184:        {
        -:17185:        while (1) {
        -:17186:                                               ;
        -:17187:          {
        -:17188:          while (1) {
        -:17189:                                                 ;
        -:17190:            mcnt = (int )*p1 & 255;
        -:17191:            mcnt += (int )((signed char )*(p1 + 1)) << 8;
        -:17192:            goto while_break___4;
        -:17193:          }
        -:17194:          while_break___4: /* CIL Label */ ;
        -:17195:          }
        -:17196:          p1 += 2;
        -:17197:          goto while_break___3;
        -:17198:        }
        -:17199:        while_break___3: /* CIL Label */ ;
        -:17200:        }
        -:17201:        if ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) != 14U) {
        -:17202:          p1 -= 3;
        -:17203:          goto while_break___2;
        -:17204:        }
        -:17205:      }
        -:17206:      while_break___2: /* CIL Label */ ;
        -:17207:      }
        -:17208:      {
        -:17209:      while (1) {
        -:17210:                                             ;
        -:17211:        mcnt = (int )*(p1 - 2) & 255;
        -:17212:        mcnt += (int )((signed char )*((p1 - 2) + 1)) << 8;
        -:17213:        goto while_break___5;
        -:17214:      }
        -:17215:      while_break___5: /* CIL Label */ ;
        -:17216:      }
        -:17217:      {
        -:17218:      tmp___0 = alt_match_null_string_p(p1, p1 + mcnt, reg_info);
        -:17219:      }
        -:17220:      if (! tmp___0) {
        -:17221:        return ((boolean )0);
        -:17222:      }
        -:17223:      p1 += mcnt;
        -:17224:    }
        -:17225:    goto switch_break;
        -:17226:    case_7: /* CIL Label */ 
        -:17227:    *p = p1 + 2;
        -:17228:    return ((boolean )1);
        -:17229:    switch_default: /* CIL Label */ 
        -:17230:    {
        -:17231:    tmp___1 = common_op_match_null_string_p(& p1, end, reg_info);
        -:17232:    }
        -:17233:    if (! tmp___1) {
        -:17234:      return ((boolean )0);
        -:17235:    }
        -:17236:    switch_break: /* CIL Label */ ;
        -:17237:    }
        -:17238:  }
        -:17239:  while_break: /* CIL Label */ ;
        -:17240:  }
        -:17241:  return ((boolean )0);
        -:17242:}
        -:17243:}
        -:17244:                                                                                                              
        -:17245:  
        -:17246:            
        -:17247:                     
        -:17248:               
        -:17249:
        -:17250:   
        -:17251:         
        -:17252:   
        -:17253:             
        -:17254:                                      
        -:17255:                                                       
        -:17256:                       
        -:17257:     
        -:17258:     
        -:17259:                                                    
        -:17260:                   
        -:17261:     
        -:17262:                        
        -:17263:                             
        -:17264:          
        -:17265:     
        -:17266:               
        -:17267:                                            
        -:17268:       
        -:17269:                 
        -:17270:                                              
        -:17271:                               
        -:17272:                                                     
        -:17273:                             
        -:17274:       
        -:17275:                                        
        -:17276:       
        -:17277:              
        -:17278:                           
        -:17279:     
        -:17280:                                      
        -:17281:     
        -:17282:               
        -:17283:                      
        -:17284:                                    
        -:17285:     
        -:17286:                                                             
        -:17287:     
        -:17288:                
        -:17289:                           
        -:17290:     
        -:17291:                                   
        -:17292:     
        -:17293:   
        -:17294:                                
        -:17295:   
        -:17296:                       
        -:17297: 
        -:17298: 
        -:17299:                                                                                     
        -:17300:                                                                            
        -:17301:  
        -:17302:            
        -:17303:               
        -:17304:              
        -:17305:                     
        -:17306:                      
        -:17307:
        -:17308:   
        -:17309:          
        -:17310:           
        -:17311:        
        -:17312:   
        -:17313:                                                  
        -:17314:                
        -:17315:   
        -:17316:                                                  
        -:17317:                
        -:17318:   
        -:17319:                                                   
        -:17320:                
        -:17321:   
        -:17322:                                                   
        -:17323:                
        -:17324:   
        -:17325:                                                   
        -:17326:                
        -:17327:   
        -:17328:                                                   
        -:17329:                
        -:17330:   
        -:17331:                                                   
        -:17332:                
        -:17333:   
        -:17334:                                                   
        -:17335:                
        -:17336:   
        -:17337:                                                   
        -:17338:                
        -:17339:   
        -:17340:                                                  
        -:17341:                
        -:17342:   
        -:17343:                                                   
        -:17344:                 
        -:17345:   
        -:17346:                                                   
        -:17347:                 
        -:17348:   
        -:17349:                                                  
        -:17350:                
        -:17351:   
        -:17352:                                                   
        -:17353:                 
        -:17354:   
        -:17355:                      
        -:17356:                          
        -:17357:                          
        -:17358:                            
        -:17359:                            
        -:17360:                            
        -:17361:                            
        -:17362:                            
        -:17363:                            
        -:17364:                            
        -:17365:                     
        -:17366:                          
        -:17367:   
        -:17368:                     
        -:17369:                                                       
        -:17370:   
        -:17371:                                                            
        -:17372:                                                                       
        -:17373:   
        -:17374:              
        -:17375:                         
        -:17376:   
        -:17377:                    
        -:17378:                           
        -:17379:   
        -:17380:             
        -:17381:                                      
        -:17382:     
        -:17383:               
        -:17384:                                            
        -:17385:                             
        -:17386:                                                   
        -:17387:                           
        -:17388:     
        -:17389:                                      
        -:17390:     
        -:17391:            
        -:17392:                     
        -:17393:   
        -:17394:                                
        -:17395:   
        -:17396:                  
        -:17397:               
        -:17398:          
        -:17399:                         
        -:17400:   
        -:17401:                    
        -:17402:                           
        -:17403:          
        -:17404:   
        -:17405:             
        -:17406:                                          
        -:17407:     
        -:17408:               
        -:17409:                                            
        -:17410:                             
        -:17411:                                                   
        -:17412:                           
        -:17413:     
        -:17414:                                      
        -:17415:     
        -:17416:            
        -:17417:                         
        -:17418:   
        -:17419:                                    
        -:17420:   
        -:17421:                  
        -:17422:            
        -:17423:     
        -:17424:               
        -:17425:                                            
        -:17426:       
        -:17427:                 
        -:17428:                                              
        -:17429:                               
        -:17430:                                                     
        -:17431:                             
        -:17432:       
        -:17433:                                        
        -:17434:       
        -:17435:              
        -:17436:                           
        -:17437:     
        -:17438:                                      
        -:17439:     
        -:17440:               
        -:17441:          
        -:17442:                         
        -:17443:   
        -:17444:                    
        -:17445:                          
        -:17446:                                                           
        -:17447:                         
        -:17448:   
        -:17449:                    
        -:17450:                           
        -:17451:          
        -:17452:                                  
        -:17453:                       
        -:17454:                                 
        -:17455:   
        -:17456:          
        -:17457:                       
        -:17458: 
        -:17459: 
        -:17460:                                                                                            
        -:17461:  
        -:17462:                                      
        -:17463:                                      
        -:17464:                              
        -:17465:                                  
        -:17466:
        -:17467:   
        -:17468:                                   
        -:17469:                                   
        -:17470:   
        -:17471:             
        -:17472:                                      
        -:17473:                
        -:17474:                       
        -:17475:     
        -:17476:             
        -:17477:          
        -:17478:                 
        -:17479:          
        -:17480:                                                                                                 
        -:17481:                 
        -:17482:     
        -:17483:           
        -:17484:   
        -:17485:                                
        -:17486:   
        -:17487:             
        -:17488: 
        -:17489: 
        1:17490:char const   *re_compile_pattern(char const   *pattern , size_t length , struct re_pattern_buffer *bufp ) 
        -:17491:{ 
        -:17492:  reg_errcode_t ret ;
        -:17493:  char *tmp ;
        -:17494:
        -:17495:  {
        -:17496:  {
        1:17497:  bufp->regs_allocated = 0U;
        1:17498:  bufp->no_sub = 0U;
        1:17499:  bufp->newline_anchor = 1U;
        1:17500:  ret = regex_compile(pattern, length, re_syntax_options, bufp);
        -:17501:  }
        1:17502:  if (! ret) {
        1:17503:    return ((char const   *)((void *)0));
        -:17504:  }
        -:17505:  {
    #####:17506:  tmp = gettext(re_error_msgid + re_error_msgid_idx[(int )ret]);
        -:17507:  }
    #####:17508:  return ((char const   *)tmp);
        -:17509:}
        1:17510:}
        -:17511:                                                                 
        -:17512:  
        -:17513:                     
        -:17514:                       
        -:17515:                     
        -:17516:                 
        -:17517:                  
        -:17518:                 
        -:17519:                               
        -:17520:                                    
        -:17521:                  
        -:17522:               
        -:17523:
        -:17524:   
        -:17525:                   

        -:17527:          
        -:17528:                                                                                                                                                                                                                                                                                                                                                   
        -:17529:   
        -:17530:   
        -:17531:               
        -:17532:                                    
        -:17533:                        
        -:17534:                   
        -:17535:                                       
        -:17536:                          
        -:17537:   
        -:17538:                          
        -:17539:     
        -:17540:                                                    
        -:17541:                              
        -:17542:     
        -:17543:                                                                         
        -:17544:                  
        -:17545:     
        -:17546:           
        -:17547:     
        -:17548:               
        -:17549:                                        
        -:17550:                         
        -:17551:                         
        -:17552:       
        -:17553:       
        -:17554:                                
        -:17555:       
        -:17556:                                                      
        -:17557:         
        -:17558:
        -:17559:                                        
        -:17560:                                                                      
        -:17561:         
        -:17562:
        -:17563:              
        -:17564:                                          
        -:17565:       
        -:17566:           
        -:17567:     
        -:17568:                                  
        -:17569:     
        -:17570:          
        -:17571:                                          
        -:17572:   
        -:17573:                                 
        -:17574:                                                              
        -:17575:                                                                        
        -:17576:                              
        -:17577:          
        -:17578:                              
        -:17579:   
        -:17580:   
        -:17581:                                                                          
        -:17582:                            
        -:17583:                                                      
        -:17584:   
        -:17585:                                  
        -:17586:                            
        -:17587:   
        -:17588:                                 
        -:17589:                        
        -:17590:       
        -:17591:                                         
        -:17592:       
        -:17593:                          
        -:17594:         
        -:17595:
        -:17596:                                    
        -:17597:                                            
        -:17598:         
        -:17599:
        -:17600:       
        -:17601:     
        -:17602:   
        -:17603:                     
        -:17604: 
        -:17605: 
        -:17606:                                                                                               
        -:17607:                         
        -:17608:  
        -:17609:           
        -:17610:                                
        -:17611:                        
        -:17612:           
        -:17613:              
        -:17614:                         
        -:17615:               
        -:17616:                 
        -:17617:                                
        -:17618:                  
        -:17619:               
        -:17620:
        -:17621:   
        -:17622:   
        -:17623:                       
        -:17624:                  
        -:17625:   
        -:17626:                       
        -:17627:                       
        -:17628:                  
        -:17629:            
        -:17630:                  
        -:17631:     
        -:17632:          
        -:17633:                
        -:17634:   
        -:17635:                                    
        -:17636:                                 
        -:17637:                                                             
        -:17638:                                                                    
        -:17639:                                   
        -:17640:                      
        -:17641:     
        -:17642:                                              
        -:17643:                                                          
        -:17644:                                         
        -:17645:     
        -:17646:                                                                        
        -:17647:                 
        -:17648:     
        -:17649:                                           
        -:17650:   
        -:17651:                      
        -:17652:                         
        -:17653:          
        -:17654:                                       
        -:17655:   
        -:17656:   
        -:17657:                                                                
        -:17658:   
        -:17659:                      
        -:17660:                   
        -:17661:             
        -:17662:       
        -:17663:                 
        -:17664:                                          
        -:17665:                                      
        -:17666:                           
        -:17667:         
        -:17668:                                                    
        -:17669:                                                  
        -:17670:             
        -:17671:       
        -:17672:                                    
        -:17673:       
        -:17674:     
        -:17675:     
        -:17676:                                 
        -:17677:     
        -:17678:   
        -:17679:                 
        -:17680:                
        -:17681:          
        -:17682:                
        -:17683:   
        -:17684:                   
        -:17685: 
        -:17686: 
        -:17687:                                                                                          
        -:17688:  
        -:17689:                     
        -:17690:                   
        -:17691:             
        -:17692:                  
        -:17693:
        -:17694:   
        -:17695:                    
        -:17696:     
        -:17697:
        -:17698:            
        -:17699:     
        -:17700:
        -:17701:                        
        -:17702:                                                                                      
        -:17703:     
        -:17704:
        -:17705:            
        -:17706:     
        -:17707:
        -:17708:   
        -:17709:   
        -:17710:   
        -:17711:                                                              
        -:17712:                            
        -:17713:                        
        -:17714:                           
        -:17715:   
        -:17716:                           
        -:17717:                                 
        -:17718:       
        -:17719:
        -:17720:                                                                                               
        -:17721:                                                
        -:17722:       
        -:17723:
        -:17724:            
        -:17725:       
        -:17726:
        -:17727:                                                                                      
        -:17728:       
        -:17729:
        -:17730:     
        -:17731:   
        -:17732:                    
        -:17733: 
        -:17734: 
        -:17735:                             
        -:17736:  
        -:17737:
        -:17738:
        -:17739:   
        -:17740:
        -:17741:                                                                    
        -:17742:     
        -:17743:
        -:17744:                               
        -:17745:     
        -:17746:
        -:17747:   
        -:17748:                                              
        -:17749:                        
        -:17750:                   
        -:17751:                                                                     
        -:17752:     
        -:17753:
        -:17754:                                
        -:17755:     
        -:17756:
        -:17757:   
        -:17758:                                      
        -:17759:                              
        -:17760:                                                                       
        -:17761:     
        -:17762:
        -:17763:                                  
        -:17764:     
        -:17765:
        -:17766:   
        -:17767:                                        
        -:17768:         
        -:17769: 
        -:17770:
        -:17771: 
