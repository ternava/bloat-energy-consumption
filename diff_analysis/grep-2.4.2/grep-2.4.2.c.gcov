        -:    0:Source:grep-2.4.2.c
        -:    0:Graph:grep-2.4.2.gcno
        -:    0:Data:grep-2.4.2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Generated by CIL v. 1.7.3 */
        -:    2:/* print_CIL_Input is true */
        -:    3:
        -:    4:typedef int __int32_t;
        -:    5:typedef unsigned long __dev_t;
        -:    6:typedef unsigned int __uid_t;
        -:    7:typedef unsigned int __gid_t;
        -:    8:typedef unsigned long __ino_t;
        -:    9:typedef unsigned int __mode_t;
        -:   10:typedef unsigned long __nlink_t;
        -:   11:typedef long __off_t;
        -:   12:typedef long __off64_t;
        -:   13:typedef long __time_t;
        -:   14:typedef long __blksize_t;
        -:   15:typedef long __blkcnt_t;
        -:   16:typedef long __ssize_t;
        -:   17:typedef long __syscall_slong_t;
        -:   18:typedef char *__caddr_t;
        -:   19:typedef __off_t off_t;
        -:   20:typedef __ssize_t ssize_t;
        -:   21:typedef __caddr_t caddr_t;
        -:   22:typedef unsigned long size_t;
        -:   23:struct timespec {
        -:   24:   __time_t tv_sec ;
        -:   25:   __syscall_slong_t tv_nsec ;
        -:   26:};
        -:   27:struct stat {
        -:   28:   __dev_t st_dev ;
        -:   29:   __ino_t st_ino ;
        -:   30:   __nlink_t st_nlink ;
        -:   31:   __mode_t st_mode ;
        -:   32:   __uid_t st_uid ;
        -:   33:   __gid_t st_gid ;
        -:   34:   int __pad0 ;
        -:   35:   __dev_t st_rdev ;
        -:   36:   __off_t st_size ;
        -:   37:   __blksize_t st_blksize ;
        -:   38:   __blkcnt_t st_blocks ;
        -:   39:   struct timespec st_atim ;
        -:   40:   struct timespec st_mtim ;
        -:   41:   struct timespec st_ctim ;
        -:   42:   __syscall_slong_t __glibc_reserved[3] ;
        -:   43:};
        -:   44:struct _IO_FILE;
        -:   45:struct _IO_FILE;
        -:   46:typedef struct _IO_FILE FILE;
        -:   47:typedef void _IO_lock_t;
        -:   48:struct _IO_marker {
        -:   49:   struct _IO_marker *_next ;
        -:   50:   struct _IO_FILE *_sbuf ;
        -:   51:   int _pos ;
        -:   52:};
        -:   53:struct _IO_FILE {
        -:   54:   int _flags ;
        -:   55:   char *_IO_read_ptr ;
        -:   56:   char *_IO_read_end ;
        -:   57:   char *_IO_read_base ;
        -:   58:   char *_IO_write_base ;
        -:   59:   char *_IO_write_ptr ;
        -:   60:   char *_IO_write_end ;
        -:   61:   char *_IO_buf_base ;
        -:   62:   char *_IO_buf_end ;
        -:   63:   char *_IO_save_base ;
        -:   64:   char *_IO_backup_base ;
        -:   65:   char *_IO_save_end ;
        -:   66:   struct _IO_marker *_markers ;
        -:   67:   struct _IO_FILE *_chain ;
        -:   68:   int _fileno ;
        -:   69:   int _flags2 ;
        -:   70:   __off_t _old_offset ;
        -:   71:   unsigned short _cur_column ;
        -:   72:   signed char _vtable_offset ;
        -:   73:   char _shortbuf[1] ;
        -:   74:   _IO_lock_t *_lock ;
        -:   75:   __off64_t _offset ;
        -:   76:   void *__pad1 ;
        -:   77:   void *__pad2 ;
        -:   78:   void *__pad3 ;
        -:   79:   void *__pad4 ;
        -:   80:   size_t __pad5 ;
        -:   81:   int _mode ;
        -:   82:   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t )] ;
        -:   83:};
        -:   84:typedef void *ptr_t;
        -:   85:struct option {
        -:   86:   char const   *name ;
        -:   87:   int has_arg ;
        -:   88:   int *flag ;
        -:   89:   int val ;
        -:   90:};
        -:   91:struct matcher {
        -:   92:   char *name ;
        -:   93:   void (*compile)(char * , size_t  ) ;
        -:   94:   char *(*execute)(char * , size_t  , char ** ) ;
        -:   95:};
        -:   96:struct stats {
        -:   97:   struct stats *parent ;
        -:   98:   struct stat stat ;
        -:   99:};
        -:  100:enum __anonenum_directories_30 {
        -:  101:    READ_DIRECTORIES = 0,
        -:  102:    RECURSE_DIRECTORIES = 1,
        -:  103:    SKIP_DIRECTORIES = 2
        -:  104:} ;
        -:  105:enum __anonenum_binary_files_31 {
        -:  106:    BINARY_BINARY_FILES = 0,
        -:  107:    TEXT_BINARY_FILES = 1,
        -:  108:    WITHOUT_MATCH_BINARY_FILES = 2
        -:  109:} ;
        -:  110:typedef unsigned long active_reg_t;
        -:  111:typedef unsigned long reg_syntax_t;
        -:  112:enum __anonenum_reg_errcode_t_32 {
        -:  113:    REG_NOERROR = 0,
        -:  114:    REG_NOMATCH = 1,
        -:  115:    REG_BADPAT = 2,
        -:  116:    REG_ECOLLATE = 3,
        -:  117:    REG_ECTYPE = 4,
        -:  118:    REG_EESCAPE = 5,
        -:  119:    REG_ESUBREG = 6,
        -:  120:    REG_EBRACK = 7,
        -:  121:    REG_EPAREN = 8,
        -:  122:    REG_EBRACE = 9,
        -:  123:    REG_BADBR = 10,
        -:  124:    REG_ERANGE = 11,
        -:  125:    REG_ESPACE = 12,
        -:  126:    REG_BADRPT = 13,
        -:  127:    REG_EEND = 14,
        -:  128:    REG_ESIZE = 15,
        -:  129:    REG_ERPAREN = 16
        -:  130:} ;
        -:  131:typedef enum __anonenum_reg_errcode_t_32 reg_errcode_t;
        -:  132:struct re_pattern_buffer {
        -:  133:   unsigned char *buffer ;
        -:  134:   unsigned long allocated ;
        -:  135:   unsigned long used ;
        -:  136:   reg_syntax_t syntax ;
        -:  137:   char *fastmap ;
        -:  138:   char *translate ;
        -:  139:   size_t re_nsub ;
        -:  140:   unsigned int can_be_null : 1 ;
        -:  141:   unsigned int regs_allocated : 2 ;
        -:  142:   unsigned int fastmap_accurate : 1 ;
        -:  143:   unsigned int no_sub : 1 ;
        -:  144:   unsigned int not_bol : 1 ;
        -:  145:   unsigned int not_eol : 1 ;
        -:  146:   unsigned int newline_anchor : 1 ;
        -:  147:};
        -:  148:typedef struct re_pattern_buffer regex_t;
        -:  149:typedef int regoff_t;
        -:  150:struct re_registers {
        -:  151:   unsigned int num_regs ;
        -:  152:   regoff_t *start ;
        -:  153:   regoff_t *end ;
        -:  154:};
        -:  155:struct __anonstruct_regmatch_t_33 {
        -:  156:   regoff_t rm_so ;
        -:  157:   regoff_t rm_eo ;
        -:  158:};
        -:  159:typedef struct __anonstruct_regmatch_t_33 regmatch_t;
        -:  160:typedef int charclass[(((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int ))];
        -:  161:enum __anonenum_token_34 {
        -:  162:    END = -1,
        -:  163:    EMPTY = 256,
        -:  164:    BACKREF = 257,
        -:  165:    BEGLINE = 258,
        -:  166:    ENDLINE = 259,
        -:  167:    BEGWORD = 260,
        -:  168:    ENDWORD = 261,
        -:  169:    LIMWORD = 262,
        -:  170:    NOTLIMWORD = 263,
        -:  171:    QMARK = 264,
        -:  172:    STAR = 265,
        -:  173:    PLUS = 266,
        -:  174:    REPMN = 267,
        -:  175:    CAT = 268,
        -:  176:    OR = 269,
        -:  177:    ORTOP = 270,
        -:  178:    LPAREN = 271,
        -:  179:    RPAREN = 272,
        -:  180:    CSET = 273
        -:  181:} ;
        -:  182:typedef enum __anonenum_token_34 token;
        -:  183:struct __anonstruct_position_35 {
        -:  184:   unsigned int strchr ;
        -:  185:   unsigned int constraint ;
        -:  186:};
        -:  187:typedef struct __anonstruct_position_35 position;
        -:  188:struct __anonstruct_position_set_36 {
        -:  189:   position *elems ;
        -:  190:   int nelem ;
        -:  191:};
        -:  192:typedef struct __anonstruct_position_set_36 position_set;
        -:  193:struct __anonstruct_dfa_state_37 {
        -:  194:   int hash ;
        -:  195:   position_set elems ;
        -:  196:   char newline ;
        -:  197:   char letter ;
        -:  198:   char backref ;
        -:  199:   unsigned char constraint ;
        -:  200:   int first_end ;
        -:  201:};
        -:  202:typedef struct __anonstruct_dfa_state_37 dfa_state;
        -:  203:struct dfamust {
        -:  204:   int exact ;
        -:  205:   char *must ;
        -:  206:   struct dfamust *next ;
        -:  207:};
        -:  208:struct dfa {
        -:  209:   charclass *charclasses ;
        -:  210:   int cindex ;
        -:  211:   int calloc ;
        -:  212:   token *tokens ;
        -:  213:   int tindex ;
        -:  214:   int talloc ;
        -:  215:   int depth ;
        -:  216:   int nleaves ;
        -:  217:   int nregexps ;
        -:  218:   dfa_state *states ;
        -:  219:   int sindex ;
        -:  220:   int salloc ;
        -:  221:   position_set *follows ;
        -:  222:   int searchflag ;
        -:  223:   int tralloc ;
        -:  224:   int trcount ;
        -:  225:   int **trans ;
        -:  226:   int **realtrans ;
        -:  227:   int **fails ;
        -:  228:   int *success ;
        -:  229:   int *newlines ;
        -:  230:   struct dfamust *musts ;
        -:  231:};
        -:  232:struct __anonstruct_prednames_38 {
        -:  233:   char const   *name ;
        -:  234:   int (*pred)(int  ) ;
        -:  235:};
        -:  236:struct __anonstruct_must_39 {
        -:  237:   char **in ;
        -:  238:   char *left ;
        -:  239:   char *right ;
        -:  240:   char *is ;
        -:  241:};
        -:  242:typedef struct __anonstruct_must_39 must;
        -:  243:struct kwsmatch {
        -:  244:   int strchr ;
        -:  245:   char *beg[1] ;
        -:  246:   size_t size[1] ;
        -:  247:};
        -:  248:typedef ptr_t kwset_t;
        -:  249:struct _obstack_chunk {
        -:  250:   char *limit ;
        -:  251:   struct _obstack_chunk *prev ;
        -:  252:   char contents[4] ;
        -:  253:};
        -:  254:struct obstack {
        -:  255:   long chunk_size ;
        -:  256:   struct _obstack_chunk *chunk ;
        -:  257:   char *object_base ;
        -:  258:   char *next_free ;
        -:  259:   char *chunk_limit ;
        -:  260:   long temp ;
        -:  261:   int alignment_mask ;
        -:  262:   struct _obstack_chunk *(*chunkfun)(void * , long  ) ;
        -:  263:   void (*freefun)(void * , struct _obstack_chunk * ) ;
        -:  264:   void *extra_arg ;
        -:  265:   unsigned int use_extra_arg : 1 ;
        -:  266:   unsigned int maybe_empty_object : 1 ;
        -:  267:   unsigned int alloc_failed : 1 ;
        -:  268:};
        -:  269:struct trie;
        -:  270:struct trie;
        -:  271:struct tree {
        -:  272:   struct tree *llink ;
        -:  273:   struct tree *rlink ;
        -:  274:   struct trie *trie ;
        -:  275:   unsigned char label ;
        -:  276:   char balance ;
        -:  277:};
        -:  278:struct trie {
        -:  279:   unsigned int accepting ;
        -:  280:   struct tree *links ;
        -:  281:   struct trie *parent ;
        -:  282:   struct trie *next ;
        -:  283:   struct trie *fail ;
        -:  284:   int depth ;
        -:  285:   int shift ;
        -:  286:   int maxshift ;
        -:  287:};
        -:  288:struct kwset {
        -:  289:   struct obstack obstack ;
        -:  290:   int words ;
        -:  291:   struct trie *trie ;
        -:  292:   int mind ;
        -:  293:   int maxd ;
        -:  294:   unsigned char delta[256] ;
        -:  295:   struct trie *next[256] ;
        -:  296:   char *target ;
        -:  297:   int mind2 ;
        -:  298:   char *trans ;
        -:  299:};
        -:  300:enum __anonenum_dirs_40 {
        -:  301:    L = 0,
        -:  302:    R = 1
        -:  303:} ;
        -:  304:struct dirent {
        -:  305:   __ino_t d_ino ;
        -:  306:   __off_t d_off ;
        -:  307:   unsigned short d_reclen ;
        -:  308:   unsigned char d_type ;
        -:  309:   char d_name[256] ;
        -:  310:};
        -:  311:struct __dirstream;
        -:  312:struct __dirstream;
        -:  313:typedef struct __dirstream DIR;
        -:  314:typedef char boolean;
        -:  315:enum __anonenum_re_opcode_t_42 {
        -:  316:    no_op = 0,
        -:  317:    succeed = 1,
        -:  318:    exactn = 2,
        -:  319:    anychar = 3,
        -:  320:    charset = 4,
        -:  321:    charset_not = 5,
        -:  322:    start_memory = 6,
        -:  323:    stop_memory = 7,
        -:  324:    duplicate = 8,
        -:  325:    begline = 9,
        -:  326:    endline = 10,
        -:  327:    begbuf = 11,
        -:  328:    endbuf = 12,
        -:  329:    jump = 13,
        -:  330:    jump_past_alt = 14,
        -:  331:    on_failure_jump = 15,
        -:  332:    on_failure_keep_string_jump = 16,
        -:  333:    pop_failure_jump = 17,
        -:  334:    maybe_pop_jump = 18,
        -:  335:    dummy_failure_jump = 19,
        -:  336:    push_dummy_failure = 20,
        -:  337:    succeed_n = 21,
        -:  338:    jump_n = 22,
        -:  339:    set_number_at = 23,
        -:  340:    wordchar = 24,
        -:  341:    notwordchar = 25,
        -:  342:    wordbeg = 26,
        -:  343:    wordend = 27,
        -:  344:    wordbound = 28,
        -:  345:    notwordbound = 29
        -:  346:} ;
        -:  347:typedef enum __anonenum_re_opcode_t_42 re_opcode_t;
        -:  348:union fail_stack_elt {
        -:  349:   unsigned char *pointer ;
        -:  350:   int integer ;
        -:  351:};
        -:  352:typedef union fail_stack_elt fail_stack_elt_t;
        -:  353:struct __anonstruct_fail_stack_type_43 {
        -:  354:   fail_stack_elt_t *stack ;
        -:  355:   unsigned int size ;
        -:  356:   unsigned int avail ;
        -:  357:};
        -:  358:typedef struct __anonstruct_fail_stack_type_43 fail_stack_type;
        -:  359:struct __anonstruct_bits_45 {
        -:  360:   unsigned int match_null_string_p : 2 ;
        -:  361:   unsigned int is_active : 1 ;
        -:  362:   unsigned int matched_something : 1 ;
        -:  363:   unsigned int ever_matched_something : 1 ;
        -:  364:};
        -:  365:union __anonunion_register_info_type_44 {
        -:  366:   fail_stack_elt_t word ;
        -:  367:   struct __anonstruct_bits_45 bits ;
        -:  368:};
        -:  369:typedef union __anonunion_register_info_type_44 register_info_type;
        -:  370:typedef unsigned int regnum_t;
        -:  371:typedef long pattern_offset_t;
        -:  372:struct __anonstruct_compile_stack_elt_t_46 {
        -:  373:   pattern_offset_t begalt_offset ;
        -:  374:   pattern_offset_t fixup_alt_jump ;
        -:  375:   pattern_offset_t inner_group_offset ;
        -:  376:   pattern_offset_t laststart_offset ;
        -:  377:   regnum_t regnum ;
        -:  378:};
        -:  379:typedef struct __anonstruct_compile_stack_elt_t_46 compile_stack_elt_t;
        -:  380:struct __anonstruct_compile_stack_type_47 {
        -:  381:   compile_stack_elt_t *stack ;
        -:  382:   unsigned int size ;
        -:  383:   unsigned int avail ;
        -:  384:};
        -:  385:typedef struct __anonstruct_compile_stack_type_47 compile_stack_type;
        -:  386:/* compiler builtin: 
        -:  387:   void *__builtin_alloca(unsigned long  ) ;  */
        -:  388:#pragma merger("0","/tmp/cil-ldV4twA4.i","")
        -:  389:#pragma merger("0","/tmp/cil-pthx382W.i","")
        -:  390:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) stat)(char const   * __restrict  __file ,
        -:  391:                                                                                             struct stat * __restrict  __buf ) ;
        -:  392:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(2), __leaf__)) fstat)(int __fd ,
        -:  393:                                                                                            struct stat *__buf ) ;
        -:  394:extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) mmap)(void *__addr ,
        -:  395:                                                                             size_t __len ,
        -:  396:                                                                             int __prot ,
        -:  397:                                                                             int __flags ,
        -:  398:                                                                             int __fd ,
        -:  399:                                                                             __off_t __offset ) ;
        -:  400:extern struct _IO_FILE *stdin ;
        -:  401:extern struct _IO_FILE *stdout ;
        -:  402:extern int fclose(FILE *__stream ) ;
        -:  403:extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __modes ) ;
        -:  404:extern int fprintf(FILE * __restrict  __stream , char const   * __restrict  __format 
        -:  405:                   , ...) ;
        -:  406:extern int printf(char const   * __restrict  __format  , ...) ;
        -:  407:extern int puts(char const   *__s ) ;
        -:  408:extern size_t fread(void * __restrict  __ptr , size_t __size , size_t __n , FILE * __restrict  __stream ) ;
        -:  409:extern size_t fwrite(void const   * __restrict  __ptr , size_t __size , size_t __n ,
        -:  410:                     FILE * __restrict  __s ) ;
        -:  411:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) feof)(FILE *__stream ) ;
        -:  412:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) ferror)(FILE *__stream ) ;
        -:  413:extern int ( __attribute__((__nonnull__(1))) open)(char const   *__file , int __oflag 
        -:  414:                                                   , ...) ;
        -:  415:extern  __attribute__((__nothrow__)) __off_t ( __attribute__((__leaf__)) lseek)(int __fd ,
        -:  416:                                                                                __off_t __offset ,
        -:  417:                                                                                int __whence ) ;
        -:  418:extern int close(int __fd ) ;
        -:  419:extern ssize_t read(int __fd , void *__buf , size_t __nbytes ) ;
        -:  420:extern char *optarg ;
        -:  421:extern int optind ;
        -:  422:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) getpagesize)(void)  __attribute__((__const__)) ;
        -:  423:extern  __attribute__((__nothrow__)) int *( __attribute__((__leaf__)) __errno_location)(void)  __attribute__((__const__)) ;
        -:  424:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) atoi)(char const   *__nptr )  __attribute__((__pure__)) ;
        -:  425:extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) malloc)(size_t __size )  __attribute__((__malloc__)) ;
        -:  426:extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) calloc)(size_t __nmemb ,
        -:  427:                                                                               size_t __size )  __attribute__((__malloc__)) ;
        -:  428:extern  __attribute__((__nothrow__)) void *( __attribute__((__warn_unused_result__,
        -:  429:__leaf__)) realloc)(void *__ptr , size_t __size ) ;
        -:  430:extern  __attribute__((__nothrow__)) void ( __attribute__((__leaf__)) free)(void *__ptr ) ;
        -:  431:extern  __attribute__((__nothrow__, __noreturn__)) void ( __attribute__((__leaf__)) abort)(void) ;
        -:  432:extern  __attribute__((__nothrow__, __noreturn__)) void ( __attribute__((__leaf__)) exit)(int __status ) ;
        -:  433:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1), __leaf__)) getenv)(char const   *__name ) ;
        -:  434:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1,2), __leaf__)) memcpy)(void * __restrict  __dest ,
        -:  435:                                                                                                 void const   * __restrict  __src ,
        -:  436:                                                                                                 size_t __n ) ;
        -:  437:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1,2), __leaf__)) memmove)(void *__dest ,
        -:  438:                                                                                                  void const   *__src ,
        -:  439:                                                                                                  size_t __n ) ;
        -:  440:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1), __leaf__)) memset)(void *__s ,
        -:  441:                                                                                               int __c ,
        -:  442:                                                                                               size_t __n ) ;
        -:  443:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) memcmp)(void const   *__s1 ,
        -:  444:                                                                                               void const   *__s2 ,
        -:  445:                                                                                               size_t __n )  __attribute__((__pure__)) ;
        -:  446:extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1), __leaf__)) memchr)(void const   *__s ,
        -:  447:                                                                                               int __c ,
        -:  448:                                                                                               size_t __n )  __attribute__((__pure__)) ;
        -:  449:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2), __leaf__)) strcpy)(char * __restrict  __dest ,
        -:  450:                                                                                                 char const   * __restrict  __src ) ;
        -:  451:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) strcmp)(char const   *__s1 ,
        -:  452:                                                                                               char const   *__s2 )  __attribute__((__pure__)) ;
        -:  453:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) strncmp)(char const   *__s1 ,
        -:  454:                                                                                                char const   *__s2 ,
        -:  455:                                                                                                size_t __n )  __attribute__((__pure__)) ;
        -:  456:extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) strcoll)(char const   *__s1 ,
        -:  457:                                                                                                char const   *__s2 )  __attribute__((__pure__)) ;
        -:  458:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1), __leaf__)) strchr)(char const   *__s ,
        -:  459:                                                                                               int __c )  __attribute__((__pure__)) ;
        -:  460:extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1), __leaf__)) strrchr)(char const   *__s ,
        -:  461:                                                                                                int __c )  __attribute__((__pure__)) ;
        -:  462:extern  __attribute__((__nothrow__)) size_t ( __attribute__((__nonnull__(1), __leaf__)) strlen)(char const   *__s )  __attribute__((__pure__)) ;
        -:  463:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) strerror)(int __errnum ) ;
        -:  464: __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2), __leaf__)) stpcpy)(char * __restrict  dest ,
        -:  465:                                                                                          char const   * __restrict  src ) ;
        -:  466:extern  __attribute__((__nothrow__)) unsigned short const   **( __attribute__((__leaf__)) __ctype_b_loc)(void)  __attribute__((__const__)) ;
        -:  467:extern  __attribute__((__nothrow__)) __int32_t const   **( __attribute__((__leaf__)) __ctype_tolower_loc)(void)  __attribute__((__const__)) ;
        -:  468:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) tolower)(int __c ) ;
        -:  469:extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) toupper)(int __c ) ;
        -:  470:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) gettext)(char const   *__msgid )  __attribute__((__format_arg__(1))) ;
        -:  471:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) textdomain)(char const   *__domainname ) ;
        -:  472:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) bindtextdomain)(char const   *__domainname ,
        -:  473:                                                                                       char const   *__dirname ) ;
        -:  474:extern  __attribute__((__nothrow__)) char *( __attribute__((__leaf__)) setlocale)(int __category ,
        -:  475:                                                                                  char const   *__locale ) ;
        -:  476:extern int getopt_long(int __argc , char * const  *__argv , char const   *__shortopts ,
        -:  477:                       struct option  const  *__longopts , int *__longind ) ;
        -:  478: __attribute__((__noreturn__)) void fatal(char const   *mesg , int errnum ) ;
        -:  479:char *xmalloc(size_t size ) ;
        -:  480:char *xrealloc(char *ptr , size_t size ) ;
        -:  481:struct matcher matchers[6] ;
        -:  482:char const   *matcher  ;
        -:  483:int match_icase  ;
        -:  484:int match_words  ;
        -:  485:int match_lines  ;
        -:  486:unsigned char eolbyte  ;
        -:  487:char *savedir(char const   *dir , off_t name_size ) ;
        -:  488:static struct stats stats_base  ;
        -:  489:static int show_help  ;
        -:  490:static int show_version  ;
        -:  491:static int mmap_option  ;
        -:  492:static char const   short_options[51]  = 
        -:  493:  {      (char const   )'0',      (char const   )'1',      (char const   )'2',      (char const   )'3', 
        -:  494:        (char const   )'4',      (char const   )'5',      (char const   )'6',      (char const   )'7', 
        -:  495:        (char const   )'8',      (char const   )'9',      (char const   )'A',      (char const   )':', 
        -:  496:        (char const   )'B',      (char const   )':',      (char const   )'C',      (char const   )':', 
        -:  497:        (char const   )':',      (char const   )'E',      (char const   )'F',      (char const   )'G', 
        -:  498:        (char const   )'H',      (char const   )'I',      (char const   )'U',      (char const   )'V', 
        -:  499:        (char const   )'X',      (char const   )':',      (char const   )'a',      (char const   )'b', 
        -:  500:        (char const   )'c',      (char const   )'d',      (char const   )':',      (char const   )'e', 
        -:  501:        (char const   )':',      (char const   )'f',      (char const   )':',      (char const   )'h', 
        -:  502:        (char const   )'i',      (char const   )'L',      (char const   )'l',      (char const   )'n', 
        -:  503:        (char const   )'q',      (char const   )'r',      (char const   )'s',      (char const   )'u', 
        -:  504:        (char const   )'v',      (char const   )'w',      (char const   )'x',      (char const   )'y', 
        -:  505:        (char const   )'Z',      (char const   )'z',      (char const   )'\000'};
        -:  506:static struct option long_options[35]  = 
        -:  507:  {      {"after-context", 1, (int *)((void *)0), 'A'}, 
        -:  508:        {"basic-regexp", 0, (int *)((void *)0), 'G'}, 
        -:  509:        {"before-context", 1, (int *)((void *)0), 'B'}, 
        -:  510:        {"binary-files", 1, (int *)((void *)0), 128}, 
        -:  511:        {"byte-offset", 0, (int *)((void *)0), 'b'}, 
        -:  512:        {"context", 2, (int *)((void *)0), 'C'}, 
        -:  513:        {"count", 0, (int *)((void *)0), 'c'}, 
        -:  514:        {"directories", 1, (int *)((void *)0), 'd'}, 
        -:  515:        {"extended-regexp", 0, (int *)((void *)0), 'E'}, 
        -:  516:        {"file", 1, (int *)((void *)0), 'f'}, 
        -:  517:        {"files-with-matches", 0, (int *)((void *)0), 'l'}, 
        -:  518:        {"files-without-match", 0, (int *)((void *)0), 'L'}, 
        -:  519:        {"fixed-regexp", 0, (int *)((void *)0), 'F'}, 
        -:  520:        {"fixed-strings", 0, (int *)((void *)0), 'F'}, 
        -:  521:        {"help", 0, & show_help, 1}, 
        -:  522:        {"ignore-case", 0, (int *)((void *)0), 'i'}, 
        -:  523:        {"line-number", 0, (int *)((void *)0), 'n'}, 
        -:  524:        {"line-regexp", 0, (int *)((void *)0), 'x'}, 
        -:  525:        {"mmap", 0, & mmap_option, 1}, 
        -:  526:        {"no-filename", 0, (int *)((void *)0), 'h'}, 
        -:  527:        {"no-messages", 0, (int *)((void *)0), 's'}, 
        -:  528:        {"null", 0, (int *)((void *)0), 'Z'}, 
        -:  529:        {"null-data", 0, (int *)((void *)0), 'z'}, 
        -:  530:        {"quiet", 0, (int *)((void *)0), 'q'}, 
        -:  531:        {"recursive", 0, (int *)((void *)0), 'r'}, 
        -:  532:        {"regexp", 1, (int *)((void *)0), 'e'}, 
        -:  533:        {"invert-match", 0, (int *)((void *)0), 'v'}, 
        -:  534:        {"silent", 0, (int *)((void *)0), 'q'}, 
        -:  535:        {"text", 0, (int *)((void *)0), 'a'}, 
        -:  536:        {"binary", 0, (int *)((void *)0), 'U'}, 
        -:  537:        {"unix-byte-offsets", 0, (int *)((void *)0), 'u'}, 
        -:  538:        {"version", 0, (int *)((void *)0), 'V'}, 
        -:  539:        {"with-filename", 0, (int *)((void *)0), 'H'}, 
        -:  540:        {"word-regexp", 0, (int *)((void *)0), 'w'}, 
        -:  541:        {(char const   *)0, 0, (int *)0, 0}};
        -:  542:static char *prog  ;
        -:  543:static char const   *filename  ;
        -:  544:static int errseen  ;
        -:  545:static enum __anonenum_directories_30 directories  ;
        -:  546:static int ck_atoi(char const   *str , int *out ) ;
        -:  547:static  __attribute__((__noreturn__)) void usage(int status ) ;
        -:  548:static void error(char const   *mesg , int errnum ) ;
        -:  549:static void setmatcher(char const   *m ) ;
        -:  550:static int install_matcher(char const   *name ) ;
        -:  551:static int prepend_args(char const   *options , char *buf , char **argv ) ;
        -:  552:static void prepend_default_options(char const   *options , int *pargc , char ***pargv ) ;
        -:  553:static char *page_alloc(size_t size , char **up ) ;
        -:  554:static int reset(int fd , char const   *file , struct stats *stats ) ;
        -:  555:static int fillbuf(size_t save , struct stats *stats ) ;
        -:  556:static int grepbuf(char *beg , char *lim ) ;
        -:  557:static void prtext(char *beg , char *lim , int *nlinesp ) ;
        -:  558:static void prpending(char *lim ) ;
        -:  559:static void prline(char *beg , char *lim , int sep ) ;
        -:  560:static void print_offset_sep(off_t pos , int sep ) ;
        -:  561:static void nlscan(char *lim ) ;
        -:  562:static int grep(int fd , char const   *file , struct stats *stats ) ;
        -:  563:static int grepdir(char const   *dir , struct stats *stats ) ;
        -:  564:static int grepfile(char const   *file , struct stats *stats ) ;
        -:  565:static void (*compile)(char * , size_t  )  ;
        -:  566:static char *(*execute)(char * , size_t  , char ** )  ;
    #####:  567:static void error(char const   *mesg , int errnum ) 
        -:  568:{ 
        -:  569:  char *tmp ;
        -:  570:
        -:  571:  {
    #####:  572:  if (errnum) {
        -:  573:    {
    #####:  574:    tmp = strerror(errnum);
    #####:  575:    fprintf((FILE * __restrict  )stdout, (char const   * __restrict  )"%s: %s: %s\n",
    #####:  576:            prog, mesg, tmp);
        -:  577:    }
    #####:  578:  } else {
        -:  579:    {
    #####:  580:    fprintf((FILE * __restrict  )stdout, (char const   * __restrict  )"%s: %s\n",
    #####:  581:            prog, mesg);
        -:  582:    }
        -:  583:  }
    #####:  584:  errseen = 1;
    #####:  585:  return;
        -:  586:}
        -:  587:}
        -:  588: __attribute__((__noreturn__)) void fatal(char const   *mesg , int errnum ) ;
    #####:  589:void fatal(char const   *mesg , int errnum ) 
        -:  590:{ 
        -:  591:
        -:  592:
        -:  593:  {
        -:  594:  {
    #####:  595:  error(mesg, errnum);
    #####:  596:  exit(2);
        -:  597:  }
        -:  598:}
        -:  599:}
        4:  600:char *xmalloc(size_t size ) 
        -:  601:{ 
        -:  602:  char *result ;
        -:  603:  void *tmp ;
        -:  604:  char *tmp___0 ;
        -:  605:
        -:  606:  {
        -:  607:  {
        4:  608:  tmp = malloc(size);
        4:  609:  result = (char *)tmp;
        -:  610:  }
        4:  611:  if (size) {
        4:  612:    if (! result) {
        -:  613:      {
    #####:  614:      tmp___0 = gettext("memory exhausted");
    #####:  615:      fatal((char const   *)tmp___0, 0);
        -:  616:      }
        -:  617:    }
        4:  618:  }
        4:  619:  return (result);
        -:  620:}
        -:  621:}
    #####:  622:char *xrealloc(char *ptr , size_t size ) 
        -:  623:{ 
        -:  624:  char *result ;
        -:  625:  void *tmp ;
        -:  626:  void *tmp___0 ;
        -:  627:  char *tmp___1 ;
        -:  628:
        -:  629:  {
    #####:  630:  if (ptr) {
        -:  631:    {
    #####:  632:    tmp = realloc((void *)ptr, size);
    #####:  633:    result = (char *)tmp;
        -:  634:    }
    #####:  635:  } else {
        -:  636:    {
    #####:  637:    tmp___0 = malloc(size);
    #####:  638:    result = (char *)tmp___0;
        -:  639:    }
        -:  640:  }
    #####:  641:  if (size) {
    #####:  642:    if (! result) {
        -:  643:      {
    #####:  644:      tmp___1 = gettext("memory exhausted");
    #####:  645:      fatal((char const   *)tmp___1, 0);
        -:  646:      }
        -:  647:    }
    #####:  648:  }
    #####:  649:  return (result);
        -:  650:}
        -:  651:}
    #####:  652:static int ck_atoi(char const   *str , int *out ) 
        -:  653:{ 
        -:  654:  char const   *p ;
        -:  655:
        -:  656:  {
    #####:  657:  p = str;
        -:  658:  {
    #####:  659:  while (1) {
        -:  660:    while_continue: /* CIL Label */ ;
    #####:  661:    if (! *p) {
    #####:  662:      goto while_break;
        -:  663:    }
    #####:  664:    if ((int const   )*p < 48) {
    #####:  665:      return (-1);
        -:  666:    } else { //Added block
    #####:  667:    if ((int const   )*p > 57) {
    #####:  668:      return (-1);
        -:  669:    }
        -:  670:    }
    #####:  671:    p ++;
        -:  672:  }
        -:  673:  while_break: /* CIL Label */ ;
        -:  674:  }
        -:  675:  {
    #####:  676:  *out = atoi((char const   *)optarg);
        -:  677:  }
    #####:  678:  return (0);
        -:  679:}
    #####:  680:}
        -:  681:static char *ubuffer  ;
        -:  682:static char *buffer  ;
        -:  683:static size_t bufsalloc  ;
        -:  684:static size_t bufalloc  ;
        -:  685:static int bufdesc  ;
        -:  686:static char *bufbeg  ;
        -:  687:static char *buflim  ;
        -:  688:static size_t pagesize  ;
        -:  689:static off_t bufoffset  ;
        -:  690:static int bufmapped  ;
        -:  691:static off_t initial_bufoffset  ;
        1:  692:static char *page_alloc(size_t size , char **up ) 
        -:  693:{ 
        -:  694:  size_t asize ;
        -:  695:  char *p ;
        -:  696:  void *tmp ;
        -:  697:  void *tmp___0 ;
        -:  698:  void *tmp___1 ;
        -:  699:  char *tmp___2 ;
        -:  700:
        -:  701:  {
        1:  702:  asize = (size + pagesize) - 1UL;
        1:  703:  if (size <= asize) {
        1:  704:    if (*up) {
        -:  705:      {
    #####:  706:      tmp = realloc((void *)*up, asize);
    #####:  707:      tmp___1 = tmp;
        -:  708:      }
    #####:  709:    } else {
        -:  710:      {
        1:  711:      tmp___0 = malloc(asize);
        1:  712:      tmp___1 = tmp___0;
        -:  713:      }
        -:  714:    }
        1:  715:    p = (char *)tmp___1;
        1:  716:    if (p) {
        1:  717:      *up = p;
        1:  718:      if ((size_t )p % pagesize == 0UL) {
    #####:  719:        tmp___2 = p;
    #####:  720:      } else {
        1:  721:        tmp___2 = p + (pagesize - (size_t )p % pagesize);
        -:  722:      }
        1:  723:      return (tmp___2);
        -:  724:    }
    #####:  725:  }
    #####:  726:  return ((char *)((void *)0));
        -:  727:}
        1:  728:}
        3:  729:static int reset(int fd , char const   *file , struct stats *stats ) 
        -:  730:{ 
        -:  731:  size_t ubufsalloc ;
        -:  732:  int tmp ;
        -:  733:  char *tmp___0 ;
        -:  734:  int *tmp___1 ;
        -:  735:  int tmp___2 ;
        -:  736:  int *tmp___3 ;
        -:  737:  int tmp___4 ;
        -:  738:
        -:  739:  {
        3:  740:  if (pagesize) {
        2:  741:    if ((bufalloc / 5UL) % pagesize == 0UL) {
        2:  742:      bufsalloc = bufalloc / 5UL;
        2:  743:    } else {
    #####:  744:      bufsalloc = bufalloc / 5UL + (pagesize - (bufalloc / 5UL) % pagesize);
        -:  745:    }
        2:  746:  } else {
        -:  747:    {
        1:  748:    tmp = getpagesize();
        1:  749:    pagesize = (size_t )tmp;
        -:  750:    }
        1:  751:    if (pagesize == 0UL) {
        -:  752:      {
    #####:  753:      abort();
        -:  754:      }
        -:  755:    }
        1:  756:    if (8192UL > pagesize) {
        1:  757:      ubufsalloc = (size_t )8192;
        1:  758:    } else {
    #####:  759:      ubufsalloc = pagesize;
        -:  760:    }
        1:  761:    if (ubufsalloc % pagesize == 0UL) {
        1:  762:      bufsalloc = ubufsalloc;
        1:  763:    } else {
    #####:  764:      bufsalloc = ubufsalloc + (pagesize - ubufsalloc % pagesize);
        -:  765:    }
        1:  766:    bufalloc = 5UL * bufsalloc;
        1:  767:    if (bufsalloc < ubufsalloc) {
        -:  768:      {
    #####:  769:      tmp___0 = gettext("memory exhausted");
    #####:  770:      fatal((char const   *)tmp___0, 0);
        -:  771:      }
        -:  772:    } else { //Added block
        1:  773:    if (bufalloc / 5UL != bufsalloc) {
        -:  774:      {
    #####:  775:      tmp___0 = gettext("memory exhausted");
    #####:  776:      fatal((char const   *)tmp___0, 0);
        -:  777:      }
        -:  778:    } else { //Added block
        1:  779:    if (bufalloc + 1UL < bufalloc) {
        -:  780:      {
    #####:  781:      tmp___0 = gettext("memory exhausted");
    #####:  782:      fatal((char const   *)tmp___0, 0);
        -:  783:      }
        -:  784:    } else {
        -:  785:      {
        1:  786:      buffer = page_alloc(bufalloc + 1UL, & ubuffer);
        -:  787:      }
        1:  788:      if (! buffer) {
        -:  789:        {
    #####:  790:        tmp___0 = gettext("memory exhausted");
    #####:  791:        fatal((char const   *)tmp___0, 0);
        -:  792:        }
        -:  793:      }
        -:  794:    }
        -:  795:    }
        -:  796:    }
        -:  797:  }
        -:  798:  {
        3:  799:  buflim = buffer;
        3:  800:  bufdesc = fd;
        3:  801:  tmp___2 = fstat(fd, & stats->stat);
        -:  802:  }
        3:  803:  if (tmp___2 != 0) {
        -:  804:    {
    #####:  805:    tmp___1 = __errno_location();
    #####:  806:    error("fstat", *tmp___1);
        -:  807:    }
    #####:  808:    return (0);
        -:  809:  }
        3:  810:  if ((unsigned int )directories == 2U) {
    #####:  811:    if ((stats->stat.st_mode & 61440U) == 16384U) {
    #####:  812:      return (0);
        -:  813:    }
    #####:  814:  }
        3:  815:  if ((stats->stat.st_mode & 61440U) == 32768U) {
        3:  816:    if (file) {
        3:  817:      bufoffset = (off_t )0;
        3:  818:    } else {
        -:  819:      {
    #####:  820:      bufoffset = lseek(fd, (__off_t )0, 1);
        -:  821:      }
    #####:  822:      if (bufoffset < 0L) {
        -:  823:        {
    #####:  824:        tmp___3 = __errno_location();
    #####:  825:        error("lseek", *tmp___3);
        -:  826:        }
    #####:  827:        return (0);
        -:  828:      }
        -:  829:    }
        3:  830:    initial_bufoffset = bufoffset;
        3:  831:    if (mmap_option) {
    #####:  832:      if ((unsigned long )bufoffset % pagesize == 0UL) {
    #####:  833:        tmp___4 = 1;
    #####:  834:      } else {
    #####:  835:        tmp___4 = 0;
        -:  836:      }
    #####:  837:    } else {
        3:  838:      tmp___4 = 0;
        -:  839:    }
        3:  840:    bufmapped = tmp___4;
        3:  841:  } else {
    #####:  842:    bufmapped = 0;
        -:  843:  }
        3:  844:  return (1);
        -:  845:}
        3:  846:}
       14:  847:static int fillbuf(size_t save , struct stats *stats ) 
        -:  848:{ 
        -:  849:  size_t fillsize ;
        -:  850:  int cc ;
        -:  851:  size_t readsize ;
        -:  852:  size_t saved_offset ;
        -:  853:  size_t aligned_save ;
        -:  854:  size_t tmp ;
        -:  855:  size_t maxalloc ;
        -:  856:  size_t newalloc ;
        -:  857:  off_t to_be_read ;
        -:  858:  size_t slop ;
        -:  859:  off_t aligned_to_be_read ;
        -:  860:  size_t tmp___0 ;
        -:  861:  off_t maxalloc_off ;
        -:  862:  char *tmp___1 ;
        -:  863:  size_t mmapsize ;
        -:  864:  int *tmp___2 ;
        -:  865:  __off_t tmp___3 ;
        -:  866:  void *tmp___4 ;
        -:  867:  ssize_t bytesread ;
        -:  868:  int *tmp___5 ;
        -:  869:
        -:  870:  {
       14:  871:  fillsize = (size_t )0;
       14:  872:  cc = 1;
       14:  873:  saved_offset = (size_t )(buflim - ubuffer) - save;
       14:  874:  if (bufsalloc < save) {
    #####:  875:    if (save % pagesize == 0UL) {
    #####:  876:      tmp = save;
    #####:  877:    } else {
    #####:  878:      tmp = save + (pagesize - save % pagesize);
        -:  879:    }
    #####:  880:    aligned_save = tmp;
    #####:  881:    maxalloc = (size_t )-1;
    #####:  882:    if ((stats->stat.st_mode & 61440U) == 32768U) {
    #####:  883:      to_be_read = stats->stat.st_size - bufoffset;
    #####:  884:      slop = (unsigned long )to_be_read % pagesize;
    #####:  885:      if (slop) {
    #####:  886:        tmp___0 = pagesize - slop;
    #####:  887:      } else {
    #####:  888:        tmp___0 = (size_t )0;
        -:  889:      }
    #####:  890:      aligned_to_be_read = (off_t )((size_t )to_be_read + tmp___0);
    #####:  891:      maxalloc_off = (off_t )(aligned_save + (size_t )aligned_to_be_read);
    #####:  892:      if (0L <= maxalloc_off) {
    #####:  893:        if ((size_t )maxalloc_off == (size_t )maxalloc_off) {
    #####:  894:          maxalloc = (size_t )maxalloc_off;
    #####:  895:        }
    #####:  896:      }
    #####:  897:    }
        -:  898:    {
    #####:  899:    while (1) {
        -:  900:      while_continue: /* CIL Label */ ;
    #####:  901:      if (! (bufsalloc < save)) {
    #####:  902:        goto while_break;
        -:  903:      }
    #####:  904:      if (bufsalloc < bufsalloc * 2UL) {
    #####:  905:        bufsalloc *= 2UL;
    #####:  906:      } else {
    #####:  907:        bufsalloc = aligned_save;
    #####:  908:        goto while_break;
        -:  909:      }
        -:  910:    }
        -:  911:    while_break: /* CIL Label */ ;
        -:  912:    }
    #####:  913:    newalloc = 5UL * bufsalloc;
    #####:  914:    if (maxalloc < newalloc) {
    #####:  915:      newalloc = maxalloc;
    #####:  916:      bufsalloc = aligned_save;
    #####:  917:    }
    #####:  918:    if (bufsalloc < save) {
        -:  919:      {
    #####:  920:      tmp___1 = gettext("memory exhausted");
    #####:  921:      fatal((char const   *)tmp___1, 0);
        -:  922:      }
        -:  923:    } else { //Added block
    #####:  924:    if (newalloc < save) {
        -:  925:      {
    #####:  926:      tmp___1 = gettext("memory exhausted");
    #####:  927:      fatal((char const   *)tmp___1, 0);
        -:  928:      }
        -:  929:    } else { //Added block
    #####:  930:    if (newalloc == save) {
    #####:  931:      if (newalloc != maxalloc) {
        -:  932:        {
    #####:  933:        tmp___1 = gettext("memory exhausted");
    #####:  934:        fatal((char const   *)tmp___1, 0);
        -:  935:        }
        -:  936:      } else {
    #####:  937:        goto _L;
        -:  938:      }
    #####:  939:    } else { //Added block
        -:  940:    _L: 
    #####:  941:    if (bufalloc < newalloc) {
        -:  942:      {
    #####:  943:      bufalloc = newalloc;
    #####:  944:      buffer = page_alloc(bufalloc + 1UL, & ubuffer);
        -:  945:      }
    #####:  946:      if (! buffer) {
        -:  947:        {
    #####:  948:        tmp___1 = gettext("memory exhausted");
    #####:  949:        fatal((char const   *)tmp___1, 0);
        -:  950:        }
        -:  951:      }
    #####:  952:    }
        -:  953:    }
        -:  954:    }
        -:  955:    }
    #####:  956:  }
        -:  957:  {
       14:  958:  bufbeg = (buffer + bufsalloc) - save;
       14:  959:  memmove((void *)bufbeg, (void const   *)(ubuffer + saved_offset), save);
       14:  960:  readsize = bufalloc - bufsalloc;
        -:  961:  }
       14:  962:  if (bufmapped) {
    #####:  963:    mmapsize = readsize;
    #####:  964:    if ((size_t )(stats->stat.st_size - bufoffset) < mmapsize) {
    #####:  965:      mmapsize = (size_t )(stats->stat.st_size - bufoffset);
    #####:  966:      mmapsize -= mmapsize % pagesize;
    #####:  967:    }
    #####:  968:    if (mmapsize) {
        -:  969:      {
    #####:  970:      tmp___4 = mmap((void *)(buffer + bufsalloc), mmapsize, 3, 18, bufdesc, bufoffset);
        -:  971:      }
    #####:  972:      if ((unsigned long )tmp___4 != (unsigned long )((caddr_t )-1)) {
    #####:  973:        fillsize = mmapsize;
    #####:  974:      } else {
    #####:  975:        goto _L___0;
        -:  976:      }
    #####:  977:    } else {
        -:  978:      _L___0: 
    #####:  979:      bufmapped = 0;
    #####:  980:      if (bufoffset != initial_bufoffset) {
        -:  981:        {
    #####:  982:        tmp___3 = lseek(bufdesc, bufoffset, 0);
        -:  983:        }
    #####:  984:        if (tmp___3 < 0L) {
        -:  985:          {
    #####:  986:          tmp___2 = __errno_location();
    #####:  987:          error("lseek", *tmp___2);
    #####:  988:          cc = 0;
        -:  989:          }
    #####:  990:        }
    #####:  991:      }
        -:  992:    }
    #####:  993:  }
       14:  994:  if (! fillsize) {
        -:  995:    {
       14:  996:    while (1) {
        -:  997:      while_continue___0: /* CIL Label */ ;
        -:  998:      {
       14:  999:      bytesread = read(bufdesc, (void *)(buffer + bufsalloc), readsize);
        -: 1000:      }
       14: 1001:      if (bytesread < 0L) {
        -: 1002:        {
    #####: 1003:        tmp___5 = __errno_location();
        -: 1004:        }
    #####: 1005:        if (! (*tmp___5 == 4)) {
    #####: 1006:          goto while_break___0;
        -: 1007:        }
    #####: 1008:      } else {
       14: 1009:        goto while_break___0;
        -: 1010:      }
    #####: 1011:      goto while_continue___0;
        -: 1012:    }
        -: 1013:    while_break___0: /* CIL Label */ ;
        -: 1014:    }
       14: 1015:    if (bytesread < 0L) {
    #####: 1016:      cc = 0;
    #####: 1017:    } else {
       14: 1018:      fillsize = (size_t )bytesread;
        -: 1019:    }
       14: 1020:  }
       14: 1021:  bufoffset = (off_t )((size_t )bufoffset + fillsize);
       14: 1022:  buflim = (buffer + bufsalloc) + fillsize;
       14: 1023:  return (cc);
        -: 1024:}
        -: 1025:}
        -: 1026:static enum __anonenum_binary_files_31 binary_files  ;
        -: 1027:static int filename_mask  ;
        -: 1028:static int out_quiet  ;
        -: 1029:static int out_invert  ;
        -: 1030:static int out_file  ;
        -: 1031:static int out_line  ;
        -: 1032:static int out_byte  ;
        -: 1033:static int out_before  ;
        -: 1034:static int out_after  ;
        -: 1035:static int count_matches  ;
        -: 1036:static int list_files  ;
        -: 1037:static int no_filenames  ;
        -: 1038:static int suppress_errors  ;
        -: 1039:static off_t totalcc  ;
        -: 1040:static char *lastnl  ;
        -: 1041:static char *lastout  ;
        -: 1042:static off_t totalnl  ;
        -: 1043:static int pending  ;
        -: 1044:static int done_on_match  ;
    #####: 1045:static void nlscan(char *lim ) 
        -: 1046:{ 
        -: 1047:  char *beg ;
        -: 1048:  void *tmp ;
        -: 1049:
        -: 1050:  {
    #####: 1051:  beg = lastnl;
        -: 1052:  {
    #####: 1053:  while (1) {
        -: 1054:    while_continue: /* CIL Label */ ;
        -: 1055:    {
    #####: 1056:    tmp = memchr((void const   *)beg, (int )eolbyte, (size_t )(lim - beg));
    #####: 1057:    beg = (char *)tmp;
        -: 1058:    }
    #####: 1059:    if (! beg) {
    #####: 1060:      goto while_break;
        -: 1061:    }
    #####: 1062:    totalnl ++;
    #####: 1063:    beg ++;
        -: 1064:  }
        -: 1065:  while_break: /* CIL Label */ ;
        -: 1066:  }
    #####: 1067:  lastnl = lim;
    #####: 1068:  return;
        -: 1069:}
        -: 1070:}
    #####: 1071:static void print_offset_sep(off_t pos , int sep ) 
        -: 1072:{ 
        -: 1073:  char buf[sizeof(pos) * 8UL] ;
        -: 1074:  char *p ;
        -: 1075:
        -: 1076:  {
    #####: 1077:  p = (buf + sizeof(buf)) - 1;
    #####: 1078:  *p = (char )sep;
        -: 1079:  {
    #####: 1080:  while (1) {
        -: 1081:    while_continue: /* CIL Label */ ;
    #####: 1082:    p --;
    #####: 1083:    *p = (char )(48L + pos % 10L);
    #####: 1084:    pos /= 10L;
    #####: 1085:    if (! (pos != 0L)) {
    #####: 1086:      goto while_break;
        -: 1087:    }
        -: 1088:  }
        -: 1089:  while_break: /* CIL Label */ ;
        -: 1090:  }
        -: 1091:  {
    #####: 1092:  fwrite((void const   * __restrict  )p, (size_t )1, (size_t )((buf + sizeof(buf)) - p),
    #####: 1093:         (FILE * __restrict  )stdout);
        -: 1094:  }
    #####: 1095:  return;
        -: 1096:}
        -: 1097:}
       76: 1098:static void prline(char *beg , char *lim , int sep ) 
        -: 1099:{ 
        -: 1100:  off_t pos ;
        -: 1101:  int *tmp ;
        -: 1102:  char *tmp___0 ;
        -: 1103:  int tmp___1 ;
        -: 1104:
        -: 1105:  {
       76: 1106:  if (out_file) {
        -: 1107:    {
       76: 1108:    printf((char const   * __restrict  )"%s%c", filename, sep & filename_mask);
        -: 1109:    }
       76: 1110:  }
       76: 1111:  if (out_line) {
        -: 1112:    {
    #####: 1113:    nlscan(beg);
    #####: 1114:    totalnl ++;
    #####: 1115:    print_offset_sep(totalnl, sep);
    #####: 1116:    lastnl = lim;
        -: 1117:    }
    #####: 1118:  }
       76: 1119:  if (out_byte) {
        -: 1120:    {
    #####: 1121:    pos = totalcc + (beg - bufbeg);
    #####: 1122:    print_offset_sep(pos, sep);
        -: 1123:    }
    #####: 1124:  }
        -: 1125:  {
       76: 1126:  fwrite((void const   * __restrict  )beg, (size_t )1, (size_t )(lim - beg), (FILE * __restrict  )stdout);
       76: 1127:  tmp___1 = ferror(stdout);
        -: 1128:  }
       76: 1129:  if (tmp___1) {
        -: 1130:    {
    #####: 1131:    tmp = __errno_location();
    #####: 1132:    tmp___0 = gettext("writing output");
    #####: 1133:    error((char const   *)tmp___0, *tmp);
        -: 1134:    }
    #####: 1135:  }
       76: 1136:  lastout = lim;
       76: 1137:  return;
        -: 1138:}
        -: 1139:}
    #####: 1140:static void prpending(char *lim ) 
        -: 1141:{ 
        -: 1142:  char *nl ;
        -: 1143:  void *tmp ;
        -: 1144:
        -: 1145:  {
    #####: 1146:  if (! lastout) {
    #####: 1147:    lastout = bufbeg;
    #####: 1148:  }
        -: 1149:  {
    #####: 1150:  while (1) {
        -: 1151:    while_continue: /* CIL Label */ ;
    #####: 1152:    if (pending > 0) {
    #####: 1153:      if (! ((unsigned long )lastout < (unsigned long )lim)) {
    #####: 1154:        goto while_break;
        -: 1155:      }
    #####: 1156:    } else {
    #####: 1157:      goto while_break;
        -: 1158:    }
        -: 1159:    {
    #####: 1160:    pending --;
    #####: 1161:    tmp = memchr((void const   *)lastout, (int )eolbyte, (size_t )(lim - lastout));
    #####: 1162:    nl = (char *)tmp;
        -: 1163:    }
    #####: 1164:    if ((unsigned long )nl != (unsigned long )((char *)0)) {
    #####: 1165:      nl ++;
    #####: 1166:    } else {
    #####: 1167:      nl = lim;
        -: 1168:    }
        -: 1169:    {
    #####: 1170:    prline(lastout, nl, '-');
        -: 1171:    }
        -: 1172:  }
        -: 1173:  while_break: /* CIL Label */ ;
        -: 1174:  }
    #####: 1175:  return;
        -: 1176:}
        -: 1177:}
        -: 1178:static int used  ;
       76: 1179:static void prtext(char *beg , char *lim , int *nlinesp ) 
        -: 1180:{ 
        -: 1181:  char *bp ;
        -: 1182:  char *p ;
        -: 1183:  char *nl ;
        -: 1184:  char eol ;
        -: 1185:  int i ;
        -: 1186:  int n ;
        -: 1187:  void *tmp ;
        -: 1188:  void *tmp___0 ;
        -: 1189:
        -: 1190:  {
       76: 1191:  eol = (char )eolbyte;
       76: 1192:  if (! out_quiet) {
       76: 1193:    if (pending > 0) {
        -: 1194:      {
    #####: 1195:      prpending(beg);
        -: 1196:      }
    #####: 1197:    }
       76: 1198:  }
       76: 1199:  p = beg;
       76: 1200:  if (! out_quiet) {
       76: 1201:    if (lastout) {
       67: 1202:      bp = lastout;
       67: 1203:    } else {
        9: 1204:      bp = bufbeg;
        -: 1205:    }
       76: 1206:    i = 0;
        -: 1207:    {
       76: 1208:    while (1) {
        -: 1209:      while_continue: /* CIL Label */ ;
       76: 1210:      if (! (i < out_before)) {
       76: 1211:        goto while_break;
        -: 1212:      }
    #####: 1213:      if ((unsigned long )p > (unsigned long )bp) {
        -: 1214:        {
    #####: 1215:        while (1) {
        -: 1216:          while_continue___0: /* CIL Label */ ;
    #####: 1217:          p --;
    #####: 1218:          if ((unsigned long )p > (unsigned long )bp) {
    #####: 1219:            if (! ((int )*(p + -1) != (int )eol)) {
    #####: 1220:              goto while_break___0;
        -: 1221:            }
    #####: 1222:          } else {
    #####: 1223:            goto while_break___0;
        -: 1224:          }
        -: 1225:        }
        -: 1226:        while_break___0: /* CIL Label */ ;
        -: 1227:        }
    #####: 1228:      }
    #####: 1229:      i ++;
        -: 1230:    }
        -: 1231:    while_break: /* CIL Label */ ;
        -: 1232:    }
       76: 1233:    if (out_before) {
    #####: 1234:      goto _L;
        -: 1235:    } else { //Added block
       76: 1236:    if (out_after) {
        -: 1237:      _L: 
    #####: 1238:      if (used) {
    #####: 1239:        if ((unsigned long )p != (unsigned long )lastout) {
        -: 1240:          {
    #####: 1241:          puts("--");
        -: 1242:          }
    #####: 1243:        }
    #####: 1244:      }
    #####: 1245:    }
        -: 1246:    }
        -: 1247:    {
       76: 1248:    while (1) {
        -: 1249:      while_continue___1: /* CIL Label */ ;
       76: 1250:      if (! ((unsigned long )p < (unsigned long )beg)) {
       76: 1251:        goto while_break___1;
        -: 1252:      }
        -: 1253:      {
    #####: 1254:      tmp = memchr((void const   *)p, (int )eol, (size_t )(beg - p));
    #####: 1255:      nl = (char *)tmp;
    #####: 1256:      prline(p, nl + 1, '-');
    #####: 1257:      p = nl + 1;
        -: 1258:      }
        -: 1259:    }
        -: 1260:    while_break___1: /* CIL Label */ ;
        -: 1261:    }
       76: 1262:  }
       76: 1263:  if (nlinesp) {
    #####: 1264:    n = 0;
        -: 1265:    {
    #####: 1266:    while (1) {
        -: 1267:      while_continue___2: /* CIL Label */ ;
    #####: 1268:      if (! ((unsigned long )p < (unsigned long )lim)) {
    #####: 1269:        goto while_break___2;
        -: 1270:      }
        -: 1271:      {
    #####: 1272:      tmp___0 = memchr((void const   *)p, (int )eol, (size_t )(lim - p));
    #####: 1273:      nl = (char *)tmp___0;
        -: 1274:      }
    #####: 1275:      if ((unsigned long )nl != (unsigned long )((char *)0)) {
    #####: 1276:        nl ++;
    #####: 1277:      } else {
    #####: 1278:        nl = lim;
        -: 1279:      }
    #####: 1280:      if (! out_quiet) {
        -: 1281:        {
    #####: 1282:        prline(p, nl, ':');
        -: 1283:        }
    #####: 1284:      }
    #####: 1285:      p = nl;
    #####: 1286:      n ++;
        -: 1287:    }
        -: 1288:    while_break___2: /* CIL Label */ ;
        -: 1289:    }
    #####: 1290:    *nlinesp = n;
    #####: 1291:  } else { //Added block
       76: 1292:  if (! out_quiet) {
        -: 1293:    {
       76: 1294:    prline(beg, lim, ':');
        -: 1295:    }
       76: 1296:  }
        -: 1297:  }
       76: 1298:  if (out_quiet) {
    #####: 1299:    pending = 0;
    #####: 1300:  } else {
       76: 1301:    pending = out_after;
        -: 1302:  }
       76: 1303:  used = 1;
       76: 1304:  return;
        -: 1305:}
        -: 1306:}
       13: 1307:static int grepbuf(char *beg , char *lim ) 
        -: 1308:{ 
        -: 1309:  int nlines ;
        -: 1310:  int n ;
        -: 1311:  register char *p ;
        -: 1312:  register char *b ;
        -: 1313:  char *endp ;
        -: 1314:  char eol ;
        -: 1315:
        -: 1316:  {
       13: 1317:  eol = (char )eolbyte;
       13: 1318:  nlines = 0;
       13: 1319:  p = beg;
        -: 1320:  {
       89: 1321:  while (1) {
        -: 1322:    while_continue: /* CIL Label */ ;
        -: 1323:    {
       89: 1324:    b = (*execute)(p, (size_t )(lim - p), & endp);
        -: 1325:    }
       89: 1326:    if (! ((unsigned long )b != (unsigned long )((char *)0))) {
       13: 1327:      goto while_break;
        -: 1328:    }
       76: 1329:    if ((unsigned long )b == (unsigned long )lim) {
    #####: 1330:      if ((unsigned long )b > (unsigned long )beg) {
    #####: 1331:        if ((int )*(b + -1) == (int )eol) {
    #####: 1332:          goto while_break;
        -: 1333:        } else {
    #####: 1334:          goto _L;
        -: 1335:        }
    #####: 1336:      } else { //Added block
        -: 1337:      _L: 
    #####: 1338:      if ((unsigned long )b == (unsigned long )beg) {
    #####: 1339:        goto while_break;
        -: 1340:      }
        -: 1341:      }
    #####: 1342:    }
       76: 1343:    if (! out_invert) {
        -: 1344:      {
       76: 1345:      prtext(b, endp, (int *)0);
       76: 1346:      nlines ++;
        -: 1347:      }
       76: 1348:      if (done_on_match) {
    #####: 1349:        return (nlines);
        -: 1350:      }
       76: 1351:    } else { //Added block
    #####: 1352:    if ((unsigned long )p < (unsigned long )b) {
        -: 1353:      {
    #####: 1354:      prtext(p, b, & n);
    #####: 1355:      nlines += n;
        -: 1356:      }
    #####: 1357:    }
        -: 1358:    }
       76: 1359:    p = endp;
        -: 1360:  }
        -: 1361:  while_break: /* CIL Label */ ;
        -: 1362:  }
       13: 1363:  if (out_invert) {
    #####: 1364:    if ((unsigned long )p < (unsigned long )lim) {
        -: 1365:      {
    #####: 1366:      prtext(p, lim, & n);
    #####: 1367:      nlines += n;
        -: 1368:      }
    #####: 1369:    }
    #####: 1370:  }
       13: 1371:  return (nlines);
        -: 1372:}
       13: 1373:}
        3: 1374:static int grep(int fd , char const   *file , struct stats *stats ) 
        -: 1375:{ 
        -: 1376:  int nlines ;
        -: 1377:  int i ;
        -: 1378:  int not_text ;
        -: 1379:  size_t residue ;
        -: 1380:  size_t save ;
        -: 1381:  char *beg ;
        -: 1382:  char *lim ;
        -: 1383:  char eol ;
        -: 1384:  int tmp ;
        -: 1385:  int *tmp___0 ;
        -: 1386:  int tmp___1 ;
        -: 1387:  int tmp___2 ;
        -: 1388:  int *tmp___3 ;
        -: 1389:  int *tmp___4 ;
        -: 1390:  int tmp___5 ;
        -: 1391:  int tmp___6 ;
        -: 1392:  void *tmp___7 ;
        -: 1393:  int tmp___8 ;
        -: 1394:  int tmp___9 ;
        -: 1395:  int *tmp___10 ;
        -: 1396:  int *tmp___11 ;
        -: 1397:  int tmp___12 ;
        -: 1398:  char *tmp___13 ;
        -: 1399:  int tmp___14 ;
        -: 1400:  char *tmp___15 ;
        -: 1401:
        -: 1402:  {
        -: 1403:  {
        3: 1404:  eol = (char )eolbyte;
        3: 1405:  tmp = reset(fd, file, stats);
        -: 1406:  }
        3: 1407:  if (! tmp) {
    #####: 1408:    return (0);
        -: 1409:  }
        3: 1410:  if (file) {
        3: 1411:    if ((unsigned int )directories == 1U) {
    #####: 1412:      if ((stats->stat.st_mode & 61440U) == 16384U) {
        -: 1413:        {
    #####: 1414:        tmp___1 = close(fd);
        -: 1415:        }
    #####: 1416:        if (tmp___1 != 0) {
        -: 1417:          {
    #####: 1418:          tmp___0 = __errno_location();
    #####: 1419:          error(file, *tmp___0);
        -: 1420:          }
    #####: 1421:        }
        -: 1422:        {
    #####: 1423:        tmp___2 = grepdir(file, stats);
        -: 1424:        }
    #####: 1425:        return (tmp___2 - 2);
        -: 1426:      }
    #####: 1427:    }
        3: 1428:  }
        -: 1429:  {
        3: 1430:  totalcc = (off_t )0;
        3: 1431:  lastout = (char *)0;
        3: 1432:  totalnl = (off_t )0;
        3: 1433:  pending = 0;
        3: 1434:  nlines = 0;
        3: 1435:  residue = (size_t )0;
        3: 1436:  save = (size_t )0;
        3: 1437:  tmp___5 = fillbuf(save, stats);
        -: 1438:  }
        3: 1439:  if (! tmp___5) {
        -: 1440:    {
    #####: 1441:    tmp___4 = __errno_location();
        -: 1442:    }
    #####: 1443:    if (*tmp___4 == 21) {
    #####: 1444:      if (! suppress_errors) {
        -: 1445:        {
    #####: 1446:        tmp___3 = __errno_location();
    #####: 1447:        error(filename, *tmp___3);
        -: 1448:        }
    #####: 1449:      }
    #####: 1450:    } else {
        -: 1451:      {
    #####: 1452:      tmp___3 = __errno_location();
    #####: 1453:      error(filename, *tmp___3);
        -: 1454:      }
        -: 1455:    }
    #####: 1456:    return (0);
        -: 1457:  }
        3: 1458:  if ((unsigned int )binary_files == 0U) {
        3: 1459:    if (! out_quiet) {
        3: 1460:      goto _L;
        -: 1461:    } else {
    #####: 1462:      goto _L___0;
        -: 1463:    }
    #####: 1464:  } else { //Added block
        -: 1465:  _L___0: 
    #####: 1466:  if ((unsigned int )binary_files == 2U) {
        -: 1467:    _L: 
        3: 1468:    if (eol) {
        3: 1469:      tmp___6 = '\000';
        3: 1470:    } else {
    #####: 1471:      tmp___6 = '\200';
        -: 1472:    }
        -: 1473:    {
        3: 1474:    tmp___7 = memchr((void const   *)bufbeg, tmp___6, (size_t )(buflim - bufbeg));
        -: 1475:    }
        3: 1476:    if (tmp___7) {
    #####: 1477:      tmp___8 = 1;
    #####: 1478:    } else {
        3: 1479:      tmp___8 = 0;
        -: 1480:    }
        3: 1481:  } else {
    #####: 1482:    tmp___8 = 0;
        -: 1483:  }
        -: 1484:  }
        3: 1485:  not_text = tmp___8;
        3: 1486:  if (not_text) {
    #####: 1487:    if ((unsigned int )binary_files == 2U) {
    #####: 1488:      return (0);
        -: 1489:    }
    #####: 1490:  }
        3: 1491:  done_on_match += not_text;
        3: 1492:  out_quiet += not_text;
        -: 1493:  {
       14: 1494:  while (1) {
        -: 1495:    while_continue: /* CIL Label */ ;
       14: 1496:    lastnl = bufbeg;
       14: 1497:    if (lastout) {
    #####: 1498:      lastout = bufbeg;
    #####: 1499:    }
       14: 1500:    if ((size_t )(buflim - bufbeg) == save) {
        3: 1501:      goto while_break;
        -: 1502:    }
       11: 1503:    beg = (bufbeg + save) - residue;
       11: 1504:    lim = buflim;
        -: 1505:    {
      274: 1506:    while (1) {
        -: 1507:      while_continue___0: /* CIL Label */ ;
      274: 1508:      if ((unsigned long )lim > (unsigned long )beg) {
      274: 1509:        if (! ((int )*(lim + -1) != (int )eol)) {
       11: 1510:          goto while_break___0;
        -: 1511:        }
      263: 1512:      } else {
    #####: 1513:        goto while_break___0;
        -: 1514:      }
      263: 1515:      lim --;
        -: 1516:    }
        -: 1517:    while_break___0: /* CIL Label */ ;
        -: 1518:    }
       11: 1519:    residue = (size_t )(buflim - lim);
       11: 1520:    if ((unsigned long )beg < (unsigned long )lim) {
        -: 1521:      {
       11: 1522:      tmp___9 = grepbuf(beg, lim);
       11: 1523:      nlines += tmp___9;
        -: 1524:      }
       11: 1525:      if (pending) {
        -: 1526:        {
    #####: 1527:        prpending(lim);
        -: 1528:        }
    #####: 1529:      }
       11: 1530:      if (nlines) {
       11: 1531:        if (done_on_match) {
    #####: 1532:          if (! out_invert) {
    #####: 1533:            goto finish_grep;
        -: 1534:          }
    #####: 1535:        }
       11: 1536:      }
       11: 1537:    }
       11: 1538:    i = 0;
       11: 1539:    beg = lim;
        -: 1540:    {
       11: 1541:    while (1) {
        -: 1542:      while_continue___1: /* CIL Label */ ;
       11: 1543:      if (i < out_before) {
    #####: 1544:        if ((unsigned long )beg > (unsigned long )bufbeg) {
    #####: 1545:          if (! ((unsigned long )beg != (unsigned long )lastout)) {
    #####: 1546:            goto while_break___1;
        -: 1547:          }
    #####: 1548:        } else {
    #####: 1549:          goto while_break___1;
        -: 1550:        }
    #####: 1551:      } else {
       11: 1552:        goto while_break___1;
        -: 1553:      }
    #####: 1554:      i ++;
        -: 1555:      {
    #####: 1556:      while (1) {
        -: 1557:        while_continue___2: /* CIL Label */ ;
    #####: 1558:        beg --;
    #####: 1559:        if ((unsigned long )beg > (unsigned long )bufbeg) {
    #####: 1560:          if (! ((int )*(beg + -1) != (int )eol)) {
    #####: 1561:            goto while_break___2;
        -: 1562:          }
    #####: 1563:        } else {
    #####: 1564:          goto while_break___2;
        -: 1565:        }
        -: 1566:      }
        -: 1567:      while_break___2: /* CIL Label */ ;
        -: 1568:      }
        -: 1569:    }
        -: 1570:    while_break___1: /* CIL Label */ ;
        -: 1571:    }
       11: 1572:    if ((unsigned long )beg != (unsigned long )lastout) {
       11: 1573:      lastout = (char *)0;
       11: 1574:    }
       11: 1575:    save = (size_t )((lim + residue) - beg);
       11: 1576:    totalcc = (off_t )((size_t )totalcc + ((size_t )(buflim - bufbeg) - save));
       11: 1577:    if (out_line) {
        -: 1578:      {
    #####: 1579:      nlscan(beg);
        -: 1580:      }
    #####: 1581:    }
        -: 1582:    {
       11: 1583:    tmp___12 = fillbuf(save, stats);
        -: 1584:    }
       11: 1585:    if (! tmp___12) {
        -: 1586:      {
    #####: 1587:      tmp___11 = __errno_location();
        -: 1588:      }
    #####: 1589:      if (*tmp___11 == 21) {
    #####: 1590:        if (! suppress_errors) {
        -: 1591:          {
    #####: 1592:          tmp___10 = __errno_location();
    #####: 1593:          error(filename, *tmp___10);
        -: 1594:          }
    #####: 1595:        }
    #####: 1596:      } else {
        -: 1597:        {
    #####: 1598:        tmp___10 = __errno_location();
    #####: 1599:        error(filename, *tmp___10);
        -: 1600:        }
        -: 1601:      }
    #####: 1602:      goto finish_grep;
        -: 1603:    }
        -: 1604:  }
        -: 1605:  while_break: /* CIL Label */ ;
        -: 1606:  }
        5: 1607:  if (residue) {
        -: 1608:    {
        2: 1609:    tmp___13 = buflim;
        2: 1610:    buflim ++;
        2: 1611:    *tmp___13 = eol;
        2: 1612:    tmp___14 = grepbuf((bufbeg + save) - residue, buflim);
        2: 1613:    nlines += tmp___14;
        -: 1614:    }
        2: 1615:    if (pending) {
        -: 1616:      {
    #####: 1617:      prpending(buflim);
        -: 1618:      }
    #####: 1619:    }
        2: 1620:  }
        -: 1621:  finish_grep: 
        3: 1622:  done_on_match -= not_text;
        3: 1623:  out_quiet -= not_text;
        3: 1624:  if (not_text & ~ out_quiet) {
    #####: 1625:    if (nlines != 0) {
        -: 1626:      {
    #####: 1627:      tmp___15 = gettext("Binary file %s matches\n");
    #####: 1628:      printf((char const   * __restrict  )tmp___15, filename);
        -: 1629:      }
    #####: 1630:    }
    #####: 1631:  }
        3: 1632:  return (nlines);
        -: 1633:}
        3: 1634:}
        3: 1635:static int grepfile(char const   *file , struct stats *stats ) 
        -: 1636:{ 
        -: 1637:  int desc ;
        -: 1638:  int count ;
        -: 1639:  int status ;
        -: 1640:  char *tmp ;
        -: 1641:  int *tmp___0 ;
        -: 1642:  int e ;
        -: 1643:  int *tmp___1 ;
        -: 1644:  int *tmp___2 ;
        -: 1645:  int tmp___3 ;
        -: 1646:  int tmp___4 ;
        -: 1647:  int tmp___5 ;
        -: 1648:  int *tmp___6 ;
        -: 1649:  int *tmp___7 ;
        -: 1650:  int tmp___8 ;
        -: 1651:
        -: 1652:  {
        3: 1653:  if (! file) {
        -: 1654:    {
    #####: 1655:    desc = 0;
    #####: 1656:    tmp = gettext("(standard input)");
    #####: 1657:    filename = (char const   *)tmp;
        -: 1658:    }
    #####: 1659:  } else {
        -: 1660:    {
        3: 1661:    while (1) {
        -: 1662:      while_continue: /* CIL Label */ ;
        -: 1663:      {
        3: 1664:      desc = open(file, 0);
        -: 1665:      }
        3: 1666:      if (desc < 0) {
        -: 1667:        {
    #####: 1668:        tmp___0 = __errno_location();
        -: 1669:        }
    #####: 1670:        if (! (*tmp___0 == 4)) {
    #####: 1671:          goto while_break;
        -: 1672:        }
    #####: 1673:      } else {
        3: 1674:        goto while_break;
        -: 1675:      }
    #####: 1676:      goto while_continue;
        -: 1677:    }
        -: 1678:    while_break: /* CIL Label */ ;
        -: 1679:    }
        3: 1680:    if (desc < 0) {
        -: 1681:      {
    #####: 1682:      tmp___1 = __errno_location();
    #####: 1683:      e = *tmp___1;
        -: 1684:      }
    #####: 1685:      if (e == 21) {
    #####: 1686:        if ((unsigned int )directories == 1U) {
        -: 1687:          {
    #####: 1688:          tmp___3 = stat((char const   * __restrict  )file, (struct stat * __restrict  )(& stats->stat));
        -: 1689:          }
    #####: 1690:          if (tmp___3 != 0) {
        -: 1691:            {
    #####: 1692:            tmp___2 = __errno_location();
    #####: 1693:            error(file, *tmp___2);
        -: 1694:            }
    #####: 1695:            return (1);
        -: 1696:          }
        -: 1697:          {
    #####: 1698:          tmp___4 = grepdir(file, stats);
        -: 1699:          }
    #####: 1700:          return (tmp___4);
        -: 1701:        }
    #####: 1702:      }
    #####: 1703:      if (! suppress_errors) {
    #####: 1704:        if ((unsigned int )directories == 2U) {
        -: 1705:          {
    #####: 1706:          if (e == 21) {
    #####: 1707:            goto case_21;
        -: 1708:          }
    #####: 1709:          if (e == 13) {
    #####: 1710:            goto case_13;
        -: 1711:          }
    #####: 1712:          goto switch_break;
        -: 1713:          case_21: /* CIL Label */ 
    #####: 1714:          return (1);
        -: 1715:          case_13: /* CIL Label */ 
        -: 1716:          {
    #####: 1717:          tmp___5 = stat((char const   * __restrict  )file, (struct stat * __restrict  )(& stats->stat));
        -: 1718:          }
    #####: 1719:          if (tmp___5 == 0) {
    #####: 1720:            if ((stats->stat.st_mode & 61440U) == 16384U) {
    #####: 1721:              return (1);
        -: 1722:            }
    #####: 1723:          }
    #####: 1724:          goto switch_break;
        -: 1725:          switch_break: /* CIL Label */ ;
        -: 1726:          }
    #####: 1727:        }
        -: 1728:        {
    #####: 1729:        error(file, e);
        -: 1730:        }
    #####: 1731:      }
    #####: 1732:      return (1);
        -: 1733:    }
        3: 1734:    filename = file;
        -: 1735:  }
        -: 1736:  {
        3: 1737:  count = grep(desc, file, stats);
        -: 1738:  }
        3: 1739:  if (count < 0) {
    #####: 1740:    status = count + 2;
    #####: 1741:  } else {
        3: 1742:    if (count_matches) {
    #####: 1743:      if (out_file) {
        -: 1744:        {
    #####: 1745:        printf((char const   * __restrict  )"%s%c", filename, 58 & filename_mask);
        -: 1746:        }
    #####: 1747:      }
        -: 1748:      {
    #####: 1749:      printf((char const   * __restrict  )"%d\n", count);
        -: 1750:      }
    #####: 1751:    }
        3: 1752:    status = ! count;
        3: 1753:    if (list_files == 1 - 2 * status) {
        -: 1754:      {
    #####: 1755:      printf((char const   * __restrict  )"%s%c", filename, 10 & filename_mask);
        -: 1756:      }
    #####: 1757:    }
        3: 1758:    if (file) {
        -: 1759:      {
        3: 1760:      while (1) {
        -: 1761:        while_continue___0: /* CIL Label */ ;
        -: 1762:        {
        3: 1763:        tmp___8 = close(desc);
        -: 1764:        }
        3: 1765:        if (! (tmp___8 != 0)) {
        3: 1766:          goto while_break___0;
        -: 1767:        }
        -: 1768:        {
    #####: 1769:        tmp___7 = __errno_location();
        -: 1770:        }
    #####: 1771:        if (*tmp___7 != 4) {
        -: 1772:          {
    #####: 1773:          tmp___6 = __errno_location();
    #####: 1774:          error(file, *tmp___6);
        -: 1775:          }
    #####: 1776:          goto while_break___0;
        -: 1777:        }
        -: 1778:      }
        -: 1779:      while_break___0: /* CIL Label */ ;
        -: 1780:      }
        3: 1781:    }
        -: 1782:  }
        3: 1783:  return (status);
        -: 1784:}
        3: 1785:}
    #####: 1786:static int grepdir(char const   *dir , struct stats *stats ) 
        -: 1787:{ 
        -: 1788:  int status ;
        -: 1789:  struct stats *ancestor ;
        -: 1790:  char *name_space ;
        -: 1791:  char *tmp ;
        -: 1792:  char *tmp___0 ;
        -: 1793:  int *tmp___1 ;
        -: 1794:  char *tmp___2 ;
        -: 1795:  int *tmp___3 ;
        -: 1796:  size_t dirlen ;
        -: 1797:  size_t tmp___4 ;
        -: 1798:  int needs_slash ;
        -: 1799:  int tmp___5 ;
        -: 1800:  char *file ;
        -: 1801:  char *namep ;
        -: 1802:  struct stats child ;
        -: 1803:  size_t namelen ;
        -: 1804:  size_t tmp___6 ;
        -: 1805:  int tmp___7 ;
        -: 1806:
        -: 1807:  {
    #####: 1808:  status = 1;
    #####: 1809:  ancestor = stats;
        -: 1810:  {
    #####: 1811:  while (1) {
        -: 1812:    while_continue: /* CIL Label */ ;
    #####: 1813:    ancestor = ancestor->parent;
    #####: 1814:    if (! ((unsigned long )ancestor != (unsigned long )((struct stats *)0))) {
    #####: 1815:      goto while_break;
        -: 1816:    }
    #####: 1817:    if (ancestor->stat.st_ino == stats->stat.st_ino) {
    #####: 1818:      if (ancestor->stat.st_dev == stats->stat.st_dev) {
    #####: 1819:        if (! suppress_errors) {
        -: 1820:          {
    #####: 1821:          tmp = gettext("recursive directory loop");
    #####: 1822:          tmp___0 = gettext("%s: warning: %s: %s\n");
    #####: 1823:          fprintf((FILE * __restrict  )stdout, (char const   * __restrict  )tmp___0,
    #####: 1824:                  prog, dir, tmp);
        -: 1825:          }
    #####: 1826:        }
    #####: 1827:        return (1);
        -: 1828:      }
    #####: 1829:    }
        -: 1830:  }
        -: 1831:  while_break: /* CIL Label */ ;
        -: 1832:  }
        -: 1833:  {
    #####: 1834:  name_space = savedir(dir, (off_t )((unsigned int )stats->stat.st_size));
        -: 1835:  }
    #####: 1836:  if (! name_space) {
        -: 1837:    {
    #####: 1838:    tmp___3 = __errno_location();
        -: 1839:    }
    #####: 1840:    if (*tmp___3) {
    #####: 1841:      if (! suppress_errors) {
        -: 1842:        {
    #####: 1843:        tmp___1 = __errno_location();
    #####: 1844:        error(dir, *tmp___1);
        -: 1845:        }
    #####: 1846:      }
    #####: 1847:    } else {
        -: 1848:      {
    #####: 1849:      tmp___2 = gettext("Memory exhausted");
    #####: 1850:      fatal((char const   *)tmp___2, 0);
        -: 1851:      }
        -: 1852:    }
    #####: 1853:  } else {
        -: 1854:    {
    #####: 1855:    tmp___4 = strlen(dir);
    #####: 1856:    dirlen = tmp___4;
        -: 1857:    }
    #####: 1858:    if (dirlen == 0UL) {
    #####: 1859:      tmp___5 = 0;
    #####: 1860:    } else { //Added block
    #####: 1861:    if ((int const   )*(dir + (dirlen - 1UL)) == 47) {
    #####: 1862:      tmp___5 = 0;
    #####: 1863:    } else {
    #####: 1864:      tmp___5 = 1;
        -: 1865:    }
        -: 1866:    }
    #####: 1867:    needs_slash = tmp___5;
    #####: 1868:    file = (char *)((void *)0);
    #####: 1869:    namep = name_space;
    #####: 1870:    child.parent = stats;
    #####: 1871:    out_file += ! no_filenames;
        -: 1872:    {
    #####: 1873:    while (1) {
        -: 1874:      while_continue___0: /* CIL Label */ ;
    #####: 1875:      if (! *namep) {
    #####: 1876:        goto while_break___0;
        -: 1877:      }
        -: 1878:      {
    #####: 1879:      tmp___6 = strlen((char const   *)namep);
    #####: 1880:      namelen = tmp___6;
    #####: 1881:      file = xrealloc(file, ((dirlen + 1UL) + namelen) + 1UL);
    #####: 1882:      strcpy((char * __restrict  )file, (char const   * __restrict  )dir);
    #####: 1883:      *(file + dirlen) = (char )'/';
    #####: 1884:      strcpy((char * __restrict  )((file + dirlen) + needs_slash), (char const   * __restrict  )namep);
    #####: 1885:      namep += namelen + 1UL;
    #####: 1886:      tmp___7 = grepfile((char const   *)file, & child);
    #####: 1887:      status &= tmp___7;
        -: 1888:      }
        -: 1889:    }
        -: 1890:    while_break___0: /* CIL Label */ ;
        -: 1891:    }
    #####: 1892:    out_file -= ! no_filenames;
    #####: 1893:    if (file) {
        -: 1894:      {
    #####: 1895:      free((void *)file);
        -: 1896:      }
    #####: 1897:    }
        -: 1898:    {
    #####: 1899:    free((void *)name_space);
        -: 1900:    }
        -: 1901:  }
    #####: 1902:  return (status);
        -: 1903:}
    #####: 1904:}
        -: 1905:static  __attribute__((__noreturn__)) void usage(int status ) ;
    #####: 1906:static void usage(int status ) 
        -: 1907:{ 
        -: 1908:  char *tmp ;
        -: 1909:  char *tmp___0 ;
        -: 1910:  char *tmp___1 ;
        -: 1911:  char *tmp___2 ;
        -: 1912:  char *tmp___3 ;
        -: 1913:  char *tmp___4 ;
        -: 1914:  char *tmp___5 ;
        -: 1915:  char *tmp___6 ;
        -: 1916:  char *tmp___7 ;
        -: 1917:  char *tmp___8 ;
        -: 1918:
        -: 1919:  {
    #####: 1920:  if (status != 0) {
        -: 1921:    {
    #####: 1922:    tmp = gettext("Usage: %s [OPTION]... PATTERN [FILE]...\n");
    #####: 1923:    fprintf((FILE * __restrict  )stdout, (char const   * __restrict  )tmp, prog);
    #####: 1924:    tmp___0 = gettext("Try `%s --help\' for more information.\n");
    #####: 1925:    fprintf((FILE * __restrict  )stdout, (char const   * __restrict  )tmp___0, prog);
        -: 1926:    }
    #####: 1927:  } else {
        -: 1928:    {
    #####: 1929:    tmp___1 = gettext("Usage: %s [OPTION]... PATTERN [FILE] ...\n");
    #####: 1930:    printf((char const   * __restrict  )tmp___1, prog);
    #####: 1931:    tmp___2 = gettext("Search for PATTERN in each FILE or standard input.\nExample: %s -i \'hello world\' menu.h main.c\n\nRegexp selection and interpretation:\n");
    #####: 1932:    printf((char const   * __restrict  )tmp___2, prog);
    #####: 1933:    tmp___3 = gettext("  -E, --extended-regexp     PATTERN is an extended regular expression\n  -F, --fixed-strings       PATTERN is a set of newline-separated strings\n  -G, --basic-regexp        PATTERN is a basic regular expression\n");
    #####: 1934:    printf((char const   * __restrict  )tmp___3);
    #####: 1935:    tmp___4 = gettext("  -e, --regexp=PATTERN      use PATTERN as a regular expression\n  -f, --file=FILE           obtain PATTERN from FILE\n  -i, --ignore-case         ignore case distinctions\n  -w, --word-regexp         force PATTERN to match only whole words\n  -x, --line-regexp         force PATTERN to match only whole lines\n  -z, --null-data           a data line ends in 0 byte, not newline\n");
    #####: 1936:    printf((char const   * __restrict  )tmp___4);
    #####: 1937:    tmp___5 = gettext("\nMiscellaneous:\n  -s, --no-messages         suppress error messages\n  -v, --invert-match        select non-matching lines\n  -V, --version             print version information and exit\n      --help                display this help and exit\n      --mmap                use memory-mapped input if possible\n");
    #####: 1938:    printf((char const   * __restrict  )tmp___5);
    #####: 1939:    tmp___6 = gettext("\nOutput control:\n  -b, --byte-offset         print the byte offset with output lines\n  -n, --line-number         print line number with output lines\n  -H, --with-filename       print the filename for each match\n  -h, --no-filename         suppress the prefixing filename on output\n  -q, --quiet, --silent     suppress all normal output\n      --binary-files=TYPE   assume that binary files are TYPE\n                            TYPE is \'binary\', \'text\', or \'without-match\'.\n  -a, --text                equivalent to --binary-files=text\n  -I                        equivalent to --binary-files=without-match\n  -d, --directories=ACTION  how to handle directories\n                            ACTION is \'read\', \'recurse\', or \'skip\'.\n  -r, --recursive           equivalent to --directories=recurse.\n  -L, --files-without-match only print FILE names containing no match\n  -l, --files-with-matches  only print FILE names containing matches\n  -c, --count               only print a count of matching lines per FILE\n  -Z, --null                print 0 byte after FILE name\n");
    #####: 1940:    printf((char const   * __restrict  )tmp___6);
    #####: 1941:    tmp___7 = gettext("\nContext control:\n  -B, --before-context=NUM  print NUM lines of leading context\n  -A, --after-context=NUM   print NUM lines of trailing context\n  -C, --context[=NUM]       print NUM (default 2) lines of output context\n                            unless overridden by -A or -B\n  -NUM                      same as --context=NUM\n  -U, --binary              do not strip CR characters at EOL (MSDOS)\n  -u, --unix-byte-offsets   report offsets as if CRs were not there (MSDOS)\n\n`egrep\' means `grep -E\'.  `fgrep\' means `grep -F\'.\nWith no FILE, or when FILE is -, read standard input.  If less than\ntwo FILEs given, assume -h.  Exit status is 0 if match, 1 if no match,\nand 2 if trouble.\n");
    #####: 1942:    printf((char const   * __restrict  )tmp___7);
    #####: 1943:    tmp___8 = gettext("\nReport bugs to <bug-gnu-utils@gnu.org>.\n");
    #####: 1944:    printf((char const   * __restrict  )tmp___8);
        -: 1945:    }
        -: 1946:  }
        -: 1947:  {
    #####: 1948:  exit(status);
        -: 1949:  }
        -: 1950:}
        -: 1951:}
        1: 1952:static void setmatcher(char const   *m ) 
        -: 1953:{ 
        -: 1954:  char *tmp ;
        -: 1955:  int tmp___0 ;
        -: 1956:
        -: 1957:  {
        1: 1958:  if (matcher) {
        -: 1959:    {
    #####: 1960:    tmp___0 = strcmp(matcher, m);
        -: 1961:    }
    #####: 1962:    if (tmp___0 != 0) {
        -: 1963:      {
    #####: 1964:      tmp = gettext("conflicting matchers specified");
    #####: 1965:      fatal((char const   *)tmp, 0);
        -: 1966:      }
        -: 1967:    }
    #####: 1968:  }
        1: 1969:  matcher = m;
        1: 1970:  return;
        -: 1971:}
        -: 1972:}
        1: 1973:static int install_matcher(char const   *name ) 
        -: 1974:{ 
        -: 1975:  int i ;
        -: 1976:  int tmp ;
        -: 1977:
        -: 1978:  {
        1: 1979:  i = 0;
        -: 1980:  {
        3: 1981:  while (1) {
        -: 1982:    while_continue: /* CIL Label */ ;
        3: 1983:    if (! matchers[i].name) {
    #####: 1984:      goto while_break;
        -: 1985:    }
        -: 1986:    {
        3: 1987:    tmp = strcmp(name, (char const   *)matchers[i].name);
        -: 1988:    }
        3: 1989:    if (tmp == 0) {
        1: 1990:      compile = matchers[i].compile;
        1: 1991:      execute = matchers[i].execute;
        1: 1992:      return (1);
        -: 1993:    }
        2: 1994:    i ++;
        -: 1995:  }
        -: 1996:  while_break: /* CIL Label */ ;
        -: 1997:  }
    #####: 1998:  return (0);
        -: 1999:}
        1: 2000:}
    #####: 2001:static int prepend_args(char const   *options , char *buf , char **argv ) 
        -: 2002:{ 
        -: 2003:  char const   *o ;
        -: 2004:  char *b ;
        -: 2005:  int n ;
        -: 2006:  unsigned short const   **tmp ;
        -: 2007:  char const   *tmp___0 ;
        -: 2008:  char *tmp___1 ;
        -: 2009:  char tmp___2 ;
        -: 2010:  char const   *tmp___3 ;
        -: 2011:  unsigned short const   **tmp___4 ;
        -: 2012:  char *tmp___5 ;
        -: 2013:
        -: 2014:  {
    #####: 2015:  o = options;
    #####: 2016:  b = buf;
    #####: 2017:  n = 0;
        -: 2018:  {
    #####: 2019:  while (1) {
        -: 2020:    while_continue: /* CIL Label */ ;
        -: 2021:    {
    #####: 2022:    while (1) {
        -: 2023:      while_continue___0: /* CIL Label */ ;
        -: 2024:      {
    #####: 2025:      tmp = __ctype_b_loc();
        -: 2026:      }
    #####: 2027:      if (! ((int const   )*(*tmp + (int )((unsigned char )*o)) & 8192)) {
    #####: 2028:        goto while_break___0;
        -: 2029:      }
    #####: 2030:      o ++;
        -: 2031:    }
        -: 2032:    while_break___0: /* CIL Label */ ;
        -: 2033:    }
    #####: 2034:    if (! *o) {
    #####: 2035:      return (n);
        -: 2036:    }
    #####: 2037:    if (argv) {
    #####: 2038:      *(argv + n) = b;
    #####: 2039:    }
    #####: 2040:    n ++;
        -: 2041:    {
    #####: 2042:    while (1) {
        -: 2043:      while_continue___1: /* CIL Label */ ;
    #####: 2044:      tmp___1 = b;
    #####: 2045:      b ++;
    #####: 2046:      tmp___3 = o;
    #####: 2047:      o ++;
    #####: 2048:      tmp___2 = (char )*tmp___3;
    #####: 2049:      *tmp___1 = tmp___2;
    #####: 2050:      if ((int )tmp___2 == 92) {
    #####: 2051:        if (*o) {
    #####: 2052:          tmp___0 = o;
    #####: 2053:          o ++;
    #####: 2054:          *(b + -1) = (char )*tmp___0;
    #####: 2055:        }
    #####: 2056:      }
    #####: 2057:      if (*o) {
        -: 2058:        {
    #####: 2059:        tmp___4 = __ctype_b_loc();
        -: 2060:        }
    #####: 2061:        if ((int const   )*(*tmp___4 + (int )((unsigned char )*o)) & 8192) {
    #####: 2062:          goto while_break___1;
        -: 2063:        }
    #####: 2064:      } else {
    #####: 2065:        goto while_break___1;
        -: 2066:      }
        -: 2067:    }
        -: 2068:    while_break___1: /* CIL Label */ ;
        -: 2069:    }
    #####: 2070:    tmp___5 = b;
    #####: 2071:    b ++;
    #####: 2072:    *tmp___5 = (char )'\000';
        -: 2073:  }
        -: 2074:  while_break: /* CIL Label */ ;
        -: 2075:  }
        -: 2076:}
        -: 2077:}
        1: 2078:static void prepend_default_options(char const   *options , int *pargc , char ***pargv ) 
        -: 2079:{ 
        -: 2080:  char *buf ;
        -: 2081:  size_t tmp ;
        -: 2082:  char *tmp___0 ;
        -: 2083:  int prepended ;
        -: 2084:  int tmp___1 ;
        -: 2085:  int argc ;
        -: 2086:  char * const  *argv ;
        -: 2087:  char **pp ;
        -: 2088:  char *tmp___2 ;
        -: 2089:  char **tmp___3 ;
        -: 2090:  char * const  *tmp___4 ;
        -: 2091:  int tmp___5 ;
        -: 2092:  char **tmp___6 ;
        -: 2093:  char *tmp___7 ;
        -: 2094:  char * const  *tmp___8 ;
        -: 2095:
        -: 2096:  {
        1: 2097:  if (options) {
        -: 2098:    {
    #####: 2099:    tmp = strlen(options);
    #####: 2100:    tmp___0 = xmalloc(tmp + 1UL);
    #####: 2101:    buf = tmp___0;
    #####: 2102:    tmp___1 = prepend_args(options, buf, (char **)((void *)0));
    #####: 2103:    prepended = tmp___1;
    #####: 2104:    argc = *pargc;
    #####: 2105:    argv = (char * const  *)*pargv;
    #####: 2106:    tmp___2 = xmalloc((unsigned long )((prepended + argc) + 1) * sizeof(*pp));
    #####: 2107:    pp = (char **)tmp___2;
    #####: 2108:    *pargc = prepended + argc;
    #####: 2109:    *pargv = pp;
    #####: 2110:    tmp___3 = pp;
    #####: 2111:    pp ++;
    #####: 2112:    tmp___4 = argv;
    #####: 2113:    argv ++;
    #####: 2114:    *tmp___3 = (char *)*tmp___4;
    #####: 2115:    tmp___5 = prepend_args(options, buf, pp);
    #####: 2116:    pp += tmp___5;
        -: 2117:    }
        -: 2118:    {
    #####: 2119:    while (1) {
        -: 2120:      while_continue: /* CIL Label */ ;
    #####: 2121:      tmp___6 = pp;
    #####: 2122:      pp ++;
    #####: 2123:      tmp___8 = argv;
    #####: 2124:      argv ++;
    #####: 2125:      tmp___7 = (char *)*tmp___8;
    #####: 2126:      *tmp___6 = tmp___7;
    #####: 2127:      if (! tmp___7) {
    #####: 2128:        goto while_break;
        -: 2129:      }
    #####: 2130:      goto while_continue;
        -: 2131:    }
        -: 2132:    while_break: /* CIL Label */ ;
        -: 2133:    }
    #####: 2134:  }
        1: 2135:  return;
        -: 2136:}
        -: 2137:}
        1: 2138:int main(int argc , char **argv ) 
        -: 2139:{ 
        -: 2140:  char *keys ;
        -: 2141:  size_t keycc ;
        -: 2142:  size_t oldcc ;
        -: 2143:  size_t keyalloc ;
        -: 2144:  int with_filenames ;
        -: 2145:  int opt ;
        -: 2146:  int cc ;
        -: 2147:  int status ;
        -: 2148:  int default_context ;
        -: 2149:  unsigned int digit_args_val ;
        -: 2150:  FILE *fp ;
        -: 2151:  char *tmp ;
        -: 2152:  char *tmp___0 ;
        -: 2153:  char *tmp___1 ;
        -: 2154:  char *tmp___2 ;
        -: 2155:  int tmp___3 ;
        -: 2156:  char *tmp___4 ;
        -: 2157:  int tmp___5 ;
        -: 2158:  char *tmp___6 ;
        -: 2159:  int tmp___7 ;
        -: 2160:  char *tmp___8 ;
        -: 2161:  int tmp___9 ;
        -: 2162:  int tmp___10 ;
        -: 2163:  int tmp___11 ;
        -: 2164:  size_t tmp___12 ;
        -: 2165:  size_t tmp___13 ;
        -: 2166:  FILE *tmp___15 ;
        -: 2167:  int tmp___16 ;
        -: 2168:  int *tmp___17 ;
        -: 2169:  int tmp___18 ;
        -: 2170:  size_t tmp___19 ;
        -: 2171:  size_t tmp___20 ;
        -: 2172:  char *tmp___21 ;
        -: 2173:  int tmp___22 ;
        -: 2174:  int tmp___23 ;
        -: 2175:  int tmp___24 ;
        -: 2176:  char *tmp___25 ;
        -: 2177:  char *tmp___26 ;
        -: 2178:  char *tmp___27 ;
        -: 2179:  int tmp___28 ;
        -: 2180:  int tmp___29 ;
        -: 2181:  int tmp___30 ;
        -: 2182:  char *file ;
        -: 2183:  char *tmp___32 ;
        -: 2184:  int tmp___33 ;
        -: 2185:  int tmp___34 ;
        -: 2186:  int *tmp___35 ;
        -: 2187:  char *tmp___36 ;
        -: 2188:  int tmp___37 ;
        -: 2189:  int tmp___38 ;
        -: 2190:
        -: 2191:  {
        1: 2192:  *(argv + 0) = (char *)"target5";
        1: 2193:  prog = *(argv + 0);
        1: 2194:  if (prog) {
        -: 2195:    {
        1: 2196:    tmp___0 = strrchr((char const   *)prog, '/');
        -: 2197:    }
        1: 2198:    if (tmp___0) {
        -: 2199:      {
    #####: 2200:      tmp = strrchr((char const   *)prog, '/');
    #####: 2201:      prog = tmp + 1;
        -: 2202:      }
    #####: 2203:    }
        1: 2204:  }
        -: 2205:  {
        1: 2206:  keys = (char *)((void *)0);
        1: 2207:  keycc = (size_t )0;
        1: 2208:  with_filenames = 0;
        1: 2209:  eolbyte = (unsigned char )'\n';
        1: 2210:  filename_mask = ~ 0;
        1: 2211:  out_before = -1;
        1: 2212:  out_after = out_before;
        1: 2213:  default_context = 0;
        1: 2214:  digit_args_val = 0U;
        1: 2215:  setlocale(6, "");
        1: 2216:  bindtextdomain("grep", "/nfs/spectre/u4/jin/research/experiments/grep/docs/grep_2.4.2/lib/locale");
        1: 2217:  textdomain("grep");
        1: 2218:  tmp___1 = getenv("GREP_OPTIONS");
        1: 2219:  prepend_default_options((char const   *)tmp___1, & argc, & argv);
        -: 2220:  }
        -: 2221:  {
        2: 2222:  while (1) {
        -: 2223:    while_continue: /* CIL Label */ ;
        -: 2224:    {
        2: 2225:    opt = getopt_long(argc, (char * const  *)argv, short_options, (struct option  const  *)(long_options),
        -: 2226:                      (int *)((void *)0));
        -: 2227:    }
        2: 2228:    if (! (opt != -1)) {
        1: 2229:      goto while_break;
        -: 2230:    }
        -: 2231:    {
        1: 2232:    if (opt == 48) {
    #####: 2233:      goto case_48;
        -: 2234:    }
        1: 2235:    if (opt == 49) {
    #####: 2236:      goto case_48;
        -: 2237:    }
        1: 2238:    if (opt == 50) {
    #####: 2239:      goto case_48;
        -: 2240:    }
        1: 2241:    if (opt == 51) {
    #####: 2242:      goto case_48;
        -: 2243:    }
        1: 2244:    if (opt == 52) {
    #####: 2245:      goto case_48;
        -: 2246:    }
        1: 2247:    if (opt == 53) {
    #####: 2248:      goto case_48;
        -: 2249:    }
        1: 2250:    if (opt == 54) {
    #####: 2251:      goto case_48;
        -: 2252:    }
        1: 2253:    if (opt == 55) {
    #####: 2254:      goto case_48;
        -: 2255:    }
        1: 2256:    if (opt == 56) {
    #####: 2257:      goto case_48;
        -: 2258:    }
        1: 2259:    if (opt == 57) {
    #####: 2260:      goto case_48;
        -: 2261:    }
        1: 2262:    if (opt == 65) {
    #####: 2263:      goto case_65;
        -: 2264:    }
        1: 2265:    if (opt == 66) {
    #####: 2266:      goto case_66;
        -: 2267:    }
        1: 2268:    if (opt == 67) {
    #####: 2269:      goto case_67;
        -: 2270:    }
        1: 2271:    if (opt == 69) {
        1: 2272:      goto case_69;
        -: 2273:    }
    #####: 2274:    if (opt == 70) {
    #####: 2275:      goto case_70;
        -: 2276:    }
    #####: 2277:    if (opt == 71) {
    #####: 2278:      goto case_71;
        -: 2279:    }
    #####: 2280:    if (opt == 72) {
    #####: 2281:      goto case_72;
        -: 2282:    }
    #####: 2283:    if (opt == 73) {
    #####: 2284:      goto case_73;
        -: 2285:    }
    #####: 2286:    if (opt == 85) {
    #####: 2287:      goto case_85;
        -: 2288:    }
    #####: 2289:    if (opt == 117) {
    #####: 2290:      goto case_117;
        -: 2291:    }
    #####: 2292:    if (opt == 86) {
    #####: 2293:      goto case_86;
        -: 2294:    }
    #####: 2295:    if (opt == 88) {
    #####: 2296:      goto case_88;
        -: 2297:    }
    #####: 2298:    if (opt == 97) {
    #####: 2299:      goto case_97;
        -: 2300:    }
    #####: 2301:    if (opt == 98) {
    #####: 2302:      goto case_98;
        -: 2303:    }
    #####: 2304:    if (opt == 99) {
    #####: 2305:      goto case_99;
        -: 2306:    }
    #####: 2307:    if (opt == 100) {
    #####: 2308:      goto case_100;
        -: 2309:    }
    #####: 2310:    if (opt == 101) {
    #####: 2311:      goto case_101;
        -: 2312:    }
    #####: 2313:    if (opt == 102) {
    #####: 2314:      goto case_102;
        -: 2315:    }
    #####: 2316:    if (opt == 104) {
    #####: 2317:      goto case_104;
        -: 2318:    }
    #####: 2319:    if (opt == 105) {
    #####: 2320:      goto case_105;
        -: 2321:    }
    #####: 2322:    if (opt == 121) {
    #####: 2323:      goto case_105;
        -: 2324:    }
    #####: 2325:    if (opt == 76) {
    #####: 2326:      goto case_76;
        -: 2327:    }
    #####: 2328:    if (opt == 108) {
    #####: 2329:      goto case_108;
        -: 2330:    }
    #####: 2331:    if (opt == 110) {
    #####: 2332:      goto case_110;
        -: 2333:    }
    #####: 2334:    if (opt == 113) {
    #####: 2335:      goto case_113;
        -: 2336:    }
    #####: 2337:    if (opt == 114) {
    #####: 2338:      goto case_114;
        -: 2339:    }
    #####: 2340:    if (opt == 115) {
    #####: 2341:      goto case_115;
        -: 2342:    }
    #####: 2343:    if (opt == 118) {
    #####: 2344:      goto case_118;
        -: 2345:    }
    #####: 2346:    if (opt == 119) {
    #####: 2347:      goto case_119;
        -: 2348:    }
    #####: 2349:    if (opt == 120) {
    #####: 2350:      goto case_120;
        -: 2351:    }
    #####: 2352:    if (opt == 90) {
    #####: 2353:      goto case_90;
        -: 2354:    }
    #####: 2355:    if (opt == 122) {
    #####: 2356:      goto case_122;
        -: 2357:    }
    #####: 2358:    if (opt == 128) {
    #####: 2359:      goto case_128;
        -: 2360:    }
    #####: 2361:    if (opt == 0) {
    #####: 2362:      goto case_0;
        -: 2363:    }
    #####: 2364:    goto switch_default;
        -: 2365:    case_48: /* CIL Label */ 
        -: 2366:    case_49: /* CIL Label */ 
        -: 2367:    case_50: /* CIL Label */ 
        -: 2368:    case_51: /* CIL Label */ 
        -: 2369:    case_52: /* CIL Label */ 
        -: 2370:    case_53: /* CIL Label */ 
        -: 2371:    case_54: /* CIL Label */ 
        -: 2372:    case_55: /* CIL Label */ 
        -: 2373:    case_56: /* CIL Label */ 
        -: 2374:    case_57: /* CIL Label */ 
    #####: 2375:    digit_args_val = (10U * digit_args_val + (unsigned int )opt) - 48U;
    #####: 2376:    default_context = (int )digit_args_val;
    #####: 2377:    goto switch_break;
        -: 2378:    case_65: /* CIL Label */ 
    #####: 2379:    if (optarg) {
        -: 2380:      {
    #####: 2381:      tmp___3 = ck_atoi((char const   *)optarg, & out_after);
        -: 2382:      }
    #####: 2383:      if (tmp___3) {
        -: 2384:        {
    #####: 2385:        tmp___2 = gettext("invalid context length argument");
    #####: 2386:        fatal((char const   *)tmp___2, 0);
        -: 2387:        }
        -: 2388:      }
    #####: 2389:    }
    #####: 2390:    goto switch_break;
        -: 2391:    case_66: /* CIL Label */ 
    #####: 2392:    if (optarg) {
        -: 2393:      {
    #####: 2394:      tmp___5 = ck_atoi((char const   *)optarg, & out_before);
        -: 2395:      }
    #####: 2396:      if (tmp___5) {
        -: 2397:        {
    #####: 2398:        tmp___4 = gettext("invalid context length argument");
    #####: 2399:        fatal((char const   *)tmp___4, 0);
        -: 2400:        }
        -: 2401:      }
    #####: 2402:    }
    #####: 2403:    goto switch_break;
        -: 2404:    case_67: /* CIL Label */ 
    #####: 2405:    if (optarg) {
        -: 2406:      {
    #####: 2407:      tmp___7 = ck_atoi((char const   *)optarg, & default_context);
        -: 2408:      }
    #####: 2409:      if (tmp___7) {
        -: 2410:        {
    #####: 2411:        tmp___6 = gettext("invalid context length argument");
    #####: 2412:        fatal((char const   *)tmp___6, 0);
        -: 2413:        }
        -: 2414:      }
    #####: 2415:    } else {
    #####: 2416:      default_context = 2;
        -: 2417:    }
    #####: 2418:    goto switch_break;
        -: 2419:    case_69: /* CIL Label */ 
        -: 2420:    {
        1: 2421:    setmatcher("egrep");
        -: 2422:    }
        1: 2423:    goto switch_break;
        -: 2424:    case_70: /* CIL Label */ 
        -: 2425:    {
    #####: 2426:    setmatcher("fgrep");
        -: 2427:    }
    #####: 2428:    goto switch_break;
        -: 2429:    case_71: /* CIL Label */ 
        -: 2430:    {
    #####: 2431:    setmatcher("grep");
        -: 2432:    }
    #####: 2433:    goto switch_break;
        -: 2434:    case_72: /* CIL Label */ 
    #####: 2435:    with_filenames = 1;
    #####: 2436:    goto switch_break;
        -: 2437:    case_73: /* CIL Label */ 
    #####: 2438:    binary_files = (enum __anonenum_binary_files_31 )2;
    #####: 2439:    goto switch_break;
        -: 2440:    case_85: /* CIL Label */ 
    #####: 2441:    goto switch_break;
        -: 2442:    case_117: /* CIL Label */ 
    #####: 2443:    goto switch_break;
        -: 2444:    case_86: /* CIL Label */ 
    #####: 2445:    show_version = 1;
    #####: 2446:    goto switch_break;
        -: 2447:    case_88: /* CIL Label */ 
        -: 2448:    {
    #####: 2449:    setmatcher((char const   *)optarg);
        -: 2450:    }
    #####: 2451:    goto switch_break;
        -: 2452:    case_97: /* CIL Label */ 
    #####: 2453:    binary_files = (enum __anonenum_binary_files_31 )1;
    #####: 2454:    goto switch_break;
        -: 2455:    case_98: /* CIL Label */ 
    #####: 2456:    out_byte = 1;
    #####: 2457:    goto switch_break;
        -: 2458:    case_99: /* CIL Label */ 
    #####: 2459:    out_quiet = 1;
    #####: 2460:    count_matches = 1;
    #####: 2461:    goto switch_break;
        -: 2462:    case_100: /* CIL Label */ 
        -: 2463:    {
    #####: 2464:    tmp___11 = strcmp((char const   *)optarg, "read");
        -: 2465:    }
    #####: 2466:    if (tmp___11 == 0) {
    #####: 2467:      directories = (enum __anonenum_directories_30 )0;
    #####: 2468:    } else {
        -: 2469:      {
    #####: 2470:      tmp___10 = strcmp((char const   *)optarg, "skip");
        -: 2471:      }
    #####: 2472:      if (tmp___10 == 0) {
    #####: 2473:        directories = (enum __anonenum_directories_30 )2;
    #####: 2474:      } else {
        -: 2475:        {
    #####: 2476:        tmp___9 = strcmp((char const   *)optarg, "recurse");
        -: 2477:        }
    #####: 2478:        if (tmp___9 == 0) {
    #####: 2479:          directories = (enum __anonenum_directories_30 )1;
    #####: 2480:        } else {
        -: 2481:          {
    #####: 2482:          tmp___8 = gettext("unknown directories method");
    #####: 2483:          fatal((char const   *)tmp___8, 0);
        -: 2484:          }
        -: 2485:        }
        -: 2486:      }
        -: 2487:    }
    #####: 2488:    goto switch_break;
        -: 2489:    case_101: /* CIL Label */ 
        -: 2490:    {
    #####: 2491:    tmp___12 = strlen((char const   *)optarg);
    #####: 2492:    cc = (int )tmp___12;
    #####: 2493:    keys = xrealloc(keys, (keycc + (size_t )cc) + 1UL);
    #####: 2494:    strcpy((char * __restrict  )(keys + keycc), (char const   * __restrict  )optarg);
    #####: 2495:    keycc += (size_t )cc;
    #####: 2496:    tmp___13 = keycc;
    #####: 2497:    keycc ++;
    #####: 2498:    *(keys + tmp___13) = (char )'\n';
        -: 2499:    }
    #####: 2500:    goto switch_break;
        -: 2501:    case_102: /* CIL Label */ 
        -: 2502:    {
    #####: 2503:    tmp___16 = strcmp((char const   *)optarg, "-");
        -: 2504:    }
    #####: 2505:    if (tmp___16 != 0) {
        -: 2506:      {
    #####: 2507:      tmp___15 = fopen((char const   * __restrict  )optarg, (char const   * __restrict  )"r");
    #####: 2508:      fp = tmp___15;
        -: 2509:      }
    #####: 2510:    } else {
    #####: 2511:      fp = stdin;
        -: 2512:    }
    #####: 2513:    if (! fp) {
        -: 2514:      {
    #####: 2515:      tmp___17 = __errno_location();
    #####: 2516:      fatal((char const   *)optarg, *tmp___17);
        -: 2517:      }
        -: 2518:    }
    #####: 2519:    keyalloc = (size_t )1;
        -: 2520:    {
    #####: 2521:    while (1) {
        -: 2522:      while_continue___0: /* CIL Label */ ;
    #####: 2523:      if (! (keyalloc <= keycc + 1UL)) {
    #####: 2524:        goto while_break___0;
        -: 2525:      }
    #####: 2526:      keyalloc *= 2UL;
        -: 2527:    }
        -: 2528:    while_break___0: /* CIL Label */ ;
        -: 2529:    }
        -: 2530:    {
    #####: 2531:    keys = xrealloc(keys, keyalloc);
    #####: 2532:    oldcc = keycc;
        -: 2533:    }
        -: 2534:    {
    #####: 2535:    while (1) {
        -: 2536:      while_continue___1: /* CIL Label */ ;
        -: 2537:      {
    #####: 2538:      tmp___18 = feof(fp);
        -: 2539:      }
    #####: 2540:      if (tmp___18) {
    #####: 2541:        goto while_break___1;
        -: 2542:      } else {
        -: 2543:        {
    #####: 2544:        tmp___19 = fread((void * __restrict  )(keys + keycc), (size_t )1, (keyalloc - 1UL) - keycc,
    #####: 2545:                         (FILE * __restrict  )fp);
    #####: 2546:        cc = (int )tmp___19;
        -: 2547:        }
    #####: 2548:        if (! (cc > 0)) {
    #####: 2549:          goto while_break___1;
        -: 2550:        }
        -: 2551:      }
    #####: 2552:      keycc += (size_t )cc;
    #####: 2553:      if (keycc == keyalloc - 1UL) {
        -: 2554:        {
    #####: 2555:        keyalloc *= 2UL;
    #####: 2556:        keys = xrealloc(keys, keyalloc);
        -: 2557:        }
    #####: 2558:      }
        -: 2559:    }
        -: 2560:    while_break___1: /* CIL Label */ ;
        -: 2561:    }
    #####: 2562:    if ((unsigned long )fp != (unsigned long )stdin) {
        -: 2563:      {
    #####: 2564:      fclose(fp);
        -: 2565:      }
    #####: 2566:    }
    #####: 2567:    if (oldcc != keycc) {
    #####: 2568:      if ((int )*(keys + (keycc - 1UL)) != 10) {
    #####: 2569:        tmp___20 = keycc;
    #####: 2570:        keycc ++;
    #####: 2571:        *(keys + tmp___20) = (char )'\n';
    #####: 2572:      }
    #####: 2573:    }
    #####: 2574:    goto switch_break;
        -: 2575:    case_104: /* CIL Label */ 
    #####: 2576:    no_filenames = 1;
    #####: 2577:    goto switch_break;
        -: 2578:    case_105: /* CIL Label */ 
        -: 2579:    case_121: /* CIL Label */ 
    #####: 2580:    match_icase = 1;
    #####: 2581:    goto switch_break;
        -: 2582:    case_76: /* CIL Label */ 
    #####: 2583:    out_quiet = 1;
    #####: 2584:    list_files = -1;
    #####: 2585:    done_on_match = 1;
    #####: 2586:    goto switch_break;
        -: 2587:    case_108: /* CIL Label */ 
    #####: 2588:    out_quiet = 1;
    #####: 2589:    list_files = 1;
    #####: 2590:    done_on_match = 1;
    #####: 2591:    goto switch_break;
        -: 2592:    case_110: /* CIL Label */ 
    #####: 2593:    out_line = 1;
    #####: 2594:    goto switch_break;
        -: 2595:    case_113: /* CIL Label */ 
    #####: 2596:    done_on_match = 1;
    #####: 2597:    out_quiet = 1;
    #####: 2598:    goto switch_break;
        -: 2599:    case_114: /* CIL Label */ 
    #####: 2600:    directories = (enum __anonenum_directories_30 )1;
    #####: 2601:    goto switch_break;
        -: 2602:    case_115: /* CIL Label */ 
    #####: 2603:    suppress_errors = 1;
    #####: 2604:    goto switch_break;
        -: 2605:    case_118: /* CIL Label */ 
    #####: 2606:    out_invert = 1;
    #####: 2607:    goto switch_break;
        -: 2608:    case_119: /* CIL Label */ 
    #####: 2609:    match_words = 1;
    #####: 2610:    goto switch_break;
        -: 2611:    case_120: /* CIL Label */ 
    #####: 2612:    match_lines = 1;
    #####: 2613:    goto switch_break;
        -: 2614:    case_90: /* CIL Label */ 
    #####: 2615:    filename_mask = 0;
    #####: 2616:    goto switch_break;
        -: 2617:    case_122: /* CIL Label */ 
    #####: 2618:    eolbyte = (unsigned char )'\000';
    #####: 2619:    goto switch_break;
        -: 2620:    case_128: /* CIL Label */ 
        -: 2621:    {
    #####: 2622:    tmp___24 = strcmp((char const   *)optarg, "binary");
        -: 2623:    }
    #####: 2624:    if (tmp___24 == 0) {
    #####: 2625:      binary_files = (enum __anonenum_binary_files_31 )0;
    #####: 2626:    } else {
        -: 2627:      {
    #####: 2628:      tmp___23 = strcmp((char const   *)optarg, "text");
        -: 2629:      }
    #####: 2630:      if (tmp___23 == 0) {
    #####: 2631:        binary_files = (enum __anonenum_binary_files_31 )1;
    #####: 2632:      } else {
        -: 2633:        {
    #####: 2634:        tmp___22 = strcmp((char const   *)optarg, "without-match");
        -: 2635:        }
    #####: 2636:        if (tmp___22 == 0) {
    #####: 2637:          binary_files = (enum __anonenum_binary_files_31 )2;
    #####: 2638:        } else {
        -: 2639:          {
    #####: 2640:          tmp___21 = gettext("unknown binary-files type");
    #####: 2641:          fatal((char const   *)tmp___21, 0);
        -: 2642:          }
        -: 2643:        }
        -: 2644:      }
        -: 2645:    }
    #####: 2646:    goto switch_break;
        -: 2647:    case_0: /* CIL Label */ 
    #####: 2648:    goto switch_break;
        -: 2649:    switch_default: /* CIL Label */ 
        -: 2650:    {
    #####: 2651:    usage(2);
        -: 2652:    }
        -: 2653:    goto switch_break;
        -: 2654:    switch_break: /* CIL Label */ ;
        -: 2655:    }
        -: 2656:  }
        -: 2657:  while_break: /* CIL Label */ ;
        -: 2658:  }
        1: 2659:  if (out_after < 0) {
        1: 2660:    out_after = default_context;
        1: 2661:  }
        1: 2662:  if (out_before < 0) {
        1: 2663:    out_before = default_context;
        1: 2664:  }
        1: 2665:  if (! matcher) {
    #####: 2666:    matcher = "grep";
    #####: 2667:  }
        1: 2668:  if (show_version) {
        -: 2669:    {
    #####: 2670:    tmp___25 = gettext("%s (GNU grep) %s\n");
    #####: 2671:    printf((char const   * __restrict  )tmp___25, matcher, "2.4.2");
    #####: 2672:    printf((char const   * __restrict  )"\n");
    #####: 2673:    tmp___26 = gettext("Copyright 1988, 1992-1999, 2000 Free Software Foundation, Inc.\n");
    #####: 2674:    printf((char const   * __restrict  )tmp___26);
    #####: 2675:    tmp___27 = gettext("This is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n");
    #####: 2676:    printf((char const   * __restrict  )tmp___27);
    #####: 2677:    printf((char const   * __restrict  )"\n");
    #####: 2678:    exit(0);
        -: 2679:    }
        -: 2680:  }
        1: 2681:  if (show_help) {
        -: 2682:    {
    #####: 2683:    usage(0);
        -: 2684:    }
        -: 2685:  }
        1: 2686:  if (keys) {
    #####: 2687:    if (keycc == 0UL) {
    #####: 2688:      out_invert ^= 1;
    #####: 2689:    } else {
    #####: 2690:      keycc --;
        -: 2691:    }
    #####: 2692:  } else { //Added block
        1: 2693:  if (optind < argc) {
        -: 2694:    {
        1: 2695:    tmp___28 = optind;
        1: 2696:    optind ++;
        1: 2697:    keys = *(argv + tmp___28);
        1: 2698:    keycc = strlen((char const   *)keys);
        -: 2699:    }
        1: 2700:  } else {
        -: 2701:    {
    #####: 2702:    usage(2);
        -: 2703:    }
        -: 2704:  }
        -: 2705:  }
        -: 2706:  {
        1: 2707:  tmp___29 = install_matcher(matcher);
        -: 2708:  }
        1: 2709:  if (! tmp___29) {
        -: 2710:    {
    #####: 2711:    tmp___30 = install_matcher("default");
        -: 2712:    }
    #####: 2713:    if (! tmp___30) {
        -: 2714:      {
    #####: 2715:      abort();
        -: 2716:      }
        -: 2717:    }
    #####: 2718:  }
        -: 2719:  {
        1: 2720:  (*compile)(keys, keycc);
        -: 2721:  }
        1: 2722:  if (argc - optind > 1) {
        1: 2723:    if (! no_filenames) {
        1: 2724:      out_file = 1;
        1: 2725:    } else {
    #####: 2726:      goto _L;
        -: 2727:    }
        1: 2728:  } else { //Added block
        -: 2729:  _L: 
    #####: 2730:  if (with_filenames) {
    #####: 2731:    out_file = 1;
    #####: 2732:  }
        -: 2733:  }
        1: 2734:  if (optind < argc) {
        1: 2735:    status = 1;
        -: 2736:    {
        3: 2737:    while (1) {
        -: 2738:      while_continue___2: /* CIL Label */ ;
        -: 2739:      {
        3: 2740:      file = *(argv + optind);
        3: 2741:      tmp___33 = strcmp((char const   *)file, "-");
        -: 2742:      }
        3: 2743:      if (tmp___33 == 0) {
    #####: 2744:        tmp___32 = (char *)((void *)0);
    #####: 2745:      } else {
        3: 2746:        tmp___32 = file;
        -: 2747:      }
        -: 2748:      {
        3: 2749:      tmp___34 = grepfile((char const   *)tmp___32, & stats_base);
        3: 2750:      status &= tmp___34;
        3: 2751:      optind ++;
        -: 2752:      }
        3: 2753:      if (! (optind < argc)) {
        1: 2754:        goto while_break___2;
        -: 2755:      }
        -: 2756:    }
        -: 2757:    while_break___2: /* CIL Label */ ;
        -: 2758:    }
        1: 2759:  } else {
        -: 2760:    {
    #####: 2761:    status = grepfile((char const   *)((char *)((void *)0)), & stats_base);
        -: 2762:    }
        -: 2763:  }
        -: 2764:  {
        1: 2765:  tmp___37 = fclose(stdout);
        -: 2766:  }
        1: 2767:  if (tmp___37 == -1) {
        -: 2768:    {
    #####: 2769:    tmp___35 = __errno_location();
    #####: 2770:    tmp___36 = gettext("writing output");
    #####: 2771:    error((char const   *)tmp___36, *tmp___35);
        -: 2772:    }
    #####: 2773:  }
        1: 2774:  if (errseen) {
    #####: 2775:    tmp___38 = 2;
    #####: 2776:  } else {
        1: 2777:    tmp___38 = status;
        -: 2778:  }
        -: 2779:  {
        1: 2780:  exit(tmp___38);
        -: 2781:  }
        -: 2782:}
        -: 2783:}
        -: 2784:reg_syntax_t re_syntax_options  ;
        -: 2785:reg_syntax_t re_set_syntax(reg_syntax_t syntax ) ;
        -: 2786:char const   *re_compile_pattern(char const   *pattern , size_t length , struct re_pattern_buffer *bufp ) ;
        -: 2787:int re_compile_fastmap(struct re_pattern_buffer *bufp ) ;
        -: 2788:int re_search(struct re_pattern_buffer *bufp , char const   *string , int size , int startpos ,
        -: 2789:              int range , struct re_registers *regs___0 ) ;
        -: 2790:int re_search_2(struct re_pattern_buffer *bufp , char const   *string1 , int size1 ,
        -: 2791:                char const   *string2 , int size2 , int startpos , int range , struct re_registers *regs___0 ,
        -: 2792:                int stop ) ;
        -: 2793:int re_match(struct re_pattern_buffer *bufp , char const   *string , int size , int pos ,
        -: 2794:             struct re_registers *regs___0 ) ;
        -: 2795:int re_match_2(struct re_pattern_buffer *bufp , char const   *string1 , int size1 ,
        -: 2796:               char const   *string2 , int size2 , int pos , struct re_registers *regs___0 ,
        -: 2797:               int stop ) ;
        -: 2798:void re_set_registers(struct re_pattern_buffer *bufp , struct re_registers *regs___0 ,
        -: 2799:                      unsigned int num_regs , regoff_t *starts , regoff_t *ends ) ;
        -: 2800:int regcomp(regex_t *preg , char const   *pattern , int cflags ) ;
        -: 2801:int regexec(regex_t const   *preg , char const   *string , size_t nmatch , regmatch_t *pmatch ,
        -: 2802:            int eflags ) ;
        -: 2803:size_t regerror(int errcode , regex_t const   *preg , char *errbuf , size_t errbuf_size ) ;
        -: 2804:void regfree(regex_t *preg ) ;
        -: 2805:void dfasyntax(reg_syntax_t bits , int fold , int eol ) ;
        -: 2806:void dfacomp(char *s , size_t len , struct dfa *d , int searchflag ) ;
        -: 2807:char *dfaexec(struct dfa *d , char *begin , char *end , int newline___0 , int *count ,
        -: 2808:              int *backref ) ;
        -: 2809:void dfafree(struct dfa *d ) ;
        -: 2810:void dfainit(struct dfa *d ) ;
        -: 2811:void dfaparse(char *s , size_t len , struct dfa *d ) ;
        -: 2812:void dfaanalyze(struct dfa *d , int searchflag ) ;
        -: 2813:void dfastate(int s , struct dfa *d , int *trans___0 ) ;
        -: 2814:void dfaerror(char const   *mesg ) ;
        -: 2815:static void dfamust(struct dfa *dfa___0 ) ;
        -: 2816:static ptr_t xcalloc(size_t n , size_t s ) ;
        -: 2817:static ptr_t xmalloc_1(size_t n ) ;
        -: 2818:static ptr_t xrealloc_1(ptr_t p , size_t n ) ;
        -: 2819:static int tstbit(int b , int *c ) ;
        -: 2820:static void setbit(int b , int *c ) ;
        -: 2821:static void clrbit(int b , int *c ) ;
        -: 2822:static void copyset(int *src , int *dst ) ;
        -: 2823:static void zeroset(int *s ) ;
        -: 2824:static void notset(int *s ) ;
        -: 2825:static int equal(int *s1 , int *s2 ) ;
        -: 2826:static int charclass_index(int *s ) ;
        -: 2827:static int looking_at(char const   *s ) ;
        -: 2828:static token lex(void) ;
        -: 2829:static void addtok(token t ) ;
        -: 2830:static void atom(void) ;
        -: 2831:static int nsubtoks(int tindex ) ;
        -: 2832:static void copytoks(int tindex , int ntokens ) ;
        -: 2833:static void closure(void) ;
        -: 2834:static void branch(void) ;
        -: 2835:static void regexp(int toplevel ) ;
        -: 2836:static void copy(position_set *src , position_set *dst ) ;
        -: 2837:static void insert(position p , position_set *s ) ;
        -: 2838:static void merge(position_set *s1 , position_set *s2 , position_set *m ) ;
        -: 2839:static void delete(position p , position_set *s ) ;
        -: 2840:static int state_index(struct dfa *d , position_set *s , int newline___0 , int letter ) ;
        -: 2841:static void build_state(int s , struct dfa *d ) ;
        -: 2842:static void build_state_zero(struct dfa *d ) ;
        -: 2843:static char *icatalloc(char *old , char *new ) ;
        -: 2844:static char *icpyalloc(char *string ) ;
        -: 2845:static char *istrstr(char *lookin , char *lookfor ) ;
        -: 2846:static void ifree(char *cp ) ;
        -: 2847:static void freelist(char **cpp ) ;
        -: 2848:static char **enlist(char **cpp , char *new , size_t len ) ;
        -: 2849:static char **comsubs(char *left , char *right ) ;
        -: 2850:static char **addlists(char **old , char **new ) ;
        -: 2851:static char **inboth(char **left , char **right ) ;
        3: 2852:static ptr_t xcalloc(size_t n , size_t s ) 
        -: 2853:{ 
        -: 2854:  ptr_t r ;
        -: 2855:  void *tmp ;
        -: 2856:  char *tmp___0 ;
        -: 2857:
        -: 2858:  {
        -: 2859:  {
        3: 2860:  tmp = calloc(n, s);
        3: 2861:  r = tmp;
        -: 2862:  }
        3: 2863:  if (! r) {
        -: 2864:    {
    #####: 2865:    tmp___0 = gettext("Memory exhausted");
    #####: 2866:    dfaerror((char const   *)tmp___0);
        -: 2867:    }
    #####: 2868:  }
        3: 2869:  return (r);
        -: 2870:}
        -: 2871:}
      132: 2872:static ptr_t xmalloc_1(size_t n ) 
        -: 2873:{ 
        -: 2874:  ptr_t r ;
        -: 2875:  void *tmp ;
        -: 2876:  char *tmp___0 ;
        -: 2877:
        -: 2878:  {
        -: 2879:  {
      132: 2880:  tmp = malloc(n);
      132: 2881:  r = tmp;
        -: 2882:  }
      132: 2883:  if (! r) {
        -: 2884:    {
    #####: 2885:    tmp___0 = gettext("Memory exhausted");
    #####: 2886:    dfaerror((char const   *)tmp___0);
        -: 2887:    }
    #####: 2888:  }
      132: 2889:  return (r);
        -: 2890:}
        -: 2891:}
       21: 2892:static ptr_t xrealloc_1(ptr_t p , size_t n ) 
        -: 2893:{ 
        -: 2894:  ptr_t r ;
        -: 2895:  void *tmp ;
        -: 2896:  char *tmp___0 ;
        -: 2897:
        -: 2898:  {
        -: 2899:  {
       21: 2900:  tmp = realloc(p, n);
       21: 2901:  r = tmp;
        -: 2902:  }
       21: 2903:  if (! r) {
        -: 2904:    {
    #####: 2905:    tmp___0 = gettext("Memory exhausted");
    #####: 2906:    dfaerror((char const   *)tmp___0);
        -: 2907:    }
    #####: 2908:  }
       21: 2909:  return (r);
        -: 2910:}
        -: 2911:}
       78: 2912:static int tstbit(int b , int *c ) 
        -: 2913:{ 
        -: 2914:
        -: 2915:
        -: 2916:  {
       78: 2917:  return (*(c + (unsigned long )b / (8UL * sizeof(int ))) & (1 << (unsigned long )b % (8UL * sizeof(int ))));
        -: 2918:}
        -: 2919:}
      104: 2920:static void setbit(int b , int *c ) 
        -: 2921:{ 
        -: 2922:
        -: 2923:
        -: 2924:  {
      104: 2925:  *(c + (unsigned long )b / (8UL * sizeof(int ))) |= 1 << (unsigned long )b % (8UL * sizeof(int ));
      104: 2926:  return;
        -: 2927:}
        -: 2928:}
        1: 2929:static void clrbit(int b , int *c ) 
        -: 2930:{ 
        -: 2931:
        -: 2932:
        -: 2933:  {
        1: 2934:  *(c + (unsigned long )b / (8UL * sizeof(int ))) &= ~ (1 << (unsigned long )b % (8UL * sizeof(int )));
        1: 2935:  return;
        -: 2936:}
        -: 2937:}
       45: 2938:static void copyset(int *src , int *dst ) 
        -: 2939:{ 
        -: 2940:  int i ;
        -: 2941:
        -: 2942:  {
       45: 2943:  i = 0;
        -: 2944:  {
      405: 2945:  while (1) {
        -: 2946:    while_continue: /* CIL Label */ ;
      405: 2947:    if (! ((unsigned long )i < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       45: 2948:      goto while_break;
        -: 2949:    }
      360: 2950:    *(dst + i) = *(src + i);
      360: 2951:    i ++;
        -: 2952:  }
        -: 2953:  while_break: /* CIL Label */ ;
        -: 2954:  }
       45: 2955:  return;
        -: 2956:}
        -: 2957:}
       46: 2958:static void zeroset(int *s ) 
        -: 2959:{ 
        -: 2960:  int i ;
        -: 2961:
        -: 2962:  {
       46: 2963:  i = 0;
        -: 2964:  {
      414: 2965:  while (1) {
        -: 2966:    while_continue: /* CIL Label */ ;
      414: 2967:    if (! ((unsigned long )i < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       46: 2968:      goto while_break;
        -: 2969:    }
      368: 2970:    *(s + i) = 0;
      368: 2971:    i ++;
        -: 2972:  }
        -: 2973:  while_break: /* CIL Label */ ;
        -: 2974:  }
       46: 2975:  return;
        -: 2976:}
        -: 2977:}
        1: 2978:static void notset(int *s ) 
        -: 2979:{ 
        -: 2980:  int i ;
        -: 2981:
        -: 2982:  {
        1: 2983:  i = 0;
        -: 2984:  {
        9: 2985:  while (1) {
        -: 2986:    while_continue: /* CIL Label */ ;
        9: 2987:    if (! ((unsigned long )i < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
        1: 2988:      goto while_break;
        -: 2989:    }
        8: 2990:    *(s + i) = ~ *(s + i);
        8: 2991:    i ++;
        -: 2992:  }
        -: 2993:  while_break: /* CIL Label */ ;
        -: 2994:  }
        1: 2995:  return;
        -: 2996:}
        -: 2997:}
    #####: 2998:static int equal(int *s1 , int *s2 ) 
        -: 2999:{ 
        -: 3000:  int i ;
        -: 3001:
        -: 3002:  {
    #####: 3003:  i = 0;
        -: 3004:  {
    #####: 3005:  while (1) {
        -: 3006:    while_continue: /* CIL Label */ ;
    #####: 3007:    if (! ((unsigned long )i < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 3008:      goto while_break;
        -: 3009:    }
    #####: 3010:    if (*(s1 + i) != *(s2 + i)) {
    #####: 3011:      return (0);
        -: 3012:    }
    #####: 3013:    i ++;
        -: 3014:  }
        -: 3015:  while_break: /* CIL Label */ ;
        -: 3016:  }
    #####: 3017:  return (1);
        -: 3018:}
    #####: 3019:}
        -: 3020:static struct dfa *dfa  ;
        1: 3021:static int charclass_index(int *s ) 
        -: 3022:{ 
        -: 3023:  int i ;
        -: 3024:  int tmp ;
        -: 3025:  ptr_t tmp___0 ;
        -: 3026:
        -: 3027:  {
        1: 3028:  i = 0;
        -: 3029:  {
        1: 3030:  while (1) {
        -: 3031:    while_continue: /* CIL Label */ ;
        1: 3032:    if (! (i < dfa->cindex)) {
        1: 3033:      goto while_break;
        -: 3034:    }
        -: 3035:    {
    #####: 3036:    tmp = equal(s, *(dfa->charclasses + i));
        -: 3037:    }
    #####: 3038:    if (tmp) {
    #####: 3039:      return (i);
        -: 3040:    }
    #####: 3041:    i ++;
        -: 3042:  }
        -: 3043:  while_break: /* CIL Label */ ;
        -: 3044:  }
        1: 3045:  if (dfa->cindex >= dfa->calloc) {
        -: 3046:    {
    #####: 3047:    while (1) {
        -: 3048:      while_continue___0: /* CIL Label */ ;
    #####: 3049:      if (! (dfa->cindex >= dfa->calloc)) {
    #####: 3050:        goto while_break___0;
        -: 3051:      }
    #####: 3052:      dfa->calloc *= 2;
        -: 3053:    }
        -: 3054:    while_break___0: /* CIL Label */ ;
        -: 3055:    }
        -: 3056:    {
    #####: 3057:    tmp___0 = xrealloc_1((ptr_t )dfa->charclasses, (unsigned long )dfa->calloc * sizeof(charclass ));
    #####: 3058:    dfa->charclasses = (charclass *)tmp___0;
        -: 3059:    }
    #####: 3060:  }
        -: 3061:  {
        1: 3062:  (dfa->cindex) ++;
        1: 3063:  copyset(s, *(dfa->charclasses + i));
        -: 3064:  }
        1: 3065:  return (i);
        -: 3066:}
        1: 3067:}
        -: 3068:static reg_syntax_t syntax_bits  ;
        -: 3069:static reg_syntax_t syntax_bits_set  ;
        -: 3070:static int case_fold  ;
        -: 3071:static unsigned char eolbyte_1  ;
        1: 3072:void dfasyntax(reg_syntax_t bits , int fold , int eol ) 
        -: 3073:{ 
        -: 3074:
        -: 3075:
        -: 3076:  {
        1: 3077:  syntax_bits_set = (reg_syntax_t )1;
        1: 3078:  syntax_bits = bits;
        1: 3079:  case_fold = fold;
        1: 3080:  eolbyte_1 = (unsigned char )eol;
        1: 3081:  return;
        -: 3082:}
        -: 3083:}
        -: 3084:static char *lexstart  ;
        -: 3085:static char *lexptr  ;
        -: 3086:static int lexleft  ;
        -: 3087:static token lasttok  ;
        -: 3088:static int laststart  ;
        -: 3089:static int parens  ;
        -: 3090:static int minrep  ;
        -: 3091:static int maxrep  ;
    #####: 3092:static int is_alpha(int c ) 
        -: 3093:{ 
        -: 3094:  unsigned short const   **tmp ;
        -: 3095:
        -: 3096:  {
        -: 3097:  {
    #####: 3098:  tmp = __ctype_b_loc();
        -: 3099:  }
    #####: 3100:  return ((int )((int const   )*(*tmp + c) & 1024));
        -: 3101:}
        -: 3102:}
    #####: 3103:static int is_upper(int c ) 
        -: 3104:{ 
        -: 3105:  unsigned short const   **tmp ;
        -: 3106:
        -: 3107:  {
        -: 3108:  {
    #####: 3109:  tmp = __ctype_b_loc();
        -: 3110:  }
    #####: 3111:  return ((int )((int const   )*(*tmp + c) & 256));
        -: 3112:}
        -: 3113:}
    #####: 3114:static int is_lower(int c ) 
        -: 3115:{ 
        -: 3116:  unsigned short const   **tmp ;
        -: 3117:
        -: 3118:  {
        -: 3119:  {
    #####: 3120:  tmp = __ctype_b_loc();
        -: 3121:  }
    #####: 3122:  return ((int )((int const   )*(*tmp + c) & 512));
        -: 3123:}
        -: 3124:}
    #####: 3125:static int is_digit(int c ) 
        -: 3126:{ 
        -: 3127:  unsigned short const   **tmp ;
        -: 3128:
        -: 3129:  {
        -: 3130:  {
    #####: 3131:  tmp = __ctype_b_loc();
        -: 3132:  }
    #####: 3133:  return ((int )((int const   )*(*tmp + c) & 2048));
        -: 3134:}
        -: 3135:}
    #####: 3136:static int is_xdigit(int c ) 
        -: 3137:{ 
        -: 3138:  unsigned short const   **tmp ;
        -: 3139:
        -: 3140:  {
        -: 3141:  {
    #####: 3142:  tmp = __ctype_b_loc();
        -: 3143:  }
    #####: 3144:  return ((int )((int const   )*(*tmp + c) & 4096));
        -: 3145:}
        -: 3146:}
    #####: 3147:static int is_space(int c ) 
        -: 3148:{ 
        -: 3149:  unsigned short const   **tmp ;
        -: 3150:
        -: 3151:  {
        -: 3152:  {
    #####: 3153:  tmp = __ctype_b_loc();
        -: 3154:  }
    #####: 3155:  return ((int )((int const   )*(*tmp + c) & 8192));
        -: 3156:}
        -: 3157:}
    #####: 3158:static int is_punct(int c ) 
        -: 3159:{ 
        -: 3160:  unsigned short const   **tmp ;
        -: 3161:
        -: 3162:  {
        -: 3163:  {
    #####: 3164:  tmp = __ctype_b_loc();
        -: 3165:  }
    #####: 3166:  return ((int )((int const   )*(*tmp + c) & 4));
        -: 3167:}
        -: 3168:}
    #####: 3169:static int is_alnum(int c ) 
        -: 3170:{ 
        -: 3171:  unsigned short const   **tmp ;
        -: 3172:
        -: 3173:  {
        -: 3174:  {
    #####: 3175:  tmp = __ctype_b_loc();
        -: 3176:  }
    #####: 3177:  return ((int )((int const   )*(*tmp + c) & 8));
        -: 3178:}
        -: 3179:}
    #####: 3180:static int is_print(int c ) 
        -: 3181:{ 
        -: 3182:  unsigned short const   **tmp ;
        -: 3183:
        -: 3184:  {
        -: 3185:  {
    #####: 3186:  tmp = __ctype_b_loc();
        -: 3187:  }
    #####: 3188:  return ((int )((int const   )*(*tmp + c) & 16384));
        -: 3189:}
        -: 3190:}
    #####: 3191:static int is_graph(int c ) 
        -: 3192:{ 
        -: 3193:  unsigned short const   **tmp ;
        -: 3194:
        -: 3195:  {
        -: 3196:  {
    #####: 3197:  tmp = __ctype_b_loc();
        -: 3198:  }
    #####: 3199:  return ((int )((int const   )*(*tmp + c) & 32768));
        -: 3200:}
        -: 3201:}
    #####: 3202:static int is_cntrl(int c ) 
        -: 3203:{ 
        -: 3204:  unsigned short const   **tmp ;
        -: 3205:
        -: 3206:  {
        -: 3207:  {
    #####: 3208:  tmp = __ctype_b_loc();
        -: 3209:  }
    #####: 3210:  return ((int )((int const   )*(*tmp + c) & 2));
        -: 3211:}
        -: 3212:}
    #####: 3213:static int is_blank(int c ) 
        -: 3214:{ 
        -: 3215:  int tmp ;
        -: 3216:
        -: 3217:  {
    #####: 3218:  if (c == 32) {
    #####: 3219:    tmp = 1;
    #####: 3220:  } else { //Added block
    #####: 3221:  if (c == 9) {
    #####: 3222:    tmp = 1;
    #####: 3223:  } else {
    #####: 3224:    tmp = 0;
        -: 3225:  }
        -: 3226:  }
    #####: 3227:  return (tmp);
        -: 3228:}
        -: 3229:}
        -: 3230:static struct __anonstruct_prednames_38 prednames[13]  = 
        -: 3231:  {      {":alpha:]", & is_alpha}, 
        -: 3232:        {":upper:]", & is_upper}, 
        -: 3233:        {":lower:]", & is_lower}, 
        -: 3234:        {":digit:]", & is_digit}, 
        -: 3235:        {":xdigit:]", & is_xdigit}, 
        -: 3236:        {":space:]", & is_space}, 
        -: 3237:        {":punct:]", & is_punct}, 
        -: 3238:        {":alnum:]", & is_alnum}, 
        -: 3239:        {":print:]", & is_print}, 
        -: 3240:        {":graph:]", & is_graph}, 
        -: 3241:        {":cntrl:]", & is_cntrl}, 
        -: 3242:        {":blank:]", & is_blank}, 
        -: 3243:        {(char const   *)0, (int (*)(int  ))0}};
    #####: 3244:static int looking_at(char const   *s ) 
        -: 3245:{ 
        -: 3246:  size_t len ;
        -: 3247:  int tmp ;
        -: 3248:
        -: 3249:  {
        -: 3250:  {
    #####: 3251:  len = strlen(s);
        -: 3252:  }
    #####: 3253:  if ((size_t )lexleft < len) {
    #####: 3254:    return (0);
        -: 3255:  }
        -: 3256:  {
    #####: 3257:  tmp = strncmp(s, (char const   *)lexptr, len);
        -: 3258:  }
    #####: 3259:  return (tmp == 0);
        -: 3260:}
    #####: 3261:}
       16: 3262:static token lex(void) 
        -: 3263:{ 
        -: 3264:  token c ;
        -: 3265:  token c1 ;
        -: 3266:  token c2 ;
        -: 3267:  int backslash ;
        -: 3268:  int invert ;
        -: 3269:  charclass ccl ;
        -: 3270:  int i ;
        -: 3271:  char lo[2] ;
        -: 3272:  char hi[2] ;
        -: 3273:  char *tmp ;
        -: 3274:  char *tmp___0 ;
        -: 3275:  int tmp___1 ;
        -: 3276:  int tmp___2 ;
        -: 3277:  int tmp___3 ;
        -: 3278:  int tmp___4 ;
        -: 3279:  int tmp___5 ;
        -: 3280:  int tmp___6 ;
        -: 3281:  int lo___0 ;
        -: 3282:  int hi___0 ;
        -: 3283:  char const   *p ;
        -: 3284:  char const   *lim ;
        -: 3285:  int tmp___7 ;
        -: 3286:  int tmp___8 ;
        -: 3287:  char *tmp___9 ;
        -: 3288:  char *tmp___10 ;
        -: 3289:  char *tmp___11 ;
        -: 3290:  char *tmp___12 ;
        -: 3291:  char *tmp___13 ;
        -: 3292:  char *tmp___14 ;
        -: 3293:  char *tmp___15 ;
        -: 3294:  char *tmp___16 ;
        -: 3295:  char *tmp___17 ;
        -: 3296:  char *tmp___18 ;
        -: 3297:  char *tmp___19 ;
        -: 3298:  char *tmp___20 ;
        -: 3299:  char *tmp___21 ;
        -: 3300:  char *tmp___22 ;
        -: 3301:  char *tmp___23 ;
        -: 3302:  char *tmp___24 ;
        -: 3303:  char *tmp___25 ;
        -: 3304:  char *tmp___26 ;
        -: 3305:  char *tmp___27 ;
        -: 3306:  int tmp___28 ;
        -: 3307:  unsigned short const   **tmp___29 ;
        -: 3308:  int tmp___30 ;
        -: 3309:  char *tmp___31 ;
        -: 3310:  char *tmp___32 ;
        -: 3311:  char *tmp___33 ;
        -: 3312:  char *tmp___34 ;
        -: 3313:  char *tmp___35 ;
        -: 3314:  char *tmp___36 ;
        -: 3315:  int (*pred)() ;
        -: 3316:  int tmp___37 ;
        -: 3317:  size_t tmp___38 ;
        -: 3318:  size_t tmp___39 ;
        -: 3319:  char *tmp___40 ;
        -: 3320:  char *tmp___41 ;
        -: 3321:  char *tmp___42 ;
        -: 3322:  int tmp___43 ;
        -: 3323:  char *tmp___44 ;
        -: 3324:  char *tmp___45 ;
        -: 3325:  char *tmp___46 ;
        -: 3326:  char *tmp___47 ;
        -: 3327:  char *tmp___48 ;
        -: 3328:  char *tmp___49 ;
        -: 3329:  char *tmp___50 ;
        -: 3330:  char *tmp___51 ;
        -: 3331:  char *tmp___52 ;
        -: 3332:  char *tmp___53 ;
        -: 3333:  char *tmp___54 ;
        -: 3334:  char *tmp___55 ;
        -: 3335:  char *tmp___56 ;
        -: 3336:  char *tmp___57 ;
        -: 3337:  char *tmp___58 ;
        -: 3338:  char ch[2] ;
        -: 3339:  int tmp___59 ;
        -: 3340:  int tmp___60 ;
        -: 3341:  unsigned short const   **tmp___61 ;
        -: 3342:  unsigned short const   **tmp___62 ;
        -: 3343:  int tmp___63 ;
        -: 3344:  int tmp___64 ;
        -: 3345:  int tmp___65 ;
        -: 3346:  int tmp___66 ;
        -: 3347:  int tmp___67 ;
        -: 3348:  unsigned short const   **tmp___68 ;
        -: 3349:  int tmp___69 ;
        -: 3350:  unsigned short const   **tmp___70 ;
        -: 3351:
        -: 3352:  {
       16: 3353:  backslash = 0;
       16: 3354:  i = 0;
        -: 3355:  {
       16: 3356:  while (1) {
        -: 3357:    while_continue: /* CIL Label */ ;
       16: 3358:    if (! (i < 2)) {
    #####: 3359:      goto while_break;
        -: 3360:    }
       16: 3361:    if (! lexleft) {
        1: 3362:      lasttok = (token )-1;
        1: 3363:      return (lasttok);
        -: 3364:    }
       15: 3365:    tmp = lexptr;
       15: 3366:    lexptr ++;
       15: 3367:    c = (token )((unsigned char )*tmp);
       15: 3368:    lexleft --;
        -: 3369:    {
       15: 3370:    if ((int )c == 92) {
    #####: 3371:      goto case_92;
        -: 3372:    }
       15: 3373:    if ((int )c == 94) {
    #####: 3374:      goto case_94;
        -: 3375:    }
       15: 3376:    if ((int )c == 36) {
    #####: 3377:      goto case_36;
        -: 3378:    }
       15: 3379:    if ((int )c == 49) {
    #####: 3380:      goto case_49;
        -: 3381:    }
       15: 3382:    if ((int )c == 50) {
    #####: 3383:      goto case_49;
        -: 3384:    }
       15: 3385:    if ((int )c == 51) {
    #####: 3386:      goto case_49;
        -: 3387:    }
       15: 3388:    if ((int )c == 52) {
    #####: 3389:      goto case_49;
        -: 3390:    }
       15: 3391:    if ((int )c == 53) {
    #####: 3392:      goto case_49;
        -: 3393:    }
       15: 3394:    if ((int )c == 54) {
    #####: 3395:      goto case_49;
        -: 3396:    }
       15: 3397:    if ((int )c == 55) {
    #####: 3398:      goto case_49;
        -: 3399:    }
       15: 3400:    if ((int )c == 56) {
    #####: 3401:      goto case_49;
        -: 3402:    }
       15: 3403:    if ((int )c == 57) {
    #####: 3404:      goto case_49;
        -: 3405:    }
       15: 3406:    if ((int )c == 96) {
    #####: 3407:      goto case_96;
        -: 3408:    }
       15: 3409:    if ((int )c == 39) {
    #####: 3410:      goto case_39;
        -: 3411:    }
       15: 3412:    if ((int )c == 60) {
    #####: 3413:      goto case_60;
        -: 3414:    }
       15: 3415:    if ((int )c == 62) {
    #####: 3416:      goto case_62;
        -: 3417:    }
       15: 3418:    if ((int )c == 98) {
    #####: 3419:      goto case_98;
        -: 3420:    }
       15: 3421:    if ((int )c == 66) {
    #####: 3422:      goto case_66;
        -: 3423:    }
       15: 3424:    if ((int )c == 63) {
    #####: 3425:      goto case_63;
        -: 3426:    }
       15: 3427:    if ((int )c == 42) {
    #####: 3428:      goto case_42;
        -: 3429:    }
       15: 3430:    if ((int )c == 43) {
    #####: 3431:      goto case_43;
        -: 3432:    }
       15: 3433:    if ((int )c == 123) {
        1: 3434:      goto case_123;
        -: 3435:    }
       14: 3436:    if ((int )c == 124) {
        1: 3437:      goto case_124;
        -: 3438:    }
       13: 3439:    if ((int )c == 10) {
    #####: 3440:      goto case_10;
        -: 3441:    }
       13: 3442:    if ((int )c == 40) {
    #####: 3443:      goto case_40;
        -: 3444:    }
       13: 3445:    if ((int )c == 41) {
    #####: 3446:      goto case_41;
        -: 3447:    }
       13: 3448:    if ((int )c == 46) {
        1: 3449:      goto case_46;
        -: 3450:    }
       12: 3451:    if ((int )c == 119) {
    #####: 3452:      goto case_119;
        -: 3453:    }
       12: 3454:    if ((int )c == 87) {
    #####: 3455:      goto case_119;
        -: 3456:    }
       12: 3457:    if ((int )c == 91) {
    #####: 3458:      goto case_91;
        -: 3459:    }
       12: 3460:    goto normal_char;
        -: 3461:    case_92: /* CIL Label */ 
    #####: 3462:    if (backslash) {
    #####: 3463:      goto normal_char;
        -: 3464:    }
    #####: 3465:    if (lexleft == 0) {
        -: 3466:      {
    #####: 3467:      tmp___0 = gettext("Unfinished \\ escape");
    #####: 3468:      dfaerror((char const   *)tmp___0);
        -: 3469:      }
    #####: 3470:    }
    #####: 3471:    backslash = 1;
    #####: 3472:    goto switch_break;
        -: 3473:    case_94: /* CIL Label */ 
    #####: 3474:    if (backslash) {
    #####: 3475:      goto normal_char;
        -: 3476:    }
    #####: 3477:    if (syntax_bits & (((1UL << 1) << 1) << 1)) {
    #####: 3478:      lasttok = (token )258;
    #####: 3479:      return (lasttok);
        -: 3480:    } else { //Added block
    #####: 3481:    if ((int )lasttok == -1) {
    #####: 3482:      lasttok = (token )258;
    #####: 3483:      return (lasttok);
        -: 3484:    } else { //Added block
    #####: 3485:    if ((int )lasttok == 271) {
    #####: 3486:      lasttok = (token )258;
    #####: 3487:      return (lasttok);
        -: 3488:    } else { //Added block
    #####: 3489:    if ((int )lasttok == 269) {
    #####: 3490:      lasttok = (token )258;
    #####: 3491:      return (lasttok);
        -: 3492:    }
        -: 3493:    }
        -: 3494:    }
        -: 3495:    }
    #####: 3496:    goto normal_char;
        -: 3497:    case_36: /* CIL Label */ 
    #####: 3498:    if (backslash) {
    #####: 3499:      goto normal_char;
        -: 3500:    }
    #####: 3501:    if (syntax_bits & (((1UL << 1) << 1) << 1)) {
    #####: 3502:      lasttok = (token )259;
    #####: 3503:      return (lasttok);
        -: 3504:    } else { //Added block
    #####: 3505:    if (lexleft == 0) {
    #####: 3506:      lasttok = (token )259;
    #####: 3507:      return (lasttok);
        -: 3508:    } else {
    #####: 3509:      if (syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3510:        if (lexleft > 0) {
    #####: 3511:          if ((int )*lexptr == 41) {
    #####: 3512:            tmp___1 = 1;
    #####: 3513:          } else {
    #####: 3514:            tmp___1 = 0;
        -: 3515:          }
    #####: 3516:        } else {
    #####: 3517:          tmp___1 = 0;
        -: 3518:        }
    #####: 3519:        tmp___3 = tmp___1;
    #####: 3520:      } else {
    #####: 3521:        if (lexleft > 1) {
    #####: 3522:          if ((int )*(lexptr + 0) == 92) {
    #####: 3523:            if ((int )*(lexptr + 1) == 41) {
    #####: 3524:              tmp___2 = 1;
    #####: 3525:            } else {
    #####: 3526:              tmp___2 = 0;
        -: 3527:            }
    #####: 3528:          } else {
    #####: 3529:            tmp___2 = 0;
        -: 3530:          }
    #####: 3531:        } else {
    #####: 3532:          tmp___2 = 0;
        -: 3533:        }
    #####: 3534:        tmp___3 = tmp___2;
        -: 3535:      }
    #####: 3536:      if (tmp___3) {
    #####: 3537:        lasttok = (token )259;
    #####: 3538:        return (lasttok);
        -: 3539:      } else {
    #####: 3540:        if (syntax_bits & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3541:          if (lexleft > 0) {
    #####: 3542:            if ((int )*lexptr == 124) {
    #####: 3543:              tmp___4 = 1;
    #####: 3544:            } else {
    #####: 3545:              tmp___4 = 0;
        -: 3546:            }
    #####: 3547:          } else {
    #####: 3548:            tmp___4 = 0;
        -: 3549:          }
    #####: 3550:          tmp___6 = tmp___4;
    #####: 3551:        } else {
    #####: 3552:          if (lexleft > 1) {
    #####: 3553:            if ((int )*(lexptr + 0) == 92) {
    #####: 3554:              if ((int )*(lexptr + 1) == 124) {
    #####: 3555:                tmp___5 = 1;
    #####: 3556:              } else {
    #####: 3557:                tmp___5 = 0;
        -: 3558:              }
    #####: 3559:            } else {
    #####: 3560:              tmp___5 = 0;
        -: 3561:            }
    #####: 3562:          } else {
    #####: 3563:            tmp___5 = 0;
        -: 3564:          }
    #####: 3565:          tmp___6 = tmp___5;
        -: 3566:        }
    #####: 3567:        if (tmp___6) {
    #####: 3568:          lasttok = (token )259;
    #####: 3569:          return (lasttok);
        -: 3570:        } else { //Added block
    #####: 3571:        if (syntax_bits & (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3572:          if (lexleft > 0) {
    #####: 3573:            if ((int )*lexptr == 10) {
    #####: 3574:              lasttok = (token )259;
    #####: 3575:              return (lasttok);
        -: 3576:            }
    #####: 3577:          }
    #####: 3578:        }
        -: 3579:        }
        -: 3580:      }
        -: 3581:    }
        -: 3582:    }
    #####: 3583:    goto normal_char;
        -: 3584:    case_49: /* CIL Label */ 
        -: 3585:    case_50: /* CIL Label */ 
        -: 3586:    case_51: /* CIL Label */ 
        -: 3587:    case_52: /* CIL Label */ 
        -: 3588:    case_53: /* CIL Label */ 
        -: 3589:    case_54: /* CIL Label */ 
        -: 3590:    case_55: /* CIL Label */ 
        -: 3591:    case_56: /* CIL Label */ 
        -: 3592:    case_57: /* CIL Label */ 
    #####: 3593:    if (backslash) {
    #####: 3594:      if (! (syntax_bits & ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3595:        laststart = 0;
    #####: 3596:        lasttok = (token )257;
    #####: 3597:        return (lasttok);
        -: 3598:      }
    #####: 3599:    }
    #####: 3600:    goto normal_char;
        -: 3601:    case_96: /* CIL Label */ 
    #####: 3602:    if (backslash) {
    #####: 3603:      if (! (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3604:        lasttok = (token )258;
    #####: 3605:        return (lasttok);
        -: 3606:      }
    #####: 3607:    }
    #####: 3608:    goto normal_char;
        -: 3609:    case_39: /* CIL Label */ 
    #####: 3610:    if (backslash) {
    #####: 3611:      if (! (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3612:        lasttok = (token )259;
    #####: 3613:        return (lasttok);
        -: 3614:      }
    #####: 3615:    }
    #####: 3616:    goto normal_char;
        -: 3617:    case_60: /* CIL Label */ 
    #####: 3618:    if (backslash) {
    #####: 3619:      if (! (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3620:        lasttok = (token )260;
    #####: 3621:        return (lasttok);
        -: 3622:      }
    #####: 3623:    }
    #####: 3624:    goto normal_char;
        -: 3625:    case_62: /* CIL Label */ 
    #####: 3626:    if (backslash) {
    #####: 3627:      if (! (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3628:        lasttok = (token )261;
    #####: 3629:        return (lasttok);
        -: 3630:      }
    #####: 3631:    }
    #####: 3632:    goto normal_char;
        -: 3633:    case_98: /* CIL Label */ 
    #####: 3634:    if (backslash) {
    #####: 3635:      if (! (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3636:        lasttok = (token )262;
    #####: 3637:        return (lasttok);
        -: 3638:      }
    #####: 3639:    }
    #####: 3640:    goto normal_char;
        -: 3641:    case_66: /* CIL Label */ 
    #####: 3642:    if (backslash) {
    #####: 3643:      if (! (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3644:        lasttok = (token )263;
    #####: 3645:        return (lasttok);
        -: 3646:      }
    #####: 3647:    }
    #####: 3648:    goto normal_char;
        -: 3649:    case_63: /* CIL Label */ 
    #####: 3650:    if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3651:      goto normal_char;
        -: 3652:    }
    #####: 3653:    if (backslash != ((syntax_bits & (1UL << 1)) != 0UL)) {
    #####: 3654:      goto normal_char;
        -: 3655:    }
    #####: 3656:    if (! (syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
    #####: 3657:      if (laststart) {
    #####: 3658:        goto normal_char;
        -: 3659:      }
    #####: 3660:    }
    #####: 3661:    lasttok = (token )264;
    #####: 3662:    return (lasttok);
        -: 3663:    case_42: /* CIL Label */ 
    #####: 3664:    if (backslash) {
    #####: 3665:      goto normal_char;
        -: 3666:    }
    #####: 3667:    if (! (syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
    #####: 3668:      if (laststart) {
    #####: 3669:        goto normal_char;
        -: 3670:      }
    #####: 3671:    }
    #####: 3672:    lasttok = (token )265;
    #####: 3673:    return (lasttok);
        -: 3674:    case_43: /* CIL Label */ 
    #####: 3675:    if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3676:      goto normal_char;
        -: 3677:    }
    #####: 3678:    if (backslash != ((syntax_bits & (1UL << 1)) != 0UL)) {
    #####: 3679:      goto normal_char;
        -: 3680:    }
    #####: 3681:    if (! (syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
    #####: 3682:      if (laststart) {
    #####: 3683:        goto normal_char;
        -: 3684:      }
    #####: 3685:    }
    #####: 3686:    lasttok = (token )266;
    #####: 3687:    return (lasttok);
        -: 3688:    case_123: /* CIL Label */ 
        1: 3689:    if (! (syntax_bits & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3690:      goto normal_char;
        -: 3691:    }
        1: 3692:    if (backslash != ((syntax_bits & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
    #####: 3693:      goto normal_char;
        -: 3694:    }
        1: 3695:    if (! (syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
    #####: 3696:      if (laststart) {
    #####: 3697:        goto normal_char;
        -: 3698:      }
    #####: 3699:    }
        1: 3700:    if (syntax_bits & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        1: 3701:      lo___0 = -1;
        1: 3702:      hi___0 = -1;
        1: 3703:      p = (char const   *)lexptr;
        1: 3704:      lim = p + lexleft;
        -: 3705:      {
        2: 3706:      while (1) {
        -: 3707:        while_continue___0: /* CIL Label */ ;
        2: 3708:        if ((unsigned long )p != (unsigned long )lim) {
        2: 3709:          if (! ((unsigned int )*p - 48U <= 9U)) {
        1: 3710:            goto while_break___0;
        -: 3711:          }
        1: 3712:        } else {
    #####: 3713:          goto while_break___0;
        -: 3714:        }
        1: 3715:        if (lo___0 < 0) {
        1: 3716:          tmp___7 = 0;
        1: 3717:        } else {
    #####: 3718:          tmp___7 = lo___0 * 10;
        -: 3719:        }
        1: 3720:        lo___0 = (tmp___7 + (int )*p) - 48;
        1: 3721:        p ++;
        -: 3722:      }
        -: 3723:      while_break___0: /* CIL Label */ ;
        -: 3724:      }
        1: 3725:      if ((unsigned long )p != (unsigned long )lim) {
        1: 3726:        if ((int const   )*p == 44) {
        -: 3727:          {
    #####: 3728:          while (1) {
        -: 3729:            while_continue___1: /* CIL Label */ ;
    #####: 3730:            p ++;
    #####: 3731:            if ((unsigned long )p != (unsigned long )lim) {
    #####: 3732:              if (! ((unsigned int )*p - 48U <= 9U)) {
    #####: 3733:                goto while_break___1;
        -: 3734:              }
    #####: 3735:            } else {
    #####: 3736:              goto while_break___1;
        -: 3737:            }
    #####: 3738:            if (hi___0 < 0) {
    #####: 3739:              tmp___8 = 0;
    #####: 3740:            } else {
    #####: 3741:              tmp___8 = hi___0 * 10;
        -: 3742:            }
    #####: 3743:            hi___0 = (tmp___8 + (int )*p) - 48;
        -: 3744:          }
        -: 3745:          while_break___1: /* CIL Label */ ;
        -: 3746:          }
    #####: 3747:        } else {
        1: 3748:          hi___0 = lo___0;
        -: 3749:        }
        1: 3750:      } else {
    #####: 3751:        hi___0 = lo___0;
        -: 3752:      }
        1: 3753:      if ((unsigned long )p == (unsigned long )lim) {
    #####: 3754:        goto normal_char;
        -: 3755:      } else { //Added block
        1: 3756:      if ((int const   )*p != 125) {
    #####: 3757:        goto normal_char;
        -: 3758:      } else { //Added block
        1: 3759:      if (lo___0 < 0) {
    #####: 3760:        goto normal_char;
        -: 3761:      } else { //Added block
        1: 3762:      if (32767 < hi___0) {
    #####: 3763:        goto normal_char;
        -: 3764:      } else { //Added block
        1: 3765:      if (0 <= hi___0) {
        1: 3766:        if (hi___0 < lo___0) {
    #####: 3767:          goto normal_char;
        -: 3768:        }
        1: 3769:      }
        -: 3770:      }
        -: 3771:      }
        -: 3772:      }
        -: 3773:      }
        1: 3774:    }
        1: 3775:    minrep = 0;
        1: 3776:    if (! lexleft) {
        -: 3777:      {
    #####: 3778:      tmp___10 = gettext("unfinished repeat count");
        -: 3779:      }
    #####: 3780:      if ((unsigned long )tmp___10 != (unsigned long )((char *)0)) {
        -: 3781:        {
    #####: 3782:        tmp___9 = gettext("unfinished repeat count");
    #####: 3783:        dfaerror((char const   *)tmp___9);
        -: 3784:        }
    #####: 3785:      } else {
    #####: 3786:        lasttok = (token )-1;
    #####: 3787:        return (lasttok);
        -: 3788:      }
    #####: 3789:    }
        1: 3790:    tmp___11 = lexptr;
        1: 3791:    lexptr ++;
        1: 3792:    c = (token )((unsigned char )*tmp___11);
        1: 3793:    lexleft --;
        1: 3794:    if ((unsigned int )c - 48U <= 9U) {
        1: 3795:      minrep = (int )c - 48;
        -: 3796:      {
        1: 3797:      while (1) {
        -: 3798:        while_continue___2: /* CIL Label */ ;
        1: 3799:        if (! lexleft) {
        -: 3800:          {
    #####: 3801:          tmp___13 = gettext("unfinished repeat count");
        -: 3802:          }
    #####: 3803:          if ((unsigned long )tmp___13 != (unsigned long )((char *)0)) {
        -: 3804:            {
    #####: 3805:            tmp___12 = gettext("unfinished repeat count");
    #####: 3806:            dfaerror((char const   *)tmp___12);
        -: 3807:            }
    #####: 3808:          } else {
    #####: 3809:            lasttok = (token )-1;
    #####: 3810:            return (lasttok);
        -: 3811:          }
    #####: 3812:        }
        1: 3813:        tmp___14 = lexptr;
        1: 3814:        lexptr ++;
        1: 3815:        c = (token )((unsigned char )*tmp___14);
        1: 3816:        lexleft --;
        1: 3817:        if (! ((unsigned int )c - 48U <= 9U)) {
        1: 3818:          goto while_break___2;
        -: 3819:        }
    #####: 3820:        minrep = (10 * minrep + (int )c) - 48;
        -: 3821:      }
        -: 3822:      while_break___2: /* CIL Label */ ;
        -: 3823:      }
        1: 3824:    } else {
        -: 3825:      {
    #####: 3826:      tmp___15 = gettext("malformed repeat count");
    #####: 3827:      dfaerror((char const   *)tmp___15);
        -: 3828:      }
        -: 3829:    }
        1: 3830:    if ((int )c == 44) {
    #####: 3831:      if (! lexleft) {
        -: 3832:        {
    #####: 3833:        tmp___17 = gettext("unfinished repeat count");
        -: 3834:        }
    #####: 3835:        if ((unsigned long )tmp___17 != (unsigned long )((char *)0)) {
        -: 3836:          {
    #####: 3837:          tmp___16 = gettext("unfinished repeat count");
    #####: 3838:          dfaerror((char const   *)tmp___16);
        -: 3839:          }
    #####: 3840:        } else {
    #####: 3841:          lasttok = (token )-1;
    #####: 3842:          return (lasttok);
        -: 3843:        }
    #####: 3844:      }
    #####: 3845:      tmp___18 = lexptr;
    #####: 3846:      lexptr ++;
    #####: 3847:      c = (token )((unsigned char )*tmp___18);
    #####: 3848:      lexleft --;
    #####: 3849:      if (! ((unsigned int )c - 48U <= 9U)) {
    #####: 3850:        maxrep = -1;
    #####: 3851:      } else {
    #####: 3852:        maxrep = (int )c - 48;
        -: 3853:        {
    #####: 3854:        while (1) {
        -: 3855:          while_continue___3: /* CIL Label */ ;
    #####: 3856:          if (! lexleft) {
        -: 3857:            {
    #####: 3858:            tmp___20 = gettext("unfinished repeat count");
        -: 3859:            }
    #####: 3860:            if ((unsigned long )tmp___20 != (unsigned long )((char *)0)) {
        -: 3861:              {
    #####: 3862:              tmp___19 = gettext("unfinished repeat count");
    #####: 3863:              dfaerror((char const   *)tmp___19);
        -: 3864:              }
    #####: 3865:            } else {
    #####: 3866:              lasttok = (token )-1;
    #####: 3867:              return (lasttok);
        -: 3868:            }
    #####: 3869:          }
    #####: 3870:          tmp___21 = lexptr;
    #####: 3871:          lexptr ++;
    #####: 3872:          c = (token )((unsigned char )*tmp___21);
    #####: 3873:          lexleft --;
    #####: 3874:          if (! ((unsigned int )c - 48U <= 9U)) {
    #####: 3875:            goto while_break___3;
        -: 3876:          }
    #####: 3877:          maxrep = (10 * maxrep + (int )c) - 48;
        -: 3878:        }
        -: 3879:        while_break___3: /* CIL Label */ ;
        -: 3880:        }
    #####: 3881:        if (0 <= maxrep) {
    #####: 3882:          if (maxrep < minrep) {
        -: 3883:            {
    #####: 3884:            tmp___22 = gettext("malformed repeat count");
    #####: 3885:            dfaerror((char const   *)tmp___22);
        -: 3886:            }
    #####: 3887:          }
    #####: 3888:        }
        -: 3889:      }
    #####: 3890:    } else {
        1: 3891:      maxrep = minrep;
        -: 3892:    }
        1: 3893:    if (! (syntax_bits & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3894:      if ((int )c != 92) {
        -: 3895:        {
    #####: 3896:        tmp___23 = gettext("malformed repeat count");
    #####: 3897:        dfaerror((char const   *)tmp___23);
        -: 3898:        }
    #####: 3899:      }
    #####: 3900:      if (! lexleft) {
        -: 3901:        {
    #####: 3902:        tmp___25 = gettext("unfinished repeat count");
        -: 3903:        }
    #####: 3904:        if ((unsigned long )tmp___25 != (unsigned long )((char *)0)) {
        -: 3905:          {
    #####: 3906:          tmp___24 = gettext("unfinished repeat count");
    #####: 3907:          dfaerror((char const   *)tmp___24);
        -: 3908:          }
    #####: 3909:        } else {
    #####: 3910:          lasttok = (token )-1;
    #####: 3911:          return (lasttok);
        -: 3912:        }
    #####: 3913:      }
    #####: 3914:      tmp___26 = lexptr;
    #####: 3915:      lexptr ++;
    #####: 3916:      c = (token )((unsigned char )*tmp___26);
    #####: 3917:      lexleft --;
    #####: 3918:    }
        1: 3919:    if ((int )c != 125) {
        -: 3920:      {
    #####: 3921:      tmp___27 = gettext("malformed repeat count");
    #####: 3922:      dfaerror((char const   *)tmp___27);
        -: 3923:      }
    #####: 3924:    }
        1: 3925:    laststart = 0;
        1: 3926:    lasttok = (token )267;
        1: 3927:    return (lasttok);
        -: 3928:    case_124: /* CIL Label */ 
        1: 3929:    if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3930:      goto normal_char;
        -: 3931:    }
        1: 3932:    if (backslash != ((syntax_bits & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
    #####: 3933:      goto normal_char;
        -: 3934:    }
        1: 3935:    laststart = 1;
        1: 3936:    lasttok = (token )269;
        1: 3937:    return (lasttok);
        -: 3938:    case_10: /* CIL Label */ 
    #####: 3939:    if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3940:      goto normal_char;
        -: 3941:    } else { //Added block
    #####: 3942:    if (backslash) {
    #####: 3943:      goto normal_char;
        -: 3944:    } else { //Added block
    #####: 3945:    if (! (syntax_bits & (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####: 3946:      goto normal_char;
        -: 3947:    }
        -: 3948:    }
        -: 3949:    }
    #####: 3950:    laststart = 1;
    #####: 3951:    lasttok = (token )269;
    #####: 3952:    return (lasttok);
        -: 3953:    case_40: /* CIL Label */ 
    #####: 3954:    if (backslash != ((syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
    #####: 3955:      goto normal_char;
        -: 3956:    }
    #####: 3957:    parens ++;
    #####: 3958:    laststart = 1;
    #####: 3959:    lasttok = (token )271;
    #####: 3960:    return (lasttok);
        -: 3961:    case_41: /* CIL Label */ 
    #####: 3962:    if (backslash != ((syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
    #####: 3963:      goto normal_char;
        -: 3964:    }
    #####: 3965:    if (parens == 0) {
    #####: 3966:      if (syntax_bits & (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 3967:        goto normal_char;
        -: 3968:      }
    #####: 3969:    }
    #####: 3970:    parens --;
    #####: 3971:    laststart = 0;
    #####: 3972:    lasttok = (token )272;
    #####: 3973:    return (lasttok);
        -: 3974:    case_46: /* CIL Label */ 
        1: 3975:    if (backslash) {
    #####: 3976:      goto normal_char;
        -: 3977:    }
        -: 3978:    {
        1: 3979:    zeroset(ccl);
        1: 3980:    notset(ccl);
        -: 3981:    }
        1: 3982:    if (! (syntax_bits & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
        -: 3983:      {
        1: 3984:      clrbit((int )eolbyte_1, ccl);
        -: 3985:      }
        1: 3986:    }
        1: 3987:    if (syntax_bits & (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        -: 3988:      {
    #####: 3989:      clrbit('\000', ccl);
        -: 3990:      }
    #####: 3991:    }
        -: 3992:    {
        1: 3993:    laststart = 0;
        1: 3994:    tmp___28 = charclass_index(ccl);
        1: 3995:    lasttok = (token )(273 + tmp___28);
        -: 3996:    }
        1: 3997:    return (lasttok);
        -: 3998:    case_119: /* CIL Label */ 
        -: 3999:    case_87: /* CIL Label */ 
    #####: 4000:    if (! backslash) {
    #####: 4001:      goto normal_char;
        -: 4002:    } else { //Added block
    #####: 4003:    if (syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####: 4004:      goto normal_char;
        -: 4005:    }
        -: 4006:    }
        -: 4007:    {
    #####: 4008:    zeroset(ccl);
    #####: 4009:    c2 = (token )0;
        -: 4010:    }
        -: 4011:    {
    #####: 4012:    while (1) {
        -: 4013:      while_continue___4: /* CIL Label */ ;
    #####: 4014:      if (! ((int )c2 < 1 << 8)) {
    #####: 4015:        goto while_break___4;
        -: 4016:      }
        -: 4017:      {
    #####: 4018:      tmp___29 = __ctype_b_loc();
        -: 4019:      }
    #####: 4020:      if ((int const   )*(*tmp___29 + (int )c2) & 8) {
        -: 4021:        {
    #####: 4022:        setbit((int )c2, ccl);
        -: 4023:        }
    #####: 4024:      } else { //Added block
    #####: 4025:      if ((int )c2 == 95) {
        -: 4026:        {
    #####: 4027:        setbit((int )c2, ccl);
        -: 4028:        }
    #####: 4029:      }
        -: 4030:      }
    #####: 4031:      c2 = (token )((int )c2 + 1);
        -: 4032:    }
        -: 4033:    while_break___4: /* CIL Label */ ;
        -: 4034:    }
    #####: 4035:    if ((int )c == 87) {
        -: 4036:      {
    #####: 4037:      notset(ccl);
        -: 4038:      }
    #####: 4039:    }
        -: 4040:    {
    #####: 4041:    laststart = 0;
    #####: 4042:    tmp___30 = charclass_index(ccl);
    #####: 4043:    lasttok = (token )(273 + tmp___30);
        -: 4044:    }
    #####: 4045:    return (lasttok);
        -: 4046:    case_91: /* CIL Label */ 
    #####: 4047:    if (backslash) {
    #####: 4048:      goto normal_char;
        -: 4049:    }
        -: 4050:    {
    #####: 4051:    zeroset(ccl);
        -: 4052:    }
    #####: 4053:    if (! lexleft) {
        -: 4054:      {
    #####: 4055:      tmp___32 = gettext("Unbalanced [");
        -: 4056:      }
    #####: 4057:      if ((unsigned long )tmp___32 != (unsigned long )((char *)0)) {
        -: 4058:        {
    #####: 4059:        tmp___31 = gettext("Unbalanced [");
    #####: 4060:        dfaerror((char const   *)tmp___31);
        -: 4061:        }
    #####: 4062:      } else {
    #####: 4063:        lasttok = (token )-1;
    #####: 4064:        return (lasttok);
        -: 4065:      }
    #####: 4066:    }
    #####: 4067:    tmp___33 = lexptr;
    #####: 4068:    lexptr ++;
    #####: 4069:    c = (token )((unsigned char )*tmp___33);
    #####: 4070:    lexleft --;
    #####: 4071:    if ((int )c == 94) {
    #####: 4072:      if (! lexleft) {
        -: 4073:        {
    #####: 4074:        tmp___35 = gettext("Unbalanced [");
        -: 4075:        }
    #####: 4076:        if ((unsigned long )tmp___35 != (unsigned long )((char *)0)) {
        -: 4077:          {
    #####: 4078:          tmp___34 = gettext("Unbalanced [");
    #####: 4079:          dfaerror((char const   *)tmp___34);
        -: 4080:          }
    #####: 4081:        } else {
    #####: 4082:          lasttok = (token )-1;
    #####: 4083:          return (lasttok);
        -: 4084:        }
    #####: 4085:      }
    #####: 4086:      tmp___36 = lexptr;
    #####: 4087:      lexptr ++;
    #####: 4088:      c = (token )((unsigned char )*tmp___36);
    #####: 4089:      lexleft --;
    #####: 4090:      invert = 1;
    #####: 4091:    } else {
    #####: 4092:      invert = 0;
        -: 4093:    }
        -: 4094:    {
    #####: 4095:    while (1) {
        -: 4096:      while_continue___5: /* CIL Label */ ;
    #####: 4097:      if ((int )c == 91) {
    #####: 4098:        if (syntax_bits & ((1UL << 1) << 1)) {
    #####: 4099:          c1 = (token )0;
        -: 4100:          {
    #####: 4101:          while (1) {
        -: 4102:            while_continue___6: /* CIL Label */ ;
    #####: 4103:            if (! prednames[c1].name) {
    #####: 4104:              goto while_break___6;
        -: 4105:            }
        -: 4106:            {
    #####: 4107:            tmp___43 = looking_at(prednames[c1].name);
        -: 4108:            }
    #####: 4109:            if (tmp___43) {
    #####: 4110:              pred = (int (*)())prednames[c1].pred;
    #####: 4111:              if (case_fold) {
    #####: 4112:                if ((unsigned long )pred == (unsigned long )(& is_upper)) {
    #####: 4113:                  pred = (int (*)())(& is_alpha);
    #####: 4114:                } else { //Added block
    #####: 4115:                if ((unsigned long )pred == (unsigned long )(& is_lower)) {
    #####: 4116:                  pred = (int (*)())(& is_alpha);
    #####: 4117:                }
        -: 4118:                }
    #####: 4119:              }
    #####: 4120:              c2 = (token )0;
        -: 4121:              {
    #####: 4122:              while (1) {
        -: 4123:                while_continue___7: /* CIL Label */ ;
    #####: 4124:                if (! ((int )c2 < 1 << 8)) {
    #####: 4125:                  goto while_break___7;
        -: 4126:                }
        -: 4127:                {
    #####: 4128:                tmp___37 = (*pred)((int )c2);
        -: 4129:                }
    #####: 4130:                if (tmp___37) {
        -: 4131:                  {
    #####: 4132:                  setbit((int )c2, ccl);
        -: 4133:                  }
    #####: 4134:                }
    #####: 4135:                c2 = (token )((int )c2 + 1);
        -: 4136:              }
        -: 4137:              while_break___7: /* CIL Label */ ;
        -: 4138:              }
        -: 4139:              {
    #####: 4140:              tmp___38 = strlen(prednames[c1].name);
    #####: 4141:              lexptr += tmp___38;
    #####: 4142:              tmp___39 = strlen(prednames[c1].name);
    #####: 4143:              lexleft = (int )((size_t )lexleft - tmp___39);
        -: 4144:              }
    #####: 4145:              if (! lexleft) {
        -: 4146:                {
    #####: 4147:                tmp___41 = gettext("Unbalanced [");
        -: 4148:                }
    #####: 4149:                if ((unsigned long )tmp___41 != (unsigned long )((char *)0)) {
        -: 4150:                  {
    #####: 4151:                  tmp___40 = gettext("Unbalanced [");
    #####: 4152:                  dfaerror((char const   *)tmp___40);
        -: 4153:                  }
    #####: 4154:                } else {
    #####: 4155:                  lasttok = (token )-1;
    #####: 4156:                  return (lasttok);
        -: 4157:                }
    #####: 4158:              }
    #####: 4159:              tmp___42 = lexptr;
    #####: 4160:              lexptr ++;
    #####: 4161:              c1 = (token )((unsigned char )*tmp___42);
    #####: 4162:              lexleft --;
    #####: 4163:              goto skip;
        -: 4164:            }
    #####: 4165:            c1 = (token )((int )c1 + 1);
        -: 4166:          }
        -: 4167:          while_break___6: /* CIL Label */ ;
        -: 4168:          }
    #####: 4169:        }
    #####: 4170:      }
    #####: 4171:      if ((int )c == 92) {
    #####: 4172:        if (syntax_bits & 1UL) {
    #####: 4173:          if (! lexleft) {
        -: 4174:            {
    #####: 4175:            tmp___45 = gettext("Unbalanced [");
        -: 4176:            }
    #####: 4177:            if ((unsigned long )tmp___45 != (unsigned long )((char *)0)) {
        -: 4178:              {
    #####: 4179:              tmp___44 = gettext("Unbalanced [");
    #####: 4180:              dfaerror((char const   *)tmp___44);
        -: 4181:              }
    #####: 4182:            } else {
    #####: 4183:              lasttok = (token )-1;
    #####: 4184:              return (lasttok);
        -: 4185:            }
    #####: 4186:          }
    #####: 4187:          tmp___46 = lexptr;
    #####: 4188:          lexptr ++;
    #####: 4189:          c = (token )((unsigned char )*tmp___46);
    #####: 4190:          lexleft --;
    #####: 4191:        }
    #####: 4192:      }
    #####: 4193:      if (! lexleft) {
        -: 4194:        {
    #####: 4195:        tmp___48 = gettext("Unbalanced [");
        -: 4196:        }
    #####: 4197:        if ((unsigned long )tmp___48 != (unsigned long )((char *)0)) {
        -: 4198:          {
    #####: 4199:          tmp___47 = gettext("Unbalanced [");
    #####: 4200:          dfaerror((char const   *)tmp___47);
        -: 4201:          }
    #####: 4202:        } else {
    #####: 4203:          lasttok = (token )-1;
    #####: 4204:          return (lasttok);
        -: 4205:        }
    #####: 4206:      }
    #####: 4207:      tmp___49 = lexptr;
    #####: 4208:      lexptr ++;
    #####: 4209:      c1 = (token )((unsigned char )*tmp___49);
    #####: 4210:      lexleft --;
    #####: 4211:      if ((int )c1 == 45) {
    #####: 4212:        if (! lexleft) {
        -: 4213:          {
    #####: 4214:          tmp___51 = gettext("Unbalanced [");
        -: 4215:          }
    #####: 4216:          if ((unsigned long )tmp___51 != (unsigned long )((char *)0)) {
        -: 4217:            {
    #####: 4218:            tmp___50 = gettext("Unbalanced [");
    #####: 4219:            dfaerror((char const   *)tmp___50);
        -: 4220:            }
    #####: 4221:          } else {
    #####: 4222:            lasttok = (token )-1;
    #####: 4223:            return (lasttok);
        -: 4224:          }
    #####: 4225:        }
    #####: 4226:        tmp___52 = lexptr;
    #####: 4227:        lexptr ++;
    #####: 4228:        c2 = (token )((unsigned char )*tmp___52);
    #####: 4229:        lexleft --;
    #####: 4230:        if ((int )c2 == 93) {
    #####: 4231:          lexptr --;
    #####: 4232:          lexleft ++;
    #####: 4233:          c2 = c;
    #####: 4234:        } else {
    #####: 4235:          if ((int )c2 == 92) {
    #####: 4236:            if (syntax_bits & 1UL) {
    #####: 4237:              if (! lexleft) {
        -: 4238:                {
    #####: 4239:                tmp___54 = gettext("Unbalanced [");
        -: 4240:                }
    #####: 4241:                if ((unsigned long )tmp___54 != (unsigned long )((char *)0)) {
        -: 4242:                  {
    #####: 4243:                  tmp___53 = gettext("Unbalanced [");
    #####: 4244:                  dfaerror((char const   *)tmp___53);
        -: 4245:                  }
    #####: 4246:                } else {
    #####: 4247:                  lasttok = (token )-1;
    #####: 4248:                  return (lasttok);
        -: 4249:                }
    #####: 4250:              }
    #####: 4251:              tmp___55 = lexptr;
    #####: 4252:              lexptr ++;
    #####: 4253:              c2 = (token )((unsigned char )*tmp___55);
    #####: 4254:              lexleft --;
    #####: 4255:            }
    #####: 4256:          }
    #####: 4257:          if (! lexleft) {
        -: 4258:            {
    #####: 4259:            tmp___57 = gettext("Unbalanced [");
        -: 4260:            }
    #####: 4261:            if ((unsigned long )tmp___57 != (unsigned long )((char *)0)) {
        -: 4262:              {
    #####: 4263:              tmp___56 = gettext("Unbalanced [");
    #####: 4264:              dfaerror((char const   *)tmp___56);
        -: 4265:              }
    #####: 4266:            } else {
    #####: 4267:              lasttok = (token )-1;
    #####: 4268:              return (lasttok);
        -: 4269:            }
    #####: 4270:          }
    #####: 4271:          tmp___58 = lexptr;
    #####: 4272:          lexptr ++;
    #####: 4273:          c1 = (token )((unsigned char )*tmp___58);
    #####: 4274:          lexleft --;
        -: 4275:        }
    #####: 4276:      } else {
    #####: 4277:        c2 = c;
        -: 4278:      }
    #####: 4279:      lo[0] = (char )c;
    #####: 4280:      lo[1] = (char )'\000';
    #####: 4281:      hi[0] = (char )c2;
    #####: 4282:      hi[1] = (char )'\000';
    #####: 4283:      c = (token )0;
        -: 4284:      {
    #####: 4285:      while (1) {
        -: 4286:        while_continue___8: /* CIL Label */ ;
    #####: 4287:        if (! ((int )c < 1 << 8)) {
    #####: 4288:          goto while_break___8;
        -: 4289:        }
        -: 4290:        {
    #####: 4291:        ch[0] = (char )c;
    #####: 4292:        ch[1] = (char )'\000';
    #####: 4293:        tmp___63 = strcoll((char const   *)(lo), (char const   *)(ch));
        -: 4294:        }
    #####: 4295:        if (tmp___63 <= 0) {
        -: 4296:          {
    #####: 4297:          tmp___64 = strcoll((char const   *)(ch), (char const   *)(hi));
        -: 4298:          }
    #####: 4299:          if (tmp___64 <= 0) {
        -: 4300:            {
    #####: 4301:            setbit((int )c, ccl);
        -: 4302:            }
    #####: 4303:            if (case_fold) {
        -: 4304:              {
    #####: 4305:              tmp___62 = __ctype_b_loc();
        -: 4306:              }
    #####: 4307:              if ((int const   )*(*tmp___62 + (int )c) & 256) {
        -: 4308:                {
    #####: 4309:                tmp___59 = tolower((int )c);
    #####: 4310:                setbit(tmp___59, ccl);
        -: 4311:                }
    #####: 4312:              } else {
        -: 4313:                {
    #####: 4314:                tmp___61 = __ctype_b_loc();
        -: 4315:                }
    #####: 4316:                if ((int const   )*(*tmp___61 + (int )c) & 512) {
        -: 4317:                  {
    #####: 4318:                  tmp___60 = toupper((int )c);
    #####: 4319:                  setbit(tmp___60, ccl);
        -: 4320:                  }
    #####: 4321:                }
        -: 4322:              }
    #####: 4323:            }
    #####: 4324:          }
    #####: 4325:        }
    #####: 4326:        c = (token )((int )c + 1);
        -: 4327:      }
        -: 4328:      while_break___8: /* CIL Label */ ;
    #####: 4329:      }
        -: 4330:      skip: 
    #####: 4331:      c = c1;
    #####: 4332:      if (! ((int )c != 93)) {
    #####: 4333:        goto while_break___5;
        -: 4334:      }
        -: 4335:    }
        -: 4336:    while_break___5: /* CIL Label */ ;
        -: 4337:    }
    #####: 4338:    if (invert) {
        -: 4339:      {
    #####: 4340:      notset(ccl);
        -: 4341:      }
    #####: 4342:      if (syntax_bits & ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        -: 4343:        {
    #####: 4344:        clrbit((int )eolbyte_1, ccl);
        -: 4345:        }
    #####: 4346:      }
    #####: 4347:    }
        -: 4348:    {
    #####: 4349:    laststart = 0;
    #####: 4350:    tmp___65 = charclass_index(ccl);
    #####: 4351:    lasttok = (token )(273 + tmp___65);
        -: 4352:    }
       12: 4353:    return (lasttok);
        -: 4354:    normal_char: 
        -: 4355:    switch_default: /* CIL Label */ 
       12: 4356:    laststart = 0;
       12: 4357:    if (case_fold) {
        -: 4358:      {
    #####: 4359:      tmp___70 = __ctype_b_loc();
        -: 4360:      }
    #####: 4361:      if ((int const   )*(*tmp___70 + (int )c) & 1024) {
        -: 4362:        {
    #####: 4363:        zeroset(ccl);
    #####: 4364:        setbit((int )c, ccl);
    #####: 4365:        tmp___68 = __ctype_b_loc();
        -: 4366:        }
    #####: 4367:        if ((int const   )*(*tmp___68 + (int )c) & 256) {
        -: 4368:          {
    #####: 4369:          tmp___66 = tolower((int )c);
    #####: 4370:          setbit(tmp___66, ccl);
        -: 4371:          }
    #####: 4372:        } else {
        -: 4373:          {
    #####: 4374:          tmp___67 = toupper((int )c);
    #####: 4375:          setbit(tmp___67, ccl);
        -: 4376:          }
        -: 4377:        }
        -: 4378:        {
    #####: 4379:        tmp___69 = charclass_index(ccl);
    #####: 4380:        lasttok = (token )(273 + tmp___69);
        -: 4381:        }
    #####: 4382:        return (lasttok);
        -: 4383:      }
    #####: 4384:    }
       12: 4385:    return (c);
        -: 4386:    switch_break: /* CIL Label */ ;
        -: 4387:    }
    #####: 4388:    i ++;
        -: 4389:  }
        -: 4390:  while_break: /* CIL Label */ ;
        -: 4391:  }
        -: 4392:  {
    #####: 4393:  abort();
        -: 4394:  }
        -: 4395:  return ((token )-1);
        -: 4396:}
       16: 4397:}
        -: 4398:static token tok  ;
        -: 4399:static int depth  ;
       27: 4400:static void addtok(token t ) 
        -: 4401:{ 
        -: 4402:  ptr_t tmp ;
        -: 4403:  int tmp___0 ;
        -: 4404:
        -: 4405:  {
       27: 4406:  if (dfa->tindex >= dfa->talloc) {
        -: 4407:    {
       10: 4408:    while (1) {
        -: 4409:      while_continue: /* CIL Label */ ;
       10: 4410:      if (! (dfa->tindex >= dfa->talloc)) {
        5: 4411:        goto while_break;
        -: 4412:      }
        5: 4413:      dfa->talloc *= 2;
        -: 4414:    }
        -: 4415:    while_break: /* CIL Label */ ;
        -: 4416:    }
        -: 4417:    {
        5: 4418:    tmp = xrealloc_1((ptr_t )dfa->tokens, (unsigned long )dfa->talloc * sizeof(token ));
        5: 4419:    dfa->tokens = (token *)tmp;
        -: 4420:    }
        5: 4421:  }
       27: 4422:  tmp___0 = dfa->tindex;
       27: 4423:  (dfa->tindex) ++;
       27: 4424:  *(dfa->tokens + tmp___0) = t;
        -: 4425:  {
       27: 4426:  if ((int )t == 264) {
    #####: 4427:    goto case_264;
        -: 4428:  }
       27: 4429:  if ((int )t == 265) {
    #####: 4430:    goto case_264;
        -: 4431:  }
       27: 4432:  if ((int )t == 266) {
    #####: 4433:    goto case_264;
        -: 4434:  }
       27: 4435:  if ((int )t == 268) {
       12: 4436:    goto case_268;
        -: 4437:  }
       15: 4438:  if ((int )t == 269) {
    #####: 4439:    goto case_268;
        -: 4440:  }
       15: 4441:  if ((int )t == 270) {
        1: 4442:    goto case_268;
        -: 4443:  }
       14: 4444:  if ((int )t == 256) {
    #####: 4445:    goto case_256;
        -: 4446:  }
       14: 4447:  goto switch_default;
        -: 4448:  case_264: /* CIL Label */ 
        -: 4449:  case_265: /* CIL Label */ 
        -: 4450:  case_266: /* CIL Label */ 
       13: 4451:  goto switch_break;
        -: 4452:  case_268: /* CIL Label */ 
        -: 4453:  case_269: /* CIL Label */ 
        -: 4454:  case_270: /* CIL Label */ 
       13: 4455:  depth --;
       13: 4456:  goto switch_break;
        -: 4457:  switch_default: /* CIL Label */ 
       14: 4458:  (dfa->nleaves) ++;
        -: 4459:  case_256: /* CIL Label */ 
       14: 4460:  depth ++;
       14: 4461:  goto switch_break;
        -: 4462:  switch_break: /* CIL Label */ ;
        -: 4463:  }
       27: 4464:  if (depth > dfa->depth) {
        3: 4465:    dfa->depth = depth;
        3: 4466:  }
       27: 4467:  return;
        -: 4468:}
        -: 4469:}
       13: 4470:static void atom(void) 
        -: 4471:{ 
        -: 4472:  char *tmp ;
        -: 4473:
        -: 4474:  {
       13: 4475:  if ((int )tok >= 0) {
       13: 4476:    if ((int )tok < 1 << 8) {
        -: 4477:      {
       12: 4478:      addtok(tok);
       12: 4479:      tok = lex();
        -: 4480:      }
       12: 4481:    } else {
        1: 4482:      goto _L;
        -: 4483:    }
       12: 4484:  } else { //Added block
        -: 4485:  _L: 
        1: 4486:  if ((int )tok >= 273) {
        -: 4487:    {
        1: 4488:    addtok(tok);
        1: 4489:    tok = lex();
        -: 4490:    }
        1: 4491:  } else { //Added block
    #####: 4492:  if ((int )tok == 257) {
        -: 4493:    {
    #####: 4494:    addtok(tok);
    #####: 4495:    tok = lex();
        -: 4496:    }
    #####: 4497:  } else { //Added block
    #####: 4498:  if ((int )tok == 258) {
        -: 4499:    {
    #####: 4500:    addtok(tok);
    #####: 4501:    tok = lex();
        -: 4502:    }
    #####: 4503:  } else { //Added block
    #####: 4504:  if ((int )tok == 259) {
        -: 4505:    {
    #####: 4506:    addtok(tok);
    #####: 4507:    tok = lex();
        -: 4508:    }
    #####: 4509:  } else { //Added block
    #####: 4510:  if ((int )tok == 260) {
        -: 4511:    {
    #####: 4512:    addtok(tok);
    #####: 4513:    tok = lex();
        -: 4514:    }
    #####: 4515:  } else { //Added block
    #####: 4516:  if ((int )tok == 261) {
        -: 4517:    {
    #####: 4518:    addtok(tok);
    #####: 4519:    tok = lex();
        -: 4520:    }
    #####: 4521:  } else { //Added block
    #####: 4522:  if ((int )tok == 262) {
        -: 4523:    {
    #####: 4524:    addtok(tok);
    #####: 4525:    tok = lex();
        -: 4526:    }
    #####: 4527:  } else { //Added block
    #####: 4528:  if ((int )tok == 263) {
        -: 4529:    {
    #####: 4530:    addtok(tok);
    #####: 4531:    tok = lex();
        -: 4532:    }
    #####: 4533:  } else { //Added block
    #####: 4534:  if ((int )tok == 271) {
        -: 4535:    {
    #####: 4536:    tok = lex();
    #####: 4537:    regexp(0);
        -: 4538:    }
    #####: 4539:    if ((int )tok != 272) {
        -: 4540:      {
    #####: 4541:      tmp = gettext("Unbalanced (");
    #####: 4542:      dfaerror((char const   *)tmp);
        -: 4543:      }
    #####: 4544:    }
        -: 4545:    {
    #####: 4546:    tok = lex();
        -: 4547:    }
    #####: 4548:  } else {
        -: 4549:    {
    #####: 4550:    addtok((token )256);
        -: 4551:    }
        -: 4552:  }
        -: 4553:  }
        -: 4554:  }
        -: 4555:  }
        -: 4556:  }
        -: 4557:  }
        -: 4558:  }
        -: 4559:  }
        -: 4560:  }
        -: 4561:  }
       13: 4562:  return;
        -: 4563:}
        -: 4564:}
        1: 4565:static int nsubtoks(int tindex ) 
        -: 4566:{ 
        -: 4567:  int ntoks1 ;
        -: 4568:  int tmp ;
        -: 4569:  int tmp___0 ;
        -: 4570:
        -: 4571:  {
        -: 4572:  {
        1: 4573:  if ((int )*(dfa->tokens + (tindex - 1)) == 264) {
    #####: 4574:    goto case_264;
        -: 4575:  }
        1: 4576:  if ((int )*(dfa->tokens + (tindex - 1)) == 265) {
    #####: 4577:    goto case_264;
        -: 4578:  }
        1: 4579:  if ((int )*(dfa->tokens + (tindex - 1)) == 266) {
    #####: 4580:    goto case_264;
        -: 4581:  }
        1: 4582:  if ((int )*(dfa->tokens + (tindex - 1)) == 268) {
    #####: 4583:    goto case_268;
        -: 4584:  }
        1: 4585:  if ((int )*(dfa->tokens + (tindex - 1)) == 269) {
    #####: 4586:    goto case_268;
        -: 4587:  }
        1: 4588:  if ((int )*(dfa->tokens + (tindex - 1)) == 270) {
    #####: 4589:    goto case_268;
        -: 4590:  }
        1: 4591:  goto switch_default;
        -: 4592:  switch_default: /* CIL Label */ 
        1: 4593:  return (1);
        -: 4594:  case_264: /* CIL Label */ 
        -: 4595:  case_265: /* CIL Label */ 
        -: 4596:  case_266: /* CIL Label */ 
        -: 4597:  {
    #####: 4598:  tmp = nsubtoks(tindex - 1);
        -: 4599:  }
    #####: 4600:  return (1 + tmp);
        -: 4601:  case_268: /* CIL Label */ 
        -: 4602:  case_269: /* CIL Label */ 
        -: 4603:  case_270: /* CIL Label */ 
        -: 4604:  {
    #####: 4605:  ntoks1 = nsubtoks(tindex - 1);
    #####: 4606:  tmp___0 = nsubtoks((tindex - 1) - ntoks1);
        -: 4607:  }
    #####: 4608:  return ((1 + ntoks1) + tmp___0);
        -: 4609:  switch_break: /* CIL Label */ ;
        -: 4610:  }
        -: 4611:}
        1: 4612:}
    #####: 4613:static void copytoks(int tindex , int ntokens ) 
        -: 4614:{ 
        -: 4615:  int i ;
        -: 4616:
        -: 4617:  {
    #####: 4618:  i = 0;
        -: 4619:  {
    #####: 4620:  while (1) {
        -: 4621:    while_continue: /* CIL Label */ ;
    #####: 4622:    if (! (i < ntokens)) {
    #####: 4623:      goto while_break;
        -: 4624:    }
        -: 4625:    {
    #####: 4626:    addtok(*(dfa->tokens + (tindex + i)));
    #####: 4627:    i ++;
        -: 4628:    }
        -: 4629:  }
        -: 4630:  while_break: /* CIL Label */ ;
        -: 4631:  }
    #####: 4632:  return;
        -: 4633:}
        -: 4634:}
       13: 4635:static void closure(void) 
        -: 4636:{ 
        -: 4637:  int tindex ;
        -: 4638:  int ntokens ;
        -: 4639:  int i ;
        -: 4640:
        -: 4641:  {
        -: 4642:  {
       13: 4643:  atom();
        -: 4644:  }
        -: 4645:  {
       14: 4646:  while (1) {
        -: 4647:    while_continue: /* CIL Label */ ;
       14: 4648:    if (! ((int )tok == 264)) {
       14: 4649:      if (! ((int )tok == 265)) {
       14: 4650:        if (! ((int )tok == 266)) {
       14: 4651:          if (! ((int )tok == 267)) {
       13: 4652:            goto while_break;
        -: 4653:          }
        1: 4654:        }
        1: 4655:      }
        1: 4656:    }
        1: 4657:    if ((int )tok == 267) {
        -: 4658:      {
        1: 4659:      ntokens = nsubtoks(dfa->tindex);
        1: 4660:      tindex = dfa->tindex - ntokens;
        -: 4661:      }
        1: 4662:      if (maxrep < 0) {
        -: 4663:        {
    #####: 4664:        addtok((token )266);
        -: 4665:        }
    #####: 4666:      }
        1: 4667:      if (minrep == 0) {
        -: 4668:        {
    #####: 4669:        addtok((token )264);
        -: 4670:        }
    #####: 4671:      }
        1: 4672:      i = 1;
        -: 4673:      {
        1: 4674:      while (1) {
        -: 4675:        while_continue___0: /* CIL Label */ ;
        1: 4676:        if (! (i < minrep)) {
        1: 4677:          goto while_break___0;
        -: 4678:        }
        -: 4679:        {
    #####: 4680:        copytoks(tindex, ntokens);
    #####: 4681:        addtok((token )268);
    #####: 4682:        i ++;
        -: 4683:        }
        -: 4684:      }
        -: 4685:      while_break___0: /* CIL Label */ ;
        -: 4686:      }
        -: 4687:      {
        1: 4688:      while (1) {
        -: 4689:        while_continue___1: /* CIL Label */ ;
        1: 4690:        if (! (i < maxrep)) {
        1: 4691:          goto while_break___1;
        -: 4692:        }
        -: 4693:        {
    #####: 4694:        copytoks(tindex, ntokens);
    #####: 4695:        addtok((token )264);
    #####: 4696:        addtok((token )268);
    #####: 4697:        i ++;
        -: 4698:        }
        -: 4699:      }
        -: 4700:      while_break___1: /* CIL Label */ ;
        -: 4701:      }
        -: 4702:      {
        1: 4703:      tok = lex();
        -: 4704:      }
        1: 4705:    } else {
        -: 4706:      {
    #####: 4707:      addtok(tok);
    #####: 4708:      tok = lex();
        -: 4709:      }
        -: 4710:    }
        -: 4711:  }
        -: 4712:  while_break: /* CIL Label */ ;
        -: 4713:  }
       13: 4714:  return;
        -: 4715:}
        -: 4716:}
        2: 4717:static void branch(void) 
        -: 4718:{ 
        -: 4719:
        -: 4720:
        -: 4721:  {
        -: 4722:  {
        2: 4723:  closure();
        -: 4724:  }
        -: 4725:  {
       13: 4726:  while (1) {
        -: 4727:    while_continue: /* CIL Label */ ;
       13: 4728:    if ((int )tok != 272) {
       13: 4729:      if ((int )tok != 269) {
       12: 4730:        if (! ((int )tok >= 0)) {
        1: 4731:          goto while_break;
        -: 4732:        }
       11: 4733:      } else {
        1: 4734:        goto while_break;
        -: 4735:      }
       11: 4736:    } else {
    #####: 4737:      goto while_break;
        -: 4738:    }
        -: 4739:    {
       11: 4740:    closure();
       11: 4741:    addtok((token )268);
        -: 4742:    }
        -: 4743:  }
        -: 4744:  while_break: /* CIL Label */ ;
        -: 4745:  }
        2: 4746:  return;
        -: 4747:}
        -: 4748:}
        1: 4749:static void regexp(int toplevel ) 
        -: 4750:{ 
        -: 4751:
        -: 4752:
        -: 4753:  {
        -: 4754:  {
        1: 4755:  branch();
        -: 4756:  }
        -: 4757:  {
        2: 4758:  while (1) {
        -: 4759:    while_continue: /* CIL Label */ ;
        2: 4760:    if (! ((int )tok == 269)) {
        1: 4761:      goto while_break;
        -: 4762:    }
        -: 4763:    {
        1: 4764:    tok = lex();
        1: 4765:    branch();
        -: 4766:    }
        1: 4767:    if (toplevel) {
        -: 4768:      {
        1: 4769:      addtok((token )270);
        -: 4770:      }
        1: 4771:    } else {
        -: 4772:      {
    #####: 4773:      addtok((token )269);
        -: 4774:      }
        -: 4775:    }
        -: 4776:  }
        -: 4777:  while_break: /* CIL Label */ ;
        -: 4778:  }
        1: 4779:  return;
        -: 4780:}
        -: 4781:}
        1: 4782:void dfaparse(char *s , size_t len , struct dfa *d ) 
        -: 4783:{ 
        -: 4784:  char *tmp ;
        -: 4785:  char *tmp___0 ;
        -: 4786:
        -: 4787:  {
        1: 4788:  dfa = d;
        1: 4789:  lexptr = s;
        1: 4790:  lexstart = lexptr;
        1: 4791:  lexleft = (int )len;
        1: 4792:  lasttok = (token )-1;
        1: 4793:  laststart = 1;
        1: 4794:  parens = 0;
        1: 4795:  if (! syntax_bits_set) {
        -: 4796:    {
    #####: 4797:    tmp = gettext("No syntax specified");
    #####: 4798:    dfaerror((char const   *)tmp);
        -: 4799:    }
    #####: 4800:  }
        -: 4801:  {
        1: 4802:  tok = lex();
        1: 4803:  depth = d->depth;
        1: 4804:  regexp(1);
        -: 4805:  }
        1: 4806:  if ((int )tok != -1) {
        -: 4807:    {
    #####: 4808:    tmp___0 = gettext("Unbalanced )");
    #####: 4809:    dfaerror((char const   *)tmp___0);
        -: 4810:    }
    #####: 4811:  }
        -: 4812:  {
        1: 4813:  addtok((token )(-1 - d->nregexps));
        1: 4814:  addtok((token )268);
        -: 4815:  }
        1: 4816:  if (d->nregexps) {
        -: 4817:    {
    #####: 4818:    addtok((token )270);
        -: 4819:    }
    #####: 4820:  }
        1: 4821:  (d->nregexps) ++;
        1: 4822:  return;
        -: 4823:}
        -: 4824:}
       74: 4825:static void copy(position_set *src , position_set *dst ) 
        -: 4826:{ 
        -: 4827:  int i ;
        -: 4828:
        -: 4829:  {
       74: 4830:  i = 0;
        -: 4831:  {
      195: 4832:  while (1) {
        -: 4833:    while_continue: /* CIL Label */ ;
      195: 4834:    if (! (i < src->nelem)) {
       74: 4835:      goto while_break;
        -: 4836:    }
      121: 4837:    *(dst->elems + i) = *(src->elems + i);
      121: 4838:    i ++;
        -: 4839:  }
        -: 4840:  while_break: /* CIL Label */ ;
        -: 4841:  }
       74: 4842:  dst->nelem = src->nelem;
       74: 4843:  return;
        -: 4844:}
        -: 4845:}
      123: 4846:static void insert(position p , position_set *s ) 
        -: 4847:{ 
        -: 4848:  int i ;
        -: 4849:  position t1 ;
        -: 4850:  position t2 ;
        -: 4851:  int tmp ;
        -: 4852:
        -: 4853:  {
      123: 4854:  i = 0;
        -: 4855:  {
      244: 4856:  while (1) {
        -: 4857:    while_continue: /* CIL Label */ ;
      244: 4858:    if (i < s->nelem) {
      140: 4859:      if (! (p.strchr < (s->elems + i)->strchr)) {
       19: 4860:        goto while_break;
        -: 4861:      }
      121: 4862:    } else {
      104: 4863:      goto while_break;
        -: 4864:    }
      121: 4865:    goto __Cont;
        -: 4866:    __Cont: 
      121: 4867:    i ++;
        -: 4868:  }
        -: 4869:  while_break: /* CIL Label */ ;
        -: 4870:  }
      123: 4871:  if (i < s->nelem) {
       19: 4872:    if (p.strchr == (s->elems + i)->strchr) {
        1: 4873:      (s->elems + i)->constraint |= p.constraint;
        1: 4874:    } else {
       18: 4875:      goto _L;
        -: 4876:    }
      105: 4877:  } else {
        -: 4878:    _L: 
      122: 4879:    t1 = p;
      122: 4880:    (s->nelem) ++;
        -: 4881:    {
      262: 4882:    while (1) {
        -: 4883:      while_continue___0: /* CIL Label */ ;
      262: 4884:      if (! (i < s->nelem)) {
      122: 4885:        goto while_break___0;
        -: 4886:      }
      140: 4887:      t2 = *(s->elems + i);
      140: 4888:      tmp = i;
      140: 4889:      i ++;
      140: 4890:      *(s->elems + tmp) = t1;
      140: 4891:      t1 = t2;
        -: 4892:    }
        -: 4893:    while_break___0: /* CIL Label */ ;
        -: 4894:    }
        -: 4895:  }
      123: 4896:  return;
        -: 4897:}
        -: 4898:}
       13: 4899:static void merge(position_set *s1 , position_set *s2 , position_set *m ) 
        -: 4900:{ 
        -: 4901:  int i ;
        -: 4902:  int j ;
        -: 4903:  int tmp ;
        -: 4904:  int tmp___0 ;
        -: 4905:  int tmp___1 ;
        -: 4906:  int tmp___2 ;
        -: 4907:  int tmp___3 ;
        -: 4908:  int tmp___4 ;
        -: 4909:  int tmp___5 ;
        -: 4910:  int tmp___6 ;
        -: 4911:  int tmp___7 ;
        -: 4912:  int tmp___8 ;
        -: 4913:  int tmp___9 ;
        -: 4914:
        -: 4915:  {
       13: 4916:  i = 0;
       13: 4917:  j = 0;
       13: 4918:  m->nelem = 0;
        -: 4919:  {
       13: 4920:  while (1) {
        -: 4921:    while_continue: /* CIL Label */ ;
       13: 4922:    if (i < s1->nelem) {
       13: 4923:      if (! (j < s2->nelem)) {
       13: 4924:        goto while_break;
        -: 4925:      }
    #####: 4926:    } else {
    #####: 4927:      goto while_break;
        -: 4928:    }
    #####: 4929:    if ((s1->elems + i)->strchr > (s2->elems + j)->strchr) {
    #####: 4930:      tmp = m->nelem;
    #####: 4931:      (m->nelem) ++;
    #####: 4932:      tmp___0 = i;
    #####: 4933:      i ++;
    #####: 4934:      *(m->elems + tmp) = *(s1->elems + tmp___0);
    #####: 4935:    } else { //Added block
    #####: 4936:    if ((s1->elems + i)->strchr < (s2->elems + j)->strchr) {
    #####: 4937:      tmp___1 = m->nelem;
    #####: 4938:      (m->nelem) ++;
    #####: 4939:      tmp___2 = j;
    #####: 4940:      j ++;
    #####: 4941:      *(m->elems + tmp___1) = *(s2->elems + tmp___2);
    #####: 4942:    } else {
    #####: 4943:      tmp___3 = i;
    #####: 4944:      i ++;
    #####: 4945:      *(m->elems + m->nelem) = *(s1->elems + tmp___3);
    #####: 4946:      tmp___4 = m->nelem;
    #####: 4947:      (m->nelem) ++;
    #####: 4948:      tmp___5 = j;
    #####: 4949:      j ++;
    #####: 4950:      (m->elems + tmp___4)->constraint |= (s2->elems + tmp___5)->constraint;
        -: 4951:    }
        -: 4952:    }
        -: 4953:  }
        -: 4954:  while_break: /* CIL Label */ ;
        -: 4955:  }
        -: 4956:  {
       26: 4957:  while (1) {
        -: 4958:    while_continue___0: /* CIL Label */ ;
       26: 4959:    if (! (i < s1->nelem)) {
       13: 4960:      goto while_break___0;
        -: 4961:    }
       13: 4962:    tmp___6 = m->nelem;
       13: 4963:    (m->nelem) ++;
       13: 4964:    tmp___7 = i;
       13: 4965:    i ++;
       13: 4966:    *(m->elems + tmp___6) = *(s1->elems + tmp___7);
        -: 4967:  }
        -: 4968:  while_break___0: /* CIL Label */ ;
        -: 4969:  }
        -: 4970:  {
       13: 4971:  while (1) {
        -: 4972:    while_continue___1: /* CIL Label */ ;
       13: 4973:    if (! (j < s2->nelem)) {
       13: 4974:      goto while_break___1;
        -: 4975:    }
    #####: 4976:    tmp___8 = m->nelem;
    #####: 4977:    (m->nelem) ++;
    #####: 4978:    tmp___9 = j;
    #####: 4979:    j ++;
    #####: 4980:    *(m->elems + tmp___8) = *(s2->elems + tmp___9);
        -: 4981:  }
        -: 4982:  while_break___1: /* CIL Label */ ;
        -: 4983:  }
       13: 4984:  return;
        -: 4985:}
        -: 4986:}
    #####: 4987:static void delete(position p , position_set *s ) 
        -: 4988:{ 
        -: 4989:  int i ;
        -: 4990:
        -: 4991:  {
    #####: 4992:  i = 0;
        -: 4993:  {
    #####: 4994:  while (1) {
        -: 4995:    while_continue: /* CIL Label */ ;
    #####: 4996:    if (! (i < s->nelem)) {
    #####: 4997:      goto while_break;
        -: 4998:    }
    #####: 4999:    if (p.strchr == (s->elems + i)->strchr) {
    #####: 5000:      goto while_break;
        -: 5001:    }
    #####: 5002:    i ++;
        -: 5003:  }
        -: 5004:  while_break: /* CIL Label */ ;
        -: 5005:  }
    #####: 5006:  if (i < s->nelem) {
    #####: 5007:    (s->nelem) --;
        -: 5008:    {
    #####: 5009:    while (1) {
        -: 5010:      while_continue___0: /* CIL Label */ ;
    #####: 5011:      if (! (i < s->nelem)) {
    #####: 5012:        goto while_break___0;
        -: 5013:      }
    #####: 5014:      *(s->elems + i) = *(s->elems + (i + 1));
    #####: 5015:      i ++;
        -: 5016:    }
        -: 5017:    while_break___0: /* CIL Label */ ;
        -: 5018:    }
    #####: 5019:  }
    #####: 5020:  return;
        -: 5021:}
        -: 5022:}
       51: 5023:static int state_index(struct dfa *d , position_set *s , int newline___0 , int letter ) 
        -: 5024:{ 
        -: 5025:  int hash ;
        -: 5026:  int constraint ;
        -: 5027:  int i ;
        -: 5028:  int j ;
        -: 5029:  ptr_t tmp ;
        -: 5030:  ptr_t tmp___0 ;
        -: 5031:  int tmp___1 ;
        -: 5032:  int tmp___2 ;
        -: 5033:  int tmp___3 ;
        -: 5034:  int tmp___4 ;
        -: 5035:  int tmp___5 ;
        -: 5036:  int tmp___6 ;
        -: 5037:  int tmp___7 ;
        -: 5038:  int tmp___8 ;
        -: 5039:
        -: 5040:  {
       51: 5041:  hash = 0;
       51: 5042:  if (newline___0) {
    #####: 5043:    newline___0 = 1;
    #####: 5044:  } else {
       51: 5045:    newline___0 = 0;
        -: 5046:  }
       51: 5047:  if (letter) {
    #####: 5048:    letter = 1;
    #####: 5049:  } else {
       51: 5050:    letter = 0;
        -: 5051:  }
       51: 5052:  i = 0;
        -: 5053:  {
      199: 5054:  while (1) {
        -: 5055:    while_continue: /* CIL Label */ ;
      199: 5056:    if (! (i < s->nelem)) {
       51: 5057:      goto while_break;
        -: 5058:    }
      148: 5059:    hash = (int )((unsigned int )hash ^ ((s->elems + i)->strchr + (s->elems + i)->constraint));
      148: 5060:    i ++;
        -: 5061:  }
        -: 5062:  while_break: /* CIL Label */ ;
        -: 5063:  }
       51: 5064:  i = 0;
        -: 5065:  {
      206: 5066:  while (1) {
        -: 5067:    while_continue___0: /* CIL Label */ ;
      206: 5068:    if (! (i < d->sindex)) {
       15: 5069:      goto while_break___0;
        -: 5070:    }
      191: 5071:    if (hash != (d->states + i)->hash) {
      154: 5072:      goto __Cont;
        -: 5073:    } else { //Added block
       37: 5074:    if (s->nelem != (d->states + i)->elems.nelem) {
    #####: 5075:      goto __Cont;
        -: 5076:    } else { //Added block
       37: 5077:    if (newline___0 != (int )(d->states + i)->newline) {
    #####: 5078:      goto __Cont;
        -: 5079:    } else { //Added block
       37: 5080:    if (letter != (int )(d->states + i)->letter) {
    #####: 5081:      goto __Cont;
        -: 5082:    }
        -: 5083:    }
        -: 5084:    }
        -: 5085:    }
       37: 5086:    j = 0;
        -: 5087:    {
      134: 5088:    while (1) {
        -: 5089:      while_continue___1: /* CIL Label */ ;
      134: 5090:      if (! (j < s->nelem)) {
       36: 5091:        goto while_break___1;
        -: 5092:      }
       98: 5093:      if ((s->elems + j)->constraint != ((d->states + i)->elems.elems + j)->constraint) {
    #####: 5094:        goto while_break___1;
        -: 5095:      } else { //Added block
       98: 5096:      if ((s->elems + j)->strchr != ((d->states + i)->elems.elems + j)->strchr) {
        1: 5097:        goto while_break___1;
        -: 5098:      }
        -: 5099:      }
       97: 5100:      j ++;
        -: 5101:    }
        -: 5102:    while_break___1: /* CIL Label */ ;
        -: 5103:    }
       37: 5104:    if (j == s->nelem) {
       36: 5105:      return (i);
        -: 5106:    }
        -: 5107:    __Cont: 
      155: 5108:    i ++;
        -: 5109:  }
        -: 5110:  while_break___0: /* CIL Label */ ;
        -: 5111:  }
       15: 5112:  if (d->sindex >= d->salloc) {
        -: 5113:    {
        8: 5114:    while (1) {
        -: 5115:      while_continue___2: /* CIL Label */ ;
        8: 5116:      if (! (d->sindex >= d->salloc)) {
        4: 5117:        goto while_break___2;
        -: 5118:      }
        4: 5119:      d->salloc *= 2;
        -: 5120:    }
        -: 5121:    while_break___2: /* CIL Label */ ;
        -: 5122:    }
        -: 5123:    {
        4: 5124:    tmp = xrealloc_1((ptr_t )d->states, (unsigned long )d->salloc * sizeof(dfa_state ));
        4: 5125:    d->states = (dfa_state *)tmp;
        -: 5126:    }
        4: 5127:  }
        -: 5128:  {
       15: 5129:  (d->states + i)->hash = hash;
       15: 5130:  tmp___0 = xmalloc_1((unsigned long )s->nelem * sizeof(position ));
       15: 5131:  (d->states + i)->elems.elems = (position *)tmp___0;
       15: 5132:  copy(s, & (d->states + i)->elems);
       15: 5133:  (d->states + i)->newline = (char )newline___0;
       15: 5134:  (d->states + i)->letter = (char )letter;
       15: 5135:  (d->states + i)->backref = (char)0;
       15: 5136:  (d->states + i)->constraint = (unsigned char)0;
       15: 5137:  (d->states + i)->first_end = 0;
       15: 5138:  j = 0;
        -: 5139:  }
        -: 5140:  {
       66: 5141:  while (1) {
        -: 5142:    while_continue___3: /* CIL Label */ ;
       66: 5143:    if (! (j < s->nelem)) {
       15: 5144:      goto while_break___3;
        -: 5145:    }
       51: 5146:    if ((int )*(d->tokens + (s->elems + j)->strchr) < 0) {
        1: 5147:      constraint = (int )(s->elems + j)->constraint;
        1: 5148:      if (newline___0) {
    #####: 5149:        tmp___1 = 2;
    #####: 5150:      } else {
        1: 5151:        tmp___1 = 0;
        -: 5152:      }
        1: 5153:      if (constraint & (1 << (tmp___1 + 4))) {
        1: 5154:        if (letter) {
    #####: 5155:          tmp___2 = 2;
    #####: 5156:        } else {
        1: 5157:          tmp___2 = 0;
        -: 5158:        }
        1: 5159:        if (constraint & (1 << tmp___2)) {
        1: 5160:          (d->states + i)->constraint = (unsigned char )((int )(d->states + i)->constraint | constraint);
        1: 5161:        } else {
    #####: 5162:          goto _L___1;
        -: 5163:        }
        1: 5164:      } else {
        -: 5165:        _L___1: 
    #####: 5166:        if (newline___0) {
    #####: 5167:          tmp___3 = 2;
    #####: 5168:        } else {
    #####: 5169:          tmp___3 = 0;
        -: 5170:        }
    #####: 5171:        if (constraint & (1 << (tmp___3 + 4))) {
    #####: 5172:          if (letter) {
    #####: 5173:            tmp___4 = 2;
    #####: 5174:          } else {
    #####: 5175:            tmp___4 = 0;
        -: 5176:          }
    #####: 5177:          if (constraint & (1 << (tmp___4 + 1))) {
    #####: 5178:            (d->states + i)->constraint = (unsigned char )((int )(d->states + i)->constraint | constraint);
    #####: 5179:          } else {
    #####: 5180:            goto _L___0;
        -: 5181:          }
    #####: 5182:        } else {
        -: 5183:          _L___0: 
    #####: 5184:          if (newline___0) {
    #####: 5185:            tmp___5 = 2;
    #####: 5186:          } else {
    #####: 5187:            tmp___5 = 0;
        -: 5188:          }
    #####: 5189:          if (constraint & (1 << ((tmp___5 + 1) + 4))) {
    #####: 5190:            if (letter) {
    #####: 5191:              tmp___6 = 2;
    #####: 5192:            } else {
    #####: 5193:              tmp___6 = 0;
        -: 5194:            }
    #####: 5195:            if (constraint & (1 << tmp___6)) {
    #####: 5196:              (d->states + i)->constraint = (unsigned char )((int )(d->states + i)->constraint | constraint);
    #####: 5197:            } else {
    #####: 5198:              goto _L;
        -: 5199:            }
    #####: 5200:          } else {
        -: 5201:            _L: 
    #####: 5202:            if (newline___0) {
    #####: 5203:              tmp___7 = 2;
    #####: 5204:            } else {
    #####: 5205:              tmp___7 = 0;
        -: 5206:            }
    #####: 5207:            if (constraint & (1 << ((tmp___7 + 1) + 4))) {
    #####: 5208:              if (letter) {
    #####: 5209:                tmp___8 = 2;
    #####: 5210:              } else {
    #####: 5211:                tmp___8 = 0;
        -: 5212:              }
    #####: 5213:              if (constraint & (1 << (tmp___8 + 1))) {
    #####: 5214:                (d->states + i)->constraint = (unsigned char )((int )(d->states + i)->constraint | constraint);
    #####: 5215:              }
    #####: 5216:            }
        -: 5217:          }
        -: 5218:        }
        -: 5219:      }
        1: 5220:      if (! (d->states + i)->first_end) {
        1: 5221:        (d->states + i)->first_end = (int )*(d->tokens + (s->elems + j)->strchr);
        1: 5222:      }
        1: 5223:    } else { //Added block
       50: 5224:    if ((int )*(d->tokens + (s->elems + j)->strchr) == 257) {
    #####: 5225:      (d->states + i)->constraint = (unsigned char)255;
    #####: 5226:      (d->states + i)->backref = (char)1;
    #####: 5227:    }
        -: 5228:    }
       51: 5229:    j ++;
        -: 5230:  }
        -: 5231:  while_break___3: /* CIL Label */ ;
        -: 5232:  }
       15: 5233:  (d->sindex) ++;
       15: 5234:  return (i);
        -: 5235:}
       51: 5236:}
       15: 5237:static void epsclosure(position_set *s , struct dfa *d ) 
        -: 5238:{ 
        -: 5239:  int i ;
        -: 5240:  int j ;
        -: 5241:  int *visited ;
        -: 5242:  position p ;
        -: 5243:  position old ;
        -: 5244:  ptr_t tmp ;
        -: 5245:
        -: 5246:  {
        -: 5247:  {
       15: 5248:  tmp = xmalloc_1((unsigned long )d->tindex * sizeof(int ));
       15: 5249:  visited = (int *)tmp;
       15: 5250:  i = 0;
        -: 5251:  }
        -: 5252:  {
      420: 5253:  while (1) {
        -: 5254:    while_continue: /* CIL Label */ ;
      420: 5255:    if (! (i < d->tindex)) {
       15: 5256:      goto while_break;
        -: 5257:    }
      405: 5258:    *(visited + i) = 0;
      405: 5259:    i ++;
        -: 5260:  }
        -: 5261:  while_break: /* CIL Label */ ;
        -: 5262:  }
       15: 5263:  i = 0;
        -: 5264:  {
       30: 5265:  while (1) {
        -: 5266:    while_continue___0: /* CIL Label */ ;
       30: 5267:    if (! (i < s->nelem)) {
       15: 5268:      goto while_break___0;
        -: 5269:    }
       16: 5270:    if ((int )*(d->tokens + (s->elems + i)->strchr) >= 1 << 8) {
        1: 5271:      if ((int )*(d->tokens + (s->elems + i)->strchr) != 257) {
        1: 5272:        if ((int )*(d->tokens + (s->elems + i)->strchr) < 273) {
        -: 5273:          {
    #####: 5274:          old = *(s->elems + i);
    #####: 5275:          p.constraint = old.constraint;
    #####: 5276:          delete(*(s->elems + i), s);
        -: 5277:          }
    #####: 5278:          if (*(visited + old.strchr)) {
    #####: 5279:            i --;
    #####: 5280:            goto __Cont;
        -: 5281:          }
    #####: 5282:          *(visited + old.strchr) = 1;
        -: 5283:          {
    #####: 5284:          if ((int )*(d->tokens + old.strchr) == 258) {
    #####: 5285:            goto case_258;
        -: 5286:          }
    #####: 5287:          if ((int )*(d->tokens + old.strchr) == 259) {
    #####: 5288:            goto case_259;
        -: 5289:          }
    #####: 5290:          if ((int )*(d->tokens + old.strchr) == 260) {
    #####: 5291:            goto case_260;
        -: 5292:          }
    #####: 5293:          if ((int )*(d->tokens + old.strchr) == 261) {
    #####: 5294:            goto case_261;
        -: 5295:          }
    #####: 5296:          if ((int )*(d->tokens + old.strchr) == 262) {
    #####: 5297:            goto case_262;
        -: 5298:          }
    #####: 5299:          if ((int )*(d->tokens + old.strchr) == 263) {
    #####: 5300:            goto case_263;
        -: 5301:          }
    #####: 5302:          goto switch_default;
        -: 5303:          case_258: /* CIL Label */ 
    #####: 5304:          p.constraint &= 207U;
    #####: 5305:          goto switch_break;
        -: 5306:          case_259: /* CIL Label */ 
    #####: 5307:          p.constraint &= 175U;
    #####: 5308:          goto switch_break;
        -: 5309:          case_260: /* CIL Label */ 
    #####: 5310:          p.constraint &= 242U;
    #####: 5311:          goto switch_break;
        -: 5312:          case_261: /* CIL Label */ 
    #####: 5313:          p.constraint &= 244U;
    #####: 5314:          goto switch_break;
        -: 5315:          case_262: /* CIL Label */ 
    #####: 5316:          p.constraint &= 246U;
    #####: 5317:          goto switch_break;
        -: 5318:          case_263: /* CIL Label */ 
    #####: 5319:          p.constraint &= 249U;
    #####: 5320:          goto switch_break;
        -: 5321:          switch_default: /* CIL Label */ 
    #####: 5322:          goto switch_break;
        -: 5323:          switch_break: /* CIL Label */ ;
        -: 5324:          }
    #####: 5325:          j = 0;
        -: 5326:          {
    #####: 5327:          while (1) {
        -: 5328:            while_continue___1: /* CIL Label */ ;
    #####: 5329:            if (! (j < (d->follows + old.strchr)->nelem)) {
    #####: 5330:              goto while_break___1;
        -: 5331:            }
        -: 5332:            {
    #####: 5333:            p.strchr = ((d->follows + old.strchr)->elems + j)->strchr;
    #####: 5334:            insert(p, s);
    #####: 5335:            j ++;
        -: 5336:            }
        -: 5337:          }
        -: 5338:          while_break___1: /* CIL Label */ ;
        -: 5339:          }
    #####: 5340:          i = -1;
    #####: 5341:        }
        1: 5342:      }
        1: 5343:    }
        -: 5344:    __Cont: 
       15: 5345:    i ++;
        -: 5346:  }
        -: 5347:  while_break___0: /* CIL Label */ ;
        -: 5348:  }
        -: 5349:  {
       15: 5350:  free((void *)visited);
        -: 5351:  }
       15: 5352:  return;
        -: 5353:}
        -: 5354:}
        1: 5355:void dfaanalyze(struct dfa *d , int searchflag ) 
        -: 5356:{ 
        -: 5357:  int *nullable ;
        -: 5358:  int *nfirstpos ;
        -: 5359:  position *firstpos ;
        -: 5360:  int *nlastpos ;
        -: 5361:  position *lastpos ;
        -: 5362:  int *nalloc ;
        -: 5363:  position_set tmp ;
        -: 5364:  position_set merged ;
        -: 5365:  int wants_newline ;
        -: 5366:  int *o_nullable ;
        -: 5367:  int *o_nfirst ;
        -: 5368:  int *o_nlast ;
        -: 5369:  position *o_firstpos ;
        -: 5370:  position *o_lastpos ;
        -: 5371:  int i ;
        -: 5372:  int j ;
        -: 5373:  position *pos ;
        -: 5374:  ptr_t tmp___0 ;
        -: 5375:  ptr_t tmp___1 ;
        -: 5376:  ptr_t tmp___2 ;
        -: 5377:  ptr_t tmp___3 ;
        -: 5378:  ptr_t tmp___4 ;
        -: 5379:  ptr_t tmp___5 ;
        -: 5380:  ptr_t tmp___6 ;
        -: 5381:  ptr_t tmp___7 ;
        -: 5382:  int *tmp___8 ;
        -: 5383:  int *tmp___9 ;
        -: 5384:  int *tmp___10 ;
        -: 5385:  int tmp___11 ;
        -: 5386:  ptr_t tmp___12 ;
        -: 5387:  ptr_t tmp___13 ;
        -: 5388:  int tmp___14 ;
        -: 5389:  int tmp___15 ;
        -: 5390:  int *tmp___16 ;
        -: 5391:  int *tmp___17 ;
        -: 5392:  int *tmp___18 ;
        -: 5393:  int tmp___19 ;
        -: 5394:  unsigned int tmp___20 ;
        -: 5395:  unsigned int tmp___21 ;
        -: 5396:  ptr_t tmp___22 ;
        -: 5397:  ptr_t tmp___23 ;
        -: 5398:  ptr_t tmp___24 ;
        -: 5399:
        -: 5400:  {
        -: 5401:  {
        1: 5402:  d->searchflag = searchflag;
        1: 5403:  tmp___0 = xmalloc_1((unsigned long )d->depth * sizeof(int ));
        1: 5404:  nullable = (int *)tmp___0;
        1: 5405:  o_nullable = nullable;
        1: 5406:  tmp___1 = xmalloc_1((unsigned long )d->depth * sizeof(int ));
        1: 5407:  nfirstpos = (int *)tmp___1;
        1: 5408:  o_nfirst = nfirstpos;
        1: 5409:  tmp___2 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
        1: 5410:  firstpos = (position *)tmp___2;
        1: 5411:  o_firstpos = firstpos;
        1: 5412:  firstpos += d->nleaves;
        1: 5413:  tmp___3 = xmalloc_1((unsigned long )d->depth * sizeof(int ));
        1: 5414:  nlastpos = (int *)tmp___3;
        1: 5415:  o_nlast = nlastpos;
        1: 5416:  tmp___4 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
        1: 5417:  lastpos = (position *)tmp___4;
        1: 5418:  o_lastpos = lastpos;
        1: 5419:  lastpos += d->nleaves;
        1: 5420:  tmp___5 = xmalloc_1((unsigned long )d->tindex * sizeof(int ));
        1: 5421:  nalloc = (int *)tmp___5;
        1: 5422:  i = 0;
        -: 5423:  }
        -: 5424:  {
       28: 5425:  while (1) {
        -: 5426:    while_continue: /* CIL Label */ ;
       28: 5427:    if (! (i < d->tindex)) {
        1: 5428:      goto while_break;
        -: 5429:    }
       27: 5430:    *(nalloc + i) = 0;
       27: 5431:    i ++;
        -: 5432:  }
        -: 5433:  while_break: /* CIL Label */ ;
        -: 5434:  }
        -: 5435:  {
        1: 5436:  tmp___6 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
        1: 5437:  merged.elems = (position *)tmp___6;
        1: 5438:  tmp___7 = xcalloc((size_t )d->tindex, sizeof(position_set ));
        1: 5439:  d->follows = (position_set *)tmp___7;
        1: 5440:  i = 0;
        -: 5441:  }
        -: 5442:  {
       28: 5443:  while (1) {
        -: 5444:    while_continue___0: /* CIL Label */ ;
       28: 5445:    if (! (i < d->tindex)) {
        1: 5446:      goto while_break___0;
        -: 5447:    }
        -: 5448:    {
       27: 5449:    if ((int )*(d->tokens + i) == 256) {
    #####: 5450:      goto case_256;
        -: 5451:    }
       27: 5452:    if ((int )*(d->tokens + i) == 265) {
    #####: 5453:      goto case_265;
        -: 5454:    }
       27: 5455:    if ((int )*(d->tokens + i) == 266) {
    #####: 5456:      goto case_265;
        -: 5457:    }
       27: 5458:    if ((int )*(d->tokens + i) == 264) {
    #####: 5459:      goto case_264;
        -: 5460:    }
       27: 5461:    if ((int )*(d->tokens + i) == 268) {
       12: 5462:      goto case_268;
        -: 5463:    }
       15: 5464:    if ((int )*(d->tokens + i) == 269) {
    #####: 5465:      goto case_269;
        -: 5466:    }
       15: 5467:    if ((int )*(d->tokens + i) == 270) {
        1: 5468:      goto case_269;
        -: 5469:    }
       14: 5470:    goto switch_default;
        -: 5471:    case_256: /* CIL Label */ 
    #####: 5472:    tmp___8 = nullable;
    #####: 5473:    nullable ++;
    #####: 5474:    *tmp___8 = 1;
    #####: 5475:    tmp___9 = nfirstpos;
    #####: 5476:    nfirstpos ++;
    #####: 5477:    tmp___10 = nlastpos;
    #####: 5478:    nlastpos ++;
    #####: 5479:    tmp___11 = 0;
    #####: 5480:    *tmp___10 = tmp___11;
    #####: 5481:    *tmp___9 = tmp___11;
    #####: 5482:    goto switch_break;
        -: 5483:    case_265: /* CIL Label */ 
        -: 5484:    case_266: /* CIL Label */ 
    #####: 5485:    tmp.nelem = *(nfirstpos + -1);
    #####: 5486:    tmp.elems = firstpos;
    #####: 5487:    pos = lastpos;
    #####: 5488:    j = 0;
        -: 5489:    {
    #####: 5490:    while (1) {
        -: 5491:      while_continue___1: /* CIL Label */ ;
    #####: 5492:      if (! (j < *(nlastpos + -1))) {
    #####: 5493:        goto while_break___1;
        -: 5494:      }
        -: 5495:      {
    #####: 5496:      merge(& tmp, d->follows + (pos + j)->strchr, & merged);
        -: 5497:      }
    #####: 5498:      if (merged.nelem - 1 >= *(nalloc + (pos + j)->strchr)) {
        -: 5499:        {
    #####: 5500:        while (1) {
        -: 5501:          while_continue___2: /* CIL Label */ ;
    #####: 5502:          if (! (merged.nelem - 1 >= *(nalloc + (pos + j)->strchr))) {
    #####: 5503:            goto while_break___2;
        -: 5504:          }
    #####: 5505:          *(nalloc + (pos + j)->strchr) *= 2;
        -: 5506:        }
        -: 5507:        while_break___2: /* CIL Label */ ;
        -: 5508:        }
        -: 5509:        {
    #####: 5510:        tmp___12 = xrealloc_1((ptr_t )(d->follows + (pos + j)->strchr)->elems, (unsigned long )*(nalloc + (pos + j)->strchr) * sizeof(position ));
    #####: 5511:        (d->follows + (pos + j)->strchr)->elems = (position *)tmp___12;
        -: 5512:        }
    #####: 5513:      }
        -: 5514:      {
    #####: 5515:      copy(& merged, d->follows + (pos + j)->strchr);
    #####: 5516:      j ++;
        -: 5517:      }
        -: 5518:    }
        -: 5519:    while_break___1: /* CIL Label */ ;
    #####: 5520:    }
        -: 5521:    case_264: /* CIL Label */ 
    #####: 5522:    if ((int )*(d->tokens + i) != 266) {
    #####: 5523:      *(nullable + -1) = 1;
    #####: 5524:    }
    #####: 5525:    goto switch_break;
        -: 5526:    case_268: /* CIL Label */ 
       12: 5527:    tmp.nelem = *(nfirstpos + -1);
       12: 5528:    tmp.elems = firstpos;
       12: 5529:    pos = lastpos + *(nlastpos + -1);
       12: 5530:    j = 0;
        -: 5531:    {
       25: 5532:    while (1) {
        -: 5533:      while_continue___3: /* CIL Label */ ;
       25: 5534:      if (! (j < *(nlastpos + -2))) {
       12: 5535:        goto while_break___3;
        -: 5536:      }
        -: 5537:      {
       13: 5538:      merge(& tmp, d->follows + (pos + j)->strchr, & merged);
        -: 5539:      }
       13: 5540:      if (merged.nelem - 1 >= *(nalloc + (pos + j)->strchr)) {
        -: 5541:        {
    #####: 5542:        while (1) {
        -: 5543:          while_continue___4: /* CIL Label */ ;
    #####: 5544:          if (! (merged.nelem - 1 >= *(nalloc + (pos + j)->strchr))) {
    #####: 5545:            goto while_break___4;
        -: 5546:          }
    #####: 5547:          *(nalloc + (pos + j)->strchr) *= 2;
        -: 5548:        }
        -: 5549:        while_break___4: /* CIL Label */ ;
        -: 5550:        }
        -: 5551:        {
    #####: 5552:        tmp___13 = xrealloc_1((ptr_t )(d->follows + (pos + j)->strchr)->elems, (unsigned long )*(nalloc + (pos + j)->strchr) * sizeof(position ));
    #####: 5553:        (d->follows + (pos + j)->strchr)->elems = (position *)tmp___13;
        -: 5554:        }
    #####: 5555:      }
        -: 5556:      {
       13: 5557:      copy(& merged, d->follows + (pos + j)->strchr);
       13: 5558:      j ++;
        -: 5559:      }
        -: 5560:    }
        -: 5561:    while_break___3: /* CIL Label */ ;
        -: 5562:    }
       12: 5563:    if (*(nullable + -2)) {
    #####: 5564:      *(nfirstpos + -2) += *(nfirstpos + -1);
    #####: 5565:    } else {
       12: 5566:      firstpos += *(nfirstpos + -1);
        -: 5567:    }
       12: 5568:    nfirstpos --;
       12: 5569:    if (*(nullable + -1)) {
    #####: 5570:      *(nlastpos + -2) += *(nlastpos + -1);
    #####: 5571:    } else {
       12: 5572:      pos = lastpos + *(nlastpos + -2);
       12: 5573:      j = *(nlastpos + -1) - 1;
        -: 5574:      {
       24: 5575:      while (1) {
        -: 5576:        while_continue___5: /* CIL Label */ ;
       24: 5577:        if (! (j >= 0)) {
       12: 5578:          goto while_break___5;
        -: 5579:        }
       12: 5580:        *(pos + j) = *(lastpos + j);
       12: 5581:        j --;
        -: 5582:      }
        -: 5583:      while_break___5: /* CIL Label */ ;
        -: 5584:      }
       12: 5585:      lastpos += *(nlastpos + -2);
       12: 5586:      *(nlastpos + -2) = *(nlastpos + -1);
        -: 5587:    }
       12: 5588:    nlastpos --;
       12: 5589:    if (*(nullable + -1)) {
    #####: 5590:      if (*(nullable + -2)) {
    #####: 5591:        tmp___14 = 1;
    #####: 5592:      } else {
    #####: 5593:        tmp___14 = 0;
        -: 5594:      }
    #####: 5595:    } else {
       12: 5596:      tmp___14 = 0;
        -: 5597:    }
       12: 5598:    *(nullable + -2) = tmp___14;
       12: 5599:    nullable --;
       13: 5600:    goto switch_break;
        -: 5601:    case_269: /* CIL Label */ 
        -: 5602:    case_270: /* CIL Label */ 
        1: 5603:    *(nfirstpos + -2) += *(nfirstpos + -1);
        1: 5604:    nfirstpos --;
        1: 5605:    *(nlastpos + -2) += *(nlastpos + -1);
        1: 5606:    nlastpos --;
        1: 5607:    if (*(nullable + -1)) {
    #####: 5608:      tmp___15 = 1;
    #####: 5609:    } else { //Added block
        1: 5610:    if (*(nullable + -2)) {
    #####: 5611:      tmp___15 = 1;
    #####: 5612:    } else {
        1: 5613:      tmp___15 = 0;
        -: 5614:    }
        -: 5615:    }
        1: 5616:    *(nullable + -2) = tmp___15;
        1: 5617:    nullable --;
        1: 5618:    goto switch_break;
        -: 5619:    switch_default: /* CIL Label */ 
        -: 5620:    {
       14: 5621:    tmp___16 = nullable;
       14: 5622:    nullable ++;
       14: 5623:    *tmp___16 = (int )*(d->tokens + i) == 257;
       14: 5624:    tmp___17 = nfirstpos;
       14: 5625:    nfirstpos ++;
       14: 5626:    tmp___18 = nlastpos;
       14: 5627:    nlastpos ++;
       14: 5628:    tmp___19 = 1;
       14: 5629:    *tmp___18 = tmp___19;
       14: 5630:    *tmp___17 = tmp___19;
       14: 5631:    firstpos --;
       14: 5632:    lastpos --;
       14: 5633:    tmp___20 = (unsigned int )i;
       14: 5634:    lastpos->strchr = tmp___20;
       14: 5635:    firstpos->strchr = tmp___20;
       14: 5636:    tmp___21 = 255U;
       14: 5637:    lastpos->constraint = tmp___21;
       14: 5638:    firstpos->constraint = tmp___21;
       14: 5639:    *(nalloc + i) = 1;
       14: 5640:    tmp___22 = xmalloc_1((unsigned long )*(nalloc + i) * sizeof(position ));
       14: 5641:    (d->follows + i)->elems = (position *)tmp___22;
        -: 5642:    }
       14: 5643:    goto switch_break;
        -: 5644:    switch_break: /* CIL Label */ ;
        -: 5645:    }
       27: 5646:    i ++;
        -: 5647:  }
        -: 5648:  while_break___0: /* CIL Label */ ;
        -: 5649:  }
        1: 5650:  i = 0;
        -: 5651:  {
       28: 5652:  while (1) {
        -: 5653:    while_continue___6: /* CIL Label */ ;
       28: 5654:    if (! (i < d->tindex)) {
        1: 5655:      goto while_break___6;
        -: 5656:    }
       27: 5657:    if ((int )*(d->tokens + i) < 1 << 8) {
       13: 5658:      goto _L;
        -: 5659:    } else { //Added block
       14: 5660:    if ((int )*(d->tokens + i) == 257) {
    #####: 5661:      goto _L;
        -: 5662:    } else { //Added block
       14: 5663:    if ((int )*(d->tokens + i) >= 273) {
        -: 5664:      _L: 
        -: 5665:      {
       14: 5666:      copy(d->follows + i, & merged);
       14: 5667:      epsclosure(& merged, d);
        -: 5668:      }
       14: 5669:      if ((d->follows + i)->nelem < merged.nelem) {
        -: 5670:        {
    #####: 5671:        tmp___23 = xrealloc_1((ptr_t )(d->follows + i)->elems, (unsigned long )merged.nelem * sizeof(position ));
    #####: 5672:        (d->follows + i)->elems = (position *)tmp___23;
        -: 5673:        }
    #####: 5674:      }
        -: 5675:      {
       14: 5676:      copy(& merged, d->follows + i);
        -: 5677:      }
       14: 5678:    }
        -: 5679:    }
        -: 5680:    }
       27: 5681:    i ++;
        -: 5682:  }
        -: 5683:  while_break___6: /* CIL Label */ ;
        -: 5684:  }
        1: 5685:  merged.nelem = 0;
        1: 5686:  i = 0;
        -: 5687:  {
        3: 5688:  while (1) {
        -: 5689:    while_continue___7: /* CIL Label */ ;
        3: 5690:    if (! (i < *(nfirstpos + -1))) {
        1: 5691:      goto while_break___7;
        -: 5692:    }
        -: 5693:    {
        2: 5694:    insert(*(firstpos + i), & merged);
        2: 5695:    i ++;
        -: 5696:    }
        -: 5697:  }
        -: 5698:  while_break___7: /* CIL Label */ ;
        -: 5699:  }
        -: 5700:  {
        1: 5701:  epsclosure(& merged, d);
        1: 5702:  wants_newline = 0;
        1: 5703:  i = 0;
        -: 5704:  }
        -: 5705:  {
        3: 5706:  while (1) {
        -: 5707:    while_continue___8: /* CIL Label */ ;
        3: 5708:    if (! (i < merged.nelem)) {
        1: 5709:      goto while_break___8;
        -: 5710:    }
        2: 5711:    if (((merged.elems + i)->constraint & 192U) >> 2 != ((merged.elems + i)->constraint & 48U)) {
    #####: 5712:      wants_newline = 1;
    #####: 5713:    }
        2: 5714:    i ++;
        -: 5715:  }
        -: 5716:  while_break___8: /* CIL Label */ ;
        -: 5717:  }
        -: 5718:  {
        1: 5719:  d->salloc = 1;
        1: 5720:  d->sindex = 0;
        1: 5721:  tmp___24 = xmalloc_1((unsigned long )d->salloc * sizeof(dfa_state ));
        1: 5722:  d->states = (dfa_state *)tmp___24;
        1: 5723:  state_index(d, & merged, wants_newline, 0);
        1: 5724:  free((void *)o_nullable);
        1: 5725:  free((void *)o_nfirst);
        1: 5726:  free((void *)o_firstpos);
        1: 5727:  free((void *)o_nlast);
        1: 5728:  free((void *)o_lastpos);
        1: 5729:  free((void *)nalloc);
        1: 5730:  free((void *)merged.elems);
        -: 5731:  }
        1: 5732:  return;
        -: 5733:}
        -: 5734:}
        -: 5735:static charclass letters  ;
        -: 5736:static charclass newline  ;
        -: 5737:static int initialized  ;
       13: 5738:void dfastate(int s , struct dfa *d , int *trans___0 ) 
        -: 5739:{ 
        -: 5740:  position_set grps[1 << 8] ;
        -: 5741:  charclass labels[1 << 8] ;
        -: 5742:  int ngrps ;
        -: 5743:  position pos ;
        -: 5744:  charclass matches ;
        -: 5745:  int matchesf ;
        -: 5746:  charclass intersect ;
        -: 5747:  int intersectf ;
        -: 5748:  charclass leftovers ;
        -: 5749:  int leftoversf ;
        -: 5750:  position_set follows ;
        -: 5751:  position_set tmp ;
        -: 5752:  int state ;
        -: 5753:  int wants_newline ;
        -: 5754:  int state_newline ;
        -: 5755:  int wants_letter ;
        -: 5756:  int state_letter ;
        -: 5757:  int i ;
        -: 5758:  int j ;
        -: 5759:  int k ;
        -: 5760:  unsigned short const   **tmp___0 ;
        -: 5761:  int tmp___1 ;
        -: 5762:  int tmp___2 ;
        -: 5763:  int tmp___3 ;
        -: 5764:  int tmp___4 ;
        -: 5765:  int tmp___5 ;
        -: 5766:  int tmp___6 ;
        -: 5767:  int match ;
        -: 5768:  int label ;
        -: 5769:  int tmp___7 ;
        -: 5770:  int tmp___8 ;
        -: 5771:  ptr_t tmp___9 ;
        -: 5772:  int tmp___10 ;
        -: 5773:  ptr_t tmp___11 ;
        -: 5774:  ptr_t tmp___12 ;
        -: 5775:  ptr_t tmp___13 ;
        -: 5776:  unsigned short const   **tmp___15 ;
        -: 5777:  int tmp___16 ;
        -: 5778:  int c ;
        -: 5779:  unsigned short const   **tmp___17 ;
        -: 5780:
        -: 5781:  {
       13: 5782:  ngrps = 0;
       13: 5783:  if (! initialized) {
        1: 5784:    initialized = 1;
        1: 5785:    i = 0;
        -: 5786:    {
      257: 5787:    while (1) {
        -: 5788:      while_continue: /* CIL Label */ ;
      257: 5789:      if (! (i < 1 << 8)) {
        1: 5790:        goto while_break;
        -: 5791:      }
        -: 5792:      {
      256: 5793:      tmp___0 = __ctype_b_loc();
        -: 5794:      }
      256: 5795:      if ((int const   )*(*tmp___0 + i) & 8) {
        -: 5796:        {
       62: 5797:        setbit(i, letters);
        -: 5798:        }
       62: 5799:      } else { //Added block
      194: 5800:      if (i == 95) {
        -: 5801:        {
        1: 5802:        setbit(i, letters);
        -: 5803:        }
        1: 5804:      }
        -: 5805:      }
      256: 5806:      i ++;
        -: 5807:    }
        -: 5808:    while_break: /* CIL Label */ ;
        -: 5809:    }
        -: 5810:    {
        1: 5811:    setbit((int )eolbyte_1, newline);
        -: 5812:    }
        1: 5813:  }
        -: 5814:  {
       13: 5815:  zeroset(matches);
       13: 5816:  i = 0;
        -: 5817:  }
        -: 5818:  {
       56: 5819:  while (1) {
        -: 5820:    while_continue___0: /* CIL Label */ ;
       56: 5821:    if (! (i < (d->states + s)->elems.nelem)) {
       13: 5822:      goto while_break___0;
        -: 5823:    }
       43: 5824:    pos = *((d->states + s)->elems.elems + i);
       43: 5825:    if ((int )*(d->tokens + pos.strchr) >= 0) {
       42: 5826:      if ((int )*(d->tokens + pos.strchr) < 1 << 8) {
        -: 5827:        {
       40: 5828:        setbit((int )*(d->tokens + pos.strchr), matches);
        -: 5829:        }
       40: 5830:      } else {
        2: 5831:        goto _L;
        -: 5832:      }
       41: 5833:    } else { //Added block
        -: 5834:    _L: 
        3: 5835:    if ((int )*(d->tokens + pos.strchr) >= 273) {
        -: 5836:      {
        2: 5837:      copyset(*(d->charclasses + ((int )*(d->tokens + pos.strchr) - 273)), matches);
        -: 5838:      }
        2: 5839:    } else {
        1: 5840:      goto __Cont;
        -: 5841:    }
        -: 5842:    }
       42: 5843:    if (pos.constraint != 255U) {
    #####: 5844:      if ((d->states + s)->newline) {
    #####: 5845:        tmp___1 = 2;
    #####: 5846:      } else {
    #####: 5847:        tmp___1 = 0;
        -: 5848:      }
    #####: 5849:      if (! (pos.constraint & (unsigned int )(1 << ((tmp___1 + 1) + 4)))) {
        -: 5850:        {
    #####: 5851:        clrbit((int )eolbyte_1, matches);
        -: 5852:        }
    #####: 5853:      }
    #####: 5854:      if ((d->states + s)->newline) {
    #####: 5855:        tmp___2 = 2;
    #####: 5856:      } else {
    #####: 5857:        tmp___2 = 0;
        -: 5858:      }
    #####: 5859:      if (! (pos.constraint & (unsigned int )(1 << (tmp___2 + 4)))) {
    #####: 5860:        j = 0;
        -: 5861:        {
    #####: 5862:        while (1) {
        -: 5863:          while_continue___1: /* CIL Label */ ;
    #####: 5864:          if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 5865:            goto while_break___1;
        -: 5866:          }
    #####: 5867:          matches[j] &= newline[j];
    #####: 5868:          j ++;
        -: 5869:        }
        -: 5870:        while_break___1: /* CIL Label */ ;
        -: 5871:        }
    #####: 5872:      }
    #####: 5873:      if ((d->states + s)->letter) {
    #####: 5874:        tmp___3 = 2;
    #####: 5875:      } else {
    #####: 5876:        tmp___3 = 0;
        -: 5877:      }
    #####: 5878:      if (! (pos.constraint & (unsigned int )(1 << (tmp___3 + 1)))) {
    #####: 5879:        j = 0;
        -: 5880:        {
    #####: 5881:        while (1) {
        -: 5882:          while_continue___2: /* CIL Label */ ;
    #####: 5883:          if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 5884:            goto while_break___2;
        -: 5885:          }
    #####: 5886:          matches[j] &= ~ letters[j];
    #####: 5887:          j ++;
        -: 5888:        }
        -: 5889:        while_break___2: /* CIL Label */ ;
        -: 5890:        }
    #####: 5891:      }
    #####: 5892:      if ((d->states + s)->letter) {
    #####: 5893:        tmp___4 = 2;
    #####: 5894:      } else {
    #####: 5895:        tmp___4 = 0;
        -: 5896:      }
    #####: 5897:      if (! (pos.constraint & (unsigned int )(1 << tmp___4))) {
    #####: 5898:        j = 0;
        -: 5899:        {
    #####: 5900:        while (1) {
        -: 5901:          while_continue___3: /* CIL Label */ ;
    #####: 5902:          if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 5903:            goto while_break___3;
        -: 5904:          }
    #####: 5905:          matches[j] &= letters[j];
    #####: 5906:          j ++;
        -: 5907:        }
        -: 5908:        while_break___3: /* CIL Label */ ;
        -: 5909:        }
    #####: 5910:      }
    #####: 5911:      j = 0;
        -: 5912:      {
    #####: 5913:      while (1) {
        -: 5914:        while_continue___4: /* CIL Label */ ;
    #####: 5915:        if ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int ))) {
    #####: 5916:          if (! (! matches[j])) {
    #####: 5917:            goto while_break___4;
        -: 5918:          }
    #####: 5919:        } else {
    #####: 5920:          goto while_break___4;
        -: 5921:        }
    #####: 5922:        goto __Cont___0;
        -: 5923:        __Cont___0: 
    #####: 5924:        j ++;
        -: 5925:      }
        -: 5926:      while_break___4: /* CIL Label */ ;
        -: 5927:      }
    #####: 5928:      if ((unsigned long )j == (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int ))) {
    #####: 5929:        goto __Cont;
        -: 5930:      }
    #####: 5931:    }
       42: 5932:    j = 0;
        -: 5933:    {
       73: 5934:    while (1) {
        -: 5935:      while_continue___5: /* CIL Label */ ;
       73: 5936:      if (! (j < ngrps)) {
       32: 5937:        goto while_break___5;
        -: 5938:      }
       41: 5939:      if ((int )*(d->tokens + pos.strchr) >= 0) {
       41: 5940:        if ((int )*(d->tokens + pos.strchr) < 1 << 8) {
        -: 5941:          {
       41: 5942:          tmp___5 = tstbit((int )*(d->tokens + pos.strchr), labels[j]);
        -: 5943:          }
       41: 5944:          if (! tmp___5) {
       31: 5945:            goto __Cont___1;
        -: 5946:          }
       10: 5947:        }
       10: 5948:      }
       10: 5949:      intersectf = 0;
       10: 5950:      k = 0;
        -: 5951:      {
       90: 5952:      while (1) {
        -: 5953:        while_continue___6: /* CIL Label */ ;
       90: 5954:        if (! ((unsigned long )k < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       10: 5955:          goto while_break___6;
        -: 5956:        }
       80: 5957:        tmp___6 = matches[k] & labels[j][k];
       80: 5958:        intersect[k] = tmp___6;
       80: 5959:        if (tmp___6) {
       10: 5960:          intersectf = 1;
       10: 5961:        }
       80: 5962:        k ++;
        -: 5963:      }
        -: 5964:      while_break___6: /* CIL Label */ ;
        -: 5965:      }
       10: 5966:      if (! intersectf) {
    #####: 5967:        goto __Cont___1;
        -: 5968:      }
       10: 5969:      matchesf = 0;
       10: 5970:      leftoversf = matchesf;
       10: 5971:      k = 0;
        -: 5972:      {
       90: 5973:      while (1) {
        -: 5974:        while_continue___7: /* CIL Label */ ;
       90: 5975:        if (! ((unsigned long )k < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       10: 5976:          goto while_break___7;
        -: 5977:        }
       80: 5978:        match = matches[k];
       80: 5979:        label = labels[j][k];
       80: 5980:        tmp___7 = ~ match & label;
       80: 5981:        leftovers[k] = tmp___7;
       80: 5982:        if (tmp___7) {
       40: 5983:          leftoversf = 1;
       40: 5984:        }
       80: 5985:        tmp___8 = match & ~ label;
       80: 5986:        matches[k] = tmp___8;
       80: 5987:        if (tmp___8) {
    #####: 5988:          matchesf = 1;
    #####: 5989:        }
       80: 5990:        k ++;
        -: 5991:      }
        -: 5992:      while_break___7: /* CIL Label */ ;
        -: 5993:      }
       10: 5994:      if (leftoversf) {
        -: 5995:        {
        5: 5996:        copyset(leftovers, labels[ngrps]);
        5: 5997:        copyset(intersect, labels[j]);
        5: 5998:        tmp___9 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
        5: 5999:        grps[ngrps].elems = (position *)tmp___9;
        5: 6000:        copy(& grps[j], & grps[ngrps]);
        5: 6001:        ngrps ++;
        -: 6002:        }
        5: 6003:      }
       10: 6004:      tmp___10 = grps[j].nelem;
       10: 6005:      (grps[j].nelem) ++;
       10: 6006:      *(grps[j].elems + tmp___10) = pos;
       10: 6007:      if (! matchesf) {
       10: 6008:        goto while_break___5;
        -: 6009:      }
        -: 6010:      __Cont___1: 
       31: 6011:      j ++;
        -: 6012:    }
        -: 6013:    while_break___5: /* CIL Label */ ;
        -: 6014:    }
       74: 6015:    if (j == ngrps) {
        -: 6016:      {
       32: 6017:      copyset(matches, labels[ngrps]);
       32: 6018:      zeroset(matches);
       32: 6019:      tmp___11 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
       32: 6020:      grps[ngrps].elems = (position *)tmp___11;
       32: 6021:      grps[ngrps].nelem = 1;
       32: 6022:      *(grps[ngrps].elems + 0) = pos;
       32: 6023:      ngrps ++;
        -: 6024:      }
       32: 6025:    }
        -: 6026:    __Cont: 
       43: 6027:    i ++;
        -: 6028:  }
        -: 6029:  while_break___0: /* CIL Label */ ;
        -: 6030:  }
        -: 6031:  {
       13: 6032:  tmp___12 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
       13: 6033:  follows.elems = (position *)tmp___12;
       13: 6034:  tmp___13 = xmalloc_1((unsigned long )d->nleaves * sizeof(position ));
       13: 6035:  tmp.elems = (position *)tmp___13;
        -: 6036:  }
       13: 6037:  if (d->searchflag) {
       13: 6038:    wants_newline = 0;
       13: 6039:    wants_letter = 0;
       13: 6040:    i = 0;
        -: 6041:    {
       39: 6042:    while (1) {
        -: 6043:      while_continue___8: /* CIL Label */ ;
       39: 6044:      if (! (i < (d->states + 0)->elems.nelem)) {
       13: 6045:        goto while_break___8;
        -: 6046:      }
       26: 6047:      if ((((d->states + 0)->elems.elems + i)->constraint & 192U) >> 2 != (((d->states + 0)->elems.elems + i)->constraint & 48U)) {
    #####: 6048:        wants_newline = 1;
    #####: 6049:      }
       26: 6050:      if ((((d->states + 0)->elems.elems + i)->constraint & 12U) >> 2 != (((d->states + 0)->elems.elems + i)->constraint & 3U)) {
    #####: 6051:        wants_letter = 1;
    #####: 6052:      }
       26: 6053:      i ++;
        -: 6054:    }
        -: 6055:    while_break___8: /* CIL Label */ ;
        -: 6056:    }
        -: 6057:    {
       13: 6058:    copy(& (d->states + 0)->elems, & follows);
       13: 6059:    state = state_index(d, & follows, 0, 0);
        -: 6060:    }
       13: 6061:    if (wants_newline) {
        -: 6062:      {
    #####: 6063:      state_newline = state_index(d, & follows, 1, 0);
        -: 6064:      }
    #####: 6065:    } else {
       13: 6066:      state_newline = state;
        -: 6067:    }
       13: 6068:    if (wants_letter) {
        -: 6069:      {
    #####: 6070:      state_letter = state_index(d, & follows, 0, 1);
        -: 6071:      }
    #####: 6072:    } else {
       13: 6073:      state_letter = state;
        -: 6074:    }
       13: 6075:    i = 0;
        -: 6076:    {
     3341: 6077:    while (1) {
        -: 6078:      while_continue___9: /* CIL Label */ ;
     3341: 6079:      if (! (i < 1 << 8)) {
       13: 6080:        goto while_break___9;
        -: 6081:      }
        -: 6082:      {
     3328: 6083:      tmp___15 = __ctype_b_loc();
        -: 6084:      }
     3328: 6085:      if ((int const   )*(*tmp___15 + i) & 8) {
      806: 6086:        *(trans___0 + i) = state_letter;
      806: 6087:      } else { //Added block
     2522: 6088:      if (i == 95) {
       13: 6089:        *(trans___0 + i) = state_letter;
       13: 6090:      } else {
     2509: 6091:        *(trans___0 + i) = state;
        -: 6092:      }
        -: 6093:      }
     3328: 6094:      i ++;
        -: 6095:    }
        -: 6096:    while_break___9: /* CIL Label */ ;
        -: 6097:    }
       13: 6098:    *(trans___0 + (int )eolbyte_1) = state_newline;
       13: 6099:  } else {
    #####: 6100:    i = 0;
        -: 6101:    {
    #####: 6102:    while (1) {
        -: 6103:      while_continue___10: /* CIL Label */ ;
    #####: 6104:      if (! (i < 1 << 8)) {
    #####: 6105:        goto while_break___10;
        -: 6106:      }
    #####: 6107:      *(trans___0 + i) = -1;
    #####: 6108:      i ++;
        -: 6109:    }
        -: 6110:    while_break___10: /* CIL Label */ ;
        -: 6111:    }
        -: 6112:  }
       13: 6113:  i = 0;
        -: 6114:  {
       50: 6115:  while (1) {
        -: 6116:    while_continue___11: /* CIL Label */ ;
       50: 6117:    if (! (i < ngrps)) {
       13: 6118:      goto while_break___11;
        -: 6119:    }
       37: 6120:    follows.nelem = 0;
       37: 6121:    j = 0;
        -: 6122:    {
       84: 6123:    while (1) {
        -: 6124:      while_continue___12: /* CIL Label */ ;
       84: 6125:      if (! (j < grps[i].nelem)) {
       37: 6126:        goto while_break___12;
        -: 6127:      }
       47: 6128:      k = 0;
        -: 6129:      {
       94: 6130:      while (1) {
        -: 6131:        while_continue___13: /* CIL Label */ ;
       94: 6132:        if (! (k < (d->follows + (grps[i].elems + j)->strchr)->nelem)) {
       47: 6133:          goto while_break___13;
        -: 6134:        }
        -: 6135:        {
       47: 6136:        insert(*((d->follows + (grps[i].elems + j)->strchr)->elems + k), & follows);
       47: 6137:        k ++;
        -: 6138:        }
        -: 6139:      }
        -: 6140:      while_break___13: /* CIL Label */ ;
        -: 6141:      }
       47: 6142:      j ++;
        -: 6143:    }
        -: 6144:    while_break___12: /* CIL Label */ ;
        -: 6145:    }
       37: 6146:    if (d->searchflag) {
       37: 6147:      j = 0;
        -: 6148:      {
      111: 6149:      while (1) {
        -: 6150:        while_continue___14: /* CIL Label */ ;
      111: 6151:        if (! (j < (d->states + 0)->elems.nelem)) {
       37: 6152:          goto while_break___14;
        -: 6153:        }
        -: 6154:        {
       74: 6155:        insert(*((d->states + 0)->elems.elems + j), & follows);
       74: 6156:        j ++;
        -: 6157:        }
        -: 6158:      }
        -: 6159:      while_break___14: /* CIL Label */ ;
        -: 6160:      }
       37: 6161:    }
        -: 6162:    {
       37: 6163:    wants_newline = 0;
       37: 6164:    tmp___16 = tstbit((int )eolbyte_1, labels[i]);
        -: 6165:    }
       37: 6166:    if (tmp___16) {
    #####: 6167:      j = 0;
        -: 6168:      {
    #####: 6169:      while (1) {
        -: 6170:        while_continue___15: /* CIL Label */ ;
    #####: 6171:        if (! (j < follows.nelem)) {
    #####: 6172:          goto while_break___15;
        -: 6173:        }
    #####: 6174:        if (((follows.elems + j)->constraint & 192U) >> 2 != ((follows.elems + j)->constraint & 48U)) {
    #####: 6175:          wants_newline = 1;
    #####: 6176:        }
    #####: 6177:        j ++;
        -: 6178:      }
        -: 6179:      while_break___15: /* CIL Label */ ;
        -: 6180:      }
    #####: 6181:    }
       37: 6182:    wants_letter = 0;
       37: 6183:    j = 0;
        -: 6184:    {
      131: 6185:    while (1) {
        -: 6186:      while_continue___16: /* CIL Label */ ;
      131: 6187:      if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
    #####: 6188:        goto while_break___16;
        -: 6189:      }
      131: 6190:      if (labels[i][j] & letters[j]) {
       37: 6191:        goto while_break___16;
        -: 6192:      }
       94: 6193:      j ++;
        -: 6194:    }
        -: 6195:    while_break___16: /* CIL Label */ ;
        -: 6196:    }
       37: 6197:    if ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int ))) {
       37: 6198:      j = 0;
        -: 6199:      {
      157: 6200:      while (1) {
        -: 6201:        while_continue___17: /* CIL Label */ ;
      157: 6202:        if (! (j < follows.nelem)) {
       37: 6203:          goto while_break___17;
        -: 6204:        }
      120: 6205:        if (((follows.elems + j)->constraint & 12U) >> 2 != ((follows.elems + j)->constraint & 3U)) {
    #####: 6206:          wants_letter = 1;
    #####: 6207:        }
      120: 6208:        j ++;
        -: 6209:      }
        -: 6210:      while_break___17: /* CIL Label */ ;
        -: 6211:      }
       37: 6212:    }
        -: 6213:    {
       37: 6214:    state = state_index(d, & follows, 0, 0);
        -: 6215:    }
       37: 6216:    if (wants_newline) {
        -: 6217:      {
    #####: 6218:      state_newline = state_index(d, & follows, 1, 0);
        -: 6219:      }
    #####: 6220:    } else {
       37: 6221:      state_newline = state;
        -: 6222:    }
       37: 6223:    if (wants_letter) {
        -: 6224:      {
    #####: 6225:      state_letter = state_index(d, & follows, 0, 1);
        -: 6226:      }
    #####: 6227:    } else {
       37: 6228:      state_letter = state;
        -: 6229:    }
       37: 6230:    j = 0;
        -: 6231:    {
      333: 6232:    while (1) {
        -: 6233:      while_continue___18: /* CIL Label */ ;
      333: 6234:      if (! ((unsigned long )j < (((unsigned long )(1 << 8) + 8UL * sizeof(int )) - 1UL) / (8UL * sizeof(int )))) {
       37: 6235:        goto while_break___18;
        -: 6236:      }
      296: 6237:      k = 0;
        -: 6238:      {
     9768: 6239:      while (1) {
        -: 6240:        while_continue___19: /* CIL Label */ ;
     9768: 6241:        if (! ((unsigned long )k < 8UL * sizeof(int ))) {
      296: 6242:          goto while_break___19;
        -: 6243:        }
     9472: 6244:        if (labels[i][j] & (1 << k)) {
      540: 6245:          c = (int )((unsigned long )j * (8UL * sizeof(int )) + (unsigned long )k);
      540: 6246:          if (c == (int )eolbyte_1) {
    #####: 6247:            *(trans___0 + c) = state_newline;
    #####: 6248:          } else {
        -: 6249:            {
      540: 6250:            tmp___17 = __ctype_b_loc();
        -: 6251:            }
      540: 6252:            if ((int const   )*(*tmp___17 + c) & 8) {
      154: 6253:              *(trans___0 + c) = state_letter;
      154: 6254:            } else { //Added block
      386: 6255:            if (c == 95) {
        2: 6256:              *(trans___0 + c) = state_letter;
        2: 6257:            } else { //Added block
      384: 6258:            if (c < 1 << 8) {
      384: 6259:              *(trans___0 + c) = state;
      384: 6260:            }
        -: 6261:            }
        -: 6262:            }
        -: 6263:          }
      540: 6264:        }
     9472: 6265:        k ++;
        -: 6266:      }
        -: 6267:      while_break___19: /* CIL Label */ ;
        -: 6268:      }
      296: 6269:      j ++;
        -: 6270:    }
        -: 6271:    while_break___18: /* CIL Label */ ;
        -: 6272:    }
       37: 6273:    i ++;
        -: 6274:  }
        -: 6275:  while_break___11: /* CIL Label */ ;
        -: 6276:  }
       13: 6277:  i = 0;
        -: 6278:  {
       50: 6279:  while (1) {
        -: 6280:    while_continue___20: /* CIL Label */ ;
       50: 6281:    if (! (i < ngrps)) {
       13: 6282:      goto while_break___20;
        -: 6283:    }
        -: 6284:    {
       37: 6285:    free((void *)grps[i].elems);
       37: 6286:    i ++;
        -: 6287:    }
        -: 6288:  }
        -: 6289:  while_break___20: /* CIL Label */ ;
        -: 6290:  }
        -: 6291:  {
       13: 6292:  free((void *)follows.elems);
       13: 6293:  free((void *)tmp.elems);
        -: 6294:  }
       13: 6295:  return;
        -: 6296:}
        -: 6297:}
       13: 6298:static void build_state(int s , struct dfa *d ) 
        -: 6299:{ 
        -: 6300:  int *trans___0 ;
        -: 6301:  int i ;
        -: 6302:  int tmp ;
        -: 6303:  int tmp___0 ;
        -: 6304:  int tmp___1 ;
        -: 6305:  int tmp___2 ;
        -: 6306:  int tmp___3 ;
        -: 6307:  int tmp___4 ;
        -: 6308:  ptr_t tmp___5 ;
        -: 6309:  int oldalloc ;
        -: 6310:  ptr_t tmp___6 ;
        -: 6311:  ptr_t tmp___7 ;
        -: 6312:  ptr_t tmp___8 ;
        -: 6313:  ptr_t tmp___9 ;
        -: 6314:  int tmp___10 ;
        -: 6315:
        -: 6316:  {
       13: 6317:  if (d->trcount >= 1024) {
    #####: 6318:    i = 0;
        -: 6319:    {
    #####: 6320:    while (1) {
        -: 6321:      while_continue: /* CIL Label */ ;
    #####: 6322:      if (! (i < d->tralloc)) {
    #####: 6323:        goto while_break;
        -: 6324:      }
    #####: 6325:      if (*(d->trans + i)) {
        -: 6326:        {
    #####: 6327:        free((ptr_t )*(d->trans + i));
    #####: 6328:        *(d->trans + i) = (int *)((void *)0);
        -: 6329:        }
    #####: 6330:      } else { //Added block
    #####: 6331:      if (*(d->fails + i)) {
        -: 6332:        {
    #####: 6333:        free((ptr_t )*(d->fails + i));
    #####: 6334:        *(d->fails + i) = (int *)((void *)0);
        -: 6335:        }
    #####: 6336:      }
        -: 6337:      }
    #####: 6338:      i ++;
        -: 6339:    }
        -: 6340:    while_break: /* CIL Label */ ;
        -: 6341:    }
    #####: 6342:    d->trcount = 0;
    #####: 6343:  }
       13: 6344:  (d->trcount) ++;
       13: 6345:  *(d->success + s) = 0;
       13: 6346:  if ((d->states + s)->newline) {
    #####: 6347:    tmp = 2;
    #####: 6348:  } else {
       13: 6349:    tmp = 0;
        -: 6350:  }
       13: 6351:  if ((int )(d->states + s)->constraint & (1 << ((tmp + 1) + 4))) {
        1: 6352:    if ((d->states + s)->letter) {
    #####: 6353:      tmp___0 = 2;
    #####: 6354:    } else {
        1: 6355:      tmp___0 = 0;
        -: 6356:    }
        1: 6357:    if ((int )(d->states + s)->constraint & (1 << tmp___0)) {
        1: 6358:      *(d->success + s) |= 4;
        1: 6359:    }
        1: 6360:  }
       13: 6361:  if ((d->states + s)->newline) {
    #####: 6362:    tmp___1 = 2;
    #####: 6363:  } else {
       13: 6364:    tmp___1 = 0;
        -: 6365:  }
       13: 6366:  if ((int )(d->states + s)->constraint & (1 << (tmp___1 + 4))) {
        1: 6367:    if ((d->states + s)->letter) {
    #####: 6368:      tmp___2 = 2;
    #####: 6369:    } else {
        1: 6370:      tmp___2 = 0;
        -: 6371:    }
        1: 6372:    if ((int )(d->states + s)->constraint & (1 << (tmp___2 + 1))) {
        1: 6373:      *(d->success + s) |= 2;
        1: 6374:    }
        1: 6375:  }
       13: 6376:  if ((d->states + s)->newline) {
    #####: 6377:    tmp___3 = 2;
    #####: 6378:  } else {
       13: 6379:    tmp___3 = 0;
        -: 6380:  }
       13: 6381:  if ((int )(d->states + s)->constraint & (1 << (tmp___3 + 4))) {
        1: 6382:    if ((d->states + s)->letter) {
    #####: 6383:      tmp___4 = 2;
    #####: 6384:    } else {
        1: 6385:      tmp___4 = 0;
        -: 6386:    }
        1: 6387:    if ((int )(d->states + s)->constraint & (1 << tmp___4)) {
        1: 6388:      *(d->success + s) |= 1;
        1: 6389:    }
        1: 6390:  }
        -: 6391:  {
       13: 6392:  tmp___5 = xmalloc_1((unsigned long )(1 << 8) * sizeof(int ));
       13: 6393:  trans___0 = (int *)tmp___5;
       13: 6394:  dfastate(s, d, trans___0);
       13: 6395:  i = 0;
        -: 6396:  }
        -: 6397:  {
     3341: 6398:  while (1) {
        -: 6399:    while_continue___0: /* CIL Label */ ;
     3341: 6400:    if (! (i < 1 << 8)) {
       13: 6401:      goto while_break___0;
        -: 6402:    }
     3328: 6403:    if (*(trans___0 + i) >= d->tralloc) {
        3: 6404:      oldalloc = d->tralloc;
        -: 6405:      {
        7: 6406:      while (1) {
        -: 6407:        while_continue___1: /* CIL Label */ ;
        7: 6408:        if (! (*(trans___0 + i) >= d->tralloc)) {
        3: 6409:          goto while_break___1;
        -: 6410:        }
        4: 6411:        d->tralloc *= 2;
        -: 6412:      }
        -: 6413:      while_break___1: /* CIL Label */ ;
        -: 6414:      }
        -: 6415:      {
        3: 6416:      tmp___6 = xrealloc_1((ptr_t )d->realtrans, (unsigned long )(d->tralloc + 1) * sizeof(int *));
        3: 6417:      d->realtrans = (int **)tmp___6;
        3: 6418:      d->trans = d->realtrans + 1;
        3: 6419:      tmp___7 = xrealloc_1((ptr_t )d->fails, (unsigned long )d->tralloc * sizeof(int *));
        3: 6420:      d->fails = (int **)tmp___7;
        3: 6421:      tmp___8 = xrealloc_1((ptr_t )d->success, (unsigned long )d->tralloc * sizeof(int ));
        3: 6422:      d->success = (int *)tmp___8;
        3: 6423:      tmp___9 = xrealloc_1((ptr_t )d->newlines, (unsigned long )d->tralloc * sizeof(int ));
        3: 6424:      d->newlines = (int *)tmp___9;
        -: 6425:      }
        -: 6426:      {
       18: 6427:      while (1) {
        -: 6428:        while_continue___2: /* CIL Label */ ;
       18: 6429:        if (! (oldalloc < d->tralloc)) {
        3: 6430:          goto while_break___2;
        -: 6431:        }
       15: 6432:        *(d->trans + oldalloc) = (int *)((void *)0);
       15: 6433:        tmp___10 = oldalloc;
       15: 6434:        oldalloc ++;
       15: 6435:        *(d->fails + tmp___10) = (int *)((void *)0);
        -: 6436:      }
        -: 6437:      while_break___2: /* CIL Label */ ;
        -: 6438:      }
        3: 6439:    }
     3328: 6440:    i ++;
        -: 6441:  }
        -: 6442:  while_break___0: /* CIL Label */ ;
        -: 6443:  }
       13: 6444:  *(d->newlines + s) = *(trans___0 + (int )eolbyte_1);
       13: 6445:  *(trans___0 + (int )eolbyte_1) = -1;
       13: 6446:  if ((d->states + s)->constraint) {
        1: 6447:    *(d->fails + s) = trans___0;
        1: 6448:  } else {
       12: 6449:    *(d->trans + s) = trans___0;
        -: 6450:  }
       13: 6451:  return;
        -: 6452:}
        -: 6453:}
        1: 6454:static void build_state_zero(struct dfa *d ) 
        -: 6455:{ 
        -: 6456:  ptr_t tmp ;
        -: 6457:  ptr_t tmp___0 ;
        -: 6458:  ptr_t tmp___1 ;
        -: 6459:  ptr_t tmp___2 ;
        -: 6460:
        -: 6461:  {
        -: 6462:  {
        1: 6463:  d->tralloc = 1;
        1: 6464:  d->trcount = 0;
        1: 6465:  tmp = xcalloc((size_t )(d->tralloc + 1), sizeof(int *));
        1: 6466:  d->realtrans = (int **)tmp;
        1: 6467:  d->trans = d->realtrans + 1;
        1: 6468:  tmp___0 = xcalloc((size_t )d->tralloc, sizeof(int *));
        1: 6469:  d->fails = (int **)tmp___0;
        1: 6470:  tmp___1 = xmalloc_1((unsigned long )d->tralloc * sizeof(int ));
        1: 6471:  d->success = (int *)tmp___1;
        1: 6472:  tmp___2 = xmalloc_1((unsigned long )d->tralloc * sizeof(int ));
        1: 6473:  d->newlines = (int *)tmp___2;
        1: 6474:  build_state(0, d);
        -: 6475:  }
        1: 6476:  return;
        -: 6477:}
        -: 6478:}
        -: 6479:static int sbit[256]  ;
        -: 6480:static int sbit_init  ;
       76: 6481:char *dfaexec(struct dfa *d , char *begin , char *end , int newline___0 , int *count ,
        -: 6482:              int *backref ) 
        -: 6483:{ 
        -: 6484:  register int s ;
        -: 6485:  register int s1 ;
        -: 6486:  register int tmp ;
        -: 6487:  register unsigned char *p ;
        -: 6488:  register int **trans___0 ;
        -: 6489:  register int *t ;
        -: 6490:  register unsigned char eol ;
        -: 6491:  int i ;
        -: 6492:  unsigned short const   **tmp___1 ;
        -: 6493:  unsigned char *tmp___2 ;
        -: 6494:  unsigned char *tmp___3 ;
        -: 6495:  unsigned char *tmp___4 ;
        -: 6496:
        -: 6497:  {
       76: 6498:  eol = eolbyte_1;
       76: 6499:  if (! sbit_init) {
        1: 6500:    sbit_init = 1;
        1: 6501:    i = 0;
        -: 6502:    {
      257: 6503:    while (1) {
        -: 6504:      while_continue: /* CIL Label */ ;
      257: 6505:      if (! (i < 1 << 8)) {
        1: 6506:        goto while_break;
        -: 6507:      }
        -: 6508:      {
      256: 6509:      tmp___1 = __ctype_b_loc();
        -: 6510:      }
      256: 6511:      if ((int const   )*(*tmp___1 + i) & 8) {
       62: 6512:        sbit[i] = 2;
       62: 6513:      } else { //Added block
      194: 6514:      if (i == 95) {
        1: 6515:        sbit[i] = 2;
        1: 6516:      } else {
      193: 6517:        sbit[i] = 1;
        -: 6518:      }
        -: 6519:      }
      256: 6520:      i ++;
        -: 6521:    }
        -: 6522:    while_break: /* CIL Label */ ;
        -: 6523:    }
        1: 6524:    sbit[eol] = 4;
        1: 6525:  }
       76: 6526:  if (! d->tralloc) {
        -: 6527:    {
        1: 6528:    build_state_zero(d);
        -: 6529:    }
        1: 6530:  }
       76: 6531:  s1 = 0;
       76: 6532:  s = s1;
       76: 6533:  p = (unsigned char *)begin;
       76: 6534:  trans___0 = d->trans;
       76: 6535:  *end = (char )eol;
        -: 6536:  {
       88: 6537:  while (1) {
        -: 6538:    while_continue___0: /* CIL Label */ ;
        -: 6539:    {
      606: 6540:    while (1) {
        -: 6541:      while_continue___1: /* CIL Label */ ;
      606: 6542:      t = *(trans___0 + s);
      606: 6543:      if (! ((unsigned long )t != (unsigned long )((int *)0))) {
       73: 6544:        goto while_break___1;
        -: 6545:      }
      533: 6546:      tmp___2 = p;
      533: 6547:      p ++;
      533: 6548:      s1 = *(t + (int )*tmp___2);
      533: 6549:      t = *(trans___0 + s1);
      533: 6550:      if ((unsigned long )t == (unsigned long )((int *)0)) {
       15: 6551:        tmp = s;
       15: 6552:        s = s1;
       15: 6553:        s1 = tmp;
       15: 6554:        goto while_break___1;
        -: 6555:      }
      518: 6556:      tmp___3 = p;
      518: 6557:      p ++;
      518: 6558:      s = *(t + (int )*tmp___3);
        -: 6559:    }
        -: 6560:    while_break___1: /* CIL Label */ ;
        -: 6561:    }
       88: 6562:    if (s >= 0) {
       88: 6563:      if ((unsigned long )p <= (unsigned long )((unsigned char *)end)) {
       88: 6564:        if (*(d->fails + s)) {
       76: 6565:          if (*(d->success + s) & sbit[*p]) {
       76: 6566:            if (backref) {
       76: 6567:              *backref = (int )(d->states + s)->backref != 0;
       76: 6568:            }
       76: 6569:            return ((char *)p);
        -: 6570:          }
    #####: 6571:          s1 = s;
    #####: 6572:          tmp___4 = p;
    #####: 6573:          p ++;
    #####: 6574:          s = *(*(d->fails + s) + (int )*tmp___4);
    #####: 6575:          goto __Cont;
        -: 6576:        }
       12: 6577:      }
       12: 6578:    }
       12: 6579:    if (count) {
    #####: 6580:      if ((unsigned long )((char *)p) <= (unsigned long )end) {
    #####: 6581:        if ((int )*(p + -1) == (int )eol) {
    #####: 6582:          (*count) ++;
    #####: 6583:        }
    #####: 6584:      }
    #####: 6585:    }
       12: 6586:    if ((unsigned long )((char *)p) > (unsigned long )end) {
    #####: 6587:      return ((char *)((void *)0));
        -: 6588:    }
       12: 6589:    if (s >= 0) {
        -: 6590:      {
       12: 6591:      build_state(s, d);
       12: 6592:      trans___0 = d->trans;
        -: 6593:      }
       12: 6594:      goto __Cont;
        -: 6595:    }
    #####: 6596:    if ((int )*(p + -1) == (int )eol) {
    #####: 6597:      if (newline___0) {
    #####: 6598:        s = *(d->newlines + s1);
    #####: 6599:        goto __Cont;
        -: 6600:      }
    #####: 6601:    }
    #####: 6602:    s = 0;
        -: 6603:    __Cont: ;
        -: 6604:  }
        -: 6605:  while_break___0: /* CIL Label */ ;
        -: 6606:  }
        -: 6607:}
       76: 6608:}
        1: 6609:void dfainit(struct dfa *d ) 
        -: 6610:{ 
        -: 6611:  ptr_t tmp ;
        -: 6612:  ptr_t tmp___0 ;
        -: 6613:  int tmp___1 ;
        -: 6614:  int tmp___2 ;
        -: 6615:  int tmp___3 ;
        -: 6616:
        -: 6617:  {
        -: 6618:  {
        1: 6619:  d->calloc = 1;
        1: 6620:  tmp = xmalloc_1((unsigned long )d->calloc * sizeof(charclass ));
        1: 6621:  d->charclasses = (charclass *)tmp;
        1: 6622:  d->cindex = 0;
        1: 6623:  d->talloc = 1;
        1: 6624:  tmp___0 = xmalloc_1((unsigned long )d->talloc * sizeof(token ));
        1: 6625:  d->tokens = (token *)tmp___0;
        1: 6626:  tmp___3 = 0;
        1: 6627:  d->nregexps = tmp___3;
        1: 6628:  tmp___2 = tmp___3;
        1: 6629:  d->nleaves = tmp___2;
        1: 6630:  tmp___1 = tmp___2;
        1: 6631:  d->depth = tmp___1;
        1: 6632:  d->tindex = tmp___1;
        1: 6633:  d->searchflag = 0;
        1: 6634:  d->tralloc = 0;
        1: 6635:  d->musts = (struct dfamust *)0;
        -: 6636:  }
        1: 6637:  return;
        -: 6638:}
        -: 6639:}
        1: 6640:void dfacomp(char *s , size_t len , struct dfa *d , int searchflag ) 
        -: 6641:{ 
        -: 6642:  char *lcopy ;
        -: 6643:  int i ;
        -: 6644:  void *tmp ;
        -: 6645:  char *tmp___0 ;
        -: 6646:  int tmp___1 ;
        -: 6647:  unsigned short const   **tmp___2 ;
        -: 6648:  int tmp___3 ;
        -: 6649:  int tmp___4 ;
        -: 6650:  int tmp___5 ;
        -: 6651:  int tmp___6 ;
        -: 6652:
        -: 6653:  {
        1: 6654:  if (case_fold) {
        -: 6655:    {
    #####: 6656:    tmp = malloc(len);
    #####: 6657:    lcopy = (char *)tmp;
        -: 6658:    }
    #####: 6659:    if (! lcopy) {
        -: 6660:      {
    #####: 6661:      tmp___0 = gettext("out of memory");
    #####: 6662:      dfaerror((char const   *)tmp___0);
        -: 6663:      }
    #####: 6664:    }
    #####: 6665:    case_fold = 0;
    #####: 6666:    i = 0;
        -: 6667:    {
    #####: 6668:    while (1) {
        -: 6669:      while_continue: /* CIL Label */ ;
    #####: 6670:      if (! ((size_t )i < len)) {
    #####: 6671:        goto while_break;
        -: 6672:      }
        -: 6673:      {
    #####: 6674:      tmp___2 = __ctype_b_loc();
        -: 6675:      }
    #####: 6676:      if ((int const   )*(*tmp___2 + (int )((unsigned char )*(s + i))) & 256) {
        -: 6677:        {
    #####: 6678:        tmp___1 = tolower((int )((unsigned char )*(s + i)));
    #####: 6679:        *(lcopy + i) = (char )tmp___1;
        -: 6680:        }
    #####: 6681:      } else {
    #####: 6682:        *(lcopy + i) = *(s + i);
        -: 6683:      }
    #####: 6684:      i ++;
        -: 6685:    }
        -: 6686:    while_break: /* CIL Label */ ;
        -: 6687:    }
        -: 6688:    {
    #####: 6689:    dfainit(d);
    #####: 6690:    dfaparse(lcopy, len, d);
    #####: 6691:    free((void *)lcopy);
    #####: 6692:    dfamust(d);
    #####: 6693:    tmp___6 = 0;
    #####: 6694:    d->nregexps = tmp___6;
    #####: 6695:    tmp___5 = tmp___6;
    #####: 6696:    d->nleaves = tmp___5;
    #####: 6697:    tmp___4 = tmp___5;
    #####: 6698:    d->depth = tmp___4;
    #####: 6699:    tmp___3 = tmp___4;
    #####: 6700:    d->tindex = tmp___3;
    #####: 6701:    d->cindex = tmp___3;
    #####: 6702:    case_fold = 1;
    #####: 6703:    dfaparse(s, len, d);
    #####: 6704:    dfaanalyze(d, searchflag);
        -: 6705:    }
    #####: 6706:  } else {
        -: 6707:    {
        1: 6708:    dfainit(d);
        1: 6709:    dfaparse(s, len, d);
        1: 6710:    dfamust(d);
        1: 6711:    dfaanalyze(d, searchflag);
        -: 6712:    }
        -: 6713:  }
        1: 6714:  return;
        -: 6715:}
        -: 6716:}
    #####: 6717:void dfafree(struct dfa *d ) 
        -: 6718:{ 
        -: 6719:  int i ;
        -: 6720:  struct dfamust *dm ;
        -: 6721:  struct dfamust *ndm ;
        -: 6722:
        -: 6723:  {
        -: 6724:  {
    #####: 6725:  free((ptr_t )d->charclasses);
    #####: 6726:  free((ptr_t )d->tokens);
    #####: 6727:  i = 0;
        -: 6728:  }
        -: 6729:  {
    #####: 6730:  while (1) {
        -: 6731:    while_continue: /* CIL Label */ ;
    #####: 6732:    if (! (i < d->sindex)) {
    #####: 6733:      goto while_break;
        -: 6734:    }
        -: 6735:    {
    #####: 6736:    free((ptr_t )(d->states + i)->elems.elems);
    #####: 6737:    i ++;
        -: 6738:    }
        -: 6739:  }
        -: 6740:  while_break: /* CIL Label */ ;
        -: 6741:  }
        -: 6742:  {
    #####: 6743:  free((ptr_t )d->states);
    #####: 6744:  i = 0;
        -: 6745:  }
        -: 6746:  {
    #####: 6747:  while (1) {
        -: 6748:    while_continue___0: /* CIL Label */ ;
    #####: 6749:    if (! (i < d->tindex)) {
    #####: 6750:      goto while_break___0;
        -: 6751:    }
    #####: 6752:    if ((d->follows + i)->elems) {
        -: 6753:      {
    #####: 6754:      free((ptr_t )(d->follows + i)->elems);
        -: 6755:      }
    #####: 6756:    }
    #####: 6757:    i ++;
        -: 6758:  }
        -: 6759:  while_break___0: /* CIL Label */ ;
        -: 6760:  }
        -: 6761:  {
    #####: 6762:  free((ptr_t )d->follows);
    #####: 6763:  i = 0;
        -: 6764:  }
        -: 6765:  {
    #####: 6766:  while (1) {
        -: 6767:    while_continue___1: /* CIL Label */ ;
    #####: 6768:    if (! (i < d->tralloc)) {
    #####: 6769:      goto while_break___1;
        -: 6770:    }
    #####: 6771:    if (*(d->trans + i)) {
        -: 6772:      {
    #####: 6773:      free((ptr_t )*(d->trans + i));
        -: 6774:      }
    #####: 6775:    } else { //Added block
    #####: 6776:    if (*(d->fails + i)) {
        -: 6777:      {
    #####: 6778:      free((ptr_t )*(d->fails + i));
        -: 6779:      }
    #####: 6780:    }
        -: 6781:    }
    #####: 6782:    i ++;
        -: 6783:  }
        -: 6784:  while_break___1: /* CIL Label */ ;
        -: 6785:  }
    #####: 6786:  if (d->realtrans) {
        -: 6787:    {
    #####: 6788:    free((ptr_t )d->realtrans);
        -: 6789:    }
    #####: 6790:  }
    #####: 6791:  if (d->fails) {
        -: 6792:    {
    #####: 6793:    free((ptr_t )d->fails);
        -: 6794:    }
    #####: 6795:  }
    #####: 6796:  if (d->newlines) {
        -: 6797:    {
    #####: 6798:    free((ptr_t )d->newlines);
        -: 6799:    }
    #####: 6800:  }
    #####: 6801:  if (d->success) {
        -: 6802:    {
    #####: 6803:    free((ptr_t )d->success);
        -: 6804:    }
    #####: 6805:  }
    #####: 6806:  dm = d->musts;
        -: 6807:  {
    #####: 6808:  while (1) {
        -: 6809:    while_continue___2: /* CIL Label */ ;
    #####: 6810:    if (! dm) {
    #####: 6811:      goto while_break___2;
        -: 6812:    }
        -: 6813:    {
    #####: 6814:    ndm = dm->next;
    #####: 6815:    free((void *)dm->must);
    #####: 6816:    free((ptr_t )dm);
    #####: 6817:    dm = ndm;
        -: 6818:    }
        -: 6819:  }
        -: 6820:  while_break___2: /* CIL Label */ ;
        -: 6821:  }
    #####: 6822:  return;
        -: 6823:}
        -: 6824:}
       80: 6825:static char *icatalloc(char *old , char *new ) 
        -: 6826:{ 
        -: 6827:  char *result ;
        -: 6828:  size_t oldsize ;
        -: 6829:  size_t newsize ;
        -: 6830:  size_t tmp ;
        -: 6831:  void *tmp___0 ;
        -: 6832:  void *tmp___1 ;
        -: 6833:
        -: 6834:  {
       80: 6835:  if ((unsigned long )new == (unsigned long )((void *)0)) {
    #####: 6836:    newsize = (size_t )0;
    #####: 6837:  } else {
        -: 6838:    {
       80: 6839:    tmp = strlen((char const   *)new);
       80: 6840:    newsize = tmp;
        -: 6841:    }
        -: 6842:  }
       80: 6843:  if ((unsigned long )old == (unsigned long )((void *)0)) {
       47: 6844:    oldsize = (size_t )0;
       47: 6845:  } else { //Added block
       33: 6846:  if (newsize == 0UL) {
        2: 6847:    return (old);
        -: 6848:  } else {
        -: 6849:    {
       31: 6850:    oldsize = strlen((char const   *)old);
        -: 6851:    }
        -: 6852:  }
        -: 6853:  }
       78: 6854:  if ((unsigned long )old == (unsigned long )((void *)0)) {
        -: 6855:    {
       47: 6856:    tmp___0 = malloc(newsize + 1UL);
       47: 6857:    result = (char *)tmp___0;
        -: 6858:    }
       47: 6859:  } else {
        -: 6860:    {
       31: 6861:    tmp___1 = realloc((void *)old, (oldsize + newsize) + 1UL);
       31: 6862:    result = (char *)tmp___1;
        -: 6863:    }
        -: 6864:  }
       78: 6865:  if ((unsigned long )result != (unsigned long )((void *)0)) {
       78: 6866:    if ((unsigned long )new != (unsigned long )((void *)0)) {
        -: 6867:      {
       78: 6868:      strcpy((char * __restrict  )(result + oldsize), (char const   * __restrict  )new);
        -: 6869:      }
       78: 6870:    }
       78: 6871:  }
       78: 6872:  return (result);
        -: 6873:}
       80: 6874:}
       47: 6875:static char *icpyalloc(char *string ) 
        -: 6876:{ 
        -: 6877:  char *tmp ;
        -: 6878:
        -: 6879:  {
        -: 6880:  {
       47: 6881:  tmp = icatalloc((char *)((void *)0), string);
        -: 6882:  }
       47: 6883:  return (tmp);
        -: 6884:}
        -: 6885:}
       73: 6886:static char *istrstr(char *lookin , char *lookfor ) 
        -: 6887:{ 
        -: 6888:  char *cp ;
        -: 6889:  size_t len ;
        -: 6890:  int tmp ;
        -: 6891:
        -: 6892:  {
        -: 6893:  {
       73: 6894:  len = strlen((char const   *)lookfor);
       73: 6895:  cp = lookin;
        -: 6896:  }
        -: 6897:  {
      203: 6898:  while (1) {
        -: 6899:    while_continue: /* CIL Label */ ;
      203: 6900:    if (! ((int )*cp != 0)) {
       52: 6901:      goto while_break;
        -: 6902:    }
        -: 6903:    {
      151: 6904:    tmp = strncmp((char const   *)cp, (char const   *)lookfor, len);
        -: 6905:    }
      151: 6906:    if (tmp == 0) {
       21: 6907:      return (cp);
        -: 6908:    }
      130: 6909:    cp ++;
        -: 6910:  }
        -: 6911:  while_break: /* CIL Label */ ;
        -: 6912:  }
       52: 6913:  return ((char *)((void *)0));
        -: 6914:}
       73: 6915:}
      112: 6916:static void ifree(char *cp ) 
        -: 6917:{ 
        -: 6918:
        -: 6919:
        -: 6920:  {
      112: 6921:  if ((unsigned long )cp != (unsigned long )((void *)0)) {
        -: 6922:    {
      112: 6923:    free((void *)cp);
        -: 6924:    }
      112: 6925:  }
      112: 6926:  return;
        -: 6927:}
        -: 6928:}
       44: 6929:static void freelist(char **cpp ) 
        -: 6930:{ 
        -: 6931:  int i ;
        -: 6932:
        -: 6933:  {
       44: 6934:  if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 6935:    return;
        -: 6936:  }
       44: 6937:  i = 0;
        -: 6938:  {
       61: 6939:  while (1) {
        -: 6940:    while_continue: /* CIL Label */ ;
       61: 6941:    if (! ((unsigned long )*(cpp + i) != (unsigned long )((void *)0))) {
       44: 6942:      goto while_break;
        -: 6943:    }
        -: 6944:    {
       17: 6945:    free((void *)*(cpp + i));
       17: 6946:    *(cpp + i) = (char *)((void *)0);
       17: 6947:    i ++;
        -: 6948:    }
        -: 6949:  }
        -: 6950:  while_break: /* CIL Label */ ;
        -: 6951:  }
       44: 6952:  return;
        -: 6953:}
       44: 6954:}
       38: 6955:static char **enlist(char **cpp , char *new , size_t len ) 
        -: 6956:{ 
        -: 6957:  int i ;
        -: 6958:  int j ;
        -: 6959:  char *tmp ;
        -: 6960:  char *tmp___0 ;
        -: 6961:  void *tmp___1 ;
        -: 6962:
        -: 6963:  {
       38: 6964:  if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 6965:    return ((char **)((void *)0));
        -: 6966:  }
        -: 6967:  {
       38: 6968:  new = icpyalloc(new);
        -: 6969:  }
       38: 6970:  if ((unsigned long )new == (unsigned long )((void *)0)) {
        -: 6971:    {
    #####: 6972:    freelist(cpp);
        -: 6973:    }
    #####: 6974:    return ((char **)((void *)0));
        -: 6975:  }
       38: 6976:  *(new + len) = (char )'\000';
       38: 6977:  i = 0;
        -: 6978:  {
       73: 6979:  while (1) {
        -: 6980:    while_continue: /* CIL Label */ ;
       73: 6981:    if (! ((unsigned long )*(cpp + i) != (unsigned long )((void *)0))) {
       35: 6982:      goto while_break;
        -: 6983:    }
        -: 6984:    {
       38: 6985:    tmp = istrstr(*(cpp + i), new);
        -: 6986:    }
       38: 6987:    if ((unsigned long )tmp != (unsigned long )((void *)0)) {
        -: 6988:      {
        3: 6989:      free((void *)new);
        -: 6990:      }
        3: 6991:      return (cpp);
        -: 6992:    }
       35: 6993:    i ++;
        -: 6994:  }
        -: 6995:  while_break: /* CIL Label */ ;
        -: 6996:  }
       35: 6997:  j = 0;
        -: 6998:  {
       61: 6999:  while (1) {
        -: 7000:    while_continue___0: /* CIL Label */ ;
       61: 7001:    if (! ((unsigned long )*(cpp + j) != (unsigned long )((void *)0))) {
       26: 7002:      goto while_break___0;
        -: 7003:    }
        -: 7004:    {
       35: 7005:    tmp___0 = istrstr(new, *(cpp + j));
        -: 7006:    }
       35: 7007:    if ((unsigned long )tmp___0 == (unsigned long )((void *)0)) {
       17: 7008:      j ++;
       17: 7009:    } else {
        -: 7010:      {
       18: 7011:      free((void *)*(cpp + j));
       18: 7012:      i --;
        -: 7013:      }
       18: 7014:      if (i == j) {
        9: 7015:        goto while_break___0;
        -: 7016:      }
        9: 7017:      *(cpp + j) = *(cpp + i);
        9: 7018:      *(cpp + i) = (char *)((void *)0);
        -: 7019:    }
        -: 7020:  }
        -: 7021:  while_break___0: /* CIL Label */ ;
        -: 7022:  }
        -: 7023:  {
       35: 7024:  tmp___1 = realloc((void *)((char *)cpp), (unsigned long )(i + 2) * sizeof(*cpp));
       35: 7025:  cpp = (char **)tmp___1;
        -: 7026:  }
       35: 7027:  if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 7028:    return ((char **)((void *)0));
        -: 7029:  }
       35: 7030:  *(cpp + i) = new;
       35: 7031:  *(cpp + (i + 1)) = (char *)((void *)0);
       35: 7032:  return (cpp);
        -: 7033:}
       38: 7034:}
        2: 7035:static char **comsubs(char *left , char *right ) 
        -: 7036:{ 
        -: 7037:  char **cpp ;
        -: 7038:  char *lcp ;
        -: 7039:  char *rcp ;
        -: 7040:  size_t i ;
        -: 7041:  size_t len ;
        -: 7042:  void *tmp ;
        -: 7043:
        -: 7044:  {
        2: 7045:  if ((unsigned long )left == (unsigned long )((void *)0)) {
    #####: 7046:    return ((char **)((void *)0));
        -: 7047:  } else { //Added block
        2: 7048:  if ((unsigned long )right == (unsigned long )((void *)0)) {
    #####: 7049:    return ((char **)((void *)0));
        -: 7050:  }
        -: 7051:  }
        -: 7052:  {
        2: 7053:  tmp = malloc(sizeof(*cpp));
        2: 7054:  cpp = (char **)tmp;
        -: 7055:  }
        2: 7056:  if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 7057:    return ((char **)((void *)0));
        -: 7058:  }
        2: 7059:  *(cpp + 0) = (char *)((void *)0);
        2: 7060:  lcp = left;
        -: 7061:  {
       16: 7062:  while (1) {
        -: 7063:    while_continue: /* CIL Label */ ;
       16: 7064:    if (! ((int )*lcp != 0)) {
        2: 7065:      goto while_break;
        -: 7066:    }
        -: 7067:    {
       14: 7068:    len = (size_t )0;
       14: 7069:    rcp = strchr((char const   *)right, (int )*lcp);
        -: 7070:    }
        -: 7071:    {
       19: 7072:    while (1) {
        -: 7073:      while_continue___0: /* CIL Label */ ;
       19: 7074:      if (! ((unsigned long )rcp != (unsigned long )((void *)0))) {
       14: 7075:        goto while_break___0;
        -: 7076:      }
        5: 7077:      i = (size_t )1;
        -: 7078:      {
       11: 7079:      while (1) {
        -: 7080:        while_continue___1: /* CIL Label */ ;
       11: 7081:        if ((int )*(lcp + i) != 0) {
        7: 7082:          if (! ((int )*(lcp + i) == (int )*(rcp + i))) {
        1: 7083:            goto while_break___1;
        -: 7084:          }
        6: 7085:        } else {
        4: 7086:          goto while_break___1;
        -: 7087:        }
        6: 7088:        goto __Cont;
        -: 7089:        __Cont: 
        6: 7090:        i ++;
        -: 7091:      }
        -: 7092:      while_break___1: /* CIL Label */ ;
        -: 7093:      }
        5: 7094:      if (i > len) {
        5: 7095:        len = i;
        5: 7096:      }
        -: 7097:      {
        5: 7098:      rcp = strchr((char const   *)(rcp + 1), (int )*lcp);
        -: 7099:      }
        -: 7100:    }
        -: 7101:    while_break___0: /* CIL Label */ ;
        -: 7102:    }
       14: 7103:    if (len == 0UL) {
        9: 7104:      goto __Cont___0;
        -: 7105:    }
        -: 7106:    {
        5: 7107:    cpp = enlist(cpp, lcp, len);
        -: 7108:    }
        5: 7109:    if ((unsigned long )cpp == (unsigned long )((void *)0)) {
    #####: 7110:      goto while_break;
        -: 7111:    }
        -: 7112:    __Cont___0: 
       14: 7113:    lcp ++;
        -: 7114:  }
        -: 7115:  while_break: /* CIL Label */ ;
        -: 7116:  }
        2: 7117:  return (cpp);
        -: 7118:}
        2: 7119:}
       13: 7120:static char **addlists(char **old , char **new ) 
        -: 7121:{ 
        -: 7122:  int i ;
        -: 7123:  size_t tmp ;
        -: 7124:
        -: 7125:  {
       13: 7126:  if ((unsigned long )old == (unsigned long )((void *)0)) {
    #####: 7127:    return ((char **)((void *)0));
        -: 7128:  } else { //Added block
       13: 7129:  if ((unsigned long )new == (unsigned long )((void *)0)) {
    #####: 7130:    return ((char **)((void *)0));
        -: 7131:  }
        -: 7132:  }
       13: 7133:  i = 0;
        -: 7134:  {
       25: 7135:  while (1) {
        -: 7136:    while_continue: /* CIL Label */ ;
       25: 7137:    if (! ((unsigned long )*(new + i) != (unsigned long )((void *)0))) {
       13: 7138:      goto while_break;
        -: 7139:    }
        -: 7140:    {
       12: 7141:    tmp = strlen((char const   *)*(new + i));
       12: 7142:    old = enlist(old, *(new + i), tmp);
        -: 7143:    }
       12: 7144:    if ((unsigned long )old == (unsigned long )((void *)0)) {
    #####: 7145:      goto while_break;
        -: 7146:    }
       12: 7147:    i ++;
        -: 7148:  }
        -: 7149:  while_break: /* CIL Label */ ;
        -: 7150:  }
       13: 7151:  return (old);
        -: 7152:}
       13: 7153:}
        1: 7154:static char **inboth(char **left , char **right ) 
        -: 7155:{ 
        -: 7156:  char **both ;
        -: 7157:  char **temp ;
        -: 7158:  int lnum ;
        -: 7159:  int rnum ;
        -: 7160:  void *tmp ;
        -: 7161:
        -: 7162:  {
        1: 7163:  if ((unsigned long )left == (unsigned long )((void *)0)) {
    #####: 7164:    return ((char **)((void *)0));
        -: 7165:  } else { //Added block
        1: 7166:  if ((unsigned long )right == (unsigned long )((void *)0)) {
    #####: 7167:    return ((char **)((void *)0));
        -: 7168:  }
        -: 7169:  }
        -: 7170:  {
        1: 7171:  tmp = malloc(sizeof(*both));
        1: 7172:  both = (char **)tmp;
        -: 7173:  }
        1: 7174:  if ((unsigned long )both == (unsigned long )((void *)0)) {
    #####: 7175:    return ((char **)((void *)0));
        -: 7176:  }
        1: 7177:  *(both + 0) = (char *)((void *)0);
        1: 7178:  lnum = 0;
        -: 7179:  {
        2: 7180:  while (1) {
        -: 7181:    while_continue: /* CIL Label */ ;
        2: 7182:    if (! ((unsigned long )*(left + lnum) != (unsigned long )((void *)0))) {
        1: 7183:      goto while_break;
        -: 7184:    }
        1: 7185:    rnum = 0;
        -: 7186:    {
        3: 7187:    while (1) {
        -: 7188:      while_continue___0: /* CIL Label */ ;
        3: 7189:      if (! ((unsigned long )*(right + rnum) != (unsigned long )((void *)0))) {
        1: 7190:        goto while_break___0;
        -: 7191:      }
        -: 7192:      {
        2: 7193:      temp = comsubs(*(left + lnum), *(right + rnum));
        -: 7194:      }
        2: 7195:      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        -: 7196:        {
    #####: 7197:        freelist(both);
        -: 7198:        }
    #####: 7199:        return ((char **)((void *)0));
        -: 7200:      }
        -: 7201:      {
        2: 7202:      both = addlists(both, temp);
        2: 7203:      freelist(temp);
        2: 7204:      free((void *)temp);
        -: 7205:      }
        2: 7206:      if ((unsigned long )both == (unsigned long )((void *)0)) {
    #####: 7207:        return ((char **)((void *)0));
        -: 7208:      }
        2: 7209:      rnum ++;
        -: 7210:    }
        -: 7211:    while_break___0: /* CIL Label */ ;
        -: 7212:    }
        1: 7213:    lnum ++;
        -: 7214:  }
        -: 7215:  while_break: /* CIL Label */ ;
        -: 7216:  }
        1: 7217:  return (both);
        -: 7218:}
        1: 7219:}
       13: 7220:static void resetmust(must *mp ) 
        -: 7221:{ 
        -: 7222:  char tmp ;
        -: 7223:  char tmp___0 ;
        -: 7224:
        -: 7225:  {
        -: 7226:  {
       13: 7227:  tmp___0 = (char )'\000';
       13: 7228:  *(mp->is + 0) = tmp___0;
       13: 7229:  tmp = tmp___0;
       13: 7230:  *(mp->right + 0) = tmp;
       13: 7231:  *(mp->left + 0) = tmp;
       13: 7232:  freelist(mp->in);
        -: 7233:  }
       13: 7234:  return;
        -: 7235:}
        -: 7236:}
        -: 7237:static must must0  ;
        -: 7238:static char empty_string[1]  = {      (char )'\000'};
        1: 7239:static void dfamust(struct dfa *dfa___0 ) 
        -: 7240:{ 
        -: 7241:  must *musts ;
        -: 7242:  must *mp ;
        -: 7243:  char *result ;
        -: 7244:  int ri ;
        -: 7245:  int i ;
        -: 7246:  int exact ;
        -: 7247:  token t ;
        -: 7248:  struct dfamust *dm ;
        -: 7249:  void *tmp ;
        -: 7250:  void *tmp___0 ;
        -: 7251:  void *tmp___1 ;
        -: 7252:  void *tmp___2 ;
        -: 7253:  void *tmp___3 ;
        -: 7254:  char tmp___4 ;
        -: 7255:  char tmp___5 ;
        -: 7256:  char **new ;
        -: 7257:  must *lmp ;
        -: 7258:  must *rmp ;
        -: 7259:  int j ;
        -: 7260:  int ln ;
        -: 7261:  int rn ;
        -: 7262:  int n ;
        -: 7263:  int tmp___6 ;
        -: 7264:  size_t tmp___7 ;
        -: 7265:  size_t tmp___8 ;
        -: 7266:  size_t tmp___9 ;
        -: 7267:  size_t tmp___10 ;
        -: 7268:  int tmp___11 ;
        -: 7269:  must *lmp___0 ;
        -: 7270:  must *rmp___0 ;
        -: 7271:  char *tp ;
        -: 7272:  size_t tmp___12 ;
        -: 7273:  char tmp___13 ;
        -: 7274:  char tmp___14 ;
        -: 7275:  char tmp___15 ;
        -: 7276:  char tmp___16 ;
        -: 7277:  void *tmp___17 ;
        -: 7278:  size_t tmp___18 ;
        -: 7279:  void *tmp___19 ;
        -: 7280:  size_t tmp___20 ;
        -: 7281:
        -: 7282:  {
        -: 7283:  {
        1: 7284:  result = empty_string;
        1: 7285:  exact = 0;
        1: 7286:  tmp = malloc((unsigned long )(dfa___0->tindex + 1) * sizeof(*musts));
        1: 7287:  musts = (must *)tmp;
        -: 7288:  }
        1: 7289:  if ((unsigned long )musts == (unsigned long )((void *)0)) {
    #####: 7290:    return;
        -: 7291:  }
        1: 7292:  mp = musts;
        1: 7293:  i = 0;
        -: 7294:  {
       29: 7295:  while (1) {
        -: 7296:    while_continue: /* CIL Label */ ;
       29: 7297:    if (! (i <= dfa___0->tindex)) {
        1: 7298:      goto while_break;
        -: 7299:    }
       28: 7300:    *(mp + i) = must0;
       28: 7301:    i ++;
        -: 7302:  }
        -: 7303:  while_break: /* CIL Label */ ;
        -: 7304:  }
        1: 7305:  i = 0;
        -: 7306:  {
       29: 7307:  while (1) {
        -: 7308:    while_continue___0: /* CIL Label */ ;
       29: 7309:    if (! (i <= dfa___0->tindex)) {
        1: 7310:      goto while_break___0;
        -: 7311:    }
        -: 7312:    {
       28: 7313:    tmp___0 = malloc(sizeof(*((mp + i)->in)));
       28: 7314:    (mp + i)->in = (char **)tmp___0;
       28: 7315:    tmp___1 = malloc((size_t )2);
       28: 7316:    (mp + i)->left = (char *)tmp___1;
       28: 7317:    tmp___2 = malloc((size_t )2);
       28: 7318:    (mp + i)->right = (char *)tmp___2;
       28: 7319:    tmp___3 = malloc((size_t )2);
       28: 7320:    (mp + i)->is = (char *)tmp___3;
        -: 7321:    }
       28: 7322:    if ((unsigned long )(mp + i)->in == (unsigned long )((void *)0)) {
    #####: 7323:      goto done;
        -: 7324:    } else { //Added block
       28: 7325:    if ((unsigned long )(mp + i)->left == (unsigned long )((void *)0)) {
    #####: 7326:      goto done;
        -: 7327:    } else { //Added block
       28: 7328:    if ((unsigned long )(mp + i)->right == (unsigned long )((void *)0)) {
    #####: 7329:      goto done;
        -: 7330:    } else { //Added block
       28: 7331:    if ((unsigned long )(mp + i)->is == (unsigned long )((void *)0)) {
    #####: 7332:      goto done;
        -: 7333:    }
        -: 7334:    }
        -: 7335:    }
        -: 7336:    }
       28: 7337:    tmp___5 = (char )'\000';
       28: 7338:    *((mp + i)->is + 0) = tmp___5;
       28: 7339:    tmp___4 = tmp___5;
       28: 7340:    *((mp + i)->right + 0) = tmp___4;
       28: 7341:    *((mp + i)->left + 0) = tmp___4;
       28: 7342:    *((mp + i)->in + 0) = (char *)((void *)0);
       28: 7343:    i ++;
        -: 7344:  }
        -: 7345:  while_break___0: /* CIL Label */ ;
        -: 7346:  }
        1: 7347:  ri = 0;
        -: 7348:  {
       26: 7349:  while (1) {
        -: 7350:    while_continue___1: /* CIL Label */ ;
       26: 7351:    if (! (ri < dfa___0->tindex)) {
    #####: 7352:      goto while_break___1;
        -: 7353:    }
       26: 7354:    t = *(dfa___0->tokens + ri);
        -: 7355:    {
       26: 7356:    if ((int )t == 271) {
    #####: 7357:      goto case_271;
        -: 7358:    }
       26: 7359:    if ((int )t == 272) {
    #####: 7360:      goto case_271;
        -: 7361:    }
       26: 7362:    if ((int )t == 256) {
    #####: 7363:      goto case_256;
        -: 7364:    }
       26: 7365:    if ((int )t == 258) {
    #####: 7366:      goto case_256;
        -: 7367:    }
       26: 7368:    if ((int )t == 259) {
    #####: 7369:      goto case_256;
        -: 7370:    }
       26: 7371:    if ((int )t == 260) {
    #####: 7372:      goto case_256;
        -: 7373:    }
       26: 7374:    if ((int )t == 261) {
    #####: 7375:      goto case_256;
        -: 7376:    }
       26: 7377:    if ((int )t == 262) {
    #####: 7378:      goto case_256;
        -: 7379:    }
       26: 7380:    if ((int )t == 263) {
    #####: 7381:      goto case_256;
        -: 7382:    }
       26: 7383:    if ((int )t == 257) {
    #####: 7384:      goto case_256;
        -: 7385:    }
       26: 7386:    if ((int )t == 265) {
    #####: 7387:      goto case_265;
        -: 7388:    }
       26: 7389:    if ((int )t == 264) {
    #####: 7390:      goto case_265;
        -: 7391:    }
       26: 7392:    if ((int )t == 269) {
    #####: 7393:      goto case_269;
        -: 7394:    }
       26: 7395:    if ((int )t == 270) {
        1: 7396:      goto case_269;
        -: 7397:    }
       25: 7398:    if ((int )t == 266) {
    #####: 7399:      goto case_266;
        -: 7400:    }
       25: 7401:    if ((int )t == -1) {
        1: 7402:      goto case_neg_1;
        -: 7403:    }
       24: 7404:    if ((int )t == 268) {
       11: 7405:      goto case_268;
        -: 7406:    }
       13: 7407:    goto switch_default;
        -: 7408:    case_271: /* CIL Label */ 
        -: 7409:    case_272: /* CIL Label */ 
    #####: 7410:    goto done;
        -: 7411:    case_256: /* CIL Label */ 
        -: 7412:    case_258: /* CIL Label */ 
        -: 7413:    case_259: /* CIL Label */ 
        -: 7414:    case_260: /* CIL Label */ 
        -: 7415:    case_261: /* CIL Label */ 
        -: 7416:    case_262: /* CIL Label */ 
        -: 7417:    case_263: /* CIL Label */ 
        -: 7418:    case_257: /* CIL Label */ 
        -: 7419:    {
    #####: 7420:    resetmust(mp);
        -: 7421:    }
    #####: 7422:    goto switch_break;
        -: 7423:    case_265: /* CIL Label */ 
        -: 7424:    case_264: /* CIL Label */ 
    #####: 7425:    if ((unsigned long )mp <= (unsigned long )musts) {
    #####: 7426:      goto done;
        -: 7427:    }
        -: 7428:    {
    #####: 7429:    mp --;
    #####: 7430:    resetmust(mp);
        -: 7431:    }
        1: 7432:    goto switch_break;
        -: 7433:    case_269: /* CIL Label */ 
        -: 7434:    case_270: /* CIL Label */ 
        1: 7435:    if ((unsigned long )mp < (unsigned long )(musts + 2)) {
    #####: 7436:      goto done;
        -: 7437:    }
        -: 7438:    {
        1: 7439:    mp --;
        1: 7440:    rmp = mp;
        1: 7441:    mp --;
        1: 7442:    lmp = mp;
        1: 7443:    tmp___6 = strcmp((char const   *)lmp->is, (char const   *)rmp->is);
        -: 7444:    }
        1: 7445:    if (tmp___6 != 0) {
        1: 7446:      *(lmp->is + 0) = (char )'\000';
        1: 7447:    }
        1: 7448:    i = 0;
        -: 7449:    {
        1: 7450:    while (1) {
        -: 7451:      while_continue___2: /* CIL Label */ ;
        1: 7452:      if ((int )*(lmp->left + i) != 0) {
        1: 7453:        if (! ((int )*(lmp->left + i) == (int )*(rmp->left + i))) {
        1: 7454:          goto while_break___2;
        -: 7455:        }
    #####: 7456:      } else {
    #####: 7457:        goto while_break___2;
        -: 7458:      }
    #####: 7459:      i ++;
        -: 7460:    }
        -: 7461:    while_break___2: /* CIL Label */ ;
        -: 7462:    }
        -: 7463:    {
        1: 7464:    *(lmp->left + i) = (char )'\000';
        1: 7465:    tmp___7 = strlen((char const   *)lmp->right);
        1: 7466:    ln = (int )tmp___7;
        1: 7467:    tmp___8 = strlen((char const   *)rmp->right);
        1: 7468:    rn = (int )tmp___8;
        1: 7469:    n = ln;
        -: 7470:    }
        1: 7471:    if (n > rn) {
        1: 7472:      n = rn;
        1: 7473:    }
        1: 7474:    i = 0;
        -: 7475:    {
        5: 7476:    while (1) {
        -: 7477:      while_continue___3: /* CIL Label */ ;
        5: 7478:      if (! (i < n)) {
        1: 7479:        goto while_break___3;
        -: 7480:      }
        4: 7481:      if ((int )*(lmp->right + ((ln - i) - 1)) != (int )*(rmp->right + ((rn - i) - 1))) {
    #####: 7482:        goto while_break___3;
        -: 7483:      }
        4: 7484:      i ++;
        -: 7485:    }
        -: 7486:    while_break___3: /* CIL Label */ ;
        -: 7487:    }
        1: 7488:    j = 0;
        -: 7489:    {
        5: 7490:    while (1) {
        -: 7491:      while_continue___4: /* CIL Label */ ;
        5: 7492:      if (! (j < i)) {
        1: 7493:        goto while_break___4;
        -: 7494:      }
        4: 7495:      *(lmp->right + j) = *(lmp->right + ((ln - i) + j));
        4: 7496:      j ++;
        -: 7497:    }
        -: 7498:    while_break___4: /* CIL Label */ ;
        -: 7499:    }
        -: 7500:    {
        1: 7501:    *(lmp->right + j) = (char )'\000';
        1: 7502:    new = inboth(lmp->in, rmp->in);
        -: 7503:    }
        1: 7504:    if ((unsigned long )new == (unsigned long )((void *)0)) {
    #####: 7505:      goto done;
        -: 7506:    }
        -: 7507:    {
        1: 7508:    freelist(lmp->in);
        1: 7509:    free((void *)((char *)lmp->in));
        1: 7510:    lmp->in = new;
        -: 7511:    }
        1: 7512:    goto switch_break;
        -: 7513:    case_266: /* CIL Label */ 
    #####: 7514:    if ((unsigned long )mp <= (unsigned long )musts) {
    #####: 7515:      goto done;
        -: 7516:    }
    #####: 7517:    mp --;
    #####: 7518:    *(mp->is + 0) = (char )'\000';
    #####: 7519:    goto switch_break;
        -: 7520:    case_neg_1: /* CIL Label */ 
        1: 7521:    if ((unsigned long )mp != (unsigned long )(musts + 1)) {
    #####: 7522:      goto done;
        -: 7523:    }
        1: 7524:    i = 0;
        -: 7525:    {
        3: 7526:    while (1) {
        -: 7527:      while_continue___5: /* CIL Label */ ;
        3: 7528:      if (! ((unsigned long )*((musts + 0)->in + i) != (unsigned long )((void *)0))) {
        1: 7529:        goto while_break___5;
        -: 7530:      }
        -: 7531:      {
        2: 7532:      tmp___9 = strlen((char const   *)*((musts + 0)->in + i));
        2: 7533:      tmp___10 = strlen((char const   *)result);
        -: 7534:      }
        2: 7535:      if (tmp___9 > tmp___10) {
        2: 7536:        result = *((musts + 0)->in + i);
        2: 7537:      }
        2: 7538:      i ++;
        -: 7539:    }
        -: 7540:    while_break___5: /* CIL Label */ ;
        -: 7541:    }
        -: 7542:    {
        1: 7543:    tmp___11 = strcmp((char const   *)result, (char const   *)(musts + 0)->is);
        -: 7544:    }
        1: 7545:    if (tmp___11 == 0) {
    #####: 7546:      exact = 1;
    #####: 7547:    }
        1: 7548:    goto done;
        -: 7549:    case_268: /* CIL Label */ 
       11: 7550:    if ((unsigned long )mp < (unsigned long )(musts + 2)) {
    #####: 7551:      goto done;
        -: 7552:    }
        -: 7553:    {
       11: 7554:    mp --;
       11: 7555:    rmp___0 = mp;
       11: 7556:    mp --;
       11: 7557:    lmp___0 = mp;
       11: 7558:    lmp___0->in = addlists(lmp___0->in, rmp___0->in);
        -: 7559:    }
       11: 7560:    if ((unsigned long )lmp___0->in == (unsigned long )((void *)0)) {
    #####: 7561:      goto done;
        -: 7562:    }
       11: 7563:    if ((int )*(lmp___0->right + 0) != 0) {
       10: 7564:      if ((int )*(rmp___0->left + 0) != 0) {
        -: 7565:        {
        9: 7566:        tp = icpyalloc(lmp___0->right);
        -: 7567:        }
        9: 7568:        if ((unsigned long )tp == (unsigned long )((void *)0)) {
    #####: 7569:          goto done;
        -: 7570:        }
        -: 7571:        {
        9: 7572:        tp = icatalloc(tp, rmp___0->left);
        -: 7573:        }
        9: 7574:        if ((unsigned long )tp == (unsigned long )((void *)0)) {
    #####: 7575:          goto done;
        -: 7576:        }
        -: 7577:        {
        9: 7578:        tmp___12 = strlen((char const   *)tp);
        9: 7579:        lmp___0->in = enlist(lmp___0->in, tp, tmp___12);
        9: 7580:        free((void *)tp);
        -: 7581:        }
        9: 7582:        if ((unsigned long )lmp___0->in == (unsigned long )((void *)0)) {
    #####: 7583:          goto done;
        -: 7584:        }
        9: 7585:      }
       10: 7586:    }
       11: 7587:    if ((int )*(lmp___0->is + 0) != 0) {
        -: 7588:      {
        7: 7589:      lmp___0->left = icatalloc(lmp___0->left, rmp___0->left);
        -: 7590:      }
        7: 7591:      if ((unsigned long )lmp___0->left == (unsigned long )((void *)0)) {
    #####: 7592:        goto done;
        -: 7593:      }
        7: 7594:    }
       11: 7595:    if ((int )*(rmp___0->is + 0) == 0) {
        1: 7596:      *(lmp___0->right + 0) = (char )'\000';
        1: 7597:    }
        -: 7598:    {
       11: 7599:    lmp___0->right = icatalloc(lmp___0->right, rmp___0->right);
        -: 7600:    }
       11: 7601:    if ((unsigned long )lmp___0->right == (unsigned long )((void *)0)) {
    #####: 7602:      goto done;
        -: 7603:    }
       11: 7604:    if ((int )*(lmp___0->is + 0) != 0) {
        7: 7605:      if ((int )*(rmp___0->is + 0) != 0) {
        -: 7606:        {
        6: 7607:        lmp___0->is = icatalloc(lmp___0->is, rmp___0->is);
        -: 7608:        }
        6: 7609:        if ((unsigned long )lmp___0->is == (unsigned long )((void *)0)) {
    #####: 7610:          goto done;
        -: 7611:        }
        6: 7612:      } else {
        1: 7613:        *(lmp___0->is + 0) = (char )'\000';
        -: 7614:      }
        7: 7615:    } else {
        4: 7616:      *(lmp___0->is + 0) = (char )'\000';
        -: 7617:    }
       11: 7618:    goto switch_break;
        -: 7619:    switch_default: /* CIL Label */ 
       13: 7620:    if ((int )t < -1) {
    #####: 7621:      goto done;
        -: 7622:    } else { //Added block
       13: 7623:    if ((int )t == 0) {
    #####: 7624:      goto done;
        -: 7625:    } else { //Added block
       13: 7626:    if ((int )t >= 273) {
        -: 7627:      {
        1: 7628:      resetmust(mp);
        -: 7629:      }
        1: 7630:    } else {
        -: 7631:      {
       12: 7632:      resetmust(mp);
       12: 7633:      tmp___14 = (char )t;
       12: 7634:      *(mp->right + 0) = tmp___14;
       12: 7635:      tmp___13 = tmp___14;
       12: 7636:      *(mp->left + 0) = tmp___13;
       12: 7637:      *(mp->is + 0) = tmp___13;
       12: 7638:      tmp___16 = (char )'\000';
       12: 7639:      *(mp->right + 1) = tmp___16;
       12: 7640:      tmp___15 = tmp___16;
       12: 7641:      *(mp->left + 1) = tmp___15;
       12: 7642:      *(mp->is + 1) = tmp___15;
       12: 7643:      mp->in = enlist(mp->in, mp->is, (size_t )1);
        -: 7644:      }
       12: 7645:      if ((unsigned long )mp->in == (unsigned long )((void *)0)) {
    #####: 7646:        goto done;
        -: 7647:      }
        -: 7648:    }
        -: 7649:    }
        -: 7650:    }
       13: 7651:    goto switch_break;
        -: 7652:    switch_break: /* CIL Label */ ;
        -: 7653:    }
       25: 7654:    mp ++;
       25: 7655:    ri ++;
        -: 7656:  }
        -: 7657:  while_break___1: /* CIL Label */ ;
    #####: 7658:  }
        -: 7659:  done: 
        -: 7660:  {
        1: 7661:  tmp___20 = strlen((char const   *)result);
        -: 7662:  }
        1: 7663:  if (tmp___20) {
        -: 7664:    {
        1: 7665:    tmp___17 = malloc(sizeof(struct dfamust ));
        1: 7666:    dm = (struct dfamust *)tmp___17;
        1: 7667:    dm->exact = exact;
        1: 7668:    tmp___18 = strlen((char const   *)result);
        1: 7669:    tmp___19 = malloc(tmp___18 + 1UL);
        1: 7670:    dm->must = (char *)tmp___19;
        1: 7671:    strcpy((char * __restrict  )dm->must, (char const   * __restrict  )result);
        1: 7672:    dm->next = dfa___0->musts;
        1: 7673:    dfa___0->musts = dm;
        -: 7674:    }
        1: 7675:  }
        1: 7676:  mp = musts;
        1: 7677:  i = 0;
        -: 7678:  {
       29: 7679:  while (1) {
        -: 7680:    while_continue___6: /* CIL Label */ ;
       29: 7681:    if (! (i <= dfa___0->tindex)) {
        1: 7682:      goto while_break___6;
        -: 7683:    }
        -: 7684:    {
       28: 7685:    freelist((mp + i)->in);
       28: 7686:    ifree((char *)(mp + i)->in);
       28: 7687:    ifree((mp + i)->left);
       28: 7688:    ifree((mp + i)->right);
       28: 7689:    ifree((mp + i)->is);
       28: 7690:    i ++;
        -: 7691:    }
        -: 7692:  }
        -: 7693:  while_break___6: /* CIL Label */ ;
        -: 7694:  }
        -: 7695:  {
        1: 7696:  free((void *)((char *)mp));
        -: 7697:  }
        1: 7698:  return;
        -: 7699:}
        1: 7700:}
        -: 7701:kwset_t kwsalloc(char *trans___0 ) ;
        -: 7702:char *kwsincr(kwset_t kws , char *text , size_t len ) ;
        -: 7703:char *kwsprep(kwset_t kws ) ;
        -: 7704:char *kwsexec(kwset_t kws , char *text , size_t size , struct kwsmatch *kwsmatch ) ;
        -: 7705:void kwsfree(kwset_t kws ) ;
        -: 7706:extern void _obstack_newchunk(struct obstack * , int  ) ;
        -: 7707:extern int _obstack_begin(struct obstack * , int  , int  , void *(*)(long  ) , void (*)(void * ) ) ;
        -: 7708:extern void obstack_free(struct obstack *obstack , void *block ) ;
        -: 7709:static void enqueue(struct tree *tree , struct trie **last ) ;
        -: 7710:static void treefails(struct tree *tree , struct trie *fail , struct trie *recourse ) ;
        -: 7711:static void treedelta(struct tree *tree , unsigned int depth___0 , unsigned char *delta ) ;
        -: 7712:static int hasevery(struct tree *a , struct tree *b ) ;
        -: 7713:static void treenext(struct tree *tree , struct trie **next ) ;
        -: 7714:static char *bmexec(kwset_t kws , char *text , size_t size ) ;
        -: 7715:static char *cwexec(kwset_t kws , char *text , size_t len , struct kwsmatch *kwsmatch ) ;
        1: 7716:kwset_t kwsalloc(char *trans___0 ) 
        -: 7717:{ 
        -: 7718:  struct kwset *kwset___0 ;
        -: 7719:  char *tmp ;
        -: 7720:  struct obstack *__h ;
        -: 7721:  struct obstack *__o ;
        -: 7722:  int __len ;
        -: 7723:  struct obstack *__o1 ;
        -: 7724:  void *value ;
        -: 7725:
        -: 7726:  {
        -: 7727:  {
        1: 7728:  tmp = xmalloc(sizeof(struct kwset ));
        1: 7729:  kwset___0 = (struct kwset *)tmp;
        -: 7730:  }
        1: 7731:  if (! kwset___0) {
    #####: 7732:    return ((kwset_t )0);
        -: 7733:  }
        -: 7734:  {
        1: 7735:  _obstack_begin(& kwset___0->obstack, 0, 0, (void *(*)(long  ))(& xmalloc), (void (*)(void * ))(& free));
        1: 7736:  kwset___0->words = 0;
        1: 7737:  __h = & kwset___0->obstack;
        1: 7738:  __o = __h;
        1: 7739:  __len = (int )sizeof(struct trie );
        -: 7740:  }
        1: 7741:  if (__o->chunk_limit - __o->next_free < (long )__len) {
        -: 7742:    {
    #####: 7743:    _obstack_newchunk(__o, __len);
        -: 7744:    }
    #####: 7745:  }
        1: 7746:  __o->next_free += __len;
        1: 7747:  __o1 = __h;
        1: 7748:  value = (void *)__o1->object_base;
        1: 7749:  if ((unsigned long )__o1->next_free == (unsigned long )value) {
    #####: 7750:    __o1->maybe_empty_object = 1U;
    #####: 7751:  }
        1: 7752:  __o1->next_free = (char *)0 + (((__o1->next_free - (char *)0) + (long )__o1->alignment_mask) & (long )(~ __o1->alignment_mask));
        1: 7753:  if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
    #####: 7754:    __o1->next_free = __o1->chunk_limit;
    #####: 7755:  }
        1: 7756:  __o1->object_base = __o1->next_free;
        1: 7757:  kwset___0->trie = (struct trie *)value;
        1: 7758:  if (! kwset___0->trie) {
        -: 7759:    {
    #####: 7760:    kwsfree((kwset_t )kwset___0);
        -: 7761:    }
    #####: 7762:    return ((kwset_t )0);
        -: 7763:  }
        1: 7764:  (kwset___0->trie)->accepting = 0U;
        1: 7765:  (kwset___0->trie)->links = (struct tree *)0;
        1: 7766:  (kwset___0->trie)->parent = (struct trie *)0;
        1: 7767:  (kwset___0->trie)->next = (struct trie *)0;
        1: 7768:  (kwset___0->trie)->fail = (struct trie *)0;
        1: 7769:  (kwset___0->trie)->depth = 0;
        1: 7770:  (kwset___0->trie)->shift = 0;
        1: 7771:  kwset___0->mind = 2147483647;
        1: 7772:  kwset___0->maxd = -1;
        1: 7773:  kwset___0->target = (char *)0;
        1: 7774:  kwset___0->trans = trans___0;
        1: 7775:  return ((kwset_t )kwset___0);
        -: 7776:}
        1: 7777:}
        1: 7778:char *kwsincr(kwset_t kws , char *text , size_t len ) 
        -: 7779:{ 
        -: 7780:  struct kwset *kwset___0 ;
        -: 7781:  register struct trie *trie ;
        -: 7782:  register unsigned char label ;
        -: 7783:  register struct tree *link___0 ;
        -: 7784:  register int depth___0 ;
        -: 7785:  struct tree *links[12] ;
        -: 7786:  enum __anonenum_dirs_40 dirs[12] ;
        -: 7787:  struct tree *t ;
        -: 7788:  struct tree *r ;
        -: 7789:  struct tree *l ;
        -: 7790:  struct tree *rl ;
        -: 7791:  struct tree *lr ;
        -: 7792:  int tmp ;
        -: 7793:  int tmp___0 ;
        -: 7794:  struct obstack *__h ;
        -: 7795:  struct obstack *__o ;
        -: 7796:  int __len ;
        -: 7797:  struct obstack *__o1 ;
        -: 7798:  void *value ;
        -: 7799:  char *tmp___1 ;
        -: 7800:  struct obstack *__h___0 ;
        -: 7801:  struct obstack *__o___0 ;
        -: 7802:  int __len___0 ;
        -: 7803:  struct obstack *__o1___0 ;
        -: 7804:  void *value___0 ;
        -: 7805:  char *tmp___2 ;
        -: 7806:  char tmp___3 ;
        -: 7807:  char tmp___4 ;
        -: 7808:  size_t tmp___5 ;
        -: 7809:
        -: 7810:  {
        1: 7811:  kwset___0 = (struct kwset *)kws;
        1: 7812:  trie = kwset___0->trie;
        1: 7813:  text += len;
        -: 7814:  {
        5: 7815:  while (1) {
        -: 7816:    while_continue: /* CIL Label */ ;
        5: 7817:    tmp___5 = len;
        5: 7818:    len --;
        5: 7819:    if (! tmp___5) {
        1: 7820:      goto while_break;
        -: 7821:    }
        4: 7822:    if (kwset___0->trans) {
    #####: 7823:      text --;
    #####: 7824:      label = (unsigned char )*(kwset___0->trans + (int )((unsigned char )*text));
    #####: 7825:    } else {
        4: 7826:      text --;
        4: 7827:      label = (unsigned char )*text;
        -: 7828:    }
        4: 7829:    link___0 = trie->links;
        4: 7830:    links[0] = (struct tree *)(& trie->links);
        4: 7831:    dirs[0] = (enum __anonenum_dirs_40 )0;
        4: 7832:    depth___0 = 1;
        -: 7833:    {
        4: 7834:    while (1) {
        -: 7835:      while_continue___0: /* CIL Label */ ;
        4: 7836:      if (link___0) {
    #####: 7837:        if (! ((int )label != (int )link___0->label)) {
    #####: 7838:          goto while_break___0;
        -: 7839:        }
    #####: 7840:      } else {
        4: 7841:        goto while_break___0;
        -: 7842:      }
    #####: 7843:      links[depth___0] = link___0;
    #####: 7844:      if ((int )label < (int )link___0->label) {
    #####: 7845:        tmp = depth___0;
    #####: 7846:        depth___0 ++;
    #####: 7847:        dirs[tmp] = (enum __anonenum_dirs_40 )0;
    #####: 7848:        link___0 = link___0->llink;
    #####: 7849:      } else {
    #####: 7850:        tmp___0 = depth___0;
    #####: 7851:        depth___0 ++;
    #####: 7852:        dirs[tmp___0] = (enum __anonenum_dirs_40 )1;
    #####: 7853:        link___0 = link___0->rlink;
        -: 7854:      }
        -: 7855:    }
        -: 7856:    while_break___0: /* CIL Label */ ;
        -: 7857:    }
        4: 7858:    if (! link___0) {
        4: 7859:      __h = & kwset___0->obstack;
        4: 7860:      __o = __h;
        4: 7861:      __len = (int )sizeof(struct tree );
        4: 7862:      if (__o->chunk_limit - __o->next_free < (long )__len) {
        -: 7863:        {
    #####: 7864:        _obstack_newchunk(__o, __len);
        -: 7865:        }
    #####: 7866:      }
        4: 7867:      __o->next_free += __len;
        4: 7868:      __o1 = __h;
        4: 7869:      value = (void *)__o1->object_base;
        4: 7870:      if ((unsigned long )__o1->next_free == (unsigned long )value) {
    #####: 7871:        __o1->maybe_empty_object = 1U;
    #####: 7872:      }
        4: 7873:      __o1->next_free = (char *)0 + (((__o1->next_free - (char *)0) + (long )__o1->alignment_mask) & (long )(~ __o1->alignment_mask));
        4: 7874:      if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
    #####: 7875:        __o1->next_free = __o1->chunk_limit;
    #####: 7876:      }
        4: 7877:      __o1->object_base = __o1->next_free;
        4: 7878:      link___0 = (struct tree *)value;
        4: 7879:      if (! link___0) {
        -: 7880:        {
    #####: 7881:        tmp___1 = gettext("memory exhausted");
        -: 7882:        }
    #####: 7883:        return (tmp___1);
        -: 7884:      }
        4: 7885:      link___0->llink = (struct tree *)0;
        4: 7886:      link___0->rlink = (struct tree *)0;
        4: 7887:      __h___0 = & kwset___0->obstack;
        4: 7888:      __o___0 = __h___0;
        4: 7889:      __len___0 = (int )sizeof(struct trie );
        4: 7890:      if (__o___0->chunk_limit - __o___0->next_free < (long )__len___0) {
        -: 7891:        {
    #####: 7892:        _obstack_newchunk(__o___0, __len___0);
        -: 7893:        }
    #####: 7894:      }
        4: 7895:      __o___0->next_free += __len___0;
        4: 7896:      __o1___0 = __h___0;
        4: 7897:      value___0 = (void *)__o1___0->object_base;
        4: 7898:      if ((unsigned long )__o1___0->next_free == (unsigned long )value___0) {
    #####: 7899:        __o1___0->maybe_empty_object = 1U;
    #####: 7900:      }
        4: 7901:      __o1___0->next_free = (char *)0 + (((__o1___0->next_free - (char *)0) + (long )__o1___0->alignment_mask) & (long )(~ __o1___0->alignment_mask));
        4: 7902:      if (__o1___0->next_free - (char *)__o1___0->chunk > __o1___0->chunk_limit - (char *)__o1___0->chunk) {
    #####: 7903:        __o1___0->next_free = __o1___0->chunk_limit;
    #####: 7904:      }
        4: 7905:      __o1___0->object_base = __o1___0->next_free;
        4: 7906:      link___0->trie = (struct trie *)value___0;
        4: 7907:      if (! link___0->trie) {
        -: 7908:        {
    #####: 7909:        tmp___2 = gettext("memory exhausted");
        -: 7910:        }
    #####: 7911:        return (tmp___2);
        -: 7912:      }
        4: 7913:      (link___0->trie)->accepting = 0U;
        4: 7914:      (link___0->trie)->links = (struct tree *)0;
        4: 7915:      (link___0->trie)->parent = trie;
        4: 7916:      (link___0->trie)->next = (struct trie *)0;
        4: 7917:      (link___0->trie)->fail = (struct trie *)0;
        4: 7918:      (link___0->trie)->depth = trie->depth + 1;
        4: 7919:      (link___0->trie)->shift = 0;
        4: 7920:      link___0->label = label;
        4: 7921:      link___0->balance = (char)0;
        4: 7922:      depth___0 --;
        4: 7923:      if ((unsigned int )dirs[depth___0] == 0U) {
        4: 7924:        (links[depth___0])->llink = link___0;
        4: 7925:      } else {
    #####: 7926:        (links[depth___0])->rlink = link___0;
        -: 7927:      }
        -: 7928:      {
        4: 7929:      while (1) {
        -: 7930:        while_continue___1: /* CIL Label */ ;
        4: 7931:        if (depth___0) {
    #####: 7932:          if (! (! (links[depth___0])->balance)) {
    #####: 7933:            goto while_break___1;
        -: 7934:          }
    #####: 7935:        } else {
        4: 7936:          goto while_break___1;
        -: 7937:        }
    #####: 7938:        if ((unsigned int )dirs[depth___0] == 0U) {
    #####: 7939:          (links[depth___0])->balance = (char )((int )(links[depth___0])->balance - 1);
    #####: 7940:        } else {
    #####: 7941:          (links[depth___0])->balance = (char )((int )(links[depth___0])->balance + 1);
        -: 7942:        }
    #####: 7943:        depth___0 --;
        -: 7944:      }
        -: 7945:      while_break___1: /* CIL Label */ ;
        -: 7946:      }
        4: 7947:      if (depth___0) {
    #####: 7948:        if ((unsigned int )dirs[depth___0] == 0U) {
    #####: 7949:          (links[depth___0])->balance = (char )((int )(links[depth___0])->balance - 1);
    #####: 7950:          if ((links[depth___0])->balance) {
    #####: 7951:            goto _L;
        -: 7952:          } else {
    #####: 7953:            goto _L___0;
        -: 7954:          }
    #####: 7955:        } else { //Added block
        -: 7956:        _L___0: 
    #####: 7957:        if ((unsigned int )dirs[depth___0] == 1U) {
    #####: 7958:          (links[depth___0])->balance = (char )((int )(links[depth___0])->balance + 1);
    #####: 7959:          if ((links[depth___0])->balance) {
        -: 7960:            _L: 
        -: 7961:            {
    #####: 7962:            if ((int )(links[depth___0])->balance == -2) {
    #####: 7963:              goto case_neg_2;
        -: 7964:            }
    #####: 7965:            if ((int )(links[depth___0])->balance == 2) {
    #####: 7966:              goto case_2;
        -: 7967:            }
    #####: 7968:            goto switch_default___1;
        -: 7969:            case_neg_2: /* CIL Label */ 
        -: 7970:            {
    #####: 7971:            if ((unsigned int )dirs[depth___0 + 1] == 0U) {
    #####: 7972:              goto case_0;
        -: 7973:            }
    #####: 7974:            if ((unsigned int )dirs[depth___0 + 1] == 1U) {
    #####: 7975:              goto case_1;
        -: 7976:            }
    #####: 7977:            goto switch_default;
        -: 7978:            case_0: /* CIL Label */ 
    #####: 7979:            r = links[depth___0];
    #####: 7980:            t = r->llink;
    #####: 7981:            rl = t->rlink;
    #####: 7982:            t->rlink = r;
    #####: 7983:            r->llink = rl;
    #####: 7984:            tmp___3 = (char)0;
    #####: 7985:            r->balance = tmp___3;
    #####: 7986:            t->balance = tmp___3;
    #####: 7987:            goto switch_break___0;
        -: 7988:            case_1: /* CIL Label */ 
    #####: 7989:            r = links[depth___0];
    #####: 7990:            l = r->llink;
    #####: 7991:            t = l->rlink;
    #####: 7992:            rl = t->rlink;
    #####: 7993:            lr = t->llink;
    #####: 7994:            t->llink = l;
    #####: 7995:            l->rlink = lr;
    #####: 7996:            t->rlink = r;
    #####: 7997:            r->llink = rl;
    #####: 7998:            if ((int )t->balance != 1) {
    #####: 7999:              l->balance = (char)0;
    #####: 8000:            } else {
    #####: 8001:              l->balance = (char)-1;
        -: 8002:            }
    #####: 8003:            if ((int )t->balance != -1) {
    #####: 8004:              r->balance = (char)0;
    #####: 8005:            } else {
    #####: 8006:              r->balance = (char)1;
        -: 8007:            }
    #####: 8008:            t->balance = (char)0;
    #####: 8009:            goto switch_break___0;
        -: 8010:            switch_default: /* CIL Label */ 
        -: 8011:            {
    #####: 8012:            abort();
        -: 8013:            }
        -: 8014:            switch_break___0: /* CIL Label */ ;
        -: 8015:            }
    #####: 8016:            goto switch_break;
        -: 8017:            case_2: /* CIL Label */ 
        -: 8018:            {
    #####: 8019:            if ((unsigned int )dirs[depth___0 + 1] == 1U) {
    #####: 8020:              goto case_1___0;
        -: 8021:            }
    #####: 8022:            if ((unsigned int )dirs[depth___0 + 1] == 0U) {
    #####: 8023:              goto case_0___0;
        -: 8024:            }
    #####: 8025:            goto switch_default___0;
        -: 8026:            case_1___0: /* CIL Label */ 
    #####: 8027:            l = links[depth___0];
    #####: 8028:            t = l->rlink;
    #####: 8029:            lr = t->llink;
    #####: 8030:            t->llink = l;
    #####: 8031:            l->rlink = lr;
    #####: 8032:            tmp___4 = (char)0;
    #####: 8033:            l->balance = tmp___4;
    #####: 8034:            t->balance = tmp___4;
    #####: 8035:            goto switch_break___1;
        -: 8036:            case_0___0: /* CIL Label */ 
    #####: 8037:            l = links[depth___0];
    #####: 8038:            r = l->rlink;
    #####: 8039:            t = r->llink;
    #####: 8040:            lr = t->llink;
    #####: 8041:            rl = t->rlink;
    #####: 8042:            t->llink = l;
    #####: 8043:            l->rlink = lr;
    #####: 8044:            t->rlink = r;
    #####: 8045:            r->llink = rl;
    #####: 8046:            if ((int )t->balance != 1) {
    #####: 8047:              l->balance = (char)0;
    #####: 8048:            } else {
    #####: 8049:              l->balance = (char)-1;
        -: 8050:            }
    #####: 8051:            if ((int )t->balance != -1) {
    #####: 8052:              r->balance = (char)0;
    #####: 8053:            } else {
    #####: 8054:              r->balance = (char)1;
        -: 8055:            }
    #####: 8056:            t->balance = (char)0;
    #####: 8057:            goto switch_break___1;
        -: 8058:            switch_default___0: /* CIL Label */ 
        -: 8059:            {
    #####: 8060:            abort();
        -: 8061:            }
        -: 8062:            switch_break___1: /* CIL Label */ ;
        -: 8063:            }
    #####: 8064:            goto switch_break;
        -: 8065:            switch_default___1: /* CIL Label */ 
        -: 8066:            {
    #####: 8067:            abort();
        -: 8068:            }
        -: 8069:            switch_break: /* CIL Label */ ;
        -: 8070:            }
    #####: 8071:            if ((unsigned int )dirs[depth___0 - 1] == 0U) {
    #####: 8072:              (links[depth___0 - 1])->llink = t;
    #####: 8073:            } else {
    #####: 8074:              (links[depth___0 - 1])->rlink = t;
        -: 8075:            }
    #####: 8076:          }
    #####: 8077:        }
        -: 8078:        }
    #####: 8079:      }
        4: 8080:    }
        4: 8081:    trie = link___0->trie;
        -: 8082:  }
        -: 8083:  while_break: /* CIL Label */ ;
        -: 8084:  }
        1: 8085:  if (! trie->accepting) {
        1: 8086:    trie->accepting = (unsigned int )(1 + 2 * kwset___0->words);
        1: 8087:  }
        1: 8088:  (kwset___0->words) ++;
        1: 8089:  if (trie->depth < kwset___0->mind) {
        1: 8090:    kwset___0->mind = trie->depth;
        1: 8091:  }
        1: 8092:  if (trie->depth > kwset___0->maxd) {
        1: 8093:    kwset___0->maxd = trie->depth;
        1: 8094:  }
        1: 8095:  return ((char *)0);
        -: 8096:}
        1: 8097:}
    #####: 8098:static void enqueue(struct tree *tree , struct trie **last ) 
        -: 8099:{ 
        -: 8100:  struct trie *tmp ;
        -: 8101:
        -: 8102:  {
    #####: 8103:  if (! tree) {
    #####: 8104:    return;
        -: 8105:  }
        -: 8106:  {
    #####: 8107:  enqueue(tree->llink, last);
    #####: 8108:  enqueue(tree->rlink, last);
    #####: 8109:  tmp = tree->trie;
    #####: 8110:  (*last)->next = tmp;
    #####: 8111:  *last = tmp;
        -: 8112:  }
    #####: 8113:  return;
        -: 8114:}
    #####: 8115:}
    #####: 8116:static void treefails(struct tree *tree , struct trie *fail , struct trie *recourse ) 
        -: 8117:{ 
        -: 8118:  register struct tree *link___0 ;
        -: 8119:
        -: 8120:  {
    #####: 8121:  if (! tree) {
    #####: 8122:    return;
        -: 8123:  }
        -: 8124:  {
    #####: 8125:  treefails(tree->llink, fail, recourse);
    #####: 8126:  treefails(tree->rlink, fail, recourse);
        -: 8127:  }
        -: 8128:  {
    #####: 8129:  while (1) {
        -: 8130:    while_continue: /* CIL Label */ ;
    #####: 8131:    if (! fail) {
    #####: 8132:      goto while_break;
        -: 8133:    }
    #####: 8134:    link___0 = fail->links;
        -: 8135:    {
    #####: 8136:    while (1) {
        -: 8137:      while_continue___0: /* CIL Label */ ;
    #####: 8138:      if (link___0) {
    #####: 8139:        if (! ((int )tree->label != (int )link___0->label)) {
    #####: 8140:          goto while_break___0;
        -: 8141:        }
    #####: 8142:      } else {
    #####: 8143:        goto while_break___0;
        -: 8144:      }
    #####: 8145:      if ((int )tree->label < (int )link___0->label) {
    #####: 8146:        link___0 = link___0->llink;
    #####: 8147:      } else {
    #####: 8148:        link___0 = link___0->rlink;
        -: 8149:      }
        -: 8150:    }
        -: 8151:    while_break___0: /* CIL Label */ ;
        -: 8152:    }
    #####: 8153:    if (link___0) {
    #####: 8154:      (tree->trie)->fail = link___0->trie;
    #####: 8155:      return;
        -: 8156:    }
    #####: 8157:    fail = fail->fail;
        -: 8158:  }
        -: 8159:  while_break: /* CIL Label */ ;
        -: 8160:  }
    #####: 8161:  (tree->trie)->fail = recourse;
    #####: 8162:  return;
        -: 8163:}
    #####: 8164:}
    #####: 8165:static void treedelta(struct tree *tree , unsigned int depth___0 , unsigned char *delta ) 
        -: 8166:{ 
        -: 8167:
        -: 8168:
        -: 8169:  {
    #####: 8170:  if (! tree) {
    #####: 8171:    return;
        -: 8172:  }
        -: 8173:  {
    #####: 8174:  treedelta(tree->llink, depth___0, delta);
    #####: 8175:  treedelta(tree->rlink, depth___0, delta);
        -: 8176:  }
    #####: 8177:  if (depth___0 < (unsigned int )*(delta + (int )tree->label)) {
    #####: 8178:    *(delta + (int )tree->label) = (unsigned char )depth___0;
    #####: 8179:  }
    #####: 8180:  return;
        -: 8181:}
    #####: 8182:}
    #####: 8183:static int hasevery(struct tree *a , struct tree *b ) 
        -: 8184:{ 
        -: 8185:  int tmp ;
        -: 8186:  int tmp___0 ;
        -: 8187:
        -: 8188:  {
    #####: 8189:  if (! b) {
    #####: 8190:    return (1);
        -: 8191:  }
        -: 8192:  {
    #####: 8193:  tmp = hasevery(a, b->llink);
        -: 8194:  }
    #####: 8195:  if (! tmp) {
    #####: 8196:    return (0);
        -: 8197:  }
        -: 8198:  {
    #####: 8199:  tmp___0 = hasevery(a, b->rlink);
        -: 8200:  }
    #####: 8201:  if (! tmp___0) {
    #####: 8202:    return (0);
        -: 8203:  }
        -: 8204:  {
    #####: 8205:  while (1) {
        -: 8206:    while_continue: /* CIL Label */ ;
    #####: 8207:    if (a) {
    #####: 8208:      if (! ((int )b->label != (int )a->label)) {
    #####: 8209:        goto while_break;
        -: 8210:      }
    #####: 8211:    } else {
    #####: 8212:      goto while_break;
        -: 8213:    }
    #####: 8214:    if ((int )b->label < (int )a->label) {
    #####: 8215:      a = a->llink;
    #####: 8216:    } else {
    #####: 8217:      a = a->rlink;
        -: 8218:    }
        -: 8219:  }
        -: 8220:  while_break: /* CIL Label */ ;
        -: 8221:  }
    #####: 8222:  return (! (! a));
        -: 8223:}
    #####: 8224:}
    #####: 8225:static void treenext(struct tree *tree , struct trie **next ) 
        -: 8226:{ 
        -: 8227:
        -: 8228:
        -: 8229:  {
    #####: 8230:  if (! tree) {
    #####: 8231:    return;
        -: 8232:  }
        -: 8233:  {
    #####: 8234:  treenext(tree->llink, next);
    #####: 8235:  treenext(tree->rlink, next);
    #####: 8236:  *(next + (int )tree->label) = tree->trie;
        -: 8237:  }
    #####: 8238:  return;
        -: 8239:}
    #####: 8240:}
        1: 8241:char *kwsprep(kwset_t kws ) 
        -: 8242:{ 
        -: 8243:  register struct kwset *kwset___0 ;
        -: 8244:  register int i ;
        -: 8245:  register struct trie *curr ;
        -: 8246:  register struct trie *fail ;
        -: 8247:  register char *trans___0 ;
        -: 8248:  unsigned char delta[256] ;
        -: 8249:  struct trie *last ;
        -: 8250:  struct trie *next[256] ;
        -: 8251:  struct obstack *__h ;
        -: 8252:  struct obstack *__o ;
        -: 8253:  int __len ;
        -: 8254:  struct obstack *__o1 ;
        -: 8255:  void *value ;
        -: 8256:  int tmp ;
        -: 8257:
        -: 8258:  {
        1: 8259:  kwset___0 = (struct kwset *)kws;
        1: 8260:  if (kwset___0->mind < 256) {
        1: 8261:    i = 0;
        -: 8262:    {
      257: 8263:    while (1) {
        -: 8264:      while_continue: /* CIL Label */ ;
      257: 8265:      if (! (i < 256)) {
        1: 8266:        goto while_break;
        -: 8267:      }
      256: 8268:      delta[i] = (unsigned char )kwset___0->mind;
      256: 8269:      i ++;
        -: 8270:    }
        -: 8271:    while_break: /* CIL Label */ ;
        -: 8272:    }
        1: 8273:  } else {
    #####: 8274:    i = 0;
        -: 8275:    {
    #####: 8276:    while (1) {
        -: 8277:      while_continue___0: /* CIL Label */ ;
    #####: 8278:      if (! (i < 256)) {
    #####: 8279:        goto while_break___0;
        -: 8280:      }
    #####: 8281:      delta[i] = (unsigned char)255;
    #####: 8282:      i ++;
        -: 8283:    }
        -: 8284:    while_break___0: /* CIL Label */ ;
        -: 8285:    }
        -: 8286:  }
        1: 8287:  if (kwset___0->words == 1) {
        1: 8288:    if ((unsigned long )kwset___0->trans == (unsigned long )((char *)0)) {
        1: 8289:      __h = & kwset___0->obstack;
        1: 8290:      __o = __h;
        1: 8291:      __len = kwset___0->mind;
        1: 8292:      if (__o->chunk_limit - __o->next_free < (long )__len) {
        -: 8293:        {
    #####: 8294:        _obstack_newchunk(__o, __len);
        -: 8295:        }
    #####: 8296:      }
        1: 8297:      __o->next_free += __len;
        1: 8298:      __o1 = __h;
        1: 8299:      value = (void *)__o1->object_base;
        1: 8300:      if ((unsigned long )__o1->next_free == (unsigned long )value) {
    #####: 8301:        __o1->maybe_empty_object = 1U;
    #####: 8302:      }
        1: 8303:      __o1->next_free = (char *)0 + (((__o1->next_free - (char *)0) + (long )__o1->alignment_mask) & (long )(~ __o1->alignment_mask));
        1: 8304:      if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
    #####: 8305:        __o1->next_free = __o1->chunk_limit;
    #####: 8306:      }
        1: 8307:      __o1->object_base = __o1->next_free;
        1: 8308:      kwset___0->target = (char *)value;
        1: 8309:      i = kwset___0->mind - 1;
        1: 8310:      curr = kwset___0->trie;
        -: 8311:      {
        5: 8312:      while (1) {
        -: 8313:        while_continue___1: /* CIL Label */ ;
        5: 8314:        if (! (i >= 0)) {
        1: 8315:          goto while_break___1;
        -: 8316:        }
        4: 8317:        *(kwset___0->target + i) = (char )(curr->links)->label;
        4: 8318:        curr = (curr->links)->trie;
        4: 8319:        i --;
        -: 8320:      }
        -: 8321:      while_break___1: /* CIL Label */ ;
        -: 8322:      }
        1: 8323:      i = 0;
        -: 8324:      {
        5: 8325:      while (1) {
        -: 8326:        while_continue___2: /* CIL Label */ ;
        5: 8327:        if (! (i < kwset___0->mind)) {
        1: 8328:          goto while_break___2;
        -: 8329:        }
        4: 8330:        delta[(unsigned char )*(kwset___0->target + i)] = (unsigned char )(kwset___0->mind - (i + 1));
        4: 8331:        i ++;
        -: 8332:      }
        -: 8333:      while_break___2: /* CIL Label */ ;
        -: 8334:      }
        1: 8335:      kwset___0->mind2 = kwset___0->mind;
        1: 8336:      i = 0;
        -: 8337:      {
        4: 8338:      while (1) {
        -: 8339:        while_continue___3: /* CIL Label */ ;
        4: 8340:        if (! (i < kwset___0->mind - 1)) {
        1: 8341:          goto while_break___3;
        -: 8342:        }
        3: 8343:        if ((int )*(kwset___0->target + i) == (int )*(kwset___0->target + (kwset___0->mind - 1))) {
    #####: 8344:          kwset___0->mind2 = kwset___0->mind - (i + 1);
    #####: 8345:        }
        3: 8346:        i ++;
        -: 8347:      }
        -: 8348:      while_break___3: /* CIL Label */ ;
        -: 8349:      }
        1: 8350:    } else {
    #####: 8351:      goto _L;
        -: 8352:    }
        1: 8353:  } else {
        -: 8354:    _L: 
    #####: 8355:    last = kwset___0->trie;
    #####: 8356:    curr = last;
        -: 8357:    {
    #####: 8358:    while (1) {
        -: 8359:      while_continue___4: /* CIL Label */ ;
    #####: 8360:      if (! curr) {
    #####: 8361:        goto while_break___4;
        -: 8362:      }
        -: 8363:      {
    #####: 8364:      enqueue(curr->links, & last);
    #####: 8365:      curr->shift = kwset___0->mind;
    #####: 8366:      curr->maxshift = kwset___0->mind;
    #####: 8367:      treedelta(curr->links, (unsigned int )curr->depth, delta);
    #####: 8368:      treefails(curr->links, curr->fail, kwset___0->trie);
    #####: 8369:      fail = curr->fail;
        -: 8370:      }
        -: 8371:      {
    #####: 8372:      while (1) {
        -: 8373:        while_continue___5: /* CIL Label */ ;
    #####: 8374:        if (! fail) {
    #####: 8375:          goto while_break___5;
        -: 8376:        }
        -: 8377:        {
    #####: 8378:        tmp = hasevery(fail->links, curr->links);
        -: 8379:        }
    #####: 8380:        if (! tmp) {
    #####: 8381:          if (curr->depth - fail->depth < fail->shift) {
    #####: 8382:            fail->shift = curr->depth - fail->depth;
    #####: 8383:          }
    #####: 8384:        }
    #####: 8385:        if (curr->accepting) {
    #####: 8386:          if (fail->maxshift > curr->depth - fail->depth) {
    #####: 8387:            fail->maxshift = curr->depth - fail->depth;
    #####: 8388:          }
    #####: 8389:        }
    #####: 8390:        fail = fail->fail;
        -: 8391:      }
        -: 8392:      while_break___5: /* CIL Label */ ;
        -: 8393:      }
    #####: 8394:      curr = curr->next;
        -: 8395:    }
        -: 8396:    while_break___4: /* CIL Label */ ;
        -: 8397:    }
    #####: 8398:    curr = (kwset___0->trie)->next;
        -: 8399:    {
    #####: 8400:    while (1) {
        -: 8401:      while_continue___6: /* CIL Label */ ;
    #####: 8402:      if (! curr) {
    #####: 8403:        goto while_break___6;
        -: 8404:      }
    #####: 8405:      if (curr->maxshift > (curr->parent)->maxshift) {
    #####: 8406:        curr->maxshift = (curr->parent)->maxshift;
    #####: 8407:      }
    #####: 8408:      if (curr->shift > curr->maxshift) {
    #####: 8409:        curr->shift = curr->maxshift;
    #####: 8410:      }
    #####: 8411:      curr = curr->next;
        -: 8412:    }
        -: 8413:    while_break___6: /* CIL Label */ ;
        -: 8414:    }
    #####: 8415:    i = 0;
        -: 8416:    {
    #####: 8417:    while (1) {
        -: 8418:      while_continue___7: /* CIL Label */ ;
    #####: 8419:      if (! (i < 256)) {
    #####: 8420:        goto while_break___7;
        -: 8421:      }
    #####: 8422:      next[i] = (struct trie *)0;
    #####: 8423:      i ++;
        -: 8424:    }
        -: 8425:    while_break___7: /* CIL Label */ ;
        -: 8426:    }
        -: 8427:    {
    #####: 8428:    treenext((kwset___0->trie)->links, next);
    #####: 8429:    trans___0 = kwset___0->trans;
        -: 8430:    }
    #####: 8431:    if ((unsigned long )trans___0 != (unsigned long )((char *)0)) {
    #####: 8432:      i = 0;
        -: 8433:      {
    #####: 8434:      while (1) {
        -: 8435:        while_continue___8: /* CIL Label */ ;
    #####: 8436:        if (! (i < 256)) {
    #####: 8437:          goto while_break___8;
        -: 8438:        }
    #####: 8439:        kwset___0->next[i] = next[(unsigned char )*(trans___0 + i)];
    #####: 8440:        i ++;
        -: 8441:      }
        -: 8442:      while_break___8: /* CIL Label */ ;
        -: 8443:      }
    #####: 8444:    } else {
    #####: 8445:      i = 0;
        -: 8446:      {
    #####: 8447:      while (1) {
        -: 8448:        while_continue___9: /* CIL Label */ ;
    #####: 8449:        if (! (i < 256)) {
    #####: 8450:          goto while_break___9;
        -: 8451:        }
    #####: 8452:        kwset___0->next[i] = next[i];
    #####: 8453:        i ++;
        -: 8454:      }
        -: 8455:      while_break___9: /* CIL Label */ ;
        -: 8456:      }
        -: 8457:    }
        -: 8458:  }
        1: 8459:  trans___0 = kwset___0->trans;
        1: 8460:  if ((unsigned long )trans___0 != (unsigned long )((char *)0)) {
    #####: 8461:    i = 0;
        -: 8462:    {
    #####: 8463:    while (1) {
        -: 8464:      while_continue___10: /* CIL Label */ ;
    #####: 8465:      if (! (i < 256)) {
    #####: 8466:        goto while_break___10;
        -: 8467:      }
    #####: 8468:      kwset___0->delta[i] = delta[(unsigned char )*(trans___0 + i)];
    #####: 8469:      i ++;
        -: 8470:    }
        -: 8471:    while_break___10: /* CIL Label */ ;
        -: 8472:    }
    #####: 8473:  } else {
        1: 8474:    i = 0;
        -: 8475:    {
      257: 8476:    while (1) {
        -: 8477:      while_continue___11: /* CIL Label */ ;
      257: 8478:      if (! (i < 256)) {
        1: 8479:        goto while_break___11;
        -: 8480:      }
      256: 8481:      kwset___0->delta[i] = delta[i];
      256: 8482:      i ++;
        -: 8483:    }
        -: 8484:    while_break___11: /* CIL Label */ ;
        -: 8485:    }
        -: 8486:  }
        1: 8487:  return ((char *)0);
        -: 8488:}
        -: 8489:}
       89: 8490:static char *bmexec(kwset_t kws , char *text , size_t size ) 
        -: 8491:{ 
        -: 8492:  struct kwset *kwset___0 ;
        -: 8493:  register unsigned char *d1 ;
        -: 8494:  register char *ep ;
        -: 8495:  register char *sp ;
        -: 8496:  register char *tp ;
        -: 8497:  register int d ;
        -: 8498:  register int gc ;
        -: 8499:  register int i ;
        -: 8500:  register int len ;
        -: 8501:  register int md2 ;
        -: 8502:  void *tmp ;
        -: 8503:
        -: 8504:  {
       89: 8505:  kwset___0 = (struct kwset *)kws;
       89: 8506:  len = kwset___0->mind;
       89: 8507:  if (len == 0) {
    #####: 8508:    return (text);
        -: 8509:  }
       89: 8510:  if ((size_t )len > size) {
        1: 8511:    return ((char *)0);
        -: 8512:  }
       88: 8513:  if (len == 1) {
        -: 8514:    {
    #####: 8515:    tmp = memchr((void const   *)text, (int )*(kwset___0->target + 0), size);
        -: 8516:    }
    #####: 8517:    return ((char *)tmp);
        -: 8518:  }
       88: 8519:  d1 = kwset___0->delta;
       88: 8520:  sp = kwset___0->target + len;
       88: 8521:  gc = (int )((unsigned char )*(sp + -2));
       88: 8522:  md2 = kwset___0->mind2;
       88: 8523:  tp = text + len;
       88: 8524:  if (size > (size_t )(12 * len)) {
       86: 8525:    ep = (text + size) - 11 * len;
        -: 8526:    {
     5600: 8527:    while (1) {
        -: 8528:      while_continue: /* CIL Label */ ;
        -: 8529:      {
    11679: 8530:      while (1) {
        -: 8531:        while_continue___0: /* CIL Label */ ;
    11679: 8532:        if (! ((unsigned long )tp <= (unsigned long )ep)) {
       11: 8533:          goto while_break___0;
        -: 8534:        }
    11668: 8535:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
    11668: 8536:        tp += d;
    11668: 8537:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
    11668: 8538:        tp += d;
    11668: 8539:        if (d == 0) {
     2244: 8540:          goto found;
        -: 8541:        }
     9424: 8542:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     9424: 8543:        tp += d;
     9424: 8544:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     9424: 8545:        tp += d;
     9424: 8546:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     9424: 8547:        tp += d;
     9424: 8548:        if (d == 0) {
     1835: 8549:          goto found;
        -: 8550:        }
     7589: 8551:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     7589: 8552:        tp += d;
     7589: 8553:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     7589: 8554:        tp += d;
     7589: 8555:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     7589: 8556:        tp += d;
     7589: 8557:        if (d == 0) {
     1510: 8558:          goto found;
        -: 8559:        }
     6079: 8560:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     6079: 8561:        tp += d;
     6079: 8562:        d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
     6079: 8563:        tp += d;
        -: 8564:      }
        -: 8565:      while_break___0: /* CIL Label */ ;
        -: 8566:      }
       11: 8567:      goto while_break;
        -: 8568:      found: 
     5589: 8569:      if ((int )((unsigned char )*(tp + -2)) == gc) {
      680: 8570:        i = 3;
        -: 8571:        {
      830: 8572:        while (1) {
        -: 8573:          while_continue___1: /* CIL Label */ ;
      830: 8574:          if (i <= len) {
      755: 8575:            if (! ((int )((unsigned char )*(tp + - i)) == (int )((unsigned char )*(sp + - i)))) {
      605: 8576:              goto while_break___1;
        -: 8577:            }
      150: 8578:          } else {
       75: 8579:            goto while_break___1;
        -: 8580:          }
      150: 8581:          i ++;
        -: 8582:        }
        -: 8583:        while_break___1: /* CIL Label */ ;
        -: 8584:        }
      680: 8585:        if (i > len) {
       75: 8586:          return (tp - len);
        -: 8587:        }
      605: 8588:      }
     5514: 8589:      tp += md2;
        -: 8590:    }
        -: 8591:    while_break: /* CIL Label */ ;
        -: 8592:    }
       11: 8593:  }
       13: 8594:  ep = text + size;
       13: 8595:  d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
        -: 8596:  {
       18: 8597:  while (1) {
        -: 8598:    while_continue___2: /* CIL Label */ ;
       94: 8599:    if (! ((long )d <= ep - tp)) {
       12: 8600:      goto while_break___2;
        -: 8601:    }
       82: 8602:    tp += d;
       82: 8603:    d = (int )*(d1 + (int )((unsigned char )*(tp + -1)));
       82: 8604:    if (d != 0) {
       76: 8605:      goto while_continue___2;
        -: 8606:    }
        6: 8607:    if ((int )((unsigned char )*(tp + -2)) == gc) {
        4: 8608:      i = 3;
        -: 8609:      {
        6: 8610:      while (1) {
        -: 8611:        while_continue___3: /* CIL Label */ ;
        6: 8612:        if (i <= len) {
        5: 8613:          if (! ((int )((unsigned char )*(tp + - i)) == (int )((unsigned char )*(sp + - i)))) {
        3: 8614:            goto while_break___3;
        -: 8615:          }
        2: 8616:        } else {
        1: 8617:          goto while_break___3;
        -: 8618:        }
        2: 8619:        i ++;
        -: 8620:      }
        -: 8621:      while_break___3: /* CIL Label */ ;
        -: 8622:      }
        4: 8623:      if (i > len) {
        1: 8624:        return (tp - len);
        -: 8625:      }
        3: 8626:    }
        5: 8627:    d = md2;
        -: 8628:  }
        -: 8629:  while_break___2: /* CIL Label */ ;
        -: 8630:  }
       12: 8631:  return ((char *)0);
        -: 8632:}
       89: 8633:}
    #####: 8634:static char *cwexec(kwset_t kws , char *text , size_t len , struct kwsmatch *kwsmatch ) 
        -: 8635:{ 
        -: 8636:  struct kwset *kwset___0 ;
        -: 8637:  struct trie **next ;
        -: 8638:  struct trie *trie ;
        -: 8639:  struct trie *accept ;
        -: 8640:  char *beg ;
        -: 8641:  char *lim ;
        -: 8642:  char *mch ;
        -: 8643:  char *lmch ;
        -: 8644:  register unsigned char c ;
        -: 8645:  register unsigned char *delta ;
        -: 8646:  register int d ;
        -: 8647:  register char *end ;
        -: 8648:  register char *qlim ;
        -: 8649:  register struct tree *tree ;
        -: 8650:  register char *trans___0 ;
        -: 8651:
        -: 8652:  {
    #####: 8653:  kwset___0 = (struct kwset *)kws;
    #####: 8654:  if (len < (size_t )kwset___0->mind) {
    #####: 8655:    return ((char *)0);
        -: 8656:  }
    #####: 8657:  next = kwset___0->next;
    #####: 8658:  delta = kwset___0->delta;
    #####: 8659:  trans___0 = kwset___0->trans;
    #####: 8660:  lim = text + len;
    #####: 8661:  end = text;
    #####: 8662:  d = kwset___0->mind;
    #####: 8663:  if (d != 0) {
    #####: 8664:    mch = (char *)0;
    #####: 8665:  } else {
    #####: 8666:    mch = text;
    #####: 8667:    accept = kwset___0->trie;
    #####: 8668:    goto match;
        -: 8669:  }
    #####: 8670:  if (len >= (size_t )(4 * kwset___0->mind)) {
    #####: 8671:    qlim = lim - 4 * kwset___0->mind;
    #####: 8672:  } else {
    #####: 8673:    qlim = (char *)0;
        -: 8674:  }
        -: 8675:  {
    #####: 8676:  while (1) {
        -: 8677:    while_continue: /* CIL Label */ ;
    #####: 8678:    if (! (lim - end >= (long )d)) {
    #####: 8679:      goto while_break;
        -: 8680:    }
    #####: 8681:    if (qlim) {
    #####: 8682:      if ((unsigned long )end <= (unsigned long )qlim) {
    #####: 8683:        end += d - 1;
        -: 8684:        {
    #####: 8685:        while (1) {
        -: 8686:          while_continue___0: /* CIL Label */ ;
    #####: 8687:          c = (unsigned char )*end;
    #####: 8688:          d = (int )*(delta + (int )c);
    #####: 8689:          if (d) {
    #####: 8690:            if (! ((unsigned long )end < (unsigned long )qlim)) {
    #####: 8691:              goto while_break___0;
        -: 8692:            }
    #####: 8693:          } else {
    #####: 8694:            goto while_break___0;
        -: 8695:          }
    #####: 8696:          end += d;
    #####: 8697:          end += (int )*(delta + (int )((unsigned char )*end));
    #####: 8698:          end += (int )*(delta + (int )((unsigned char )*end));
        -: 8699:        }
        -: 8700:        while_break___0: /* CIL Label */ ;
        -: 8701:        }
    #####: 8702:        end ++;
    #####: 8703:      } else {
    #####: 8704:        end += d;
    #####: 8705:        c = (unsigned char )*(end + -1);
    #####: 8706:        d = (int )*(delta + (int )c);
        -: 8707:      }
    #####: 8708:    } else {
    #####: 8709:      end += d;
    #####: 8710:      c = (unsigned char )*(end + -1);
    #####: 8711:      d = (int )*(delta + (int )c);
        -: 8712:    }
    #####: 8713:    if (d) {
    #####: 8714:      goto while_continue;
        -: 8715:    }
    #####: 8716:    beg = end - 1;
    #####: 8717:    trie = *(next + (int )c);
    #####: 8718:    if (trie->accepting) {
    #####: 8719:      mch = beg;
    #####: 8720:      accept = trie;
    #####: 8721:    }
    #####: 8722:    d = trie->shift;
        -: 8723:    {
    #####: 8724:    while (1) {
        -: 8725:      while_continue___1: /* CIL Label */ ;
    #####: 8726:      if (! ((unsigned long )beg > (unsigned long )text)) {
    #####: 8727:        goto while_break___1;
        -: 8728:      }
    #####: 8729:      if (trans___0) {
    #####: 8730:        beg --;
    #####: 8731:        c = (unsigned char )*(trans___0 + (int )((unsigned char )*beg));
    #####: 8732:      } else {
    #####: 8733:        beg --;
    #####: 8734:        c = (unsigned char )*beg;
        -: 8735:      }
    #####: 8736:      tree = trie->links;
        -: 8737:      {
    #####: 8738:      while (1) {
        -: 8739:        while_continue___2: /* CIL Label */ ;
    #####: 8740:        if (tree) {
    #####: 8741:          if (! ((int )c != (int )tree->label)) {
    #####: 8742:            goto while_break___2;
        -: 8743:          }
    #####: 8744:        } else {
    #####: 8745:          goto while_break___2;
        -: 8746:        }
    #####: 8747:        if ((int )c < (int )tree->label) {
    #####: 8748:          tree = tree->llink;
    #####: 8749:        } else {
    #####: 8750:          tree = tree->rlink;
        -: 8751:        }
        -: 8752:      }
        -: 8753:      while_break___2: /* CIL Label */ ;
        -: 8754:      }
    #####: 8755:      if (tree) {
    #####: 8756:        trie = tree->trie;
    #####: 8757:        if (trie->accepting) {
    #####: 8758:          mch = beg;
    #####: 8759:          accept = trie;
    #####: 8760:        }
    #####: 8761:      } else {
    #####: 8762:        goto while_break___1;
        -: 8763:      }
    #####: 8764:      d = trie->shift;
        -: 8765:    }
        -: 8766:    while_break___1: /* CIL Label */ ;
        -: 8767:    }
    #####: 8768:    if (mch) {
    #####: 8769:      goto match;
        -: 8770:    }
        -: 8771:  }
        -: 8772:  while_break: /* CIL Label */ ;
        -: 8773:  }
    #####: 8774:  return ((char *)0);
        -: 8775:  match: 
    #####: 8776:  if (lim - mch > (long )kwset___0->maxd) {
    #####: 8777:    lim = mch + kwset___0->maxd;
    #####: 8778:  }
    #####: 8779:  lmch = (char *)0;
    #####: 8780:  d = 1;
        -: 8781:  {
    #####: 8782:  while (1) {
        -: 8783:    while_continue___3: /* CIL Label */ ;
    #####: 8784:    if (! (lim - end >= (long )d)) {
    #####: 8785:      goto while_break___3;
        -: 8786:    }
    #####: 8787:    end += d;
    #####: 8788:    c = (unsigned char )*(end + -1);
    #####: 8789:    d = (int )*(delta + (int )c);
    #####: 8790:    if (d != 0) {
    #####: 8791:      goto while_continue___3;
        -: 8792:    }
    #####: 8793:    beg = end - 1;
    #####: 8794:    trie = *(next + (int )c);
    #####: 8795:    if (! trie) {
    #####: 8796:      d = 1;
    #####: 8797:      goto while_continue___3;
        -: 8798:    }
    #####: 8799:    if (trie->accepting) {
    #####: 8800:      if ((unsigned long )beg <= (unsigned long )mch) {
    #####: 8801:        lmch = beg;
    #####: 8802:        accept = trie;
    #####: 8803:      }
    #####: 8804:    }
    #####: 8805:    d = trie->shift;
        -: 8806:    {
    #####: 8807:    while (1) {
        -: 8808:      while_continue___4: /* CIL Label */ ;
    #####: 8809:      if (! ((unsigned long )beg > (unsigned long )text)) {
    #####: 8810:        goto while_break___4;
        -: 8811:      }
    #####: 8812:      if (trans___0) {
    #####: 8813:        beg --;
    #####: 8814:        c = (unsigned char )*(trans___0 + (int )((unsigned char )*beg));
    #####: 8815:      } else {
    #####: 8816:        beg --;
    #####: 8817:        c = (unsigned char )*beg;
        -: 8818:      }
    #####: 8819:      tree = trie->links;
        -: 8820:      {
    #####: 8821:      while (1) {
        -: 8822:        while_continue___5: /* CIL Label */ ;
    #####: 8823:        if (tree) {
    #####: 8824:          if (! ((int )c != (int )tree->label)) {
    #####: 8825:            goto while_break___5;
        -: 8826:          }
    #####: 8827:        } else {
    #####: 8828:          goto while_break___5;
        -: 8829:        }
    #####: 8830:        if ((int )c < (int )tree->label) {
    #####: 8831:          tree = tree->llink;
    #####: 8832:        } else {
    #####: 8833:          tree = tree->rlink;
        -: 8834:        }
        -: 8835:      }
        -: 8836:      while_break___5: /* CIL Label */ ;
        -: 8837:      }
    #####: 8838:      if (tree) {
    #####: 8839:        trie = tree->trie;
    #####: 8840:        if (trie->accepting) {
    #####: 8841:          if ((unsigned long )beg <= (unsigned long )mch) {
    #####: 8842:            lmch = beg;
    #####: 8843:            accept = trie;
    #####: 8844:          }
    #####: 8845:        }
    #####: 8846:      } else {
    #####: 8847:        goto while_break___4;
        -: 8848:      }
    #####: 8849:      d = trie->shift;
        -: 8850:    }
        -: 8851:    while_break___4: /* CIL Label */ ;
        -: 8852:    }
    #####: 8853:    if (lmch) {
    #####: 8854:      mch = lmch;
    #####: 8855:      goto match;
        -: 8856:    }
    #####: 8857:    if (! d) {
    #####: 8858:      d = 1;
    #####: 8859:    }
        -: 8860:  }
        -: 8861:  while_break___3: /* CIL Label */ ;
        -: 8862:  }
    #####: 8863:  if (kwsmatch) {
    #####: 8864:    kwsmatch->strchr = (int )(accept->accepting / 2U);
    #####: 8865:    kwsmatch->beg[0] = mch;
    #####: 8866:    kwsmatch->size[0] = (size_t )accept->depth;
    #####: 8867:  }
    #####: 8868:  return (mch);
        -: 8869:}
    #####: 8870:}
       89: 8871:char *kwsexec(kwset_t kws , char *text , size_t size , struct kwsmatch *kwsmatch ) 
        -: 8872:{ 
        -: 8873:  struct kwset *kwset___0 ;
        -: 8874:  char *ret ;
        -: 8875:  char *tmp ;
        -: 8876:
        -: 8877:  {
       89: 8878:  kwset___0 = (struct kwset *)kws;
       89: 8879:  if (kwset___0->words == 1) {
       89: 8880:    if ((unsigned long )kwset___0->trans == (unsigned long )((char *)0)) {
        -: 8881:      {
       89: 8882:      ret = bmexec(kws, text, size);
        -: 8883:      }
       89: 8884:      if ((unsigned long )kwsmatch != (unsigned long )((struct kwsmatch *)0)) {
       89: 8885:        if ((unsigned long )ret != (unsigned long )((char *)0)) {
       76: 8886:          kwsmatch->strchr = 0;
       76: 8887:          kwsmatch->beg[0] = ret;
       76: 8888:          kwsmatch->size[0] = (size_t )kwset___0->mind;
       76: 8889:        }
       89: 8890:      }
       89: 8891:      return (ret);
        -: 8892:    } else {
        -: 8893:      {
    #####: 8894:      tmp = cwexec(kws, text, size, kwsmatch);
        -: 8895:      }
    #####: 8896:      return (tmp);
        -: 8897:    }
        -: 8898:  } else {
        -: 8899:    {
    #####: 8900:    tmp = cwexec(kws, text, size, kwsmatch);
        -: 8901:    }
    #####: 8902:    return (tmp);
        -: 8903:  }
        -: 8904:}
       89: 8905:}
    #####: 8906:void kwsfree(kwset_t kws ) 
        -: 8907:{ 
        -: 8908:  struct kwset *kwset___0 ;
        -: 8909:  struct obstack *__o ;
        -: 8910:  void *__obj ;
        -: 8911:  char *tmp ;
        -: 8912:
        -: 8913:  {
    #####: 8914:  kwset___0 = (struct kwset *)kws;
    #####: 8915:  __o = & kwset___0->obstack;
    #####: 8916:  __obj = (void *)0;
    #####: 8917:  if ((unsigned long )__obj > (unsigned long )((void *)__o->chunk)) {
    #####: 8918:    if ((unsigned long )__obj < (unsigned long )((void *)__o->chunk_limit)) {
    #####: 8919:      tmp = (char *)__obj;
    #####: 8920:      __o->object_base = tmp;
    #####: 8921:      __o->next_free = tmp;
    #####: 8922:    } else {
        -: 8923:      {
    #####: 8924:      obstack_free(__o, __obj);
        -: 8925:      }
        -: 8926:    }
    #####: 8927:  } else {
        -: 8928:    {
    #####: 8929:    obstack_free(__o, __obj);
        -: 8930:    }
        -: 8931:  }
        -: 8932:  {
    #####: 8933:  free(kws);
        -: 8934:  }
    #####: 8935:  return;
        -: 8936:}
        -: 8937:}
        -: 8938:extern DIR *( __attribute__((__nonnull__(1))) opendir)(char const   *__name ) ;
        -: 8939:extern int ( __attribute__((__nonnull__(1))) closedir)(DIR *__dirp ) ;
        -: 8940:extern struct dirent *( __attribute__((__nonnull__(1))) readdir)(DIR *__dirp ) ;
    #####: 8941:char *savedir(char const   *dir , off_t name_size ) 
        -: 8942:{ 
        -: 8943:  DIR *dirp ;
        -: 8944:  struct dirent *dp ;
        -: 8945:  char *name_space ;
        -: 8946:  char *namep ;
        -: 8947:  char *tmp ;
        -: 8948:  off_t size_needed ;
        -: 8949:  size_t tmp___0 ;
        -: 8950:  char *new_name_space ;
        -: 8951:  void *tmp___1 ;
        -: 8952:  char *tmp___2 ;
        -: 8953:  int tmp___3 ;
        -: 8954:
        -: 8955:  {
        -: 8956:  {
    #####: 8957:  dirp = opendir(dir);
        -: 8958:  }
    #####: 8959:  if ((unsigned long )dirp == (unsigned long )((void *)0)) {
    #####: 8960:    return ((char *)((void *)0));
        -: 8961:  }
    #####: 8962:  if (name_size <= 0L) {
    #####: 8963:    name_size = (off_t )1;
    #####: 8964:  }
        -: 8965:  {
    #####: 8966:  tmp = xmalloc((size_t )name_size);
    #####: 8967:  name_space = tmp;
        -: 8968:  }
    #####: 8969:  if ((unsigned long )name_space == (unsigned long )((void *)0)) {
        -: 8970:    {
    #####: 8971:    closedir(dirp);
        -: 8972:    }
    #####: 8973:    return ((char *)((void *)0));
        -: 8974:  }
    #####: 8975:  namep = name_space;
        -: 8976:  {
    #####: 8977:  while (1) {
        -: 8978:    while_continue: /* CIL Label */ ;
        -: 8979:    {
    #####: 8980:    dp = readdir(dirp);
        -: 8981:    }
    #####: 8982:    if (! ((unsigned long )dp != (unsigned long )((void *)0))) {
    #####: 8983:      goto while_break;
        -: 8984:    }
    #####: 8985:    if ((int )dp->d_name[0] != 46) {
    #####: 8986:      goto _L___0;
        -: 8987:    } else { //Added block
    #####: 8988:    if ((int )dp->d_name[1] != 0) {
    #####: 8989:      if ((int )dp->d_name[1] != 46) {
    #####: 8990:        goto _L___0;
        -: 8991:      } else { //Added block
    #####: 8992:      if ((int )dp->d_name[2] != 0) {
        -: 8993:        _L___0: 
        -: 8994:        {
    #####: 8995:        tmp___0 = strlen((char const   *)(dp->d_name));
    #####: 8996:        size_needed = (off_t )(((size_t )(namep - name_space) + tmp___0) + 2UL);
        -: 8997:        }
    #####: 8998:        if (size_needed > name_size) {
        -: 8999:          {
    #####: 9000:          while (1) {
        -: 9001:            while_continue___0: /* CIL Label */ ;
    #####: 9002:            if (! (size_needed > name_size)) {
    #####: 9003:              goto while_break___0;
        -: 9004:            }
    #####: 9005:            name_size += 1024L;
        -: 9006:          }
        -: 9007:          while_break___0: /* CIL Label */ ;
        -: 9008:          }
        -: 9009:          {
    #####: 9010:          tmp___1 = realloc((void *)name_space, (size_t )name_size);
    #####: 9011:          new_name_space = (char *)tmp___1;
        -: 9012:          }
    #####: 9013:          if ((unsigned long )new_name_space == (unsigned long )((void *)0)) {
        -: 9014:            {
    #####: 9015:            closedir(dirp);
        -: 9016:            }
    #####: 9017:            return ((char *)((void *)0));
        -: 9018:          }
    #####: 9019:          namep += new_name_space - name_space;
    #####: 9020:          name_space = new_name_space;
    #####: 9021:        }
        -: 9022:        {
    #####: 9023:        tmp___2 = stpcpy((char * __restrict  )namep, (char const   * __restrict  )(dp->d_name));
    #####: 9024:        namep = tmp___2 + 1;
        -: 9025:        }
    #####: 9026:      }
        -: 9027:      }
    #####: 9028:    }
        -: 9029:    }
        -: 9030:  }
        -: 9031:  while_break: /* CIL Label */ ;
        -: 9032:  }
        -: 9033:  {
    #####: 9034:  *namep = (char )'\000';
    #####: 9035:  tmp___3 = closedir(dirp);
        -: 9036:  }
    #####: 9037:  if (tmp___3) {
        -: 9038:    {
    #####: 9039:    free((void *)name_space);
        -: 9040:    }
    #####: 9041:    return ((char *)((void *)0));
        -: 9042:  }
    #####: 9043:  return (name_space);
        -: 9044:}
    #####: 9045:}
        -: 9046:static void Gcompile(char *pattern , size_t size ) ;
        -: 9047:static void Ecompile(char *pattern , size_t size ) ;
        -: 9048:static char *EGexecute(char *buf , size_t size , char **endp ) ;
        -: 9049:static void Fcompile(char *pattern , size_t size ) ;
        -: 9050:static char *Fexecute(char *buf , size_t size , char **endp ) ;
        -: 9051:static void kwsinit(void) ;
        -: 9052:struct matcher matchers[6]  = {      {(char *)"default", & Gcompile, & EGexecute}, 
        -: 9053:        {(char *)"grep", & Gcompile, & EGexecute}, 
        -: 9054:        {(char *)"egrep", & Ecompile, & EGexecute}, 
        -: 9055:        {(char *)"awk", & Ecompile, & EGexecute}, 
        -: 9056:        {(char *)"fgrep", & Fcompile, & Fexecute}, 
        -: 9057:        {(char *)0, (void (*)(char * , size_t  ))0, (char *(*)(char * , size_t  , char ** ))0}};
        -: 9058:static struct dfa dfa_1  ;
        -: 9059:static struct re_pattern_buffer regexbuf  ;
        -: 9060:static kwset_t kwset  ;
        -: 9061:static int lastexact  ;
    #####: 9062:void dfaerror(char const   *mesg ) 
        -: 9063:{ 
        -: 9064:
        -: 9065:
        -: 9066:  {
        -: 9067:  {
    #####: 9068:  fatal(mesg, 0);
        -: 9069:  }
        -: 9070:}
        -: 9071:}
        -: 9072:static char trans[256]  ;
        1: 9073:static void kwsinit(void) 
        -: 9074:{ 
        -: 9075:  int i ;
        -: 9076:  int tmp___0 ;
        -: 9077:  unsigned short const   **tmp___1 ;
        -: 9078:  char *tmp___2 ;
        -: 9079:
        -: 9080:  {
        1: 9081:  if (match_icase) {
    #####: 9082:    i = 0;
        -: 9083:    {
    #####: 9084:    while (1) {
        -: 9085:      while_continue: /* CIL Label */ ;
    #####: 9086:      if (! (i < 256)) {
    #####: 9087:        goto while_break;
        -: 9088:      }
        -: 9089:      {
    #####: 9090:      tmp___1 = __ctype_b_loc();
        -: 9091:      }
    #####: 9092:      if ((int const   )*(*tmp___1 + i) & 256) {
        -: 9093:        {
    #####: 9094:        tmp___0 = tolower(i);
    #####: 9095:        trans[i] = (char )tmp___0;
        -: 9096:        }
    #####: 9097:      } else {
    #####: 9098:        trans[i] = (char )i;
        -: 9099:      }
    #####: 9100:      i ++;
        -: 9101:    }
        -: 9102:    while_break: /* CIL Label */ ;
        -: 9103:    }
    #####: 9104:  }
        1: 9105:  if (match_icase) {
    #####: 9106:    tmp___2 = trans;
    #####: 9107:  } else {
        1: 9108:    tmp___2 = (char *)0;
        -: 9109:  }
        -: 9110:  {
        1: 9111:  kwset = kwsalloc(tmp___2);
        -: 9112:  }
        1: 9113:  if (! kwset) {
        -: 9114:    {
    #####: 9115:    fatal("memory exhausted", 0);
        -: 9116:    }
        -: 9117:  }
        1: 9118:  return;
        -: 9119:}
        -: 9120:}
        1: 9121:static void kwsmusts(void) 
        -: 9122:{ 
        -: 9123:  struct dfamust *dm ;
        -: 9124:  char *err ;
        -: 9125:  size_t tmp ;
        -: 9126:  size_t tmp___0 ;
        -: 9127:
        -: 9128:  {
        1: 9129:  if (dfa_1.musts) {
        -: 9130:    {
        1: 9131:    kwsinit();
        1: 9132:    dm = dfa_1.musts;
        -: 9133:    }
        -: 9134:    {
        2: 9135:    while (1) {
        -: 9136:      while_continue: /* CIL Label */ ;
        2: 9137:      if (! dm) {
        1: 9138:        goto while_break;
        -: 9139:      }
        1: 9140:      if (! dm->exact) {
        1: 9141:        goto __Cont;
        -: 9142:      }
        -: 9143:      {
    #####: 9144:      lastexact ++;
    #####: 9145:      tmp = strlen((char const   *)dm->must);
    #####: 9146:      err = kwsincr(kwset, dm->must, tmp);
        -: 9147:      }
    #####: 9148:      if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9149:        {
    #####: 9150:        fatal((char const   *)err, 0);
        -: 9151:        }
        -: 9152:      }
        -: 9153:      __Cont: 
        1: 9154:      dm = dm->next;
        -: 9155:    }
        -: 9156:    while_break: /* CIL Label */ ;
        -: 9157:    }
        1: 9158:    dm = dfa_1.musts;
        -: 9159:    {
        2: 9160:    while (1) {
        -: 9161:      while_continue___0: /* CIL Label */ ;
        2: 9162:      if (! dm) {
        1: 9163:        goto while_break___0;
        -: 9164:      }
        1: 9165:      if (dm->exact) {
    #####: 9166:        goto __Cont___0;
        -: 9167:      }
        -: 9168:      {
        1: 9169:      tmp___0 = strlen((char const   *)dm->must);
        1: 9170:      err = kwsincr(kwset, dm->must, tmp___0);
        -: 9171:      }
        1: 9172:      if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9173:        {
    #####: 9174:        fatal((char const   *)err, 0);
        -: 9175:        }
        -: 9176:      }
        -: 9177:      __Cont___0: 
        1: 9178:      dm = dm->next;
        -: 9179:    }
        -: 9180:    while_break___0: /* CIL Label */ ;
        -: 9181:    }
        -: 9182:    {
        1: 9183:    err = kwsprep(kwset);
        -: 9184:    }
        1: 9185:    if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9186:      {
    #####: 9187:      fatal((char const   *)err, 0);
        -: 9188:      }
        -: 9189:    }
        1: 9190:  }
        1: 9191:  return;
        -: 9192:}
        -: 9193:}
    #####: 9194:static void Gcompile(char *pattern , size_t size ) 
        -: 9195:{ 
        -: 9196:  char const   *err ;
        -: 9197:  char *n ;
        -: 9198:  char *tmp ;
        -: 9199:  int i ;
        -: 9200:  size_t tmp___0 ;
        -: 9201:  size_t tmp___1 ;
        -: 9202:
        -: 9203:  {
        -: 9204:  {
    #####: 9205:  re_set_syntax((((((1UL << 1) | ((1UL << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
    #####: 9206:  dfasyntax((((((1UL << 1) | ((1UL << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1),
    #####: 9207:            match_icase, (int )eolbyte);
    #####: 9208:  err = re_compile_pattern((char const   *)pattern, size, & regexbuf);
        -: 9209:  }
    #####: 9210:  if ((unsigned long )err != (unsigned long )((char const   *)0)) {
        -: 9211:    {
    #####: 9212:    fatal(err, 0);
        -: 9213:    }
        -: 9214:  }
    #####: 9215:  if (match_words) {
    #####: 9216:    goto _L;
        -: 9217:  } else { //Added block
    #####: 9218:  if (match_lines) {
        -: 9219:    _L: 
        -: 9220:    {
    #####: 9221:    tmp = xmalloc(size + 50UL);
    #####: 9222:    n = tmp;
    #####: 9223:    i = 0;
    #####: 9224:    strcpy((char * __restrict  )n, (char const   * __restrict  )"");
        -: 9225:    }
    #####: 9226:    if (match_lines) {
        -: 9227:      {
    #####: 9228:      strcpy((char * __restrict  )n, (char const   * __restrict  )"^\\(");
        -: 9229:      }
    #####: 9230:    }
    #####: 9231:    if (match_words) {
        -: 9232:      {
    #####: 9233:      strcpy((char * __restrict  )n, (char const   * __restrict  )"\\(^\\|[^[:alnum:]_]\\)\\(");
        -: 9234:      }
    #####: 9235:    }
        -: 9236:    {
    #####: 9237:    tmp___0 = strlen((char const   *)n);
    #####: 9238:    i = (int )tmp___0;
    #####: 9239:    memcpy((void * __restrict  )(n + i), (void const   * __restrict  )pattern, size);
    #####: 9240:    i = (int )((size_t )i + size);
        -: 9241:    }
    #####: 9242:    if (match_words) {
        -: 9243:      {
    #####: 9244:      strcpy((char * __restrict  )(n + i), (char const   * __restrict  )"\\)\\([^[:alnum:]_]\\|$\\)");
        -: 9245:      }
    #####: 9246:    }
    #####: 9247:    if (match_lines) {
        -: 9248:      {
    #####: 9249:      strcpy((char * __restrict  )(n + i), (char const   * __restrict  )"\\)$");
        -: 9250:      }
    #####: 9251:    }
        -: 9252:    {
    #####: 9253:    tmp___1 = strlen((char const   *)(n + i));
    #####: 9254:    i = (int )((size_t )i + tmp___1);
    #####: 9255:    dfacomp(n, (size_t )i, & dfa_1, 1);
        -: 9256:    }
    #####: 9257:  } else {
        -: 9258:    {
    #####: 9259:    dfacomp(pattern, size, & dfa_1, 1);
        -: 9260:    }
        -: 9261:  }
        -: 9262:  }
        -: 9263:  {
    #####: 9264:  kwsmusts();
        -: 9265:  }
    #####: 9266:  return;
        -: 9267:}
        -: 9268:}
        1: 9269:static void Ecompile(char *pattern , size_t size ) 
        -: 9270:{ 
        -: 9271:  char const   *err ;
        -: 9272:  int tmp ;
        -: 9273:  char *n ;
        -: 9274:  char *tmp___0 ;
        -: 9275:  int i ;
        -: 9276:  size_t tmp___1 ;
        -: 9277:  size_t tmp___2 ;
        -: 9278:
        -: 9279:  {
        -: 9280:  {
        1: 9281:  tmp = strcmp(matcher, "awk");
        -: 9282:  }
        1: 9283:  if (tmp == 0) {
        -: 9284:    {
    #####: 9285:    re_set_syntax(((((((((1UL | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((1UL << 1) << 1) << 1)) | (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
    #####: 9286:    dfasyntax(((((((((1UL | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((1UL << 1) << 1) << 1)) | (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1),
    #####: 9287:              match_icase, (int )eolbyte);
        -: 9288:    }
    #####: 9289:  } else {
        -: 9290:    {
        1: 9291:    re_set_syntax((((((((((1UL << 1) << 1) | (((1UL << 1) << 1) << 1)) | ((((1UL << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1));
        1: 9292:    dfasyntax((((((((((1UL << 1) << 1) | (((1UL << 1) << 1) << 1)) | ((((1UL << 1) << 1) << 1) << 1)) | ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1),
        1: 9293:              match_icase, (int )eolbyte);
        -: 9294:    }
        -: 9295:  }
        -: 9296:  {
        1: 9297:  err = re_compile_pattern((char const   *)pattern, size, & regexbuf);
        -: 9298:  }
        1: 9299:  if ((unsigned long )err != (unsigned long )((char const   *)0)) {
        -: 9300:    {
    #####: 9301:    fatal(err, 0);
        -: 9302:    }
        -: 9303:  }
        1: 9304:  if (match_words) {
    #####: 9305:    goto _L;
        -: 9306:  } else { //Added block
        1: 9307:  if (match_lines) {
        -: 9308:    _L: 
        -: 9309:    {
    #####: 9310:    tmp___0 = xmalloc(size + 50UL);
    #####: 9311:    n = tmp___0;
    #####: 9312:    i = 0;
    #####: 9313:    strcpy((char * __restrict  )n, (char const   * __restrict  )"");
        -: 9314:    }
    #####: 9315:    if (match_lines) {
        -: 9316:      {
    #####: 9317:      strcpy((char * __restrict  )n, (char const   * __restrict  )"^(");
        -: 9318:      }
    #####: 9319:    }
    #####: 9320:    if (match_words) {
        -: 9321:      {
    #####: 9322:      strcpy((char * __restrict  )n, (char const   * __restrict  )"(^|[^[:alnum:]_])(");
        -: 9323:      }
    #####: 9324:    }
        -: 9325:    {
    #####: 9326:    tmp___1 = strlen((char const   *)n);
    #####: 9327:    i = (int )tmp___1;
    #####: 9328:    memcpy((void * __restrict  )(n + i), (void const   * __restrict  )pattern, size);
    #####: 9329:    i = (int )((size_t )i + size);
        -: 9330:    }
    #####: 9331:    if (match_words) {
        -: 9332:      {
    #####: 9333:      strcpy((char * __restrict  )(n + i), (char const   * __restrict  )")([^[:alnum:]_]|$)");
        -: 9334:      }
    #####: 9335:    }
    #####: 9336:    if (match_lines) {
        -: 9337:      {
    #####: 9338:      strcpy((char * __restrict  )(n + i), (char const   * __restrict  )")$");
        -: 9339:      }
    #####: 9340:    }
        -: 9341:    {
    #####: 9342:    tmp___2 = strlen((char const   *)(n + i));
    #####: 9343:    i = (int )((size_t )i + tmp___2);
    #####: 9344:    dfacomp(n, (size_t )i, & dfa_1, 1);
        -: 9345:    }
    #####: 9346:  } else {
        -: 9347:    {
        1: 9348:    dfacomp(pattern, size, & dfa_1, 1);
        -: 9349:    }
        -: 9350:  }
        -: 9351:  }
        -: 9352:  {
        1: 9353:  kwsmusts();
        -: 9354:  }
        1: 9355:  return;
        -: 9356:}
        -: 9357:}
        -: 9358:static struct re_registers regs  ;
       89: 9359:static char *EGexecute(char *buf , size_t size , char **endp ) 
        -: 9360:{ 
        -: 9361:  register char *buflim___0 ;
        -: 9362:  register char *beg ;
        -: 9363:  register char *end ;
        -: 9364:  register char save ;
        -: 9365:  char eol ;
        -: 9366:  int backref ;
        -: 9367:  int start ;
        -: 9368:  int len ;
        -: 9369:  struct kwsmatch kwsm ;
        -: 9370:  void *tmp ;
        -: 9371:  char *tmp___0 ;
        -: 9372:  void *tmp___1 ;
        -: 9373:  unsigned short const   **tmp___2 ;
        -: 9374:  unsigned short const   **tmp___3 ;
        -: 9375:
        -: 9376:  {
       89: 9377:  eol = (char )eolbyte;
       89: 9378:  buflim___0 = buf + size;
       89: 9379:  end = buf;
       89: 9380:  beg = end;
        -: 9381:  {
       89: 9382:  while (1) {
        -: 9383:    while_continue: /* CIL Label */ ;
       89: 9384:    if (! ((unsigned long )end < (unsigned long )buflim___0)) {
    #####: 9385:      goto while_break;
        -: 9386:    }
       89: 9387:    if (kwset) {
        -: 9388:      {
       89: 9389:      beg = kwsexec(kwset, beg, (size_t )(buflim___0 - beg), & kwsm);
        -: 9390:      }
       89: 9391:      if (! beg) {
       13: 9392:        goto failure;
        -: 9393:      }
        -: 9394:      {
       76: 9395:      tmp = memchr((void const   *)beg, (int )eol, (size_t )(buflim___0 - beg));
       76: 9396:      end = (char *)tmp;
        -: 9397:      }
       76: 9398:      if (! end) {
    #####: 9399:        end = buflim___0;
    #####: 9400:      }
        -: 9401:      {
      823: 9402:      while (1) {
        -: 9403:        while_continue___0: /* CIL Label */ ;
      823: 9404:        if ((unsigned long )beg > (unsigned long )buf) {
      810: 9405:          if (! ((int )*(beg + -1) != (int )eol)) {
       63: 9406:            goto while_break___0;
        -: 9407:          }
      747: 9408:        } else {
       13: 9409:          goto while_break___0;
        -: 9410:        }
      747: 9411:        beg --;
        -: 9412:      }
        -: 9413:      while_break___0: /* CIL Label */ ;
        -: 9414:      }
       76: 9415:      save = *end;
       76: 9416:      if (kwsm.strchr < lastexact) {
    #####: 9417:        goto success;
        -: 9418:      }
        -: 9419:      {
       76: 9420:      tmp___0 = dfaexec(& dfa_1, beg, end, 0, (int *)0, & backref);
        -: 9421:      }
       76: 9422:      if (! tmp___0) {
    #####: 9423:        *end = save;
    #####: 9424:        goto __Cont;
        -: 9425:      }
       76: 9426:      *end = save;
       76: 9427:      if (! backref) {
       76: 9428:        goto success;
        -: 9429:      }
    #####: 9430:    } else {
        -: 9431:      {
    #####: 9432:      save = *buflim___0;
    #####: 9433:      beg = dfaexec(& dfa_1, beg, buflim___0, 0, (int *)0, & backref);
    #####: 9434:      *buflim___0 = save;
        -: 9435:      }
    #####: 9436:      if (! beg) {
    #####: 9437:        goto failure;
        -: 9438:      }
        -: 9439:      {
    #####: 9440:      tmp___1 = memchr((void const   *)beg, (int )eol, (size_t )(buflim___0 - beg));
    #####: 9441:      end = (char *)tmp___1;
        -: 9442:      }
    #####: 9443:      if (! end) {
    #####: 9444:        end = buflim___0;
    #####: 9445:      }
        -: 9446:      {
    #####: 9447:      while (1) {
        -: 9448:        while_continue___1: /* CIL Label */ ;
    #####: 9449:        if ((unsigned long )beg > (unsigned long )buf) {
    #####: 9450:          if (! ((int )*(beg + -1) != (int )eol)) {
    #####: 9451:            goto while_break___1;
        -: 9452:          }
    #####: 9453:        } else {
    #####: 9454:          goto while_break___1;
        -: 9455:        }
    #####: 9456:        beg --;
        -: 9457:      }
        -: 9458:      while_break___1: /* CIL Label */ ;
        -: 9459:      }
    #####: 9460:      if (! backref) {
    #####: 9461:        goto success;
        -: 9462:      }
        -: 9463:    }
        -: 9464:    {
    #####: 9465:    regexbuf.not_eol = 0U;
    #####: 9466:    start = re_search(& regexbuf, (char const   *)beg, (int )(end - beg), 0, (int )(end - beg),
        -: 9467:                      & regs);
        -: 9468:    }
    #####: 9469:    if (start >= 0) {
    #####: 9470:      len = *(regs.end + 0) - start;
    #####: 9471:      if (! match_lines) {
    #####: 9472:        if (! match_words) {
    #####: 9473:          goto success;
        -: 9474:        } else {
    #####: 9475:          goto _L;
        -: 9476:        }
    #####: 9477:      } else { //Added block
        -: 9478:      _L: 
    #####: 9479:      if (match_lines) {
    #####: 9480:        if ((long )len == end - beg) {
    #####: 9481:          goto success;
        -: 9482:        }
    #####: 9483:      }
        -: 9484:      }
    #####: 9485:      if (match_words) {
        -: 9486:        {
    #####: 9487:        while (1) {
        -: 9488:          while_continue___2: /* CIL Label */ ;
    #####: 9489:          if (! (start >= 0)) {
    #####: 9490:            goto while_break___2;
        -: 9491:          }
    #####: 9492:          if (start == 0) {
    #####: 9493:            goto _L___0;
        -: 9494:          } else {
        -: 9495:            {
    #####: 9496:            tmp___2 = __ctype_b_loc();
        -: 9497:            }
    #####: 9498:            if (! ((int const   )*(*tmp___2 + (int )((unsigned char )*(beg + (start - 1)))) & 8)) {
    #####: 9499:              if (! ((int )((unsigned char )*(beg + (start - 1))) == 95)) {
        -: 9500:                _L___0: 
    #####: 9501:                if ((long )len == end - beg) {
    #####: 9502:                  goto success;
        -: 9503:                } else {
        -: 9504:                  {
    #####: 9505:                  tmp___3 = __ctype_b_loc();
        -: 9506:                  }
    #####: 9507:                  if (! ((int const   )*(*tmp___3 + (int )((unsigned char )*(beg + (start + len)))) & 8)) {
    #####: 9508:                    if (! ((int )((unsigned char )*(beg + (start + len))) == 95)) {
    #####: 9509:                      goto success;
        -: 9510:                    }
    #####: 9511:                  }
        -: 9512:                }
    #####: 9513:              }
    #####: 9514:            }
        -: 9515:          }
    #####: 9516:          if (len > 0) {
        -: 9517:            {
    #####: 9518:            len --;
    #####: 9519:            regexbuf.not_eol = 1U;
    #####: 9520:            len = re_match(& regexbuf, (char const   *)beg, start + len, start, & regs);
        -: 9521:            }
    #####: 9522:          }
    #####: 9523:          if (len <= 0) {
    #####: 9524:            if ((long )start == end - beg) {
    #####: 9525:              goto while_break___2;
        -: 9526:            }
        -: 9527:            {
    #####: 9528:            start ++;
    #####: 9529:            regexbuf.not_eol = 0U;
    #####: 9530:            start = re_search(& regexbuf, (char const   *)beg, (int )(end - beg),
    #####: 9531:                              start, (int )((end - beg) - (long )start), & regs);
    #####: 9532:            len = *(regs.end + 0) - start;
        -: 9533:            }
    #####: 9534:          }
        -: 9535:        }
        -: 9536:        while_break___2: /* CIL Label */ ;
        -: 9537:        }
    #####: 9538:      }
    #####: 9539:    }
        -: 9540:    __Cont: 
    #####: 9541:    beg = end + 1;
        -: 9542:  }
        -: 9543:  while_break: /* CIL Label */ ;
    #####: 9544:  }
        -: 9545:  failure: 
       13: 9546:  return ((char *)0);
        -: 9547:  success: 
       76: 9548:  if ((unsigned long )end < (unsigned long )buflim___0) {
       76: 9549:    *endp = end + 1;
       76: 9550:  } else {
    #####: 9551:    *endp = end;
        -: 9552:  }
       76: 9553:  return (beg);
        -: 9554:}
       89: 9555:}
    #####: 9556:static void Fcompile(char *pattern , size_t size ) 
        -: 9557:{ 
        -: 9558:  char *beg ;
        -: 9559:  char *lim ;
        -: 9560:  char *err ;
        -: 9561:
        -: 9562:  {
        -: 9563:  {
    #####: 9564:  kwsinit();
    #####: 9565:  beg = pattern;
        -: 9566:  }
        -: 9567:  {
    #####: 9568:  while (1) {
        -: 9569:    while_continue: /* CIL Label */ ;
    #####: 9570:    lim = beg;
        -: 9571:    {
    #####: 9572:    while (1) {
        -: 9573:      while_continue___0: /* CIL Label */ ;
    #####: 9574:      if ((unsigned long )lim < (unsigned long )(pattern + size)) {
    #####: 9575:        if (! ((int )*lim != 10)) {
    #####: 9576:          goto while_break___0;
        -: 9577:        }
    #####: 9578:      } else {
    #####: 9579:        goto while_break___0;
        -: 9580:      }
    #####: 9581:      lim ++;
        -: 9582:    }
        -: 9583:    while_break___0: /* CIL Label */ ;
        -: 9584:    }
        -: 9585:    {
    #####: 9586:    err = kwsincr(kwset, beg, (size_t )(lim - beg));
        -: 9587:    }
    #####: 9588:    if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9589:      {
    #####: 9590:      fatal((char const   *)err, 0);
        -: 9591:      }
        -: 9592:    }
    #####: 9593:    if ((unsigned long )lim < (unsigned long )(pattern + size)) {
    #####: 9594:      lim ++;
    #####: 9595:    }
    #####: 9596:    beg = lim;
    #####: 9597:    if (! ((unsigned long )beg < (unsigned long )(pattern + size))) {
    #####: 9598:      goto while_break;
        -: 9599:    }
        -: 9600:  }
        -: 9601:  while_break: /* CIL Label */ ;
        -: 9602:  }
        -: 9603:  {
    #####: 9604:  err = kwsprep(kwset);
        -: 9605:  }
    #####: 9606:  if ((unsigned long )err != (unsigned long )((char *)0)) {
        -: 9607:    {
    #####: 9608:    fatal((char const   *)err, 0);
        -: 9609:    }
        -: 9610:  }
    #####: 9611:  return;
        -: 9612:}
        -: 9613:}
    #####: 9614:static char *Fexecute(char *buf , size_t size , char **endp ) 
        -: 9615:{ 
        -: 9616:  register char *beg ;
        -: 9617:  register char *try ;
        -: 9618:  register char *end ;
        -: 9619:  register size_t len ;
        -: 9620:  char eol ;
        -: 9621:  struct kwsmatch kwsmatch ;
        -: 9622:  unsigned short const   **tmp ;
        -: 9623:  unsigned short const   **tmp___0 ;
        -: 9624:  void *tmp___1 ;
        -: 9625:
        -: 9626:  {
    #####: 9627:  eol = (char )eolbyte;
    #####: 9628:  beg = buf;
        -: 9629:  {
    #####: 9630:  while (1) {
        -: 9631:    while_continue: /* CIL Label */ ;
    #####: 9632:    if (! ((unsigned long )beg <= (unsigned long )(buf + size))) {
    #####: 9633:      goto while_break;
        -: 9634:    }
        -: 9635:    {
    #####: 9636:    beg = kwsexec(kwset, beg, (size_t )((buf + size) - beg), & kwsmatch);
        -: 9637:    }
    #####: 9638:    if (! beg) {
    #####: 9639:      return ((char *)0);
        -: 9640:    }
    #####: 9641:    len = kwsmatch.size[0];
    #####: 9642:    if (match_lines) {
    #####: 9643:      if ((unsigned long )beg > (unsigned long )buf) {
    #####: 9644:        if ((int )*(beg + -1) != (int )eol) {
    #####: 9645:          goto __Cont;
        -: 9646:        }
    #####: 9647:      }
    #####: 9648:      if ((unsigned long )(beg + len) < (unsigned long )(buf + size)) {
    #####: 9649:        if ((int )*(beg + len) != (int )eol) {
    #####: 9650:          goto __Cont;
        -: 9651:        }
    #####: 9652:      }
    #####: 9653:      goto success;
        -: 9654:    } else { //Added block
    #####: 9655:    if (match_words) {
    #####: 9656:      try = beg;
        -: 9657:      {
    #####: 9658:      while (1) {
        -: 9659:        while_continue___0: /* CIL Label */ ;
    #####: 9660:        if (len) {
    #####: 9661:          if (! try) {
    #####: 9662:            goto while_break___0;
        -: 9663:          }
    #####: 9664:        } else {
    #####: 9665:          goto while_break___0;
        -: 9666:        }
    #####: 9667:        if ((unsigned long )try > (unsigned long )buf) {
        -: 9668:          {
    #####: 9669:          tmp = __ctype_b_loc();
        -: 9670:          }
    #####: 9671:          if ((int const   )*(*tmp + (int )((unsigned char )*(try + -1))) & 8) {
    #####: 9672:            goto while_break___0;
        -: 9673:          } else { //Added block
    #####: 9674:          if ((int )((unsigned char )*(try + -1)) == 95) {
    #####: 9675:            goto while_break___0;
        -: 9676:          }
        -: 9677:          }
    #####: 9678:        }
    #####: 9679:        if ((unsigned long )(try + len) < (unsigned long )(buf + size)) {
        -: 9680:          {
    #####: 9681:          tmp___0 = __ctype_b_loc();
        -: 9682:          }
    #####: 9683:          if ((int const   )*(*tmp___0 + (int )((unsigned char )*(try + len))) & 8) {
        -: 9684:            {
    #####: 9685:            len --;
    #####: 9686:            try = kwsexec(kwset, beg, len, & kwsmatch);
    #####: 9687:            len = kwsmatch.size[0];
        -: 9688:            }
    #####: 9689:          } else { //Added block
    #####: 9690:          if ((int )((unsigned char )*(try + len)) == 95) {
        -: 9691:            {
    #####: 9692:            len --;
    #####: 9693:            try = kwsexec(kwset, beg, len, & kwsmatch);
    #####: 9694:            len = kwsmatch.size[0];
        -: 9695:            }
    #####: 9696:          } else {
    #####: 9697:            goto success;
        -: 9698:          }
        -: 9699:          }
    #####: 9700:        } else {
    #####: 9701:          goto success;
        -: 9702:        }
        -: 9703:      }
        -: 9704:      while_break___0: /* CIL Label */ ;
        -: 9705:      }
    #####: 9706:    } else {
    #####: 9707:      goto success;
        -: 9708:    }
        -: 9709:    }
        -: 9710:    __Cont: 
    #####: 9711:    beg ++;
        -: 9712:  }
        -: 9713:  while_break: /* CIL Label */ ;
        -: 9714:  }
    #####: 9715:  return ((char *)0);
        -: 9716:  success: 
        -: 9717:  {
    #####: 9718:  tmp___1 = memchr((void const   *)(beg + len), (int )eol, (size_t )((buf + size) - (beg + len)));
    #####: 9719:  end = (char *)tmp___1;
        -: 9720:  }
    #####: 9721:  if ((unsigned long )end != (unsigned long )((char *)0)) {
    #####: 9722:    end ++;
    #####: 9723:  } else {
    #####: 9724:    end = buf + size;
        -: 9725:  }
    #####: 9726:  *endp = end;
        -: 9727:  {
    #####: 9728:  while (1) {
        -: 9729:    while_continue___1: /* CIL Label */ ;
    #####: 9730:    if ((unsigned long )beg > (unsigned long )buf) {
    #####: 9731:      if (! ((int )*(beg + -1) != 10)) {
    #####: 9732:        goto while_break___1;
        -: 9733:      }
    #####: 9734:    } else {
    #####: 9735:      goto while_break___1;
        -: 9736:    }
    #####: 9737:    beg --;
        -: 9738:  }
        -: 9739:  while_break___1: /* CIL Label */ ;
        -: 9740:  }
    #####: 9741:  return (beg);
        -: 9742:}
    #####: 9743:}
        -: 9744: __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2), __leaf__)) stpcpy)(char * __restrict  dest ,
        -: 9745:                                                                                          char const   * __restrict  src ) ;
    #####: 9746:char *( __attribute__((__nonnull__(1,2), __leaf__)) stpcpy)(char * __restrict  dest ,
        -: 9747:                                                            char const   * __restrict  src ) 
        -: 9748:{ 
        -: 9749:  register char *d ;
        -: 9750:  register char const   *s ;
        -: 9751:  char *tmp ;
        -: 9752:  char const   *tmp___0 ;
        -: 9753:
        -: 9754:  {
    #####: 9755:  d = (char *)dest;
    #####: 9756:  s = (char const   *)src;
        -: 9757:  {
    #####: 9758:  while (1) {
        -: 9759:    while_continue: /* CIL Label */ ;
    #####: 9760:    tmp = d;
    #####: 9761:    d ++;
    #####: 9762:    *tmp = (char )*s;
    #####: 9763:    tmp___0 = s;
    #####: 9764:    s ++;
    #####: 9765:    if (! ((int const   )*tmp___0 != 0)) {
    #####: 9766:      goto while_break;
        -: 9767:    }
        -: 9768:  }
        -: 9769:  while_break: /* CIL Label */ ;
        -: 9770:  }
    #####: 9771:  return (d - 1);
        -: 9772:}
        -: 9773:}
        -: 9774:static char re_syntax_table[256]  ;
        -: 9775:static void init_syntax_once(void) ;
        -: 9776:static int done  =    0;
        1: 9777:static void init_syntax_once(void) 
        -: 9778:{ 
        -: 9779:  register int c ;
        -: 9780:  unsigned short const   **tmp ;
        -: 9781:
        -: 9782:  {
        1: 9783:  if (done) {
    #####: 9784:    return;
        -: 9785:  }
        -: 9786:  {
        1: 9787:  memset((void *)(re_syntax_table), '\000', sizeof(re_syntax_table));
        1: 9788:  c = 0;
        -: 9789:  }
        -: 9790:  {
      257: 9791:  while (1) {
        -: 9792:    while_continue: /* CIL Label */ ;
      257: 9793:    if (! (c < 256)) {
        1: 9794:      goto while_break;
        -: 9795:    }
        -: 9796:    {
      256: 9797:    tmp = __ctype_b_loc();
        -: 9798:    }
      256: 9799:    if ((int const   )*(*tmp + c) & 8) {
       62: 9800:      re_syntax_table[c] = (char)1;
       62: 9801:    }
      256: 9802:    c ++;
        -: 9803:  }
        -: 9804:  while_break: /* CIL Label */ ;
        -: 9805:  }
        1: 9806:  re_syntax_table['_'] = (char)1;
        1: 9807:  done = 1;
        1: 9808:  return;
        -: 9809:}
        1: 9810:}
        -: 9811:static int re_match_2_internal(struct re_pattern_buffer *bufp , char const   *string1 ,
        -: 9812:                               int size1 , char const   *string2 , int size2 , int pos ,
        -: 9813:                               struct re_registers *regs___0 , int stop ) ;
        1: 9814:reg_syntax_t re_set_syntax(reg_syntax_t syntax ) 
        -: 9815:{ 
        -: 9816:  reg_syntax_t ret ;
        -: 9817:
        -: 9818:  {
        1: 9819:  ret = re_syntax_options;
        1: 9820:  re_syntax_options = syntax;
        1: 9821:  return (ret);
        -: 9822:}
        -: 9823:}
        -: 9824:static char const   re_error_msgid[369]  = 
        -: 9825:  {      (char const   )'S',      (char const   )'u',      (char const   )'c',      (char const   )'c', 
        -: 9826:        (char const   )'e',      (char const   )'s',      (char const   )'s',      (char const   )'\000', 
        -: 9827:        (char const   )'N',      (char const   )'o',      (char const   )' ',      (char const   )'m', 
        -: 9828:        (char const   )'a',      (char const   )'t',      (char const   )'c',      (char const   )'h', 
        -: 9829:        (char const   )'\000',      (char const   )'I',      (char const   )'n',      (char const   )'v', 
        -: 9830:        (char const   )'a',      (char const   )'l',      (char const   )'i',      (char const   )'d', 
        -: 9831:        (char const   )' ',      (char const   )'r',      (char const   )'e',      (char const   )'g', 
        -: 9832:        (char const   )'u',      (char const   )'l',      (char const   )'a',      (char const   )'r', 
        -: 9833:        (char const   )' ',      (char const   )'e',      (char const   )'x',      (char const   )'p', 
        -: 9834:        (char const   )'r',      (char const   )'e',      (char const   )'s',      (char const   )'s', 
        -: 9835:        (char const   )'i',      (char const   )'o',      (char const   )'n',      (char const   )'\000', 
        -: 9836:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -: 9837:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -: 9838:        (char const   )'c',      (char const   )'o',      (char const   )'l',      (char const   )'l', 
        -: 9839:        (char const   )'a',      (char const   )'t',      (char const   )'i',      (char const   )'o', 
        -: 9840:        (char const   )'n',      (char const   )' ',      (char const   )'c',      (char const   )'h', 
        -: 9841:        (char const   )'a',      (char const   )'r',      (char const   )'a',      (char const   )'c', 
        -: 9842:        (char const   )'t',      (char const   )'e',      (char const   )'r',      (char const   )'\000', 
        -: 9843:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -: 9844:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -: 9845:        (char const   )'c',      (char const   )'h',      (char const   )'a',      (char const   )'r', 
        -: 9846:        (char const   )'a',      (char const   )'c',      (char const   )'t',      (char const   )'e', 
        -: 9847:        (char const   )'r',      (char const   )' ',      (char const   )'c',      (char const   )'l', 
        -: 9848:        (char const   )'a',      (char const   )'s',      (char const   )'s',      (char const   )' ', 
        -: 9849:        (char const   )'n',      (char const   )'a',      (char const   )'m',      (char const   )'e', 
        -: 9850:        (char const   )'\000',      (char const   )'T',      (char const   )'r',      (char const   )'a', 
        -: 9851:        (char const   )'i',      (char const   )'l',      (char const   )'i',      (char const   )'n', 
        -: 9852:        (char const   )'g',      (char const   )' ',      (char const   )'b',      (char const   )'a', 
        -: 9853:        (char const   )'c',      (char const   )'k',      (char const   )'s',      (char const   )'l', 
        -: 9854:        (char const   )'a',      (char const   )'s',      (char const   )'h',      (char const   )'\000', 
        -: 9855:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -: 9856:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -: 9857:        (char const   )'b',      (char const   )'a',      (char const   )'c',      (char const   )'k', 
        -: 9858:        (char const   )' ',      (char const   )'r',      (char const   )'e',      (char const   )'f', 
        -: 9859:        (char const   )'e',      (char const   )'r',      (char const   )'e',      (char const   )'n', 
        -: 9860:        (char const   )'c',      (char const   )'e',      (char const   )'\000',      (char const   )'U', 
        -: 9861:        (char const   )'n',      (char const   )'m',      (char const   )'a',      (char const   )'t', 
        -: 9862:        (char const   )'c',      (char const   )'h',      (char const   )'e',      (char const   )'d', 
        -: 9863:        (char const   )' ',      (char const   )'[',      (char const   )' ',      (char const   )'o', 
        -: 9864:        (char const   )'r',      (char const   )' ',      (char const   )'[',      (char const   )'^', 
        -: 9865:        (char const   )'\000',      (char const   )'U',      (char const   )'n',      (char const   )'m', 
        -: 9866:        (char const   )'a',      (char const   )'t',      (char const   )'c',      (char const   )'h', 
        -: 9867:        (char const   )'e',      (char const   )'d',      (char const   )' ',      (char const   )'(', 
        -: 9868:        (char const   )' ',      (char const   )'o',      (char const   )'r',      (char const   )' ', 
        -: 9869:        (char const   )'\\',      (char const   )'(',      (char const   )'\000',      (char const   )'U', 
        -: 9870:        (char const   )'n',      (char const   )'m',      (char const   )'a',      (char const   )'t', 
        -: 9871:        (char const   )'c',      (char const   )'h',      (char const   )'e',      (char const   )'d', 
        -: 9872:        (char const   )' ',      (char const   )'\\',      (char const   )'{',      (char const   )'\000', 
        -: 9873:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -: 9874:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -: 9875:        (char const   )'c',      (char const   )'o',      (char const   )'n',      (char const   )'t', 
        -: 9876:        (char const   )'e',      (char const   )'n',      (char const   )'t',      (char const   )' ', 
        -: 9877:        (char const   )'o',      (char const   )'f',      (char const   )' ',      (char const   )'\\', 
        -: 9878:        (char const   )'{',      (char const   )'\\',      (char const   )'}',      (char const   )'\000', 
        -: 9879:        (char const   )'I',      (char const   )'n',      (char const   )'v',      (char const   )'a', 
        -: 9880:        (char const   )'l',      (char const   )'i',      (char const   )'d',      (char const   )' ', 
        -: 9881:        (char const   )'r',      (char const   )'a',      (char const   )'n',      (char const   )'g', 
        -: 9882:        (char const   )'e',      (char const   )' ',      (char const   )'e',      (char const   )'n', 
        -: 9883:        (char const   )'d',      (char const   )'\000',      (char const   )'M',      (char const   )'e', 
        -: 9884:        (char const   )'m',      (char const   )'o',      (char const   )'r',      (char const   )'y', 
        -: 9885:        (char const   )' ',      (char const   )'e',      (char const   )'x',      (char const   )'h', 
        -: 9886:        (char const   )'a',      (char const   )'u',      (char const   )'s',      (char const   )'t', 
        -: 9887:        (char const   )'e',      (char const   )'d',      (char const   )'\000',      (char const   )'I', 
        -: 9888:        (char const   )'n',      (char const   )'v',      (char const   )'a',      (char const   )'l', 
        -: 9889:        (char const   )'i',      (char const   )'d',      (char const   )' ',      (char const   )'p', 
        -: 9890:        (char const   )'r',      (char const   )'e',      (char const   )'c',      (char const   )'e', 
        -: 9891:        (char const   )'d',      (char const   )'i',      (char const   )'n',      (char const   )'g', 
        -: 9892:        (char const   )' ',      (char const   )'r',      (char const   )'e',      (char const   )'g', 
        -: 9893:        (char const   )'u',      (char const   )'l',      (char const   )'a',      (char const   )'r', 
        -: 9894:        (char const   )' ',      (char const   )'e',      (char const   )'x',      (char const   )'p', 
        -: 9895:        (char const   )'r',      (char const   )'e',      (char const   )'s',      (char const   )'s', 
        -: 9896:        (char const   )'i',      (char const   )'o',      (char const   )'n',      (char const   )'\000', 
        -: 9897:        (char const   )'P',      (char const   )'r',      (char const   )'e',      (char const   )'m', 
        -: 9898:        (char const   )'a',      (char const   )'t',      (char const   )'u',      (char const   )'r', 
        -: 9899:        (char const   )'e',      (char const   )' ',      (char const   )'e',      (char const   )'n', 
        -: 9900:        (char const   )'d',      (char const   )' ',      (char const   )'o',      (char const   )'f', 
        -: 9901:        (char const   )' ',      (char const   )'r',      (char const   )'e',      (char const   )'g', 
        -: 9902:        (char const   )'u',      (char const   )'l',      (char const   )'a',      (char const   )'r', 
        -: 9903:        (char const   )' ',      (char const   )'e',      (char const   )'x',      (char const   )'p', 
        -: 9904:        (char const   )'r',      (char const   )'e',      (char const   )'s',      (char const   )'s', 
        -: 9905:        (char const   )'i',      (char const   )'o',      (char const   )'n',      (char const   )'\000', 
        -: 9906:        (char const   )'R',      (char const   )'e',      (char const   )'g',      (char const   )'u', 
        -: 9907:        (char const   )'l',      (char const   )'a',      (char const   )'r',      (char const   )' ', 
        -: 9908:        (char const   )'e',      (char const   )'x',      (char const   )'p',      (char const   )'r', 
        -: 9909:        (char const   )'e',      (char const   )'s',      (char const   )'s',      (char const   )'i', 
        -: 9910:        (char const   )'o',      (char const   )'n',      (char const   )' ',      (char const   )'t', 
        -: 9911:        (char const   )'o',      (char const   )'o',      (char const   )' ',      (char const   )'b', 
        -: 9912:        (char const   )'i',      (char const   )'g',      (char const   )'\000',      (char const   )'U', 
        -: 9913:        (char const   )'n',      (char const   )'m',      (char const   )'a',      (char const   )'t', 
        -: 9914:        (char const   )'c',      (char const   )'h',      (char const   )'e',      (char const   )'d', 
        -: 9915:        (char const   )' ',      (char const   )')',      (char const   )' ',      (char const   )'o', 
        -: 9916:        (char const   )'r',      (char const   )' ',      (char const   )'\\',      (char const   )')', 
        -: 9917:        (char const   )'\000'};
        -: 9918:static size_t const   re_error_msgid_idx[17]  = 
        -: 9919:  {      (size_t const   )0,      (size_t const   )sizeof("Success"),      (size_t const   )(sizeof("Success") + sizeof("No match")),      (size_t const   )((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")), 
        -: 9920:        (size_t const   )(((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")),      (size_t const   )((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")),      (size_t const   )(((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")),      (size_t const   )((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")), 
        -: 9921:        (size_t const   )(((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")),      (size_t const   )((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")),      (size_t const   )(((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")),      (size_t const   )((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")), 
        -: 9922:        (size_t const   )(((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")),      (size_t const   )((((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")) + sizeof("Memory exhausted")),      (size_t const   )(((((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")) + sizeof("Memory exhausted")) + sizeof("Invalid preceding regular expression")),      (size_t const   )((((((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")) + sizeof("Memory exhausted")) + sizeof("Invalid preceding regular expression")) + sizeof("Premature end of regular expression")), 
        -: 9923:        (size_t const   )(((((((((((((((sizeof("Success") + sizeof("No match")) + sizeof("Invalid regular expression")) + sizeof("Invalid collation character")) + sizeof("Invalid character class name")) + sizeof("Trailing backslash")) + sizeof("Invalid back reference")) + sizeof("Unmatched [ or [^")) + sizeof("Unmatched ( or \\(")) + sizeof("Unmatched \\{")) + sizeof("Invalid content of \\{\\}")) + sizeof("Invalid range end")) + sizeof("Memory exhausted")) + sizeof("Invalid preceding regular expression")) + sizeof("Premature end of regular expression")) + sizeof("Regular expression too big"))};
        -: 9924:int re_max_failures  =    20000;
        -: 9925:static char reg_unset_dummy  ;
        -: 9926:static reg_errcode_t regex_compile(char const   *pattern , size_t size , reg_syntax_t syntax ,
        -: 9927:                                   struct re_pattern_buffer *bufp ) ;
        -: 9928:static void store_op1(re_opcode_t op , unsigned char *loc , int arg ) ;
        -: 9929:static void store_op2(re_opcode_t op , unsigned char *loc , int arg1 , int arg2 ) ;
        -: 9930:static void insert_op1(re_opcode_t op , unsigned char *loc , int arg , unsigned char *end ) ;
        -: 9931:static void insert_op2(re_opcode_t op , unsigned char *loc , int arg1 , int arg2 ,
        -: 9932:                       unsigned char *end ) ;
        -: 9933:static boolean at_begline_loc_p(char const   *pattern , char const   *p , reg_syntax_t syntax ) ;
        -: 9934:static boolean at_endline_loc_p(char const   *p , char const   *pend , reg_syntax_t syntax ) ;
        -: 9935:static reg_errcode_t compile_range(char const   **p_ptr , char const   *pend , char *translate ,
        -: 9936:                                   reg_syntax_t syntax , unsigned char *b ) ;
        -: 9937:static boolean group_in_compile_stack(compile_stack_type compile_stack , regnum_t regnum ) ;
        1: 9938:static reg_errcode_t regex_compile(char const   *pattern , size_t size , reg_syntax_t syntax ,
        -: 9939:                                   struct re_pattern_buffer *bufp ) 
        -: 9940:{ 
        -: 9941:  register unsigned char c ;
        -: 9942:  register unsigned char c1 ;
        -: 9943:  char const   *p1 ;
        -: 9944:  register unsigned char *b ;
        -: 9945:  compile_stack_type compile_stack ;
        -: 9946:  char const   *p ;
        -: 9947:  char const   *pend ;
        -: 9948:  char *translate ;
        -: 9949:  unsigned char *pending_exact ;
        -: 9950:  unsigned char *laststart___0 ;
        -: 9951:  unsigned char *begalt ;
        -: 9952:  char const   *beg_interval ;
        -: 9953:  unsigned char *fixup_alt_jump ;
        -: 9954:  regnum_t regnum ;
        -: 9955:  char *tmp ;
        -: 9956:  unsigned int tmp___0 ;
        -: 9957:  void *tmp___1 ;
        -: 9958:  char *tmp___2 ;
        -: 9959:  char const   *tmp___3 ;
        -: 9960:  unsigned char *old_buffer ;
        -: 9961:  void *tmp___4 ;
        -: 9962:  unsigned char *tmp___5 ;
        -: 9963:  boolean tmp___6 ;
        -: 9964:  unsigned char *old_buffer___0 ;
        -: 9965:  void *tmp___7 ;
        -: 9966:  unsigned char *tmp___8 ;
        -: 9967:  boolean tmp___9 ;
        -: 9968:  boolean keep_string_p ;
        -: 9969:  char zero_times_ok ;
        -: 9970:  char many_times_ok ;
        -: 9971:  char const   *tmp___10 ;
        -: 9972:  char const   *tmp___11 ;
        -: 9973:  unsigned char *old_buffer___1 ;
        -: 9974:  void *tmp___12 ;
        -: 9975:  int tmp___13 ;
        -: 9976:  int tmp___14 ;
        -: 9977:  int tmp___15 ;
        -: 9978:  int tmp___16 ;
        -: 9979:  unsigned char *old_buffer___2 ;
        -: 9980:  void *tmp___17 ;
        -: 9981:  int tmp___18 ;
        -: 9982:  unsigned char *old_buffer___3 ;
        -: 9983:  void *tmp___19 ;
        -: 9984:  unsigned char *old_buffer___4 ;
        -: 9985:  void *tmp___20 ;
        -: 9986:  unsigned char *tmp___21 ;
        -: 9987:  boolean had_char_class ;
        -: 9988:  unsigned char *old_buffer___5 ;
        -: 9989:  void *tmp___22 ;
        -: 9990:  unsigned char *old_buffer___6 ;
        -: 9991:  void *tmp___23 ;
        -: 9992:  unsigned char *tmp___24 ;
        -: 9993:  int tmp___25 ;
        -: 9994:  unsigned char *old_buffer___7 ;
        -: 9995:  void *tmp___26 ;
        -: 9996:  unsigned char *tmp___27 ;
        -: 9997:  char const   *tmp___28 ;
        -: 9998:  char const   *tmp___29 ;
        -: 9999:  reg_errcode_t ret ;
        -:10000:  reg_errcode_t tmp___30 ;
        -:10001:  reg_errcode_t ret___0 ;
        -:10002:  char const   *tmp___31 ;
        -:10003:  char str[7] ;
        -:10004:  char const   *tmp___32 ;
        -:10005:  char const   *tmp___33 ;
        -:10006:  unsigned char tmp___34 ;
        -:10007:  int ch ;
        -:10008:  boolean is_alnum___0 ;
        -:10009:  int tmp___35 ;
        -:10010:  boolean is_alpha___0 ;
        -:10011:  int tmp___36 ;
        -:10012:  boolean is_blank___0 ;
        -:10013:  int tmp___37 ;
        -:10014:  boolean is_cntrl___0 ;
        -:10015:  int tmp___38 ;
        -:10016:  boolean is_digit___0 ;
        -:10017:  int tmp___39 ;
        -:10018:  boolean is_graph___0 ;
        -:10019:  int tmp___40 ;
        -:10020:  boolean is_lower___0 ;
        -:10021:  int tmp___41 ;
        -:10022:  boolean is_print___0 ;
        -:10023:  int tmp___42 ;
        -:10024:  boolean is_punct___0 ;
        -:10025:  int tmp___43 ;
        -:10026:  boolean is_space___0 ;
        -:10027:  int tmp___44 ;
        -:10028:  boolean is_upper___0 ;
        -:10029:  int tmp___45 ;
        -:10030:  boolean is_xdigit___0 ;
        -:10031:  int tmp___46 ;
        -:10032:  int tmp___47 ;
        -:10033:  int tmp___48 ;
        -:10034:  int tmp___49 ;
        -:10035:  int tmp___50 ;
        -:10036:  int tmp___51 ;
        -:10037:  int tmp___52 ;
        -:10038:  int tmp___53 ;
        -:10039:  int tmp___54 ;
        -:10040:  int tmp___55 ;
        -:10041:  int tmp___56 ;
        -:10042:  int tmp___57 ;
        -:10043:  int tmp___58 ;
        -:10044:  char const   *tmp___59 ;
        -:10045:  unsigned short const   **tmp___60 ;
        -:10046:  unsigned short const   **tmp___61 ;
        -:10047:  unsigned short const   **tmp___62 ;
        -:10048:  unsigned short const   **tmp___63 ;
        -:10049:  unsigned short const   **tmp___64 ;
        -:10050:  unsigned short const   **tmp___65 ;
        -:10051:  unsigned short const   **tmp___66 ;
        -:10052:  unsigned short const   **tmp___67 ;
        -:10053:  unsigned short const   **tmp___68 ;
        -:10054:  unsigned short const   **tmp___69 ;
        -:10055:  unsigned short const   **tmp___70 ;
        -:10056:  unsigned short const   **tmp___71 ;
        -:10057:  unsigned short const   **tmp___72 ;
        -:10058:  unsigned short const   **tmp___73 ;
        -:10059:  unsigned char tmp___74 ;
        -:10060:  char const   *tmp___75 ;
        -:10061:  void *tmp___76 ;
        -:10062:  unsigned char *old_buffer___8 ;
        -:10063:  void *tmp___77 ;
        -:10064:  unsigned char *tmp___78 ;
        -:10065:  unsigned char *tmp___79 ;
        -:10066:  unsigned char *tmp___80 ;
        -:10067:  unsigned char *old_buffer___9 ;
        -:10068:  void *tmp___81 ;
        -:10069:  unsigned char *tmp___82 ;
        -:10070:  regnum_t this_group_regnum ;
        -:10071:  unsigned char *inner_group_loc ;
        -:10072:  unsigned char *old_buffer___10 ;
        -:10073:  void *tmp___83 ;
        -:10074:  unsigned char *tmp___84 ;
        -:10075:  unsigned char *tmp___85 ;
        -:10076:  unsigned char *tmp___86 ;
        -:10077:  unsigned char *old_buffer___11 ;
        -:10078:  void *tmp___87 ;
        -:10079:  unsigned char *old_buffer___12 ;
        -:10080:  void *tmp___88 ;
        -:10081:  int lower_bound ;
        -:10082:  int upper_bound ;
        -:10083:  char const   *tmp___89 ;
        -:10084:  char const   *tmp___90 ;
        -:10085:  char const   *tmp___91 ;
        -:10086:  char const   *tmp___92 ;
        -:10087:  char const   *tmp___93 ;
        -:10088:  unsigned char *old_buffer___13 ;
        -:10089:  void *tmp___94 ;
        -:10090:  unsigned int nbytes ;
        -:10091:  unsigned char *old_buffer___14 ;
        -:10092:  void *tmp___95 ;
        -:10093:  char const   *tmp___96 ;
        -:10094:  unsigned char *old_buffer___15 ;
        -:10095:  void *tmp___97 ;
        -:10096:  unsigned char *tmp___98 ;
        -:10097:  unsigned char *old_buffer___16 ;
        -:10098:  void *tmp___99 ;
        -:10099:  unsigned char *tmp___100 ;
        -:10100:  unsigned char *old_buffer___17 ;
        -:10101:  void *tmp___101 ;
        -:10102:  unsigned char *tmp___102 ;
        -:10103:  unsigned char *old_buffer___18 ;
        -:10104:  void *tmp___103 ;
        -:10105:  unsigned char *tmp___104 ;
        -:10106:  unsigned char *old_buffer___19 ;
        -:10107:  void *tmp___105 ;
        -:10108:  unsigned char *tmp___106 ;
        -:10109:  unsigned char *old_buffer___20 ;
        -:10110:  void *tmp___107 ;
        -:10111:  unsigned char *tmp___108 ;
        -:10112:  unsigned char *old_buffer___21 ;
        -:10113:  void *tmp___109 ;
        -:10114:  unsigned char *tmp___110 ;
        -:10115:  unsigned char *old_buffer___22 ;
        -:10116:  void *tmp___111 ;
        -:10117:  unsigned char *tmp___112 ;
        -:10118:  boolean tmp___113 ;
        -:10119:  unsigned char *old_buffer___23 ;
        -:10120:  void *tmp___114 ;
        -:10121:  unsigned char *tmp___115 ;
        -:10122:  unsigned char *tmp___116 ;
        -:10123:  unsigned char *old_buffer___24 ;
        -:10124:  void *tmp___117 ;
        -:10125:  unsigned char *tmp___118 ;
        -:10126:  unsigned char *tmp___119 ;
        -:10127:  int tmp___120 ;
        -:10128:  int tmp___121 ;
        -:10129:  int tmp___122 ;
        -:10130:  int tmp___123 ;
        -:10131:  int tmp___124 ;
        -:10132:  unsigned char *old_buffer___25 ;
        -:10133:  void *tmp___125 ;
        -:10134:  unsigned char *tmp___126 ;
        -:10135:  unsigned char *old_buffer___26 ;
        -:10136:  void *tmp___127 ;
        -:10137:  unsigned char *tmp___128 ;
        -:10138:
        -:10139:  {
        -:10140:  {
        1:10141:  p = pattern;
        1:10142:  pend = pattern + size;
        1:10143:  translate = bufp->translate;
        1:10144:  pending_exact = (unsigned char *)0;
        1:10145:  laststart___0 = (unsigned char *)0;
        1:10146:  fixup_alt_jump = (unsigned char *)0;
        1:10147:  regnum = (regnum_t )0;
        1:10148:  tmp = xmalloc(32UL * sizeof(compile_stack_elt_t ));
        1:10149:  compile_stack.stack = (compile_stack_elt_t *)tmp;
        -:10150:  }
        1:10151:  if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
    #####:10152:    return ((reg_errcode_t )12);
        -:10153:  }
        -:10154:  {
        1:10155:  compile_stack.size = 32U;
        1:10156:  compile_stack.avail = 0U;
        1:10157:  bufp->syntax = syntax;
        1:10158:  bufp->fastmap_accurate = 0U;
        1:10159:  tmp___0 = 0U;
        1:10160:  bufp->not_eol = tmp___0;
        1:10161:  bufp->not_bol = tmp___0;
        1:10162:  bufp->used = 0UL;
        1:10163:  bufp->re_nsub = (size_t )0;
        1:10164:  init_syntax_once();
        -:10165:  }
        1:10166:  if (bufp->allocated == 0UL) {
        1:10167:    if (bufp->buffer) {
        -:10168:      {
    #####:10169:      tmp___1 = realloc((void *)bufp->buffer, 32UL * sizeof(unsigned char ));
    #####:10170:      bufp->buffer = (unsigned char *)tmp___1;
        -:10171:      }
    #####:10172:    } else {
        -:10173:      {
        1:10174:      tmp___2 = xmalloc(32UL * sizeof(unsigned char ));
        1:10175:      bufp->buffer = (unsigned char *)tmp___2;
        -:10176:      }
        -:10177:    }
        1:10178:    if (! bufp->buffer) {
        -:10179:      {
    #####:10180:      free((void *)compile_stack.stack);
        -:10181:      }
    #####:10182:      return ((reg_errcode_t )12);
        -:10183:    }
        1:10184:    bufp->allocated = 32UL;
        1:10185:  }
        1:10186:  b = bufp->buffer;
        1:10187:  begalt = b;
        -:10188:  {
       16:10189:  while (1) {
        -:10190:    while_continue: /* CIL Label */ ;
       16:10191:    if (! ((unsigned long )p != (unsigned long )pend)) {
        1:10192:      goto while_break;
        -:10193:    }
        -:10194:    {
       15:10195:    while (1) {
        -:10196:      while_continue___0: /* CIL Label */ ;
       15:10197:      if ((unsigned long )p == (unsigned long )pend) {
    #####:10198:        return ((reg_errcode_t )14);
        -:10199:      }
       15:10200:      tmp___3 = p;
       15:10201:      p ++;
       15:10202:      c = (unsigned char )*tmp___3;
       15:10203:      if (translate) {
    #####:10204:        c = (unsigned char )*(translate + (int )c);
    #####:10205:      }
       15:10206:      goto while_break___0;
        -:10207:    }
        -:10208:    while_break___0: /* CIL Label */ ;
        -:10209:    }
        -:10210:    {
       15:10211:    if ((int )c == 94) {
    #####:10212:      goto case_94;
        -:10213:    }
       15:10214:    if ((int )c == 36) {
    #####:10215:      goto case_36;
        -:10216:    }
       15:10217:    if ((int )c == 43) {
    #####:10218:      goto case_43;
        -:10219:    }
       15:10220:    if ((int )c == 63) {
    #####:10221:      goto case_43;
        -:10222:    }
       15:10223:    if ((int )c == 42) {
    #####:10224:      goto handle_plus;
        -:10225:    }
       15:10226:    if ((int )c == 46) {
        1:10227:      goto case_46;
        -:10228:    }
       14:10229:    if ((int )c == 91) {
    #####:10230:      goto case_91;
        -:10231:    }
       14:10232:    if ((int )c == 40) {
    #####:10233:      goto case_40;
        -:10234:    }
       14:10235:    if ((int )c == 41) {
    #####:10236:      goto case_41;
        -:10237:    }
       14:10238:    if ((int )c == 10) {
    #####:10239:      goto case_10;
        -:10240:    }
       14:10241:    if ((int )c == 124) {
        1:10242:      goto case_124;
        -:10243:    }
       13:10244:    if ((int )c == 123) {
        1:10245:      goto case_123;
        -:10246:    }
       12:10247:    if ((int )c == 92) {
    #####:10248:      goto case_92;
        -:10249:    }
       12:10250:    goto normal_char;
        -:10251:    case_94: /* CIL Label */ 
    #####:10252:    if ((unsigned long )p == (unsigned long )(pattern + 1)) {
    #####:10253:      goto _L;
        -:10254:    } else { //Added block
    #####:10255:    if (syntax & (((1UL << 1) << 1) << 1)) {
    #####:10256:      goto _L;
        -:10257:    } else {
        -:10258:      {
    #####:10259:      tmp___6 = at_begline_loc_p(pattern, p, syntax);
        -:10260:      }
    #####:10261:      if (tmp___6) {
        -:10262:        _L: 
        -:10263:        {
    #####:10264:        while (1) {
        -:10265:          while_continue___1: /* CIL Label */ ;
        -:10266:          {
    #####:10267:          while (1) {
        -:10268:            while_continue___2: /* CIL Label */ ;
    #####:10269:            if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:10270:              goto while_break___2;
        -:10271:            }
        -:10272:            {
    #####:10273:            while (1) {
        -:10274:              while_continue___3: /* CIL Label */ ;
    #####:10275:              old_buffer = bufp->buffer;
    #####:10276:              if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10277:                return ((reg_errcode_t )15);
        -:10278:              }
    #####:10279:              bufp->allocated <<= 1;
    #####:10280:              if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10281:                bufp->allocated = (unsigned long )(1L << 16);
    #####:10282:              }
        -:10283:              {
    #####:10284:              tmp___4 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10285:              bufp->buffer = (unsigned char *)tmp___4;
        -:10286:              }
    #####:10287:              if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10288:                return ((reg_errcode_t )12);
        -:10289:              }
    #####:10290:              if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
    #####:10291:                b = bufp->buffer + (b - old_buffer);
    #####:10292:                begalt = bufp->buffer + (begalt - old_buffer);
    #####:10293:                if (fixup_alt_jump) {
    #####:10294:                  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
    #####:10295:                }
    #####:10296:                if (laststart___0) {
    #####:10297:                  laststart___0 = bufp->buffer + (laststart___0 - old_buffer);
    #####:10298:                }
    #####:10299:                if (pending_exact) {
    #####:10300:                  pending_exact = bufp->buffer + (pending_exact - old_buffer);
    #####:10301:                }
    #####:10302:              }
    #####:10303:              goto while_break___3;
        -:10304:            }
        -:10305:            while_break___3: /* CIL Label */ ;
        -:10306:            }
        -:10307:          }
        -:10308:          while_break___2: /* CIL Label */ ;
        -:10309:          }
    #####:10310:          tmp___5 = b;
    #####:10311:          b ++;
    #####:10312:          *tmp___5 = (unsigned char)9;
    #####:10313:          goto while_break___1;
        -:10314:        }
        -:10315:        while_break___1: /* CIL Label */ ;
        -:10316:        }
    #####:10317:      } else {
    #####:10318:        goto normal_char;
        -:10319:      }
        -:10320:    }
        -:10321:    }
    #####:10322:    goto switch_break;
        -:10323:    case_36: /* CIL Label */ 
    #####:10324:    if ((unsigned long )p == (unsigned long )pend) {
    #####:10325:      goto _L___0;
        -:10326:    } else { //Added block
    #####:10327:    if (syntax & (((1UL << 1) << 1) << 1)) {
    #####:10328:      goto _L___0;
        -:10329:    } else {
        -:10330:      {
    #####:10331:      tmp___9 = at_endline_loc_p(p, pend, syntax);
        -:10332:      }
    #####:10333:      if (tmp___9) {
        -:10334:        _L___0: 
        -:10335:        {
    #####:10336:        while (1) {
        -:10337:          while_continue___4: /* CIL Label */ ;
        -:10338:          {
    #####:10339:          while (1) {
        -:10340:            while_continue___5: /* CIL Label */ ;
    #####:10341:            if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:10342:              goto while_break___5;
        -:10343:            }
        -:10344:            {
    #####:10345:            while (1) {
        -:10346:              while_continue___6: /* CIL Label */ ;
    #####:10347:              old_buffer___0 = bufp->buffer;
    #####:10348:              if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10349:                return ((reg_errcode_t )15);
        -:10350:              }
    #####:10351:              bufp->allocated <<= 1;
    #####:10352:              if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10353:                bufp->allocated = (unsigned long )(1L << 16);
    #####:10354:              }
        -:10355:              {
    #####:10356:              tmp___7 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10357:              bufp->buffer = (unsigned char *)tmp___7;
        -:10358:              }
    #####:10359:              if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10360:                return ((reg_errcode_t )12);
        -:10361:              }
    #####:10362:              if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
    #####:10363:                b = bufp->buffer + (b - old_buffer___0);
    #####:10364:                begalt = bufp->buffer + (begalt - old_buffer___0);
    #####:10365:                if (fixup_alt_jump) {
    #####:10366:                  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
    #####:10367:                }
    #####:10368:                if (laststart___0) {
    #####:10369:                  laststart___0 = bufp->buffer + (laststart___0 - old_buffer___0);
    #####:10370:                }
    #####:10371:                if (pending_exact) {
    #####:10372:                  pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
    #####:10373:                }
    #####:10374:              }
    #####:10375:              goto while_break___6;
        -:10376:            }
        -:10377:            while_break___6: /* CIL Label */ ;
        -:10378:            }
        -:10379:          }
        -:10380:          while_break___5: /* CIL Label */ ;
        -:10381:          }
    #####:10382:          tmp___8 = b;
    #####:10383:          b ++;
    #####:10384:          *tmp___8 = (unsigned char)10;
    #####:10385:          goto while_break___4;
        -:10386:        }
        -:10387:        while_break___4: /* CIL Label */ ;
        -:10388:        }
    #####:10389:      } else {
    #####:10390:        goto normal_char;
        -:10391:      }
        -:10392:    }
        -:10393:    }
    #####:10394:    goto switch_break;
        -:10395:    case_43: /* CIL Label */ 
        -:10396:    case_63: /* CIL Label */ 
    #####:10397:    if (syntax & (1UL << 1)) {
    #####:10398:      goto normal_char;
        -:10399:    } else { //Added block
    #####:10400:    if (syntax & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:10401:      goto normal_char;
        -:10402:    }
        -:10403:    }
        -:10404:    handle_plus: 
        -:10405:    case_42: /* CIL Label */ 
    #####:10406:    if (! laststart___0) {
    #####:10407:      if (syntax & (((((1UL << 1) << 1) << 1) << 1) << 1)) {
        -:10408:        {
    #####:10409:        free((void *)compile_stack.stack);
        -:10410:        }
    #####:10411:        return ((reg_errcode_t )13);
        -:10412:      } else { //Added block
    #####:10413:      if (! (syntax & ((((1UL << 1) << 1) << 1) << 1))) {
    #####:10414:        goto normal_char;
        -:10415:      }
        -:10416:      }
    #####:10417:    }
    #####:10418:    keep_string_p = (boolean )0;
    #####:10419:    zero_times_ok = (char)0;
    #####:10420:    many_times_ok = (char)0;
        -:10421:    {
    #####:10422:    while (1) {
        -:10423:      while_continue___7: /* CIL Label */ ;
    #####:10424:      zero_times_ok = (char )((int )zero_times_ok | ((int )c != 43));
    #####:10425:      many_times_ok = (char )((int )many_times_ok | ((int )c != 63));
    #####:10426:      if ((unsigned long )p == (unsigned long )pend) {
    #####:10427:        goto while_break___7;
        -:10428:      }
        -:10429:      {
    #####:10430:      while (1) {
        -:10431:        while_continue___8: /* CIL Label */ ;
    #####:10432:        if ((unsigned long )p == (unsigned long )pend) {
    #####:10433:          return ((reg_errcode_t )14);
        -:10434:        }
    #####:10435:        tmp___10 = p;
    #####:10436:        p ++;
    #####:10437:        c = (unsigned char )*tmp___10;
    #####:10438:        if (translate) {
    #####:10439:          c = (unsigned char )*(translate + (int )c);
    #####:10440:        }
    #####:10441:        goto while_break___8;
        -:10442:      }
        -:10443:      while_break___8: /* CIL Label */ ;
        -:10444:      }
    #####:10445:      if (! ((int )c == 42)) {
    #####:10446:        if (! (syntax & (1UL << 1))) {
    #####:10447:          if (! ((int )c == 43)) {
    #####:10448:            if (! ((int )c == 63)) {
    #####:10449:              goto _L___1;
        -:10450:            }
    #####:10451:          }
    #####:10452:        } else { //Added block
        -:10453:        _L___1: 
    #####:10454:        if (syntax & (1UL << 1)) {
    #####:10455:          if ((int )c == 92) {
    #####:10456:            if ((unsigned long )p == (unsigned long )pend) {
        -:10457:              {
    #####:10458:              free((void *)compile_stack.stack);
        -:10459:              }
    #####:10460:              return ((reg_errcode_t )5);
        -:10461:            }
        -:10462:            {
    #####:10463:            while (1) {
        -:10464:              while_continue___9: /* CIL Label */ ;
    #####:10465:              if ((unsigned long )p == (unsigned long )pend) {
    #####:10466:                return ((reg_errcode_t )14);
        -:10467:              }
    #####:10468:              tmp___11 = p;
    #####:10469:              p ++;
    #####:10470:              c1 = (unsigned char )*tmp___11;
    #####:10471:              if (translate) {
    #####:10472:                c1 = (unsigned char )*(translate + (int )c1);
    #####:10473:              }
    #####:10474:              goto while_break___9;
        -:10475:            }
        -:10476:            while_break___9: /* CIL Label */ ;
        -:10477:            }
    #####:10478:            if (! ((int )c1 == 43)) {
    #####:10479:              if (! ((int )c1 == 63)) {
    #####:10480:                p --;
    #####:10481:                p --;
    #####:10482:                goto while_break___7;
        -:10483:              }
    #####:10484:            }
    #####:10485:            c = c1;
    #####:10486:          } else {
    #####:10487:            p --;
    #####:10488:            goto while_break___7;
        -:10489:          }
    #####:10490:        } else {
    #####:10491:          p --;
    #####:10492:          goto while_break___7;
        -:10493:        }
        -:10494:        }
    #####:10495:      }
        -:10496:    }
        -:10497:    while_break___7: /* CIL Label */ ;
        -:10498:    }
    #####:10499:    if (! laststart___0) {
    #####:10500:      goto switch_break;
        -:10501:    }
    #####:10502:    if (many_times_ok) {
        -:10503:      {
    #####:10504:      while (1) {
        -:10505:        while_continue___10: /* CIL Label */ ;
    #####:10506:        if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:10507:          goto while_break___10;
        -:10508:        }
        -:10509:        {
    #####:10510:        while (1) {
        -:10511:          while_continue___11: /* CIL Label */ ;
    #####:10512:          old_buffer___1 = bufp->buffer;
    #####:10513:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10514:            return ((reg_errcode_t )15);
        -:10515:          }
    #####:10516:          bufp->allocated <<= 1;
    #####:10517:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10518:            bufp->allocated = (unsigned long )(1L << 16);
    #####:10519:          }
        -:10520:          {
    #####:10521:          tmp___12 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10522:          bufp->buffer = (unsigned char *)tmp___12;
        -:10523:          }
    #####:10524:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10525:            return ((reg_errcode_t )12);
        -:10526:          }
    #####:10527:          if ((unsigned long )old_buffer___1 != (unsigned long )bufp->buffer) {
    #####:10528:            b = bufp->buffer + (b - old_buffer___1);
    #####:10529:            begalt = bufp->buffer + (begalt - old_buffer___1);
    #####:10530:            if (fixup_alt_jump) {
    #####:10531:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
    #####:10532:            }
    #####:10533:            if (laststart___0) {
    #####:10534:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___1);
    #####:10535:            }
    #####:10536:            if (pending_exact) {
    #####:10537:              pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
    #####:10538:            }
    #####:10539:          }
    #####:10540:          goto while_break___11;
        -:10541:        }
        -:10542:        while_break___11: /* CIL Label */ ;
        -:10543:        }
        -:10544:      }
        -:10545:      while_break___10: /* CIL Label */ ;
        -:10546:      }
    #####:10547:      if (translate) {
    #####:10548:        tmp___13 = (int )*(translate + (int )((unsigned char )*(p - 2)));
    #####:10549:      } else {
    #####:10550:        tmp___13 = (int )*(p - 2);
        -:10551:      }
    #####:10552:      if (translate) {
    #####:10553:        tmp___14 = (int )*(translate + 46);
    #####:10554:      } else {
    #####:10555:        tmp___14 = '.';
        -:10556:      }
    #####:10557:      if (tmp___13 == tmp___14) {
    #####:10558:        if (zero_times_ok) {
    #####:10559:          if ((unsigned long )p < (unsigned long )pend) {
    #####:10560:            if (translate) {
    #####:10561:              tmp___15 = (int )*(translate + (int )((unsigned char )*p));
    #####:10562:            } else {
    #####:10563:              tmp___15 = (int )*p;
        -:10564:            }
    #####:10565:            if (translate) {
    #####:10566:              tmp___16 = (int )*(translate + 10);
    #####:10567:            } else {
    #####:10568:              tmp___16 = '\n';
        -:10569:            }
    #####:10570:            if (tmp___15 == tmp___16) {
    #####:10571:              if (! (syntax & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
        -:10572:                {
    #####:10573:                store_op1((re_opcode_t )13, b, (int )((laststart___0 - b) - 3L));
    #####:10574:                keep_string_p = (boolean )1;
        -:10575:                }
    #####:10576:              } else {
        -:10577:                {
    #####:10578:                store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:10579:                }
        -:10580:              }
    #####:10581:            } else {
        -:10582:              {
    #####:10583:              store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:10584:              }
        -:10585:            }
    #####:10586:          } else {
        -:10587:            {
    #####:10588:            store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:10589:            }
        -:10590:          }
    #####:10591:        } else {
        -:10592:          {
    #####:10593:          store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:10594:          }
        -:10595:        }
    #####:10596:      } else {
        -:10597:        {
    #####:10598:        store_op1((re_opcode_t )18, b, (int )(((laststart___0 - 3) - b) - 3L));
        -:10599:        }
        -:10600:      }
    #####:10601:      b += 3;
    #####:10602:    }
        -:10603:    {
    #####:10604:    while (1) {
        -:10605:      while_continue___12: /* CIL Label */ ;
    #####:10606:      if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:10607:        goto while_break___12;
        -:10608:      }
        -:10609:      {
    #####:10610:      while (1) {
        -:10611:        while_continue___13: /* CIL Label */ ;
    #####:10612:        old_buffer___2 = bufp->buffer;
    #####:10613:        if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10614:          return ((reg_errcode_t )15);
        -:10615:        }
    #####:10616:        bufp->allocated <<= 1;
    #####:10617:        if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10618:          bufp->allocated = (unsigned long )(1L << 16);
    #####:10619:        }
        -:10620:        {
    #####:10621:        tmp___17 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10622:        bufp->buffer = (unsigned char *)tmp___17;
        -:10623:        }
    #####:10624:        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10625:          return ((reg_errcode_t )12);
        -:10626:        }
    #####:10627:        if ((unsigned long )old_buffer___2 != (unsigned long )bufp->buffer) {
    #####:10628:          b = bufp->buffer + (b - old_buffer___2);
    #####:10629:          begalt = bufp->buffer + (begalt - old_buffer___2);
    #####:10630:          if (fixup_alt_jump) {
    #####:10631:            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
    #####:10632:          }
    #####:10633:          if (laststart___0) {
    #####:10634:            laststart___0 = bufp->buffer + (laststart___0 - old_buffer___2);
    #####:10635:          }
    #####:10636:          if (pending_exact) {
    #####:10637:            pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
    #####:10638:          }
    #####:10639:        }
    #####:10640:        goto while_break___13;
        -:10641:      }
        -:10642:      while_break___13: /* CIL Label */ ;
        -:10643:      }
        -:10644:    }
        -:10645:    while_break___12: /* CIL Label */ ;
        -:10646:    }
    #####:10647:    if (keep_string_p) {
    #####:10648:      tmp___18 = 16;
    #####:10649:    } else {
    #####:10650:      tmp___18 = 15;
        -:10651:    }
        -:10652:    {
    #####:10653:    insert_op1((re_opcode_t )tmp___18, laststart___0, (int )(((b + 3) - laststart___0) - 3L),
    #####:10654:               b);
    #####:10655:    pending_exact = (unsigned char *)0;
    #####:10656:    b += 3;
        -:10657:    }
    #####:10658:    if (! zero_times_ok) {
        -:10659:      {
    #####:10660:      while (1) {
        -:10661:        while_continue___14: /* CIL Label */ ;
    #####:10662:        if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:10663:          goto while_break___14;
        -:10664:        }
        -:10665:        {
    #####:10666:        while (1) {
        -:10667:          while_continue___15: /* CIL Label */ ;
    #####:10668:          old_buffer___3 = bufp->buffer;
    #####:10669:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10670:            return ((reg_errcode_t )15);
        -:10671:          }
    #####:10672:          bufp->allocated <<= 1;
    #####:10673:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10674:            bufp->allocated = (unsigned long )(1L << 16);
    #####:10675:          }
        -:10676:          {
    #####:10677:          tmp___19 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10678:          bufp->buffer = (unsigned char *)tmp___19;
        -:10679:          }
    #####:10680:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10681:            return ((reg_errcode_t )12);
        -:10682:          }
    #####:10683:          if ((unsigned long )old_buffer___3 != (unsigned long )bufp->buffer) {
    #####:10684:            b = bufp->buffer + (b - old_buffer___3);
    #####:10685:            begalt = bufp->buffer + (begalt - old_buffer___3);
    #####:10686:            if (fixup_alt_jump) {
    #####:10687:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
    #####:10688:            }
    #####:10689:            if (laststart___0) {
    #####:10690:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___3);
    #####:10691:            }
    #####:10692:            if (pending_exact) {
    #####:10693:              pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
    #####:10694:            }
    #####:10695:          }
    #####:10696:          goto while_break___15;
        -:10697:        }
        -:10698:        while_break___15: /* CIL Label */ ;
        -:10699:        }
        -:10700:      }
        -:10701:      while_break___14: /* CIL Label */ ;
        -:10702:      }
        -:10703:      {
    #####:10704:      insert_op1((re_opcode_t )19, laststart___0, (int )(((laststart___0 + 6) - laststart___0) - 3L),
    #####:10705:                 b);
    #####:10706:      b += 3;
        -:10707:      }
    #####:10708:    }
    #####:10709:    goto switch_break;
        -:10710:    case_46: /* CIL Label */ 
        1:10711:    laststart___0 = b;
        -:10712:    {
        1:10713:    while (1) {
        -:10714:      while_continue___16: /* CIL Label */ ;
        -:10715:      {
        1:10716:      while (1) {
        -:10717:        while_continue___17: /* CIL Label */ ;
        1:10718:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
        1:10719:          goto while_break___17;
        -:10720:        }
        -:10721:        {
    #####:10722:        while (1) {
        -:10723:          while_continue___18: /* CIL Label */ ;
    #####:10724:          old_buffer___4 = bufp->buffer;
    #####:10725:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10726:            return ((reg_errcode_t )15);
        -:10727:          }
    #####:10728:          bufp->allocated <<= 1;
    #####:10729:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10730:            bufp->allocated = (unsigned long )(1L << 16);
    #####:10731:          }
        -:10732:          {
    #####:10733:          tmp___20 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10734:          bufp->buffer = (unsigned char *)tmp___20;
        -:10735:          }
    #####:10736:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10737:            return ((reg_errcode_t )12);
        -:10738:          }
    #####:10739:          if ((unsigned long )old_buffer___4 != (unsigned long )bufp->buffer) {
    #####:10740:            b = bufp->buffer + (b - old_buffer___4);
    #####:10741:            begalt = bufp->buffer + (begalt - old_buffer___4);
    #####:10742:            if (fixup_alt_jump) {
    #####:10743:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
    #####:10744:            }
    #####:10745:            if (laststart___0) {
    #####:10746:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___4);
    #####:10747:            }
    #####:10748:            if (pending_exact) {
    #####:10749:              pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
    #####:10750:            }
    #####:10751:          }
    #####:10752:          goto while_break___18;
        -:10753:        }
        -:10754:        while_break___18: /* CIL Label */ ;
        -:10755:        }
        -:10756:      }
        -:10757:      while_break___17: /* CIL Label */ ;
        -:10758:      }
        1:10759:      tmp___21 = b;
        1:10760:      b ++;
        1:10761:      *tmp___21 = (unsigned char)3;
        1:10762:      goto while_break___16;
        -:10763:    }
        -:10764:    while_break___16: /* CIL Label */ ;
        -:10765:    }
        1:10766:    goto switch_break;
        -:10767:    case_91: /* CIL Label */ 
    #####:10768:    had_char_class = (boolean )0;
    #####:10769:    if ((unsigned long )p == (unsigned long )pend) {
        -:10770:      {
    #####:10771:      free((void *)compile_stack.stack);
        -:10772:      }
    #####:10773:      return ((reg_errcode_t )7);
        -:10774:    }
        -:10775:    {
    #####:10776:    while (1) {
        -:10777:      while_continue___19: /* CIL Label */ ;
    #####:10778:      if (! ((unsigned long )((b - bufp->buffer) + 34L) > bufp->allocated)) {
    #####:10779:        goto while_break___19;
        -:10780:      }
        -:10781:      {
    #####:10782:      while (1) {
        -:10783:        while_continue___20: /* CIL Label */ ;
    #####:10784:        old_buffer___5 = bufp->buffer;
    #####:10785:        if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10786:          return ((reg_errcode_t )15);
        -:10787:        }
    #####:10788:        bufp->allocated <<= 1;
    #####:10789:        if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10790:          bufp->allocated = (unsigned long )(1L << 16);
    #####:10791:        }
        -:10792:        {
    #####:10793:        tmp___22 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10794:        bufp->buffer = (unsigned char *)tmp___22;
        -:10795:        }
    #####:10796:        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10797:          return ((reg_errcode_t )12);
        -:10798:        }
    #####:10799:        if ((unsigned long )old_buffer___5 != (unsigned long )bufp->buffer) {
    #####:10800:          b = bufp->buffer + (b - old_buffer___5);
    #####:10801:          begalt = bufp->buffer + (begalt - old_buffer___5);
    #####:10802:          if (fixup_alt_jump) {
    #####:10803:            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
    #####:10804:          }
    #####:10805:          if (laststart___0) {
    #####:10806:            laststart___0 = bufp->buffer + (laststart___0 - old_buffer___5);
    #####:10807:          }
    #####:10808:          if (pending_exact) {
    #####:10809:            pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
    #####:10810:          }
    #####:10811:        }
    #####:10812:        goto while_break___20;
        -:10813:      }
        -:10814:      while_break___20: /* CIL Label */ ;
        -:10815:      }
        -:10816:    }
        -:10817:    while_break___19: /* CIL Label */ ;
        -:10818:    }
    #####:10819:    laststart___0 = b;
        -:10820:    {
    #####:10821:    while (1) {
        -:10822:      while_continue___21: /* CIL Label */ ;
        -:10823:      {
    #####:10824:      while (1) {
        -:10825:        while_continue___22: /* CIL Label */ ;
    #####:10826:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:10827:          goto while_break___22;
        -:10828:        }
        -:10829:        {
    #####:10830:        while (1) {
        -:10831:          while_continue___23: /* CIL Label */ ;
    #####:10832:          old_buffer___6 = bufp->buffer;
    #####:10833:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10834:            return ((reg_errcode_t )15);
        -:10835:          }
    #####:10836:          bufp->allocated <<= 1;
    #####:10837:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10838:            bufp->allocated = (unsigned long )(1L << 16);
    #####:10839:          }
        -:10840:          {
    #####:10841:          tmp___23 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10842:          bufp->buffer = (unsigned char *)tmp___23;
        -:10843:          }
    #####:10844:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10845:            return ((reg_errcode_t )12);
        -:10846:          }
    #####:10847:          if ((unsigned long )old_buffer___6 != (unsigned long )bufp->buffer) {
    #####:10848:            b = bufp->buffer + (b - old_buffer___6);
    #####:10849:            begalt = bufp->buffer + (begalt - old_buffer___6);
    #####:10850:            if (fixup_alt_jump) {
    #####:10851:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
    #####:10852:            }
    #####:10853:            if (laststart___0) {
    #####:10854:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___6);
    #####:10855:            }
    #####:10856:            if (pending_exact) {
    #####:10857:              pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
    #####:10858:            }
    #####:10859:          }
    #####:10860:          goto while_break___23;
        -:10861:        }
        -:10862:        while_break___23: /* CIL Label */ ;
        -:10863:        }
        -:10864:      }
        -:10865:      while_break___22: /* CIL Label */ ;
        -:10866:      }
    #####:10867:      tmp___24 = b;
    #####:10868:      b ++;
    #####:10869:      if ((int const   )*p == 94) {
    #####:10870:        tmp___25 = 5;
    #####:10871:      } else {
    #####:10872:        tmp___25 = 4;
        -:10873:      }
    #####:10874:      *tmp___24 = (unsigned char )tmp___25;
    #####:10875:      goto while_break___21;
        -:10876:    }
        -:10877:    while_break___21: /* CIL Label */ ;
        -:10878:    }
    #####:10879:    if ((int const   )*p == 94) {
    #####:10880:      p ++;
    #####:10881:    }
    #####:10882:    p1 = p;
        -:10883:    {
    #####:10884:    while (1) {
        -:10885:      while_continue___24: /* CIL Label */ ;
        -:10886:      {
    #####:10887:      while (1) {
        -:10888:        while_continue___25: /* CIL Label */ ;
    #####:10889:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:10890:          goto while_break___25;
        -:10891:        }
        -:10892:        {
    #####:10893:        while (1) {
        -:10894:          while_continue___26: /* CIL Label */ ;
    #####:10895:          old_buffer___7 = bufp->buffer;
    #####:10896:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:10897:            return ((reg_errcode_t )15);
        -:10898:          }
    #####:10899:          bufp->allocated <<= 1;
    #####:10900:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:10901:            bufp->allocated = (unsigned long )(1L << 16);
    #####:10902:          }
        -:10903:          {
    #####:10904:          tmp___26 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:10905:          bufp->buffer = (unsigned char *)tmp___26;
        -:10906:          }
    #####:10907:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:10908:            return ((reg_errcode_t )12);
        -:10909:          }
    #####:10910:          if ((unsigned long )old_buffer___7 != (unsigned long )bufp->buffer) {
    #####:10911:            b = bufp->buffer + (b - old_buffer___7);
    #####:10912:            begalt = bufp->buffer + (begalt - old_buffer___7);
    #####:10913:            if (fixup_alt_jump) {
    #####:10914:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
    #####:10915:            }
    #####:10916:            if (laststart___0) {
    #####:10917:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___7);
    #####:10918:            }
    #####:10919:            if (pending_exact) {
    #####:10920:              pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
    #####:10921:            }
    #####:10922:          }
    #####:10923:          goto while_break___26;
        -:10924:        }
        -:10925:        while_break___26: /* CIL Label */ ;
        -:10926:        }
        -:10927:      }
        -:10928:      while_break___25: /* CIL Label */ ;
        -:10929:      }
    #####:10930:      tmp___27 = b;
    #####:10931:      b ++;
    #####:10932:      *tmp___27 = (unsigned char )((1 << 8) / 8);
    #####:10933:      goto while_break___24;
        -:10934:    }
        -:10935:    while_break___24: /* CIL Label */ ;
        -:10936:    }
        -:10937:    {
    #####:10938:    memset((void *)b, '\000', (size_t )((1 << 8) / 8));
        -:10939:    }
    #####:10940:    if ((unsigned int )((re_opcode_t )*(b + -2)) == 5U) {
    #####:10941:      if (syntax & ((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:10942:        *(b + 1) = (unsigned char )((int )*(b + 1) | (1 << 2));
    #####:10943:      }
    #####:10944:    }
        -:10945:    {
    #####:10946:    while (1) {
        -:10947:      while_continue___27: /* CIL Label */ ;
    #####:10948:      if ((unsigned long )p == (unsigned long )pend) {
        -:10949:        {
    #####:10950:        free((void *)compile_stack.stack);
        -:10951:        }
    #####:10952:        return ((reg_errcode_t )7);
        -:10953:      }
        -:10954:      {
    #####:10955:      while (1) {
        -:10956:        while_continue___28: /* CIL Label */ ;
    #####:10957:        if ((unsigned long )p == (unsigned long )pend) {
    #####:10958:          return ((reg_errcode_t )14);
        -:10959:        }
    #####:10960:        tmp___28 = p;
    #####:10961:        p ++;
    #####:10962:        c = (unsigned char )*tmp___28;
    #####:10963:        if (translate) {
    #####:10964:          c = (unsigned char )*(translate + (int )c);
    #####:10965:        }
    #####:10966:        goto while_break___28;
        -:10967:      }
        -:10968:      while_break___28: /* CIL Label */ ;
        -:10969:      }
    #####:10970:      if (syntax & 1UL) {
    #####:10971:        if ((int )c == 92) {
    #####:10972:          if ((unsigned long )p == (unsigned long )pend) {
        -:10973:            {
    #####:10974:            free((void *)compile_stack.stack);
        -:10975:            }
    #####:10976:            return ((reg_errcode_t )5);
        -:10977:          }
        -:10978:          {
    #####:10979:          while (1) {
        -:10980:            while_continue___29: /* CIL Label */ ;
    #####:10981:            if ((unsigned long )p == (unsigned long )pend) {
    #####:10982:              return ((reg_errcode_t )14);
        -:10983:            }
    #####:10984:            tmp___29 = p;
    #####:10985:            p ++;
    #####:10986:            c1 = (unsigned char )*tmp___29;
    #####:10987:            if (translate) {
    #####:10988:              c1 = (unsigned char )*(translate + (int )c1);
    #####:10989:            }
    #####:10990:            goto while_break___29;
        -:10991:          }
        -:10992:          while_break___29: /* CIL Label */ ;
        -:10993:          }
    #####:10994:          *(b + (int )c1 / 8) = (unsigned char )((int )*(b + (int )c1 / 8) | (1 << (int )c1 % 8));
    #####:10995:          goto __Cont;
        -:10996:        }
    #####:10997:      }
    #####:10998:      if ((int )c == 93) {
    #####:10999:        if ((unsigned long )p != (unsigned long )(p1 + 1)) {
    #####:11000:          goto while_break___27;
        -:11001:        }
    #####:11002:      }
    #####:11003:      if (had_char_class) {
    #####:11004:        if ((int )c == 45) {
    #####:11005:          if ((int const   )*p != 93) {
        -:11006:            {
    #####:11007:            free((void *)compile_stack.stack);
        -:11008:            }
    #####:11009:            return ((reg_errcode_t )11);
        -:11010:          }
    #####:11011:        }
    #####:11012:      }
    #####:11013:      if ((int )c == 45) {
    #####:11014:        if ((unsigned long )(p - 2) >= (unsigned long )pattern) {
    #####:11015:          if ((int const   )*(p + -2) == 91) {
    #####:11016:            goto _L___19;
        -:11017:          } else {
    #####:11018:            goto _L___20;
        -:11019:          }
    #####:11020:        } else { //Added block
        -:11021:        _L___20: 
    #####:11022:        if ((unsigned long )(p - 3) >= (unsigned long )pattern) {
    #####:11023:          if ((int const   )*(p + -3) == 91) {
    #####:11024:            if ((int const   )*(p + -2) == 94) {
    #####:11025:              goto _L___19;
        -:11026:            } else {
    #####:11027:              goto _L___18;
        -:11028:            }
        -:11029:          } else {
    #####:11030:            goto _L___18;
        -:11031:          }
    #####:11032:        } else { //Added block
        -:11033:        _L___18: 
    #####:11034:        if ((int const   )*p != 93) {
        -:11035:          {
    #####:11036:          tmp___30 = compile_range(& p, pend, translate, syntax, b);
    #####:11037:          ret = tmp___30;
        -:11038:          }
    #####:11039:          if ((unsigned int )ret != 0U) {
        -:11040:            {
    #####:11041:            free((void *)compile_stack.stack);
        -:11042:            }
    #####:11043:            return (ret);
        -:11044:          }
    #####:11045:        } else {
    #####:11046:          goto _L___19;
        -:11047:        }
        -:11048:        }
        -:11049:        }
    #####:11050:      } else { //Added block
        -:11051:      _L___19: 
    #####:11052:      if ((int const   )*(p + 0) == 45) {
    #####:11053:        if ((int const   )*(p + 1) != 93) {
        -:11054:          {
    #####:11055:          while (1) {
        -:11056:            while_continue___30: /* CIL Label */ ;
    #####:11057:            if ((unsigned long )p == (unsigned long )pend) {
    #####:11058:              return ((reg_errcode_t )14);
        -:11059:            }
    #####:11060:            tmp___31 = p;
    #####:11061:            p ++;
    #####:11062:            c1 = (unsigned char )*tmp___31;
    #####:11063:            if (translate) {
    #####:11064:              c1 = (unsigned char )*(translate + (int )c1);
    #####:11065:            }
    #####:11066:            goto while_break___30;
        -:11067:          }
        -:11068:          while_break___30: /* CIL Label */ ;
        -:11069:          }
        -:11070:          {
    #####:11071:          ret___0 = compile_range(& p, pend, translate, syntax, b);
        -:11072:          }
    #####:11073:          if ((unsigned int )ret___0 != 0U) {
        -:11074:            {
    #####:11075:            free((void *)compile_stack.stack);
        -:11076:            }
    #####:11077:            return (ret___0);
        -:11078:          }
    #####:11079:        } else {
    #####:11080:          goto _L___14;
        -:11081:        }
    #####:11082:      } else { //Added block
        -:11083:      _L___14: 
    #####:11084:      if (syntax & ((1UL << 1) << 1)) {
    #####:11085:        if ((int )c == 91) {
    #####:11086:          if ((int const   )*p == 58) {
        -:11087:            {
    #####:11088:            while (1) {
        -:11089:              while_continue___31: /* CIL Label */ ;
    #####:11090:              if ((unsigned long )p == (unsigned long )pend) {
    #####:11091:                return ((reg_errcode_t )14);
        -:11092:              }
    #####:11093:              tmp___32 = p;
    #####:11094:              p ++;
    #####:11095:              c = (unsigned char )*tmp___32;
    #####:11096:              if (translate) {
    #####:11097:                c = (unsigned char )*(translate + (int )c);
    #####:11098:              }
    #####:11099:              goto while_break___31;
        -:11100:            }
        -:11101:            while_break___31: /* CIL Label */ ;
        -:11102:            }
    #####:11103:            c1 = (unsigned char)0;
    #####:11104:            if ((unsigned long )p == (unsigned long )pend) {
        -:11105:              {
    #####:11106:              free((void *)compile_stack.stack);
        -:11107:              }
    #####:11108:              return ((reg_errcode_t )7);
        -:11109:            }
        -:11110:            {
    #####:11111:            while (1) {
        -:11112:              while_continue___32: /* CIL Label */ ;
        -:11113:              {
    #####:11114:              while (1) {
        -:11115:                while_continue___33: /* CIL Label */ ;
    #####:11116:                if ((unsigned long )p == (unsigned long )pend) {
    #####:11117:                  return ((reg_errcode_t )14);
        -:11118:                }
    #####:11119:                tmp___33 = p;
    #####:11120:                p ++;
    #####:11121:                c = (unsigned char )*tmp___33;
    #####:11122:                if (translate) {
    #####:11123:                  c = (unsigned char )*(translate + (int )c);
    #####:11124:                }
    #####:11125:                goto while_break___33;
        -:11126:              }
        -:11127:              while_break___33: /* CIL Label */ ;
        -:11128:              }
    #####:11129:              if ((int )c == 58) {
    #####:11130:                if ((int const   )*p == 93) {
    #####:11131:                  goto while_break___32;
        -:11132:                } else {
    #####:11133:                  goto _L___2;
        -:11134:                }
    #####:11135:              } else { //Added block
        -:11136:              _L___2: 
    #####:11137:              if ((unsigned long )p == (unsigned long )pend) {
    #####:11138:                goto while_break___32;
        -:11139:              }
        -:11140:              }
    #####:11141:              if ((int )c1 < 6) {
    #####:11142:                tmp___34 = c1;
    #####:11143:                c1 = (unsigned char )((int )c1 + 1);
    #####:11144:                str[tmp___34] = (char )c;
    #####:11145:              } else {
    #####:11146:                str[0] = (char )'\000';
        -:11147:              }
        -:11148:            }
        -:11149:            while_break___32: /* CIL Label */ ;
        -:11150:            }
    #####:11151:            str[c1] = (char )'\000';
    #####:11152:            if ((int )c == 58) {
    #####:11153:              if ((int const   )*p == 93) {
        -:11154:                {
    #####:11155:                tmp___35 = strcmp((char const   *)(str), "alnum");
    #####:11156:                is_alnum___0 = (boolean )(tmp___35 == 0);
    #####:11157:                tmp___36 = strcmp((char const   *)(str), "alpha");
    #####:11158:                is_alpha___0 = (boolean )(tmp___36 == 0);
    #####:11159:                tmp___37 = strcmp((char const   *)(str), "blank");
    #####:11160:                is_blank___0 = (boolean )(tmp___37 == 0);
    #####:11161:                tmp___38 = strcmp((char const   *)(str), "cntrl");
    #####:11162:                is_cntrl___0 = (boolean )(tmp___38 == 0);
    #####:11163:                tmp___39 = strcmp((char const   *)(str), "digit");
    #####:11164:                is_digit___0 = (boolean )(tmp___39 == 0);
    #####:11165:                tmp___40 = strcmp((char const   *)(str), "graph");
    #####:11166:                is_graph___0 = (boolean )(tmp___40 == 0);
    #####:11167:                tmp___41 = strcmp((char const   *)(str), "lower");
    #####:11168:                is_lower___0 = (boolean )(tmp___41 == 0);
    #####:11169:                tmp___42 = strcmp((char const   *)(str), "print");
    #####:11170:                is_print___0 = (boolean )(tmp___42 == 0);
    #####:11171:                tmp___43 = strcmp((char const   *)(str), "punct");
    #####:11172:                is_punct___0 = (boolean )(tmp___43 == 0);
    #####:11173:                tmp___44 = strcmp((char const   *)(str), "space");
    #####:11174:                is_space___0 = (boolean )(tmp___44 == 0);
    #####:11175:                tmp___45 = strcmp((char const   *)(str), "upper");
    #####:11176:                is_upper___0 = (boolean )(tmp___45 == 0);
    #####:11177:                tmp___46 = strcmp((char const   *)(str), "xdigit");
    #####:11178:                is_xdigit___0 = (boolean )(tmp___46 == 0);
    #####:11179:                tmp___47 = strcmp((char const   *)(str), "alpha");
        -:11180:                }
    #####:11181:                if (! (tmp___47 == 0)) {
        -:11182:                  {
    #####:11183:                  tmp___48 = strcmp((char const   *)(str), "upper");
        -:11184:                  }
    #####:11185:                  if (! (tmp___48 == 0)) {
        -:11186:                    {
    #####:11187:                    tmp___49 = strcmp((char const   *)(str), "lower");
        -:11188:                    }
    #####:11189:                    if (! (tmp___49 == 0)) {
        -:11190:                      {
    #####:11191:                      tmp___50 = strcmp((char const   *)(str), "digit");
        -:11192:                      }
    #####:11193:                      if (! (tmp___50 == 0)) {
        -:11194:                        {
    #####:11195:                        tmp___51 = strcmp((char const   *)(str), "alnum");
        -:11196:                        }
    #####:11197:                        if (! (tmp___51 == 0)) {
        -:11198:                          {
    #####:11199:                          tmp___52 = strcmp((char const   *)(str), "xdigit");
        -:11200:                          }
    #####:11201:                          if (! (tmp___52 == 0)) {
        -:11202:                            {
    #####:11203:                            tmp___53 = strcmp((char const   *)(str), "space");
        -:11204:                            }
    #####:11205:                            if (! (tmp___53 == 0)) {
        -:11206:                              {
    #####:11207:                              tmp___54 = strcmp((char const   *)(str), "print");
        -:11208:                              }
    #####:11209:                              if (! (tmp___54 == 0)) {
        -:11210:                                {
    #####:11211:                                tmp___55 = strcmp((char const   *)(str), "punct");
        -:11212:                                }
    #####:11213:                                if (! (tmp___55 == 0)) {
        -:11214:                                  {
    #####:11215:                                  tmp___56 = strcmp((char const   *)(str), "graph");
        -:11216:                                  }
    #####:11217:                                  if (! (tmp___56 == 0)) {
        -:11218:                                    {
    #####:11219:                                    tmp___57 = strcmp((char const   *)(str), "cntrl");
        -:11220:                                    }
    #####:11221:                                    if (! (tmp___57 == 0)) {
        -:11222:                                      {
    #####:11223:                                      tmp___58 = strcmp((char const   *)(str), "blank");
        -:11224:                                      }
    #####:11225:                                      if (! (tmp___58 == 0)) {
        -:11226:                                        {
    #####:11227:                                        free((void *)compile_stack.stack);
        -:11228:                                        }
    #####:11229:                                        return ((reg_errcode_t )4);
        -:11230:                                      }
    #####:11231:                                    }
    #####:11232:                                  }
    #####:11233:                                }
    #####:11234:                              }
    #####:11235:                            }
    #####:11236:                          }
    #####:11237:                        }
    #####:11238:                      }
    #####:11239:                    }
    #####:11240:                  }
    #####:11241:                }
        -:11242:                {
    #####:11243:                while (1) {
        -:11244:                  while_continue___34: /* CIL Label */ ;
    #####:11245:                  if ((unsigned long )p == (unsigned long )pend) {
    #####:11246:                    return ((reg_errcode_t )14);
        -:11247:                  }
    #####:11248:                  tmp___59 = p;
    #####:11249:                  p ++;
    #####:11250:                  c = (unsigned char )*tmp___59;
    #####:11251:                  if (translate) {
    #####:11252:                    c = (unsigned char )*(translate + (int )c);
    #####:11253:                  }
    #####:11254:                  goto while_break___34;
        -:11255:                }
        -:11256:                while_break___34: /* CIL Label */ ;
        -:11257:                }
    #####:11258:                if ((unsigned long )p == (unsigned long )pend) {
        -:11259:                  {
    #####:11260:                  free((void *)compile_stack.stack);
        -:11261:                  }
    #####:11262:                  return ((reg_errcode_t )7);
        -:11263:                }
    #####:11264:                ch = 0;
        -:11265:                {
    #####:11266:                while (1) {
        -:11267:                  while_continue___35: /* CIL Label */ ;
    #####:11268:                  if (! (ch < 1 << 8)) {
    #####:11269:                    goto while_break___35;
        -:11270:                  }
    #####:11271:                  if (is_alnum___0) {
        -:11272:                    {
    #####:11273:                    tmp___60 = __ctype_b_loc();
        -:11274:                    }
    #####:11275:                    if ((int const   )*(*tmp___60 + ch) & 8) {
    #####:11276:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11277:                    } else {
    #####:11278:                      goto _L___5;
        -:11279:                    }
    #####:11280:                  } else { //Added block
        -:11281:                  _L___5: 
    #####:11282:                  if (is_alpha___0) {
        -:11283:                    {
    #####:11284:                    tmp___61 = __ctype_b_loc();
        -:11285:                    }
    #####:11286:                    if ((int const   )*(*tmp___61 + ch) & 1024) {
    #####:11287:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11288:                    } else {
    #####:11289:                      goto _L___4;
        -:11290:                    }
    #####:11291:                  } else { //Added block
        -:11292:                  _L___4: 
    #####:11293:                  if (is_blank___0) {
        -:11294:                    {
    #####:11295:                    tmp___62 = __ctype_b_loc();
        -:11296:                    }
    #####:11297:                    if ((int const   )*(*tmp___62 + ch) & 1) {
    #####:11298:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11299:                    } else {
    #####:11300:                      goto _L___3;
        -:11301:                    }
    #####:11302:                  } else { //Added block
        -:11303:                  _L___3: 
    #####:11304:                  if (is_cntrl___0) {
        -:11305:                    {
    #####:11306:                    tmp___63 = __ctype_b_loc();
        -:11307:                    }
    #####:11308:                    if ((int const   )*(*tmp___63 + ch) & 2) {
    #####:11309:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11310:                    }
    #####:11311:                  }
        -:11312:                  }
        -:11313:                  }
        -:11314:                  }
    #####:11315:                  if (is_digit___0) {
        -:11316:                    {
    #####:11317:                    tmp___64 = __ctype_b_loc();
        -:11318:                    }
    #####:11319:                    if ((int const   )*(*tmp___64 + ch) & 2048) {
    #####:11320:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11321:                    } else {
    #####:11322:                      goto _L___8;
        -:11323:                    }
    #####:11324:                  } else { //Added block
        -:11325:                  _L___8: 
    #####:11326:                  if (is_graph___0) {
        -:11327:                    {
    #####:11328:                    tmp___65 = __ctype_b_loc();
        -:11329:                    }
    #####:11330:                    if ((int const   )*(*tmp___65 + ch) & 32768) {
    #####:11331:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11332:                    } else {
    #####:11333:                      goto _L___7;
        -:11334:                    }
    #####:11335:                  } else { //Added block
        -:11336:                  _L___7: 
    #####:11337:                  if (is_lower___0) {
        -:11338:                    {
    #####:11339:                    tmp___66 = __ctype_b_loc();
        -:11340:                    }
    #####:11341:                    if ((int const   )*(*tmp___66 + ch) & 512) {
    #####:11342:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11343:                    } else {
    #####:11344:                      goto _L___6;
        -:11345:                    }
    #####:11346:                  } else { //Added block
        -:11347:                  _L___6: 
    #####:11348:                  if (is_print___0) {
        -:11349:                    {
    #####:11350:                    tmp___67 = __ctype_b_loc();
        -:11351:                    }
    #####:11352:                    if ((int const   )*(*tmp___67 + ch) & 16384) {
    #####:11353:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11354:                    }
    #####:11355:                  }
        -:11356:                  }
        -:11357:                  }
        -:11358:                  }
    #####:11359:                  if (is_punct___0) {
        -:11360:                    {
    #####:11361:                    tmp___68 = __ctype_b_loc();
        -:11362:                    }
    #####:11363:                    if ((int const   )*(*tmp___68 + ch) & 4) {
    #####:11364:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11365:                    } else {
    #####:11366:                      goto _L___11;
        -:11367:                    }
    #####:11368:                  } else { //Added block
        -:11369:                  _L___11: 
    #####:11370:                  if (is_space___0) {
        -:11371:                    {
    #####:11372:                    tmp___69 = __ctype_b_loc();
        -:11373:                    }
    #####:11374:                    if ((int const   )*(*tmp___69 + ch) & 8192) {
    #####:11375:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11376:                    } else {
    #####:11377:                      goto _L___10;
        -:11378:                    }
    #####:11379:                  } else { //Added block
        -:11380:                  _L___10: 
    #####:11381:                  if (is_upper___0) {
        -:11382:                    {
    #####:11383:                    tmp___70 = __ctype_b_loc();
        -:11384:                    }
    #####:11385:                    if ((int const   )*(*tmp___70 + ch) & 256) {
    #####:11386:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11387:                    } else {
    #####:11388:                      goto _L___9;
        -:11389:                    }
    #####:11390:                  } else { //Added block
        -:11391:                  _L___9: 
    #####:11392:                  if (is_xdigit___0) {
        -:11393:                    {
    #####:11394:                    tmp___71 = __ctype_b_loc();
        -:11395:                    }
    #####:11396:                    if ((int const   )*(*tmp___71 + ch) & 4096) {
    #####:11397:                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11398:                    }
    #####:11399:                  }
        -:11400:                  }
        -:11401:                  }
        -:11402:                  }
    #####:11403:                  if (translate) {
    #####:11404:                    if (is_upper___0) {
    #####:11405:                      goto _L___12;
        -:11406:                    } else { //Added block
    #####:11407:                    if (is_lower___0) {
        -:11408:                      _L___12: 
        -:11409:                      {
    #####:11410:                      tmp___72 = __ctype_b_loc();
        -:11411:                      }
    #####:11412:                      if ((int const   )*(*tmp___72 + ch) & 256) {
    #####:11413:                        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11414:                      } else {
        -:11415:                        {
    #####:11416:                        tmp___73 = __ctype_b_loc();
        -:11417:                        }
    #####:11418:                        if ((int const   )*(*tmp___73 + ch) & 512) {
    #####:11419:                          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    #####:11420:                        }
        -:11421:                      }
    #####:11422:                    }
        -:11423:                    }
    #####:11424:                  }
    #####:11425:                  ch ++;
        -:11426:                }
        -:11427:                while_break___35: /* CIL Label */ ;
        -:11428:                }
    #####:11429:                had_char_class = (boolean )1;
    #####:11430:              } else {
    #####:11431:                goto _L___13;
        -:11432:              }
    #####:11433:            } else {
        -:11434:              _L___13: 
    #####:11435:              c1 = (unsigned char )((int )c1 + 1);
        -:11436:              {
    #####:11437:              while (1) {
        -:11438:                while_continue___36: /* CIL Label */ ;
    #####:11439:                tmp___74 = c1;
    #####:11440:                c1 = (unsigned char )((int )c1 - 1);
    #####:11441:                if (! tmp___74) {
    #####:11442:                  goto while_break___36;
        -:11443:                }
    #####:11444:                p --;
        -:11445:              }
        -:11446:              while_break___36: /* CIL Label */ ;
        -:11447:              }
    #####:11448:              *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
    #####:11449:              *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
    #####:11450:              had_char_class = (boolean )0;
        -:11451:            }
    #####:11452:          } else {
    #####:11453:            had_char_class = (boolean )0;
    #####:11454:            *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
        -:11455:          }
    #####:11456:        } else {
    #####:11457:          had_char_class = (boolean )0;
    #####:11458:          *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
        -:11459:        }
    #####:11460:      } else {
    #####:11461:        had_char_class = (boolean )0;
    #####:11462:        *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
        -:11463:      }
        -:11464:      }
        -:11465:      }
        -:11466:      __Cont: ;
        -:11467:    }
        -:11468:    while_break___27: /* CIL Label */ ;
        -:11469:    }
        -:11470:    {
    #####:11471:    while (1) {
        -:11472:      while_continue___37: /* CIL Label */ ;
    #####:11473:      if ((int )*(b + -1) > 0) {
    #####:11474:        if (! ((int )*(b + ((int )*(b + -1) - 1)) == 0)) {
    #####:11475:          goto while_break___37;
        -:11476:        }
    #####:11477:      } else {
    #####:11478:        goto while_break___37;
        -:11479:      }
    #####:11480:      *(b + -1) = (unsigned char )((int )*(b + -1) - 1);
        -:11481:    }
        -:11482:    while_break___37: /* CIL Label */ ;
        -:11483:    }
    #####:11484:    b += (int )*(b + -1);
    #####:11485:    goto switch_break;
        -:11486:    case_40: /* CIL Label */ 
    #####:11487:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11488:      goto handle_open;
        -:11489:    } else {
    #####:11490:      goto normal_char;
        -:11491:    }
        -:11492:    case_41: /* CIL Label */ 
    #####:11493:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11494:      goto handle_close;
        -:11495:    } else {
    #####:11496:      goto normal_char;
        -:11497:    }
        -:11498:    case_10: /* CIL Label */ 
    #####:11499:    if (syntax & (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11500:      goto handle_alt;
        -:11501:    } else {
    #####:11502:      goto normal_char;
        -:11503:    }
        -:11504:    case_124: /* CIL Label */ 
        1:11505:    if (syntax & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        1:11506:      goto handle_alt;
        -:11507:    } else {
    #####:11508:      goto normal_char;
        -:11509:    }
        -:11510:    case_123: /* CIL Label */ 
        1:11511:    if (syntax & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        1:11512:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        1:11513:        goto handle_interval;
        -:11514:      } else {
    #####:11515:        goto normal_char;
        -:11516:      }
        -:11517:    } else {
    #####:11518:      goto normal_char;
        -:11519:    }
        -:11520:    case_92: /* CIL Label */ 
    #####:11521:    if ((unsigned long )p == (unsigned long )pend) {
        -:11522:      {
    #####:11523:      free((void *)compile_stack.stack);
        -:11524:      }
    #####:11525:      return ((reg_errcode_t )5);
        -:11526:    }
        -:11527:    {
    #####:11528:    while (1) {
        -:11529:      while_continue___38: /* CIL Label */ ;
    #####:11530:      if ((unsigned long )p == (unsigned long )pend) {
    #####:11531:        return ((reg_errcode_t )14);
        -:11532:      }
    #####:11533:      tmp___75 = p;
    #####:11534:      p ++;
    #####:11535:      c = (unsigned char )*tmp___75;
    #####:11536:      goto while_break___38;
        -:11537:    }
        -:11538:    while_break___38: /* CIL Label */ ;
        -:11539:    }
        -:11540:    {
    #####:11541:    if ((int )c == 40) {
    #####:11542:      goto case_40___0;
        -:11543:    }
    #####:11544:    if ((int )c == 41) {
    #####:11545:      goto case_41___0;
        -:11546:    }
    #####:11547:    if ((int )c == 124) {
    #####:11548:      goto case_124___0;
        -:11549:    }
    #####:11550:    if ((int )c == 123) {
    #####:11551:      goto case_123___0;
        -:11552:    }
    #####:11553:    if ((int )c == 119) {
    #####:11554:      goto case_119;
        -:11555:    }
    #####:11556:    if ((int )c == 87) {
    #####:11557:      goto case_87;
        -:11558:    }
    #####:11559:    if ((int )c == 60) {
    #####:11560:      goto case_60;
        -:11561:    }
    #####:11562:    if ((int )c == 62) {
    #####:11563:      goto case_62;
        -:11564:    }
    #####:11565:    if ((int )c == 98) {
    #####:11566:      goto case_98;
        -:11567:    }
    #####:11568:    if ((int )c == 66) {
    #####:11569:      goto case_66;
        -:11570:    }
    #####:11571:    if ((int )c == 96) {
    #####:11572:      goto case_96;
        -:11573:    }
    #####:11574:    if ((int )c == 39) {
    #####:11575:      goto case_39;
        -:11576:    }
    #####:11577:    if ((int )c == 49) {
    #####:11578:      goto case_49;
        -:11579:    }
    #####:11580:    if ((int )c == 50) {
    #####:11581:      goto case_49;
        -:11582:    }
    #####:11583:    if ((int )c == 51) {
    #####:11584:      goto case_49;
        -:11585:    }
    #####:11586:    if ((int )c == 52) {
    #####:11587:      goto case_49;
        -:11588:    }
    #####:11589:    if ((int )c == 53) {
    #####:11590:      goto case_49;
        -:11591:    }
    #####:11592:    if ((int )c == 54) {
    #####:11593:      goto case_49;
        -:11594:    }
    #####:11595:    if ((int )c == 55) {
    #####:11596:      goto case_49;
        -:11597:    }
    #####:11598:    if ((int )c == 56) {
    #####:11599:      goto case_49;
        -:11600:    }
    #####:11601:    if ((int )c == 57) {
    #####:11602:      goto case_49;
        -:11603:    }
    #####:11604:    if ((int )c == 43) {
    #####:11605:      goto case_43___0;
        -:11606:    }
    #####:11607:    if ((int )c == 63) {
    #####:11608:      goto case_43___0;
        -:11609:    }
    #####:11610:    goto normal_backslash;
        -:11611:    case_40___0: /* CIL Label */ 
    #####:11612:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11613:      goto normal_backslash;
        -:11614:    }
        -:11615:    handle_open: 
    #####:11616:    (bufp->re_nsub) ++;
    #####:11617:    regnum ++;
    #####:11618:    if (compile_stack.avail == compile_stack.size) {
        -:11619:      {
    #####:11620:      tmp___76 = realloc((void *)compile_stack.stack, (unsigned long )(compile_stack.size << 1) * sizeof(compile_stack_elt_t ));
    #####:11621:      compile_stack.stack = (compile_stack_elt_t *)tmp___76;
        -:11622:      }
    #####:11623:      if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
    #####:11624:        return ((reg_errcode_t )12);
        -:11625:      }
    #####:11626:      compile_stack.size <<= 1;
    #####:11627:    }
    #####:11628:    (compile_stack.stack + compile_stack.avail)->begalt_offset = begalt - bufp->buffer;
    #####:11629:    if (fixup_alt_jump) {
    #####:11630:      (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (fixup_alt_jump - bufp->buffer) + 1L;
    #####:11631:    } else {
    #####:11632:      (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (pattern_offset_t )0;
        -:11633:    }
    #####:11634:    (compile_stack.stack + compile_stack.avail)->laststart_offset = b - bufp->buffer;
    #####:11635:    (compile_stack.stack + compile_stack.avail)->regnum = regnum;
    #####:11636:    if (regnum <= 255U) {
    #####:11637:      (compile_stack.stack + compile_stack.avail)->inner_group_offset = (b - bufp->buffer) + 2L;
        -:11638:      {
    #####:11639:      while (1) {
        -:11640:        while_continue___39: /* CIL Label */ ;
        -:11641:        {
    #####:11642:        while (1) {
        -:11643:          while_continue___40: /* CIL Label */ ;
    #####:11644:          if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:11645:            goto while_break___40;
        -:11646:          }
        -:11647:          {
    #####:11648:          while (1) {
        -:11649:            while_continue___41: /* CIL Label */ ;
    #####:11650:            old_buffer___8 = bufp->buffer;
    #####:11651:            if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11652:              return ((reg_errcode_t )15);
        -:11653:            }
    #####:11654:            bufp->allocated <<= 1;
    #####:11655:            if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11656:              bufp->allocated = (unsigned long )(1L << 16);
    #####:11657:            }
        -:11658:            {
    #####:11659:            tmp___77 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11660:            bufp->buffer = (unsigned char *)tmp___77;
        -:11661:            }
    #####:11662:            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11663:              return ((reg_errcode_t )12);
        -:11664:            }
    #####:11665:            if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
    #####:11666:              b = bufp->buffer + (b - old_buffer___8);
    #####:11667:              begalt = bufp->buffer + (begalt - old_buffer___8);
    #####:11668:              if (fixup_alt_jump) {
    #####:11669:                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
    #####:11670:              }
    #####:11671:              if (laststart___0) {
    #####:11672:                laststart___0 = bufp->buffer + (laststart___0 - old_buffer___8);
    #####:11673:              }
    #####:11674:              if (pending_exact) {
    #####:11675:                pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
    #####:11676:              }
    #####:11677:            }
    #####:11678:            goto while_break___41;
        -:11679:          }
        -:11680:          while_break___41: /* CIL Label */ ;
        -:11681:          }
        -:11682:        }
        -:11683:        while_break___40: /* CIL Label */ ;
        -:11684:        }
    #####:11685:        tmp___78 = b;
    #####:11686:        b ++;
    #####:11687:        *tmp___78 = (unsigned char)6;
    #####:11688:        tmp___79 = b;
    #####:11689:        b ++;
    #####:11690:        *tmp___79 = (unsigned char )regnum;
    #####:11691:        tmp___80 = b;
    #####:11692:        b ++;
    #####:11693:        *tmp___80 = (unsigned char)0;
    #####:11694:        goto while_break___39;
        -:11695:      }
        -:11696:      while_break___39: /* CIL Label */ ;
        -:11697:      }
    #####:11698:    }
    #####:11699:    (compile_stack.avail) ++;
    #####:11700:    fixup_alt_jump = (unsigned char *)0;
    #####:11701:    laststart___0 = (unsigned char *)0;
    #####:11702:    begalt = b;
    #####:11703:    pending_exact = (unsigned char *)0;
    #####:11704:    goto switch_break___0;
        -:11705:    case_41___0: /* CIL Label */ 
    #####:11706:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11707:      goto normal_backslash;
        -:11708:    }
    #####:11709:    if (compile_stack.avail == 0U) {
    #####:11710:      if (syntax & (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11711:        goto normal_backslash;
        -:11712:      } else {
        -:11713:        {
    #####:11714:        free((void *)compile_stack.stack);
        -:11715:        }
    #####:11716:        return ((reg_errcode_t )16);
        -:11717:      }
        -:11718:    }
        -:11719:    handle_close: 
    #####:11720:    if (fixup_alt_jump) {
        -:11721:      {
    #####:11722:      while (1) {
        -:11723:        while_continue___42: /* CIL Label */ ;
        -:11724:        {
    #####:11725:        while (1) {
        -:11726:          while_continue___43: /* CIL Label */ ;
    #####:11727:          if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:11728:            goto while_break___43;
        -:11729:          }
        -:11730:          {
    #####:11731:          while (1) {
        -:11732:            while_continue___44: /* CIL Label */ ;
    #####:11733:            old_buffer___9 = bufp->buffer;
    #####:11734:            if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11735:              return ((reg_errcode_t )15);
        -:11736:            }
    #####:11737:            bufp->allocated <<= 1;
    #####:11738:            if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11739:              bufp->allocated = (unsigned long )(1L << 16);
    #####:11740:            }
        -:11741:            {
    #####:11742:            tmp___81 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11743:            bufp->buffer = (unsigned char *)tmp___81;
        -:11744:            }
    #####:11745:            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11746:              return ((reg_errcode_t )12);
        -:11747:            }
    #####:11748:            if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
    #####:11749:              b = bufp->buffer + (b - old_buffer___9);
    #####:11750:              begalt = bufp->buffer + (begalt - old_buffer___9);
    #####:11751:              if (fixup_alt_jump) {
    #####:11752:                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
    #####:11753:              }
    #####:11754:              if (laststart___0) {
    #####:11755:                laststart___0 = bufp->buffer + (laststart___0 - old_buffer___9);
    #####:11756:              }
    #####:11757:              if (pending_exact) {
    #####:11758:                pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
    #####:11759:              }
    #####:11760:            }
    #####:11761:            goto while_break___44;
        -:11762:          }
        -:11763:          while_break___44: /* CIL Label */ ;
        -:11764:          }
        -:11765:        }
        -:11766:        while_break___43: /* CIL Label */ ;
        -:11767:        }
    #####:11768:        tmp___82 = b;
    #####:11769:        b ++;
    #####:11770:        *tmp___82 = (unsigned char)20;
    #####:11771:        goto while_break___42;
        -:11772:      }
        -:11773:      while_break___42: /* CIL Label */ ;
        -:11774:      }
        -:11775:      {
    #####:11776:      store_op1((re_opcode_t )14, fixup_alt_jump, (int )(((b - 1) - fixup_alt_jump) - 3L));
        -:11777:      }
    #####:11778:    }
    #####:11779:    if (compile_stack.avail == 0U) {
    #####:11780:      if (syntax & (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11781:        goto normal_char;
        -:11782:      } else {
        -:11783:        {
    #####:11784:        free((void *)compile_stack.stack);
        -:11785:        }
    #####:11786:        return ((reg_errcode_t )16);
        -:11787:      }
        -:11788:    }
    #####:11789:    (compile_stack.avail) --;
    #####:11790:    begalt = bufp->buffer + (compile_stack.stack + compile_stack.avail)->begalt_offset;
    #####:11791:    if ((compile_stack.stack + compile_stack.avail)->fixup_alt_jump) {
    #####:11792:      fixup_alt_jump = (bufp->buffer + (compile_stack.stack + compile_stack.avail)->fixup_alt_jump) - 1;
    #####:11793:    } else {
    #####:11794:      fixup_alt_jump = (unsigned char *)0;
        -:11795:    }
    #####:11796:    laststart___0 = bufp->buffer + (compile_stack.stack + compile_stack.avail)->laststart_offset;
    #####:11797:    this_group_regnum = (compile_stack.stack + compile_stack.avail)->regnum;
    #####:11798:    pending_exact = (unsigned char *)0;
    #####:11799:    if (this_group_regnum <= 255U) {
    #####:11800:      inner_group_loc = bufp->buffer + (compile_stack.stack + compile_stack.avail)->inner_group_offset;
    #####:11801:      *inner_group_loc = (unsigned char )(regnum - this_group_regnum);
        -:11802:      {
    #####:11803:      while (1) {
        -:11804:        while_continue___45: /* CIL Label */ ;
        -:11805:        {
    #####:11806:        while (1) {
        -:11807:          while_continue___46: /* CIL Label */ ;
    #####:11808:          if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:11809:            goto while_break___46;
        -:11810:          }
        -:11811:          {
    #####:11812:          while (1) {
        -:11813:            while_continue___47: /* CIL Label */ ;
    #####:11814:            old_buffer___10 = bufp->buffer;
    #####:11815:            if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11816:              return ((reg_errcode_t )15);
        -:11817:            }
    #####:11818:            bufp->allocated <<= 1;
    #####:11819:            if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11820:              bufp->allocated = (unsigned long )(1L << 16);
    #####:11821:            }
        -:11822:            {
    #####:11823:            tmp___83 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11824:            bufp->buffer = (unsigned char *)tmp___83;
        -:11825:            }
    #####:11826:            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11827:              return ((reg_errcode_t )12);
        -:11828:            }
    #####:11829:            if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
    #####:11830:              b = bufp->buffer + (b - old_buffer___10);
    #####:11831:              begalt = bufp->buffer + (begalt - old_buffer___10);
    #####:11832:              if (fixup_alt_jump) {
    #####:11833:                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
    #####:11834:              }
    #####:11835:              if (laststart___0) {
    #####:11836:                laststart___0 = bufp->buffer + (laststart___0 - old_buffer___10);
    #####:11837:              }
    #####:11838:              if (pending_exact) {
    #####:11839:                pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
    #####:11840:              }
    #####:11841:            }
    #####:11842:            goto while_break___47;
        -:11843:          }
        -:11844:          while_break___47: /* CIL Label */ ;
        -:11845:          }
        -:11846:        }
        -:11847:        while_break___46: /* CIL Label */ ;
        -:11848:        }
    #####:11849:        tmp___84 = b;
    #####:11850:        b ++;
    #####:11851:        *tmp___84 = (unsigned char)7;
    #####:11852:        tmp___85 = b;
    #####:11853:        b ++;
    #####:11854:        *tmp___85 = (unsigned char )this_group_regnum;
    #####:11855:        tmp___86 = b;
    #####:11856:        b ++;
    #####:11857:        *tmp___86 = (unsigned char )(regnum - this_group_regnum);
    #####:11858:        goto while_break___45;
        -:11859:      }
        -:11860:      while_break___45: /* CIL Label */ ;
        -:11861:      }
    #####:11862:    }
    #####:11863:    goto switch_break___0;
        -:11864:    case_124___0: /* CIL Label */ 
    #####:11865:    if (syntax & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11866:      goto normal_backslash;
        -:11867:    } else { //Added block
    #####:11868:    if (syntax & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11869:      goto normal_backslash;
        -:11870:    }
        -:11871:    }
        -:11872:    handle_alt: 
        1:11873:    if (syntax & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11874:      goto normal_char;
        -:11875:    }
        -:11876:    {
        1:11877:    while (1) {
        -:11878:      while_continue___48: /* CIL Label */ ;
        1:11879:      if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
        1:11880:        goto while_break___48;
        -:11881:      }
        -:11882:      {
    #####:11883:      while (1) {
        -:11884:        while_continue___49: /* CIL Label */ ;
    #####:11885:        old_buffer___11 = bufp->buffer;
    #####:11886:        if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11887:          return ((reg_errcode_t )15);
        -:11888:        }
    #####:11889:        bufp->allocated <<= 1;
    #####:11890:        if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11891:          bufp->allocated = (unsigned long )(1L << 16);
    #####:11892:        }
        -:11893:        {
    #####:11894:        tmp___87 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11895:        bufp->buffer = (unsigned char *)tmp___87;
        -:11896:        }
    #####:11897:        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11898:          return ((reg_errcode_t )12);
        -:11899:        }
    #####:11900:        if ((unsigned long )old_buffer___11 != (unsigned long )bufp->buffer) {
    #####:11901:          b = bufp->buffer + (b - old_buffer___11);
    #####:11902:          begalt = bufp->buffer + (begalt - old_buffer___11);
    #####:11903:          if (fixup_alt_jump) {
    #####:11904:            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
    #####:11905:          }
    #####:11906:          if (laststart___0) {
    #####:11907:            laststart___0 = bufp->buffer + (laststart___0 - old_buffer___11);
    #####:11908:          }
    #####:11909:          if (pending_exact) {
    #####:11910:            pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
    #####:11911:          }
    #####:11912:        }
    #####:11913:        goto while_break___49;
        -:11914:      }
        -:11915:      while_break___49: /* CIL Label */ ;
        -:11916:      }
        -:11917:    }
        -:11918:    while_break___48: /* CIL Label */ ;
        -:11919:    }
        -:11920:    {
        1:11921:    insert_op1((re_opcode_t )15, begalt, (int )(((b + 6) - begalt) - 3L), b);
        1:11922:    pending_exact = (unsigned char *)0;
        1:11923:    b += 3;
        -:11924:    }
        1:11925:    if (fixup_alt_jump) {
        -:11926:      {
    #####:11927:      store_op1((re_opcode_t )14, fixup_alt_jump, (int )((b - fixup_alt_jump) - 3L));
        -:11928:      }
    #####:11929:    }
        1:11930:    fixup_alt_jump = b;
        -:11931:    {
        1:11932:    while (1) {
        -:11933:      while_continue___50: /* CIL Label */ ;
        1:11934:      if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
        1:11935:        goto while_break___50;
        -:11936:      }
        -:11937:      {
    #####:11938:      while (1) {
        -:11939:        while_continue___51: /* CIL Label */ ;
    #####:11940:        old_buffer___12 = bufp->buffer;
    #####:11941:        if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:11942:          return ((reg_errcode_t )15);
        -:11943:        }
    #####:11944:        bufp->allocated <<= 1;
    #####:11945:        if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:11946:          bufp->allocated = (unsigned long )(1L << 16);
    #####:11947:        }
        -:11948:        {
    #####:11949:        tmp___88 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:11950:        bufp->buffer = (unsigned char *)tmp___88;
        -:11951:        }
    #####:11952:        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:11953:          return ((reg_errcode_t )12);
        -:11954:        }
    #####:11955:        if ((unsigned long )old_buffer___12 != (unsigned long )bufp->buffer) {
    #####:11956:          b = bufp->buffer + (b - old_buffer___12);
    #####:11957:          begalt = bufp->buffer + (begalt - old_buffer___12);
    #####:11958:          if (fixup_alt_jump) {
    #####:11959:            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
    #####:11960:          }
    #####:11961:          if (laststart___0) {
    #####:11962:            laststart___0 = bufp->buffer + (laststart___0 - old_buffer___12);
    #####:11963:          }
    #####:11964:          if (pending_exact) {
    #####:11965:            pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
    #####:11966:          }
    #####:11967:        }
    #####:11968:        goto while_break___51;
        -:11969:      }
        -:11970:      while_break___51: /* CIL Label */ ;
        -:11971:      }
        -:11972:    }
        -:11973:    while_break___50: /* CIL Label */ ;
        -:11974:    }
        1:11975:    b += 3;
        1:11976:    laststart___0 = (unsigned char *)0;
        1:11977:    begalt = b;
        1:11978:    goto switch_break___0;
        -:11979:    case_123___0: /* CIL Label */ 
    #####:11980:    if (! (syntax & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:11981:      goto normal_backslash;
        -:11982:    } else { //Added block
    #####:11983:    if (syntax & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11984:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:11985:        goto normal_backslash;
        -:11986:      } else {
    #####:11987:        goto _L___21;
        -:11988:      }
    #####:11989:    } else { //Added block
        -:11990:    _L___21: 
    #####:11991:    if ((unsigned long )(p - 2) == (unsigned long )pattern) {
    #####:11992:      if ((unsigned long )p == (unsigned long )pend) {
    #####:11993:        goto normal_backslash;
        -:11994:      }
    #####:11995:    }
        -:11996:    }
        -:11997:    }
        -:11998:    handle_interval: 
        1:11999:    lower_bound = -1;
        1:12000:    upper_bound = -1;
        1:12001:    beg_interval = p - 1;
        1:12002:    if ((unsigned long )p == (unsigned long )pend) {
    #####:12003:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12004:        goto unfetch_interval;
        -:12005:      } else {
        -:12006:        {
    #####:12007:        free((void *)compile_stack.stack);
        -:12008:        }
    #####:12009:        return ((reg_errcode_t )9);
        -:12010:      }
        -:12011:    }
        1:12012:    if ((unsigned long )p != (unsigned long )pend) {
        -:12013:      {
        1:12014:      while (1) {
        -:12015:        while_continue___52: /* CIL Label */ ;
        1:12016:        if ((unsigned long )p == (unsigned long )pend) {
    #####:12017:          return ((reg_errcode_t )14);
        -:12018:        }
        1:12019:        tmp___89 = p;
        1:12020:        p ++;
        1:12021:        c = (unsigned char )*tmp___89;
        1:12022:        if (translate) {
    #####:12023:          c = (unsigned char )*(translate + (int )c);
    #####:12024:        }
        1:12025:        goto while_break___52;
        -:12026:      }
        -:12027:      while_break___52: /* CIL Label */ ;
        -:12028:      }
        -:12029:      {
        2:12030:      while (1) {
        -:12031:        while_continue___53: /* CIL Label */ ;
        2:12032:        if (48 <= (int )c) {
        2:12033:          if (! ((int )c <= 57)) {
        1:12034:            goto while_break___53;
        -:12035:          }
        1:12036:        } else {
    #####:12037:          goto while_break___53;
        -:12038:        }
        1:12039:        if (lower_bound < 0) {
        1:12040:          lower_bound = 0;
        1:12041:        }
        1:12042:        lower_bound = (lower_bound * 10 + (int )c) - 48;
        1:12043:        if ((unsigned long )p == (unsigned long )pend) {
    #####:12044:          goto while_break___53;
        -:12045:        }
        -:12046:        {
        1:12047:        while (1) {
        -:12048:          while_continue___54: /* CIL Label */ ;
        1:12049:          if ((unsigned long )p == (unsigned long )pend) {
    #####:12050:            return ((reg_errcode_t )14);
        -:12051:          }
        1:12052:          tmp___90 = p;
        1:12053:          p ++;
        1:12054:          c = (unsigned char )*tmp___90;
        1:12055:          if (translate) {
    #####:12056:            c = (unsigned char )*(translate + (int )c);
    #####:12057:          }
        1:12058:          goto while_break___54;
        -:12059:        }
        -:12060:        while_break___54: /* CIL Label */ ;
        -:12061:        }
        -:12062:      }
        -:12063:      while_break___53: /* CIL Label */ ;
        -:12064:      }
        1:12065:    }
        1:12066:    if ((int )c == 44) {
    #####:12067:      if ((unsigned long )p != (unsigned long )pend) {
        -:12068:        {
    #####:12069:        while (1) {
        -:12070:          while_continue___55: /* CIL Label */ ;
    #####:12071:          if ((unsigned long )p == (unsigned long )pend) {
    #####:12072:            return ((reg_errcode_t )14);
        -:12073:          }
    #####:12074:          tmp___91 = p;
    #####:12075:          p ++;
    #####:12076:          c = (unsigned char )*tmp___91;
    #####:12077:          if (translate) {
    #####:12078:            c = (unsigned char )*(translate + (int )c);
    #####:12079:          }
    #####:12080:          goto while_break___55;
        -:12081:        }
        -:12082:        while_break___55: /* CIL Label */ ;
        -:12083:        }
        -:12084:        {
    #####:12085:        while (1) {
        -:12086:          while_continue___56: /* CIL Label */ ;
    #####:12087:          if (48 <= (int )c) {
    #####:12088:            if (! ((int )c <= 57)) {
    #####:12089:              goto while_break___56;
        -:12090:            }
    #####:12091:          } else {
    #####:12092:            goto while_break___56;
        -:12093:          }
    #####:12094:          if (upper_bound < 0) {
    #####:12095:            upper_bound = 0;
    #####:12096:          }
    #####:12097:          upper_bound = (upper_bound * 10 + (int )c) - 48;
    #####:12098:          if ((unsigned long )p == (unsigned long )pend) {
    #####:12099:            goto while_break___56;
        -:12100:          }
        -:12101:          {
    #####:12102:          while (1) {
        -:12103:            while_continue___57: /* CIL Label */ ;
    #####:12104:            if ((unsigned long )p == (unsigned long )pend) {
    #####:12105:              return ((reg_errcode_t )14);
        -:12106:            }
    #####:12107:            tmp___92 = p;
    #####:12108:            p ++;
    #####:12109:            c = (unsigned char )*tmp___92;
    #####:12110:            if (translate) {
    #####:12111:              c = (unsigned char )*(translate + (int )c);
    #####:12112:            }
    #####:12113:            goto while_break___57;
        -:12114:          }
        -:12115:          while_break___57: /* CIL Label */ ;
        -:12116:          }
        -:12117:        }
        -:12118:        while_break___56: /* CIL Label */ ;
        -:12119:        }
    #####:12120:      }
    #####:12121:      if (upper_bound < 0) {
    #####:12122:        upper_bound = 32767;
    #####:12123:      }
    #####:12124:    } else {
        1:12125:      upper_bound = lower_bound;
        -:12126:    }
        1:12127:    if (lower_bound < 0) {
    #####:12128:      goto _L___22;
        -:12129:    } else { //Added block
        1:12130:    if (upper_bound > 32767) {
    #####:12131:      goto _L___22;
        -:12132:    } else { //Added block
        1:12133:    if (lower_bound > upper_bound) {
        -:12134:      _L___22: 
    #####:12135:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12136:        goto unfetch_interval;
        -:12137:      } else {
        -:12138:        {
    #####:12139:        free((void *)compile_stack.stack);
        -:12140:        }
    #####:12141:        return ((reg_errcode_t )10);
        -:12142:      }
        -:12143:    }
        -:12144:    }
        -:12145:    }
        1:12146:    if (! (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:12147:      if ((int )c != 92) {
        -:12148:        {
    #####:12149:        free((void *)compile_stack.stack);
        -:12150:        }
    #####:12151:        return ((reg_errcode_t )9);
        -:12152:      }
        -:12153:      {
    #####:12154:      while (1) {
        -:12155:        while_continue___58: /* CIL Label */ ;
    #####:12156:        if ((unsigned long )p == (unsigned long )pend) {
    #####:12157:          return ((reg_errcode_t )14);
        -:12158:        }
    #####:12159:        tmp___93 = p;
    #####:12160:        p ++;
    #####:12161:        c = (unsigned char )*tmp___93;
    #####:12162:        if (translate) {
    #####:12163:          c = (unsigned char )*(translate + (int )c);
    #####:12164:        }
    #####:12165:        goto while_break___58;
        -:12166:      }
        -:12167:      while_break___58: /* CIL Label */ ;
        -:12168:      }
    #####:12169:    }
        1:12170:    if ((int )c != 125) {
    #####:12171:      if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12172:        goto unfetch_interval;
        -:12173:      } else {
        -:12174:        {
    #####:12175:        free((void *)compile_stack.stack);
        -:12176:        }
    #####:12177:        return ((reg_errcode_t )10);
        -:12178:      }
        -:12179:    }
        1:12180:    if (! laststart___0) {
    #####:12181:      if (syntax & (((((1UL << 1) << 1) << 1) << 1) << 1)) {
        -:12182:        {
    #####:12183:        free((void *)compile_stack.stack);
        -:12184:        }
    #####:12185:        return ((reg_errcode_t )13);
        -:12186:      } else { //Added block
    #####:12187:      if (syntax & ((((1UL << 1) << 1) << 1) << 1)) {
    #####:12188:        laststart___0 = b;
    #####:12189:      } else {
    #####:12190:        goto unfetch_interval;
        -:12191:      }
        -:12192:      }
    #####:12193:    }
        1:12194:    if (upper_bound == 0) {
        -:12195:      {
    #####:12196:      while (1) {
        -:12197:        while_continue___59: /* CIL Label */ ;
    #####:12198:        if (! ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated)) {
    #####:12199:          goto while_break___59;
        -:12200:        }
        -:12201:        {
    #####:12202:        while (1) {
        -:12203:          while_continue___60: /* CIL Label */ ;
    #####:12204:          old_buffer___13 = bufp->buffer;
    #####:12205:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12206:            return ((reg_errcode_t )15);
        -:12207:          }
    #####:12208:          bufp->allocated <<= 1;
    #####:12209:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12210:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12211:          }
        -:12212:          {
    #####:12213:          tmp___94 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12214:          bufp->buffer = (unsigned char *)tmp___94;
        -:12215:          }
    #####:12216:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12217:            return ((reg_errcode_t )12);
        -:12218:          }
    #####:12219:          if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
    #####:12220:            b = bufp->buffer + (b - old_buffer___13);
    #####:12221:            begalt = bufp->buffer + (begalt - old_buffer___13);
    #####:12222:            if (fixup_alt_jump) {
    #####:12223:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
    #####:12224:            }
    #####:12225:            if (laststart___0) {
    #####:12226:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___13);
    #####:12227:            }
    #####:12228:            if (pending_exact) {
    #####:12229:              pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
    #####:12230:            }
    #####:12231:          }
    #####:12232:          goto while_break___60;
        -:12233:        }
        -:12234:        while_break___60: /* CIL Label */ ;
        -:12235:        }
        -:12236:      }
        -:12237:      while_break___59: /* CIL Label */ ;
        -:12238:      }
        -:12239:      {
    #####:12240:      insert_op1((re_opcode_t )13, laststart___0, (int )(((b + 3) - laststart___0) - 3L),
    #####:12241:                 b);
    #####:12242:      b += 3;
        -:12243:      }
    #####:12244:    } else {
        1:12245:      nbytes = (unsigned int )(10 + (upper_bound > 1) * 10);
        -:12246:      {
        1:12247:      while (1) {
        -:12248:        while_continue___61: /* CIL Label */ ;
        1:12249:        if (! ((unsigned long )((b - bufp->buffer) + (long )nbytes) > bufp->allocated)) {
        1:12250:          goto while_break___61;
        -:12251:        }
        -:12252:        {
    #####:12253:        while (1) {
        -:12254:          while_continue___62: /* CIL Label */ ;
    #####:12255:          old_buffer___14 = bufp->buffer;
    #####:12256:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12257:            return ((reg_errcode_t )15);
        -:12258:          }
    #####:12259:          bufp->allocated <<= 1;
    #####:12260:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12261:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12262:          }
        -:12263:          {
    #####:12264:          tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12265:          bufp->buffer = (unsigned char *)tmp___95;
        -:12266:          }
    #####:12267:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12268:            return ((reg_errcode_t )12);
        -:12269:          }
    #####:12270:          if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
    #####:12271:            b = bufp->buffer + (b - old_buffer___14);
    #####:12272:            begalt = bufp->buffer + (begalt - old_buffer___14);
    #####:12273:            if (fixup_alt_jump) {
    #####:12274:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
    #####:12275:            }
    #####:12276:            if (laststart___0) {
    #####:12277:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___14);
    #####:12278:            }
    #####:12279:            if (pending_exact) {
    #####:12280:              pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
    #####:12281:            }
    #####:12282:          }
    #####:12283:          goto while_break___62;
        -:12284:        }
        -:12285:        while_break___62: /* CIL Label */ ;
        -:12286:        }
        -:12287:      }
        -:12288:      while_break___61: /* CIL Label */ ;
        -:12289:      }
        -:12290:      {
        2:12291:      insert_op2((re_opcode_t )21, laststart___0, (int )((((b + 5) + (upper_bound > 1) * 5) - laststart___0) - 3L),
        1:12292:                 lower_bound, b);
        1:12293:      b += 5;
        1:12294:      insert_op2((re_opcode_t )23, laststart___0, 5, lower_bound, b);
        1:12295:      b += 5;
        -:12296:      }
        1:12297:      if (upper_bound > 1) {
        -:12298:        {
    #####:12299:        store_op2((re_opcode_t )22, b, (int )(((laststart___0 + 5) - b) - 3L), upper_bound - 1);
    #####:12300:        b += 5;
    #####:12301:        insert_op2((re_opcode_t )23, laststart___0, (int )(b - laststart___0), upper_bound - 1,
    #####:12302:                   b);
    #####:12303:        b += 5;
        -:12304:        }
    #####:12305:      }
        -:12306:    }
        1:12307:    pending_exact = (unsigned char *)0;
        1:12308:    beg_interval = (char const   *)((void *)0);
        1:12309:    goto switch_break___0;
        -:12310:    unfetch_interval: 
    #####:12311:    p = beg_interval;
    #####:12312:    beg_interval = (char const   *)((void *)0);
        -:12313:    {
    #####:12314:    while (1) {
        -:12315:      while_continue___63: /* CIL Label */ ;
    #####:12316:      if ((unsigned long )p == (unsigned long )pend) {
    #####:12317:        return ((reg_errcode_t )14);
        -:12318:      }
    #####:12319:      tmp___96 = p;
    #####:12320:      p ++;
    #####:12321:      c = (unsigned char )*tmp___96;
    #####:12322:      if (translate) {
    #####:12323:        c = (unsigned char )*(translate + (int )c);
    #####:12324:      }
    #####:12325:      goto while_break___63;
        -:12326:    }
        -:12327:    while_break___63: /* CIL Label */ ;
        -:12328:    }
    #####:12329:    if (! (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:12330:      if ((unsigned long )p > (unsigned long )pattern) {
    #####:12331:        if ((int const   )*(p + -1) == 92) {
    #####:12332:          goto normal_backslash;
        -:12333:        }
    #####:12334:      }
    #####:12335:    }
    #####:12336:    goto normal_char;
        -:12337:    case_119: /* CIL Label */ 
    #####:12338:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12339:      goto normal_char;
        -:12340:    }
    #####:12341:    laststart___0 = b;
        -:12342:    {
    #####:12343:    while (1) {
        -:12344:      while_continue___64: /* CIL Label */ ;
        -:12345:      {
    #####:12346:      while (1) {
        -:12347:        while_continue___65: /* CIL Label */ ;
    #####:12348:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12349:          goto while_break___65;
        -:12350:        }
        -:12351:        {
    #####:12352:        while (1) {
        -:12353:          while_continue___66: /* CIL Label */ ;
    #####:12354:          old_buffer___15 = bufp->buffer;
    #####:12355:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12356:            return ((reg_errcode_t )15);
        -:12357:          }
    #####:12358:          bufp->allocated <<= 1;
    #####:12359:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12360:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12361:          }
        -:12362:          {
    #####:12363:          tmp___97 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12364:          bufp->buffer = (unsigned char *)tmp___97;
        -:12365:          }
    #####:12366:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12367:            return ((reg_errcode_t )12);
        -:12368:          }
    #####:12369:          if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
    #####:12370:            b = bufp->buffer + (b - old_buffer___15);
    #####:12371:            begalt = bufp->buffer + (begalt - old_buffer___15);
    #####:12372:            if (fixup_alt_jump) {
    #####:12373:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
    #####:12374:            }
    #####:12375:            if (laststart___0) {
    #####:12376:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___15);
    #####:12377:            }
    #####:12378:            if (pending_exact) {
    #####:12379:              pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
    #####:12380:            }
    #####:12381:          }
    #####:12382:          goto while_break___66;
        -:12383:        }
        -:12384:        while_break___66: /* CIL Label */ ;
        -:12385:        }
        -:12386:      }
        -:12387:      while_break___65: /* CIL Label */ ;
        -:12388:      }
    #####:12389:      tmp___98 = b;
    #####:12390:      b ++;
    #####:12391:      *tmp___98 = (unsigned char)24;
    #####:12392:      goto while_break___64;
        -:12393:    }
        -:12394:    while_break___64: /* CIL Label */ ;
        -:12395:    }
    #####:12396:    goto switch_break___0;
        -:12397:    case_87: /* CIL Label */ 
    #####:12398:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12399:      goto normal_char;
        -:12400:    }
    #####:12401:    laststart___0 = b;
        -:12402:    {
    #####:12403:    while (1) {
        -:12404:      while_continue___67: /* CIL Label */ ;
        -:12405:      {
    #####:12406:      while (1) {
        -:12407:        while_continue___68: /* CIL Label */ ;
    #####:12408:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12409:          goto while_break___68;
        -:12410:        }
        -:12411:        {
    #####:12412:        while (1) {
        -:12413:          while_continue___69: /* CIL Label */ ;
    #####:12414:          old_buffer___16 = bufp->buffer;
    #####:12415:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12416:            return ((reg_errcode_t )15);
        -:12417:          }
    #####:12418:          bufp->allocated <<= 1;
    #####:12419:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12420:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12421:          }
        -:12422:          {
    #####:12423:          tmp___99 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12424:          bufp->buffer = (unsigned char *)tmp___99;
        -:12425:          }
    #####:12426:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12427:            return ((reg_errcode_t )12);
        -:12428:          }
    #####:12429:          if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
    #####:12430:            b = bufp->buffer + (b - old_buffer___16);
    #####:12431:            begalt = bufp->buffer + (begalt - old_buffer___16);
    #####:12432:            if (fixup_alt_jump) {
    #####:12433:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
    #####:12434:            }
    #####:12435:            if (laststart___0) {
    #####:12436:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___16);
    #####:12437:            }
    #####:12438:            if (pending_exact) {
    #####:12439:              pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
    #####:12440:            }
    #####:12441:          }
    #####:12442:          goto while_break___69;
        -:12443:        }
        -:12444:        while_break___69: /* CIL Label */ ;
        -:12445:        }
        -:12446:      }
        -:12447:      while_break___68: /* CIL Label */ ;
        -:12448:      }
    #####:12449:      tmp___100 = b;
    #####:12450:      b ++;
    #####:12451:      *tmp___100 = (unsigned char)25;
    #####:12452:      goto while_break___67;
        -:12453:    }
        -:12454:    while_break___67: /* CIL Label */ ;
        -:12455:    }
    #####:12456:    goto switch_break___0;
        -:12457:    case_60: /* CIL Label */ 
    #####:12458:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12459:      goto normal_char;
        -:12460:    }
        -:12461:    {
    #####:12462:    while (1) {
        -:12463:      while_continue___70: /* CIL Label */ ;
        -:12464:      {
    #####:12465:      while (1) {
        -:12466:        while_continue___71: /* CIL Label */ ;
    #####:12467:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12468:          goto while_break___71;
        -:12469:        }
        -:12470:        {
    #####:12471:        while (1) {
        -:12472:          while_continue___72: /* CIL Label */ ;
    #####:12473:          old_buffer___17 = bufp->buffer;
    #####:12474:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12475:            return ((reg_errcode_t )15);
        -:12476:          }
    #####:12477:          bufp->allocated <<= 1;
    #####:12478:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12479:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12480:          }
        -:12481:          {
    #####:12482:          tmp___101 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12483:          bufp->buffer = (unsigned char *)tmp___101;
        -:12484:          }
    #####:12485:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12486:            return ((reg_errcode_t )12);
        -:12487:          }
    #####:12488:          if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
    #####:12489:            b = bufp->buffer + (b - old_buffer___17);
    #####:12490:            begalt = bufp->buffer + (begalt - old_buffer___17);
    #####:12491:            if (fixup_alt_jump) {
    #####:12492:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
    #####:12493:            }
    #####:12494:            if (laststart___0) {
    #####:12495:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___17);
    #####:12496:            }
    #####:12497:            if (pending_exact) {
    #####:12498:              pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
    #####:12499:            }
    #####:12500:          }
    #####:12501:          goto while_break___72;
        -:12502:        }
        -:12503:        while_break___72: /* CIL Label */ ;
        -:12504:        }
        -:12505:      }
        -:12506:      while_break___71: /* CIL Label */ ;
        -:12507:      }
    #####:12508:      tmp___102 = b;
    #####:12509:      b ++;
    #####:12510:      *tmp___102 = (unsigned char)26;
    #####:12511:      goto while_break___70;
        -:12512:    }
        -:12513:    while_break___70: /* CIL Label */ ;
        -:12514:    }
    #####:12515:    goto switch_break___0;
        -:12516:    case_62: /* CIL Label */ 
    #####:12517:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12518:      goto normal_char;
        -:12519:    }
        -:12520:    {
    #####:12521:    while (1) {
        -:12522:      while_continue___73: /* CIL Label */ ;
        -:12523:      {
    #####:12524:      while (1) {
        -:12525:        while_continue___74: /* CIL Label */ ;
    #####:12526:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12527:          goto while_break___74;
        -:12528:        }
        -:12529:        {
    #####:12530:        while (1) {
        -:12531:          while_continue___75: /* CIL Label */ ;
    #####:12532:          old_buffer___18 = bufp->buffer;
    #####:12533:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12534:            return ((reg_errcode_t )15);
        -:12535:          }
    #####:12536:          bufp->allocated <<= 1;
    #####:12537:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12538:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12539:          }
        -:12540:          {
    #####:12541:          tmp___103 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12542:          bufp->buffer = (unsigned char *)tmp___103;
        -:12543:          }
    #####:12544:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12545:            return ((reg_errcode_t )12);
        -:12546:          }
    #####:12547:          if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
    #####:12548:            b = bufp->buffer + (b - old_buffer___18);
    #####:12549:            begalt = bufp->buffer + (begalt - old_buffer___18);
    #####:12550:            if (fixup_alt_jump) {
    #####:12551:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
    #####:12552:            }
    #####:12553:            if (laststart___0) {
    #####:12554:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___18);
    #####:12555:            }
    #####:12556:            if (pending_exact) {
    #####:12557:              pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
    #####:12558:            }
    #####:12559:          }
    #####:12560:          goto while_break___75;
        -:12561:        }
        -:12562:        while_break___75: /* CIL Label */ ;
        -:12563:        }
        -:12564:      }
        -:12565:      while_break___74: /* CIL Label */ ;
        -:12566:      }
    #####:12567:      tmp___104 = b;
    #####:12568:      b ++;
    #####:12569:      *tmp___104 = (unsigned char)27;
    #####:12570:      goto while_break___73;
        -:12571:    }
        -:12572:    while_break___73: /* CIL Label */ ;
        -:12573:    }
    #####:12574:    goto switch_break___0;
        -:12575:    case_98: /* CIL Label */ 
    #####:12576:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12577:      goto normal_char;
        -:12578:    }
        -:12579:    {
    #####:12580:    while (1) {
        -:12581:      while_continue___76: /* CIL Label */ ;
        -:12582:      {
    #####:12583:      while (1) {
        -:12584:        while_continue___77: /* CIL Label */ ;
    #####:12585:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12586:          goto while_break___77;
        -:12587:        }
        -:12588:        {
    #####:12589:        while (1) {
        -:12590:          while_continue___78: /* CIL Label */ ;
    #####:12591:          old_buffer___19 = bufp->buffer;
    #####:12592:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12593:            return ((reg_errcode_t )15);
        -:12594:          }
    #####:12595:          bufp->allocated <<= 1;
    #####:12596:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12597:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12598:          }
        -:12599:          {
    #####:12600:          tmp___105 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12601:          bufp->buffer = (unsigned char *)tmp___105;
        -:12602:          }
    #####:12603:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12604:            return ((reg_errcode_t )12);
        -:12605:          }
    #####:12606:          if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
    #####:12607:            b = bufp->buffer + (b - old_buffer___19);
    #####:12608:            begalt = bufp->buffer + (begalt - old_buffer___19);
    #####:12609:            if (fixup_alt_jump) {
    #####:12610:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
    #####:12611:            }
    #####:12612:            if (laststart___0) {
    #####:12613:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___19);
    #####:12614:            }
    #####:12615:            if (pending_exact) {
    #####:12616:              pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
    #####:12617:            }
    #####:12618:          }
    #####:12619:          goto while_break___78;
        -:12620:        }
        -:12621:        while_break___78: /* CIL Label */ ;
        -:12622:        }
        -:12623:      }
        -:12624:      while_break___77: /* CIL Label */ ;
        -:12625:      }
    #####:12626:      tmp___106 = b;
    #####:12627:      b ++;
    #####:12628:      *tmp___106 = (unsigned char)28;
    #####:12629:      goto while_break___76;
        -:12630:    }
        -:12631:    while_break___76: /* CIL Label */ ;
        -:12632:    }
    #####:12633:    goto switch_break___0;
        -:12634:    case_66: /* CIL Label */ 
    #####:12635:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12636:      goto normal_char;
        -:12637:    }
        -:12638:    {
    #####:12639:    while (1) {
        -:12640:      while_continue___79: /* CIL Label */ ;
        -:12641:      {
    #####:12642:      while (1) {
        -:12643:        while_continue___80: /* CIL Label */ ;
    #####:12644:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12645:          goto while_break___80;
        -:12646:        }
        -:12647:        {
    #####:12648:        while (1) {
        -:12649:          while_continue___81: /* CIL Label */ ;
    #####:12650:          old_buffer___20 = bufp->buffer;
    #####:12651:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12652:            return ((reg_errcode_t )15);
        -:12653:          }
    #####:12654:          bufp->allocated <<= 1;
    #####:12655:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12656:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12657:          }
        -:12658:          {
    #####:12659:          tmp___107 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12660:          bufp->buffer = (unsigned char *)tmp___107;
        -:12661:          }
    #####:12662:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12663:            return ((reg_errcode_t )12);
        -:12664:          }
    #####:12665:          if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
    #####:12666:            b = bufp->buffer + (b - old_buffer___20);
    #####:12667:            begalt = bufp->buffer + (begalt - old_buffer___20);
    #####:12668:            if (fixup_alt_jump) {
    #####:12669:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
    #####:12670:            }
    #####:12671:            if (laststart___0) {
    #####:12672:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___20);
    #####:12673:            }
    #####:12674:            if (pending_exact) {
    #####:12675:              pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
    #####:12676:            }
    #####:12677:          }
    #####:12678:          goto while_break___81;
        -:12679:        }
        -:12680:        while_break___81: /* CIL Label */ ;
        -:12681:        }
        -:12682:      }
        -:12683:      while_break___80: /* CIL Label */ ;
        -:12684:      }
    #####:12685:      tmp___108 = b;
    #####:12686:      b ++;
    #####:12687:      *tmp___108 = (unsigned char)29;
    #####:12688:      goto while_break___79;
        -:12689:    }
        -:12690:    while_break___79: /* CIL Label */ ;
        -:12691:    }
    #####:12692:    goto switch_break___0;
        -:12693:    case_96: /* CIL Label */ 
    #####:12694:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12695:      goto normal_char;
        -:12696:    }
        -:12697:    {
    #####:12698:    while (1) {
        -:12699:      while_continue___82: /* CIL Label */ ;
        -:12700:      {
    #####:12701:      while (1) {
        -:12702:        while_continue___83: /* CIL Label */ ;
    #####:12703:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12704:          goto while_break___83;
        -:12705:        }
        -:12706:        {
    #####:12707:        while (1) {
        -:12708:          while_continue___84: /* CIL Label */ ;
    #####:12709:          old_buffer___21 = bufp->buffer;
    #####:12710:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12711:            return ((reg_errcode_t )15);
        -:12712:          }
    #####:12713:          bufp->allocated <<= 1;
    #####:12714:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12715:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12716:          }
        -:12717:          {
    #####:12718:          tmp___109 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12719:          bufp->buffer = (unsigned char *)tmp___109;
        -:12720:          }
    #####:12721:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12722:            return ((reg_errcode_t )12);
        -:12723:          }
    #####:12724:          if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
    #####:12725:            b = bufp->buffer + (b - old_buffer___21);
    #####:12726:            begalt = bufp->buffer + (begalt - old_buffer___21);
    #####:12727:            if (fixup_alt_jump) {
    #####:12728:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
    #####:12729:            }
    #####:12730:            if (laststart___0) {
    #####:12731:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___21);
    #####:12732:            }
    #####:12733:            if (pending_exact) {
    #####:12734:              pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
    #####:12735:            }
    #####:12736:          }
    #####:12737:          goto while_break___84;
        -:12738:        }
        -:12739:        while_break___84: /* CIL Label */ ;
        -:12740:        }
        -:12741:      }
        -:12742:      while_break___83: /* CIL Label */ ;
        -:12743:      }
    #####:12744:      tmp___110 = b;
    #####:12745:      b ++;
    #####:12746:      *tmp___110 = (unsigned char)11;
    #####:12747:      goto while_break___82;
        -:12748:    }
        -:12749:    while_break___82: /* CIL Label */ ;
        -:12750:    }
    #####:12751:    goto switch_break___0;
        -:12752:    case_39: /* CIL Label */ 
    #####:12753:    if (syntax & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12754:      goto normal_char;
        -:12755:    }
        -:12756:    {
    #####:12757:    while (1) {
        -:12758:      while_continue___85: /* CIL Label */ ;
        -:12759:      {
    #####:12760:      while (1) {
        -:12761:        while_continue___86: /* CIL Label */ ;
    #####:12762:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:12763:          goto while_break___86;
        -:12764:        }
        -:12765:        {
    #####:12766:        while (1) {
        -:12767:          while_continue___87: /* CIL Label */ ;
    #####:12768:          old_buffer___22 = bufp->buffer;
    #####:12769:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12770:            return ((reg_errcode_t )15);
        -:12771:          }
    #####:12772:          bufp->allocated <<= 1;
    #####:12773:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12774:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12775:          }
        -:12776:          {
    #####:12777:          tmp___111 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12778:          bufp->buffer = (unsigned char *)tmp___111;
        -:12779:          }
    #####:12780:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12781:            return ((reg_errcode_t )12);
        -:12782:          }
    #####:12783:          if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
    #####:12784:            b = bufp->buffer + (b - old_buffer___22);
    #####:12785:            begalt = bufp->buffer + (begalt - old_buffer___22);
    #####:12786:            if (fixup_alt_jump) {
    #####:12787:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
    #####:12788:            }
    #####:12789:            if (laststart___0) {
    #####:12790:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___22);
    #####:12791:            }
    #####:12792:            if (pending_exact) {
    #####:12793:              pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
    #####:12794:            }
    #####:12795:          }
    #####:12796:          goto while_break___87;
        -:12797:        }
        -:12798:        while_break___87: /* CIL Label */ ;
        -:12799:        }
        -:12800:      }
        -:12801:      while_break___86: /* CIL Label */ ;
        -:12802:      }
    #####:12803:      tmp___112 = b;
    #####:12804:      b ++;
    #####:12805:      *tmp___112 = (unsigned char)12;
    #####:12806:      goto while_break___85;
        -:12807:    }
        -:12808:    while_break___85: /* CIL Label */ ;
        -:12809:    }
    #####:12810:    goto switch_break___0;
        -:12811:    case_49: /* CIL Label */ 
        -:12812:    case_50: /* CIL Label */ 
        -:12813:    case_51: /* CIL Label */ 
        -:12814:    case_52: /* CIL Label */ 
        -:12815:    case_53: /* CIL Label */ 
        -:12816:    case_54: /* CIL Label */ 
        -:12817:    case_55: /* CIL Label */ 
        -:12818:    case_56: /* CIL Label */ 
        -:12819:    case_57: /* CIL Label */ 
    #####:12820:    if (syntax & ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:12821:      goto normal_char;
        -:12822:    }
    #####:12823:    c1 = (unsigned char )((int )c - 48);
    #####:12824:    if ((regnum_t )c1 > regnum) {
        -:12825:      {
    #####:12826:      free((void *)compile_stack.stack);
        -:12827:      }
    #####:12828:      return ((reg_errcode_t )6);
        -:12829:    }
        -:12830:    {
    #####:12831:    tmp___113 = group_in_compile_stack(compile_stack, (regnum_t )c1);
        -:12832:    }
    #####:12833:    if (tmp___113) {
    #####:12834:      goto normal_char;
        -:12835:    }
    #####:12836:    laststart___0 = b;
        -:12837:    {
    #####:12838:    while (1) {
        -:12839:      while_continue___88: /* CIL Label */ ;
        -:12840:      {
    #####:12841:      while (1) {
        -:12842:        while_continue___89: /* CIL Label */ ;
    #####:12843:        if (! ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated)) {
    #####:12844:          goto while_break___89;
        -:12845:        }
        -:12846:        {
    #####:12847:        while (1) {
        -:12848:          while_continue___90: /* CIL Label */ ;
    #####:12849:          old_buffer___23 = bufp->buffer;
    #####:12850:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12851:            return ((reg_errcode_t )15);
        -:12852:          }
    #####:12853:          bufp->allocated <<= 1;
    #####:12854:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12855:            bufp->allocated = (unsigned long )(1L << 16);
    #####:12856:          }
        -:12857:          {
    #####:12858:          tmp___114 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12859:          bufp->buffer = (unsigned char *)tmp___114;
        -:12860:          }
    #####:12861:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:12862:            return ((reg_errcode_t )12);
        -:12863:          }
    #####:12864:          if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
    #####:12865:            b = bufp->buffer + (b - old_buffer___23);
    #####:12866:            begalt = bufp->buffer + (begalt - old_buffer___23);
    #####:12867:            if (fixup_alt_jump) {
    #####:12868:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
    #####:12869:            }
    #####:12870:            if (laststart___0) {
    #####:12871:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___23);
    #####:12872:            }
    #####:12873:            if (pending_exact) {
    #####:12874:              pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
    #####:12875:            }
    #####:12876:          }
    #####:12877:          goto while_break___90;
        -:12878:        }
        -:12879:        while_break___90: /* CIL Label */ ;
        -:12880:        }
        -:12881:      }
        -:12882:      while_break___89: /* CIL Label */ ;
        -:12883:      }
    #####:12884:      tmp___115 = b;
    #####:12885:      b ++;
    #####:12886:      *tmp___115 = (unsigned char)8;
    #####:12887:      tmp___116 = b;
    #####:12888:      b ++;
    #####:12889:      *tmp___116 = c1;
    #####:12890:      goto while_break___88;
        -:12891:    }
        -:12892:    while_break___88: /* CIL Label */ ;
        -:12893:    }
    #####:12894:    goto switch_break___0;
        -:12895:    case_43___0: /* CIL Label */ 
        -:12896:    case_63___0: /* CIL Label */ 
    #####:12897:    if (syntax & (1UL << 1)) {
    #####:12898:      goto handle_plus;
        -:12899:    }
        -:12900:    normal_backslash: 
        -:12901:    switch_default: /* CIL Label */ 
    #####:12902:    if (translate) {
    #####:12903:      c = (unsigned char )*(translate + (int )c);
    #####:12904:    } else {
    #####:12905:      c = c;
        -:12906:    }
    #####:12907:    goto normal_char;
        -:12908:    switch_break___0: /* CIL Label */ ;
        -:12909:    }
       14:12910:    goto switch_break;
        -:12911:    normal_char: 
        -:12912:    switch_default___0: /* CIL Label */ 
       12:12913:    if (! pending_exact) {
        3:12914:      goto _L___23;
        -:12915:    } else { //Added block
        9:12916:    if ((unsigned long )((pending_exact + (int )*pending_exact) + 1) != (unsigned long )b) {
    #####:12917:      goto _L___23;
        -:12918:    } else { //Added block
        9:12919:    if ((int )*pending_exact == (1 << 8) - 1) {
    #####:12920:      goto _L___23;
        -:12921:    } else { //Added block
        9:12922:    if ((int const   )*p == 42) {
    #####:12923:      goto _L___23;
        -:12924:    } else { //Added block
        9:12925:    if ((int const   )*p == 94) {
    #####:12926:      goto _L___23;
        -:12927:    } else {
        9:12928:      if (syntax & (1UL << 1)) {
    #####:12929:        if ((int const   )*p == 92) {
    #####:12930:          if ((int const   )*(p + 1) == 43) {
    #####:12931:            tmp___120 = 1;
    #####:12932:          } else { //Added block
    #####:12933:          if ((int const   )*(p + 1) == 63) {
    #####:12934:            tmp___120 = 1;
    #####:12935:          } else {
    #####:12936:            tmp___120 = 0;
        -:12937:          }
        -:12938:          }
    #####:12939:        } else {
    #####:12940:          tmp___120 = 0;
        -:12941:        }
    #####:12942:        tmp___122 = tmp___120;
    #####:12943:      } else {
        9:12944:        if ((int const   )*p == 43) {
    #####:12945:          tmp___121 = 1;
    #####:12946:        } else { //Added block
        9:12947:        if ((int const   )*p == 63) {
    #####:12948:          tmp___121 = 1;
    #####:12949:        } else {
        9:12950:          tmp___121 = 0;
        -:12951:        }
        -:12952:        }
        9:12953:        tmp___122 = tmp___121;
        -:12954:      }
        9:12955:      if (tmp___122) {
    #####:12956:        goto _L___23;
        -:12957:      } else { //Added block
        9:12958:      if (syntax & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        9:12959:        if (syntax & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        9:12960:          tmp___124 = (int const   )*p == 123;
        9:12961:        } else {
    #####:12962:          if ((int const   )*(p + 0) == 92) {
    #####:12963:            if ((int const   )*(p + 1) == 123) {
    #####:12964:              tmp___123 = 1;
    #####:12965:            } else {
    #####:12966:              tmp___123 = 0;
        -:12967:            }
    #####:12968:          } else {
    #####:12969:            tmp___123 = 0;
        -:12970:          }
    #####:12971:          tmp___124 = tmp___123;
        -:12972:        }
        9:12973:        if (tmp___124) {
        -:12974:          _L___23: 
        3:12975:          laststart___0 = b;
        -:12976:          {
        3:12977:          while (1) {
        -:12978:            while_continue___91: /* CIL Label */ ;
        -:12979:            {
        3:12980:            while (1) {
        -:12981:              while_continue___92: /* CIL Label */ ;
        3:12982:              if (! ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated)) {
        3:12983:                goto while_break___92;
        -:12984:              }
        -:12985:              {
    #####:12986:              while (1) {
        -:12987:                while_continue___93: /* CIL Label */ ;
    #####:12988:                old_buffer___24 = bufp->buffer;
    #####:12989:                if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:12990:                  return ((reg_errcode_t )15);
        -:12991:                }
    #####:12992:                bufp->allocated <<= 1;
    #####:12993:                if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:12994:                  bufp->allocated = (unsigned long )(1L << 16);
    #####:12995:                }
        -:12996:                {
    #####:12997:                tmp___117 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:12998:                bufp->buffer = (unsigned char *)tmp___117;
        -:12999:                }
    #####:13000:                if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13001:                  return ((reg_errcode_t )12);
        -:13002:                }
    #####:13003:                if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
    #####:13004:                  b = bufp->buffer + (b - old_buffer___24);
    #####:13005:                  begalt = bufp->buffer + (begalt - old_buffer___24);
    #####:13006:                  if (fixup_alt_jump) {
    #####:13007:                    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
    #####:13008:                  }
    #####:13009:                  if (laststart___0) {
    #####:13010:                    laststart___0 = bufp->buffer + (laststart___0 - old_buffer___24);
    #####:13011:                  }
    #####:13012:                  if (pending_exact) {
    #####:13013:                    pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
    #####:13014:                  }
    #####:13015:                }
    #####:13016:                goto while_break___93;
        -:13017:              }
        -:13018:              while_break___93: /* CIL Label */ ;
        -:13019:              }
        -:13020:            }
        -:13021:            while_break___92: /* CIL Label */ ;
        -:13022:            }
        3:13023:            tmp___118 = b;
        3:13024:            b ++;
        3:13025:            *tmp___118 = (unsigned char)2;
        3:13026:            tmp___119 = b;
        3:13027:            b ++;
        3:13028:            *tmp___119 = (unsigned char)0;
        3:13029:            goto while_break___91;
        -:13030:          }
        -:13031:          while_break___91: /* CIL Label */ ;
        -:13032:          }
        3:13033:          pending_exact = b - 1;
        3:13034:        }
       12:13035:      }
        -:13036:      }
        -:13037:    }
        -:13038:    }
        -:13039:    }
        -:13040:    }
        -:13041:    }
        -:13042:    {
       12:13043:    while (1) {
        -:13044:      while_continue___94: /* CIL Label */ ;
        -:13045:      {
       13:13046:      while (1) {
        -:13047:        while_continue___95: /* CIL Label */ ;
       13:13048:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
       12:13049:          goto while_break___95;
        -:13050:        }
        -:13051:        {
        1:13052:        while (1) {
        -:13053:          while_continue___96: /* CIL Label */ ;
        1:13054:          old_buffer___25 = bufp->buffer;
        1:13055:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13056:            return ((reg_errcode_t )15);
        -:13057:          }
        1:13058:          bufp->allocated <<= 1;
        1:13059:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13060:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13061:          }
        -:13062:          {
        1:13063:          tmp___125 = realloc((void *)bufp->buffer, bufp->allocated);
        1:13064:          bufp->buffer = (unsigned char *)tmp___125;
        -:13065:          }
        1:13066:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13067:            return ((reg_errcode_t )12);
        -:13068:          }
        1:13069:          if ((unsigned long )old_buffer___25 != (unsigned long )bufp->buffer) {
    #####:13070:            b = bufp->buffer + (b - old_buffer___25);
    #####:13071:            begalt = bufp->buffer + (begalt - old_buffer___25);
    #####:13072:            if (fixup_alt_jump) {
    #####:13073:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
    #####:13074:            }
    #####:13075:            if (laststart___0) {
    #####:13076:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___25);
    #####:13077:            }
    #####:13078:            if (pending_exact) {
    #####:13079:              pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
    #####:13080:            }
    #####:13081:          }
        1:13082:          goto while_break___96;
        -:13083:        }
        -:13084:        while_break___96: /* CIL Label */ ;
        -:13085:        }
        -:13086:      }
        -:13087:      while_break___95: /* CIL Label */ ;
        -:13088:      }
       12:13089:      tmp___126 = b;
       12:13090:      b ++;
       12:13091:      *tmp___126 = c;
       12:13092:      goto while_break___94;
        -:13093:    }
        -:13094:    while_break___94: /* CIL Label */ ;
        -:13095:    }
       12:13096:    *pending_exact = (unsigned char )((int )*pending_exact + 1);
       12:13097:    goto switch_break;
        -:13098:    switch_break: /* CIL Label */ ;
        -:13099:    }
        -:13100:  }
        -:13101:  while_break: /* CIL Label */ ;
        -:13102:  }
        1:13103:  if (fixup_alt_jump) {
        -:13104:    {
        1:13105:    store_op1((re_opcode_t )14, fixup_alt_jump, (int )((b - fixup_alt_jump) - 3L));
        -:13106:    }
        1:13107:  }
        1:13108:  if (! (compile_stack.avail == 0U)) {
        -:13109:    {
    #####:13110:    free((void *)compile_stack.stack);
        -:13111:    }
    #####:13112:    return ((reg_errcode_t )8);
        -:13113:  }
        1:13114:  if (syntax & ((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
        -:13115:    {
    #####:13116:    while (1) {
        -:13117:      while_continue___97: /* CIL Label */ ;
        -:13118:      {
    #####:13119:      while (1) {
        -:13120:        while_continue___98: /* CIL Label */ ;
    #####:13121:        if (! ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated)) {
    #####:13122:          goto while_break___98;
        -:13123:        }
        -:13124:        {
    #####:13125:        while (1) {
        -:13126:          while_continue___99: /* CIL Label */ ;
    #####:13127:          old_buffer___26 = bufp->buffer;
    #####:13128:          if (bufp->allocated == (unsigned long )(1L << 16)) {
    #####:13129:            return ((reg_errcode_t )15);
        -:13130:          }
    #####:13131:          bufp->allocated <<= 1;
    #####:13132:          if (bufp->allocated > (unsigned long )(1L << 16)) {
    #####:13133:            bufp->allocated = (unsigned long )(1L << 16);
    #####:13134:          }
        -:13135:          {
    #####:13136:          tmp___127 = realloc((void *)bufp->buffer, bufp->allocated);
    #####:13137:          bufp->buffer = (unsigned char *)tmp___127;
        -:13138:          }
    #####:13139:          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
    #####:13140:            return ((reg_errcode_t )12);
        -:13141:          }
    #####:13142:          if ((unsigned long )old_buffer___26 != (unsigned long )bufp->buffer) {
    #####:13143:            b = bufp->buffer + (b - old_buffer___26);
    #####:13144:            begalt = bufp->buffer + (begalt - old_buffer___26);
    #####:13145:            if (fixup_alt_jump) {
    #####:13146:              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___26);
    #####:13147:            }
    #####:13148:            if (laststart___0) {
    #####:13149:              laststart___0 = bufp->buffer + (laststart___0 - old_buffer___26);
    #####:13150:            }
    #####:13151:            if (pending_exact) {
    #####:13152:              pending_exact = bufp->buffer + (pending_exact - old_buffer___26);
    #####:13153:            }
    #####:13154:          }
    #####:13155:          goto while_break___99;
        -:13156:        }
        -:13157:        while_break___99: /* CIL Label */ ;
        -:13158:        }
        -:13159:      }
        -:13160:      while_break___98: /* CIL Label */ ;
        -:13161:      }
    #####:13162:      tmp___128 = b;
    #####:13163:      b ++;
    #####:13164:      *tmp___128 = (unsigned char)1;
    #####:13165:      goto while_break___97;
        -:13166:    }
        -:13167:    while_break___97: /* CIL Label */ ;
        -:13168:    }
    #####:13169:  }
        -:13170:  {
        1:13171:  free((void *)compile_stack.stack);
        1:13172:  bufp->used = (unsigned long )(b - bufp->buffer);
        -:13173:  }
        1:13174:  return ((reg_errcode_t )0);
        -:13175:}
        1:13176:}
        2:13177:static void store_op1(re_opcode_t op , unsigned char *loc , int arg ) 
        -:13178:{ 
        -:13179:
        -:13180:
        -:13181:  {
        2:13182:  *loc = (unsigned char )op;
        -:13183:  {
        2:13184:  while (1) {
        -:13185:    while_continue: /* CIL Label */ ;
        2:13186:    *((loc + 1) + 0) = (unsigned char )(arg & 255);
        2:13187:    *((loc + 1) + 1) = (unsigned char )(arg >> 8);
        2:13188:    goto while_break;
        -:13189:  }
        -:13190:  while_break: /* CIL Label */ ;
        -:13191:  }
        2:13192:  return;
        -:13193:}
        -:13194:}
        2:13195:static void store_op2(re_opcode_t op , unsigned char *loc , int arg1 , int arg2 ) 
        -:13196:{ 
        -:13197:
        -:13198:
        -:13199:  {
        2:13200:  *loc = (unsigned char )op;
        -:13201:  {
        2:13202:  while (1) {
        -:13203:    while_continue: /* CIL Label */ ;
        2:13204:    *((loc + 1) + 0) = (unsigned char )(arg1 & 255);
        2:13205:    *((loc + 1) + 1) = (unsigned char )(arg1 >> 8);
        2:13206:    goto while_break;
        -:13207:  }
        -:13208:  while_break: /* CIL Label */ ;
        -:13209:  }
        -:13210:  {
        2:13211:  while (1) {
        -:13212:    while_continue___0: /* CIL Label */ ;
        2:13213:    *((loc + 3) + 0) = (unsigned char )(arg2 & 255);
        2:13214:    *((loc + 3) + 1) = (unsigned char )(arg2 >> 8);
        2:13215:    goto while_break___0;
        -:13216:  }
        -:13217:  while_break___0: /* CIL Label */ ;
        -:13218:  }
        2:13219:  return;
        -:13220:}
        -:13221:}
        1:13222:static void insert_op1(re_opcode_t op , unsigned char *loc , int arg , unsigned char *end ) 
        -:13223:{ 
        -:13224:  register unsigned char *pfrom ;
        -:13225:  register unsigned char *pto ;
        -:13226:
        -:13227:  {
        1:13228:  pfrom = end;
        1:13229:  pto = end + 3;
        -:13230:  {
       10:13231:  while (1) {
        -:13232:    while_continue: /* CIL Label */ ;
       10:13233:    if (! ((unsigned long )pfrom != (unsigned long )loc)) {
        1:13234:      goto while_break;
        -:13235:    }
        9:13236:    pto --;
        9:13237:    pfrom --;
        9:13238:    *pto = *pfrom;
        -:13239:  }
        -:13240:  while_break: /* CIL Label */ ;
        -:13241:  }
        -:13242:  {
        1:13243:  store_op1(op, loc, arg);
        -:13244:  }
        1:13245:  return;
        -:13246:}
        -:13247:}
        2:13248:static void insert_op2(re_opcode_t op , unsigned char *loc , int arg1 , int arg2 ,
        -:13249:                       unsigned char *end ) 
        -:13250:{ 
        -:13251:  register unsigned char *pfrom ;
        -:13252:  register unsigned char *pto ;
        -:13253:
        -:13254:  {
        2:13255:  pfrom = end;
        2:13256:  pto = end + 5;
        -:13257:  {
       13:13258:  while (1) {
        -:13259:    while_continue: /* CIL Label */ ;
       13:13260:    if (! ((unsigned long )pfrom != (unsigned long )loc)) {
        2:13261:      goto while_break;
        -:13262:    }
       11:13263:    pto --;
       11:13264:    pfrom --;
       11:13265:    *pto = *pfrom;
        -:13266:  }
        -:13267:  while_break: /* CIL Label */ ;
        -:13268:  }
        -:13269:  {
        2:13270:  store_op2(op, loc, arg1, arg2);
        -:13271:  }
        2:13272:  return;
        -:13273:}
        -:13274:}
    #####:13275:static boolean at_begline_loc_p(char const   *pattern , char const   *p , reg_syntax_t syntax ) 
        -:13276:{ 
        -:13277:  char const   *prev ;
        -:13278:  boolean prev_prev_backslash ;
        -:13279:  int tmp ;
        -:13280:  int tmp___0 ;
        -:13281:
        -:13282:  {
    #####:13283:  prev = p - 2;
    #####:13284:  if ((unsigned long )prev > (unsigned long )pattern) {
    #####:13285:    if ((int const   )*(prev + -1) == 92) {
    #####:13286:      tmp = 1;
    #####:13287:    } else {
    #####:13288:      tmp = 0;
        -:13289:    }
    #####:13290:  } else {
    #####:13291:    tmp = 0;
        -:13292:  }
    #####:13293:  prev_prev_backslash = (boolean )tmp;
    #####:13294:  if ((int const   )*prev == 40) {
    #####:13295:    if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13296:      tmp___0 = 1;
    #####:13297:    } else { //Added block
    #####:13298:    if (prev_prev_backslash) {
    #####:13299:      tmp___0 = 1;
    #####:13300:    } else {
    #####:13301:      goto _L;
        -:13302:    }
        -:13303:    }
    #####:13304:  } else { //Added block
        -:13305:  _L: 
    #####:13306:  if ((int const   )*prev == 124) {
    #####:13307:    if (syntax & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13308:      tmp___0 = 1;
    #####:13309:    } else { //Added block
    #####:13310:    if (prev_prev_backslash) {
    #####:13311:      tmp___0 = 1;
    #####:13312:    } else {
    #####:13313:      tmp___0 = 0;
        -:13314:    }
        -:13315:    }
    #####:13316:  } else {
    #####:13317:    tmp___0 = 0;
        -:13318:  }
        -:13319:  }
    #####:13320:  return ((boolean )tmp___0);
        -:13321:}
        -:13322:}
    #####:13323:static boolean at_endline_loc_p(char const   *p , char const   *pend , reg_syntax_t syntax ) 
        -:13324:{ 
        -:13325:  char const   *next ;
        -:13326:  boolean next_backslash ;
        -:13327:  char const   *next_next ;
        -:13328:  char const   *tmp ;
        -:13329:  int tmp___0 ;
        -:13330:  int tmp___1 ;
        -:13331:  int tmp___2 ;
        -:13332:  int tmp___3 ;
        -:13333:  int tmp___4 ;
        -:13334:
        -:13335:  {
    #####:13336:  next = p;
    #####:13337:  next_backslash = (boolean )((int const   )*next == 92);
    #####:13338:  if ((unsigned long )(p + 1) < (unsigned long )pend) {
    #####:13339:    tmp = p + 1;
    #####:13340:  } else {
    #####:13341:    tmp = (char const   *)0;
        -:13342:  }
    #####:13343:  next_next = tmp;
    #####:13344:  if (syntax & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13345:    tmp___1 = (int const   )*next == 41;
    #####:13346:  } else {
    #####:13347:    if (next_backslash) {
    #####:13348:      if (next_next) {
    #####:13349:        if ((int const   )*next_next == 41) {
    #####:13350:          tmp___0 = 1;
    #####:13351:        } else {
    #####:13352:          tmp___0 = 0;
        -:13353:        }
    #####:13354:      } else {
    #####:13355:        tmp___0 = 0;
        -:13356:      }
    #####:13357:    } else {
    #####:13358:      tmp___0 = 0;
        -:13359:    }
    #####:13360:    tmp___1 = tmp___0;
        -:13361:  }
    #####:13362:  if (tmp___1) {
    #####:13363:    tmp___4 = 1;
    #####:13364:  } else {
    #####:13365:    if (syntax & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13366:      tmp___3 = (int const   )*next == 124;
    #####:13367:    } else {
    #####:13368:      if (next_backslash) {
    #####:13369:        if (next_next) {
    #####:13370:          if ((int const   )*next_next == 124) {
    #####:13371:            tmp___2 = 1;
    #####:13372:          } else {
    #####:13373:            tmp___2 = 0;
        -:13374:          }
    #####:13375:        } else {
    #####:13376:          tmp___2 = 0;
        -:13377:        }
    #####:13378:      } else {
    #####:13379:        tmp___2 = 0;
        -:13380:      }
    #####:13381:      tmp___3 = tmp___2;
        -:13382:    }
    #####:13383:    if (tmp___3) {
    #####:13384:      tmp___4 = 1;
    #####:13385:    } else {
    #####:13386:      tmp___4 = 0;
        -:13387:    }
        -:13388:  }
    #####:13389:  return ((boolean )tmp___4);
        -:13390:}
        -:13391:}
    #####:13392:static boolean group_in_compile_stack(compile_stack_type compile_stack , regnum_t regnum ) 
        -:13393:{ 
        -:13394:  int this_element ;
        -:13395:
        -:13396:  {
    #####:13397:  this_element = (int )(compile_stack.avail - 1U);
        -:13398:  {
    #####:13399:  while (1) {
        -:13400:    while_continue: /* CIL Label */ ;
    #####:13401:    if (! (this_element >= 0)) {
    #####:13402:      goto while_break;
        -:13403:    }
    #####:13404:    if ((compile_stack.stack + this_element)->regnum == regnum) {
    #####:13405:      return ((boolean )1);
        -:13406:    }
    #####:13407:    this_element --;
        -:13408:  }
        -:13409:  while_break: /* CIL Label */ ;
        -:13410:  }
    #####:13411:  return ((boolean )0);
        -:13412:}
    #####:13413:}
    #####:13414:static reg_errcode_t compile_range(char const   **p_ptr , char const   *pend , char *translate ,
        -:13415:                                   reg_syntax_t syntax , unsigned char *b ) 
        -:13416:{ 
        -:13417:  unsigned int this_char ;
        -:13418:  char const   *p ;
        -:13419:  reg_errcode_t ret ;
        -:13420:  char range_start[2] ;
        -:13421:  char range_end[2] ;
        -:13422:  char ch[2] ;
        -:13423:  unsigned int tmp ;
        -:13424:  unsigned int tmp___0 ;
        -:13425:  int tmp___1 ;
        -:13426:  int tmp___2 ;
        -:13427:
        -:13428:  {
    #####:13429:  p = *p_ptr;
    #####:13430:  if ((unsigned long )p == (unsigned long )pend) {
    #####:13431:    return ((reg_errcode_t )11);
        -:13432:  }
    #####:13433:  range_start[0] = (char )*(p + -2);
    #####:13434:  range_start[1] = (char )'\000';
    #####:13435:  range_end[0] = (char )*(p + 0);
    #####:13436:  range_end[1] = (char )'\000';
    #####:13437:  (*p_ptr) ++;
    #####:13438:  if (syntax & ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:13439:    ret = (reg_errcode_t )11;
    #####:13440:  } else {
    #####:13441:    ret = (reg_errcode_t )0;
        -:13442:  }
    #####:13443:  this_char = 0U;
        -:13444:  {
    #####:13445:  while (1) {
        -:13446:    while_continue: /* CIL Label */ ;
    #####:13447:    if (! (this_char <= 255U)) {
    #####:13448:      goto while_break;
        -:13449:    }
        -:13450:    {
    #####:13451:    ch[0] = (char )this_char;
    #####:13452:    ch[1] = (char )'\000';
    #####:13453:    tmp___1 = strcoll((char const   *)(range_start), (char const   *)(ch));
        -:13454:    }
    #####:13455:    if (tmp___1 <= 0) {
        -:13456:      {
    #####:13457:      tmp___2 = strcoll((char const   *)(ch), (char const   *)(range_end));
        -:13458:      }
    #####:13459:      if (tmp___2 <= 0) {
    #####:13460:        if (translate) {
    #####:13461:          tmp = (unsigned int )*(translate + (int )((unsigned char )this_char));
    #####:13462:        } else {
    #####:13463:          tmp = this_char;
        -:13464:        }
    #####:13465:        if (translate) {
    #####:13466:          tmp___0 = (unsigned int )*(translate + (int )((unsigned char )this_char));
    #####:13467:        } else {
    #####:13468:          tmp___0 = this_char;
        -:13469:        }
    #####:13470:        *(b + (int )((unsigned char )tmp) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )tmp) / 8) | (1 << (int )((unsigned char )tmp___0) % 8));
    #####:13471:        ret = (reg_errcode_t )0;
    #####:13472:      }
    #####:13473:    }
    #####:13474:    this_char ++;
        -:13475:  }
        -:13476:  while_break: /* CIL Label */ ;
        -:13477:  }
    #####:13478:  return (ret);
        -:13479:}
    #####:13480:}
    #####:13481:int re_compile_fastmap(struct re_pattern_buffer *bufp ) 
        -:13482:{ 
        -:13483:  int j ;
        -:13484:  int k ;
        -:13485:  fail_stack_type fail_stack ;
        -:13486:  char *destination ;
        -:13487:  register char *fastmap ;
        -:13488:  unsigned char *pattern ;
        -:13489:  unsigned char *p ;
        -:13490:  register unsigned char *pend ;
        -:13491:  boolean path_can_be_null ;
        -:13492:  boolean succeed_n_p ;
        -:13493:  void *tmp ;
        -:13494:  unsigned char *tmp___0 ;
        -:13495:  unsigned char *tmp___1 ;
        -:13496:  unsigned char *tmp___2 ;
        -:13497:  int fastmap_newline ;
        -:13498:  unsigned int tmp___7 ;
        -:13499:  int tmp___8 ;
        -:13500:  void *tmp___9 ;
        -:13501:  void *tmp___10 ;
        -:13502:  int tmp___11 ;
        -:13503:  int tmp___12 ;
        -:13504:
        -:13505:  {
    #####:13506:  fastmap = bufp->fastmap;
    #####:13507:  pattern = bufp->buffer;
    #####:13508:  p = pattern;
    #####:13509:  pend = pattern + bufp->used;
    #####:13510:  path_can_be_null = (boolean )1;
    #####:13511:  succeed_n_p = (boolean )0;
        -:13512:  {
    #####:13513:  while (1) {
        -:13514:    while_continue: /* CIL Label */ ;
        -:13515:    {
    #####:13516:    tmp = __builtin_alloca(5UL * sizeof(fail_stack_elt_t ));
    #####:13517:    fail_stack.stack = (fail_stack_elt_t *)tmp;
        -:13518:    }
    #####:13519:    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:13520:      return (-2);
        -:13521:    }
    #####:13522:    fail_stack.size = 5U;
    #####:13523:    fail_stack.avail = 0U;
    #####:13524:    goto while_break;
        -:13525:  }
        -:13526:  while_break: /* CIL Label */ ;
        -:13527:  }
        -:13528:  {
    #####:13529:  memset((void *)fastmap, '\000', (size_t )(1 << 8));
    #####:13530:  bufp->fastmap_accurate = 1U;
    #####:13531:  bufp->can_be_null = 0U;
        -:13532:  }
        -:13533:  {
    #####:13534:  while (1) {
        -:13535:    while_continue___0: /* CIL Label */ ;
    #####:13536:    if ((unsigned long )p == (unsigned long )pend) {
    #####:13537:      goto _L;
        -:13538:    } else { //Added block
    #####:13539:    if ((int )*p == 1) {
        -:13540:      _L: 
    #####:13541:      if (! (fail_stack.avail == 0U)) {
    #####:13542:        bufp->can_be_null |= (unsigned int )path_can_be_null;
    #####:13543:        path_can_be_null = (boolean )1;
    #####:13544:        (fail_stack.avail) --;
    #####:13545:        p = (fail_stack.stack + fail_stack.avail)->pointer;
    #####:13546:        goto while_continue___0;
        -:13547:      } else {
    #####:13548:        goto while_break___0;
        -:13549:      }
        -:13550:    }
        -:13551:    }
    #####:13552:    tmp___0 = p;
    #####:13553:    p ++;
        -:13554:    {
    #####:13555:    if ((unsigned int )((re_opcode_t )*tmp___0) == 8U) {
    #####:13556:      goto case_8;
        -:13557:    }
    #####:13558:    if ((unsigned int )((re_opcode_t )*tmp___0) == 2U) {
    #####:13559:      goto case_2;
        -:13560:    }
    #####:13561:    if ((unsigned int )((re_opcode_t )*tmp___0) == 4U) {
    #####:13562:      goto case_4;
        -:13563:    }
    #####:13564:    if ((unsigned int )((re_opcode_t )*tmp___0) == 5U) {
    #####:13565:      goto case_5;
        -:13566:    }
    #####:13567:    if ((unsigned int )((re_opcode_t )*tmp___0) == 24U) {
    #####:13568:      goto case_24;
        -:13569:    }
    #####:13570:    if ((unsigned int )((re_opcode_t )*tmp___0) == 25U) {
    #####:13571:      goto case_25;
        -:13572:    }
    #####:13573:    if ((unsigned int )((re_opcode_t )*tmp___0) == 3U) {
    #####:13574:      goto case_3;
        -:13575:    }
    #####:13576:    if ((unsigned int )((re_opcode_t )*tmp___0) == 0U) {
    #####:13577:      goto case_0;
        -:13578:    }
    #####:13579:    if ((unsigned int )((re_opcode_t )*tmp___0) == 9U) {
    #####:13580:      goto case_0;
        -:13581:    }
    #####:13582:    if ((unsigned int )((re_opcode_t )*tmp___0) == 10U) {
    #####:13583:      goto case_0;
        -:13584:    }
    #####:13585:    if ((unsigned int )((re_opcode_t )*tmp___0) == 11U) {
    #####:13586:      goto case_0;
        -:13587:    }
    #####:13588:    if ((unsigned int )((re_opcode_t )*tmp___0) == 12U) {
    #####:13589:      goto case_0;
        -:13590:    }
    #####:13591:    if ((unsigned int )((re_opcode_t )*tmp___0) == 28U) {
    #####:13592:      goto case_0;
        -:13593:    }
    #####:13594:    if ((unsigned int )((re_opcode_t )*tmp___0) == 29U) {
    #####:13595:      goto case_0;
        -:13596:    }
    #####:13597:    if ((unsigned int )((re_opcode_t )*tmp___0) == 26U) {
    #####:13598:      goto case_0;
        -:13599:    }
    #####:13600:    if ((unsigned int )((re_opcode_t )*tmp___0) == 27U) {
    #####:13601:      goto case_0;
        -:13602:    }
    #####:13603:    if ((unsigned int )((re_opcode_t )*tmp___0) == 20U) {
    #####:13604:      goto case_0;
        -:13605:    }
    #####:13606:    if ((unsigned int )((re_opcode_t )*tmp___0) == 22U) {
    #####:13607:      goto case_22;
        -:13608:    }
    #####:13609:    if ((unsigned int )((re_opcode_t )*tmp___0) == 17U) {
    #####:13610:      goto case_22;
        -:13611:    }
    #####:13612:    if ((unsigned int )((re_opcode_t )*tmp___0) == 18U) {
    #####:13613:      goto case_22;
        -:13614:    }
    #####:13615:    if ((unsigned int )((re_opcode_t )*tmp___0) == 13U) {
    #####:13616:      goto case_22;
        -:13617:    }
    #####:13618:    if ((unsigned int )((re_opcode_t )*tmp___0) == 14U) {
    #####:13619:      goto case_22;
        -:13620:    }
    #####:13621:    if ((unsigned int )((re_opcode_t )*tmp___0) == 19U) {
    #####:13622:      goto case_22;
        -:13623:    }
    #####:13624:    if ((unsigned int )((re_opcode_t )*tmp___0) == 15U) {
    #####:13625:      goto handle_on_failure_jump;
        -:13626:    }
    #####:13627:    if ((unsigned int )((re_opcode_t )*tmp___0) == 16U) {
    #####:13628:      goto handle_on_failure_jump;
        -:13629:    }
    #####:13630:    if ((unsigned int )((re_opcode_t )*tmp___0) == 21U) {
    #####:13631:      goto case_21;
        -:13632:    }
    #####:13633:    if ((unsigned int )((re_opcode_t )*tmp___0) == 23U) {
    #####:13634:      goto case_23;
        -:13635:    }
    #####:13636:    if ((unsigned int )((re_opcode_t )*tmp___0) == 6U) {
    #####:13637:      goto case_6;
        -:13638:    }
    #####:13639:    if ((unsigned int )((re_opcode_t )*tmp___0) == 7U) {
    #####:13640:      goto case_6;
        -:13641:    }
    #####:13642:    goto switch_default;
        -:13643:    case_8: /* CIL Label */ 
    #####:13644:    bufp->can_be_null = 1U;
    #####:13645:    goto done;
        -:13646:    case_2: /* CIL Label */ 
    #####:13647:    *(fastmap + (int )*(p + 1)) = (char)1;
    #####:13648:    goto switch_break;
        -:13649:    case_4: /* CIL Label */ 
    #####:13650:    tmp___1 = p;
    #####:13651:    p ++;
    #####:13652:    j = (int )*tmp___1 * 8 - 1;
        -:13653:    {
    #####:13654:    while (1) {
        -:13655:      while_continue___1: /* CIL Label */ ;
    #####:13656:      if (! (j >= 0)) {
    #####:13657:        goto while_break___1;
        -:13658:      }
    #####:13659:      if ((int )*(p + j / 8) & (1 << j % 8)) {
    #####:13660:        *(fastmap + j) = (char)1;
    #####:13661:      }
    #####:13662:      j --;
        -:13663:    }
        -:13664:    while_break___1: /* CIL Label */ ;
        -:13665:    }
    #####:13666:    goto switch_break;
        -:13667:    case_5: /* CIL Label */ 
    #####:13668:    j = (int )*p * 8;
        -:13669:    {
    #####:13670:    while (1) {
        -:13671:      while_continue___2: /* CIL Label */ ;
    #####:13672:      if (! (j < 1 << 8)) {
    #####:13673:        goto while_break___2;
        -:13674:      }
    #####:13675:      *(fastmap + j) = (char)1;
    #####:13676:      j ++;
        -:13677:    }
        -:13678:    while_break___2: /* CIL Label */ ;
        -:13679:    }
    #####:13680:    tmp___2 = p;
    #####:13681:    p ++;
    #####:13682:    j = (int )*tmp___2 * 8 - 1;
        -:13683:    {
    #####:13684:    while (1) {
        -:13685:      while_continue___3: /* CIL Label */ ;
    #####:13686:      if (! (j >= 0)) {
    #####:13687:        goto while_break___3;
        -:13688:      }
    #####:13689:      if (! ((int )*(p + j / 8) & (1 << j % 8))) {
    #####:13690:        *(fastmap + j) = (char)1;
    #####:13691:      }
    #####:13692:      j --;
        -:13693:    }
        -:13694:    while_break___3: /* CIL Label */ ;
        -:13695:    }
    #####:13696:    goto switch_break;
        -:13697:    case_24: /* CIL Label */ 
    #####:13698:    j = 0;
        -:13699:    {
    #####:13700:    while (1) {
        -:13701:      while_continue___4: /* CIL Label */ ;
    #####:13702:      if (! (j < 1 << 8)) {
    #####:13703:        goto while_break___4;
        -:13704:      }
    #####:13705:      if ((int )re_syntax_table[j & 255] == 1) {
    #####:13706:        *(fastmap + j) = (char)1;
    #####:13707:      }
    #####:13708:      j ++;
        -:13709:    }
        -:13710:    while_break___4: /* CIL Label */ ;
        -:13711:    }
    #####:13712:    goto switch_break;
        -:13713:    case_25: /* CIL Label */ 
    #####:13714:    j = 0;
        -:13715:    {
    #####:13716:    while (1) {
        -:13717:      while_continue___5: /* CIL Label */ ;
    #####:13718:      if (! (j < 1 << 8)) {
    #####:13719:        goto while_break___5;
        -:13720:      }
    #####:13721:      if ((int )re_syntax_table[j & 255] != 1) {
    #####:13722:        *(fastmap + j) = (char)1;
    #####:13723:      }
    #####:13724:      j ++;
        -:13725:    }
        -:13726:    while_break___5: /* CIL Label */ ;
        -:13727:    }
    #####:13728:    goto switch_break;
        -:13729:    case_3: /* CIL Label */ 
    #####:13730:    fastmap_newline = (int )*(fastmap + 10);
    #####:13731:    j = 0;
        -:13732:    {
    #####:13733:    while (1) {
        -:13734:      while_continue___6: /* CIL Label */ ;
    #####:13735:      if (! (j < 1 << 8)) {
    #####:13736:        goto while_break___6;
        -:13737:      }
    #####:13738:      *(fastmap + j) = (char)1;
    #####:13739:      j ++;
        -:13740:    }
        -:13741:    while_break___6: /* CIL Label */ ;
        -:13742:    }
    #####:13743:    if (! (bufp->syntax & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:13744:      *(fastmap + 10) = (char )fastmap_newline;
    #####:13745:    } else { //Added block
    #####:13746:    if (bufp->can_be_null) {
    #####:13747:      goto done;
        -:13748:    }
        -:13749:    }
    #####:13750:    goto switch_break;
        -:13751:    case_0: /* CIL Label */ 
        -:13752:    case_9: /* CIL Label */ 
        -:13753:    case_10: /* CIL Label */ 
        -:13754:    case_11: /* CIL Label */ 
        -:13755:    case_12: /* CIL Label */ 
        -:13756:    case_28: /* CIL Label */ 
        -:13757:    case_29: /* CIL Label */ 
        -:13758:    case_26: /* CIL Label */ 
        -:13759:    case_27: /* CIL Label */ 
        -:13760:    case_20: /* CIL Label */ 
    #####:13761:    goto while_continue___0;
        -:13762:    case_22: /* CIL Label */ 
        -:13763:    case_17: /* CIL Label */ 
        -:13764:    case_18: /* CIL Label */ 
        -:13765:    case_13: /* CIL Label */ 
        -:13766:    case_14: /* CIL Label */ 
        -:13767:    case_19: /* CIL Label */ 
        -:13768:    {
    #####:13769:    while (1) {
        -:13770:      while_continue___7: /* CIL Label */ ;
        -:13771:      {
    #####:13772:      while (1) {
        -:13773:        while_continue___8: /* CIL Label */ ;
    #####:13774:        j = (int )*p & 255;
    #####:13775:        j += (int )((signed char )*(p + 1)) << 8;
    #####:13776:        goto while_break___8;
        -:13777:      }
        -:13778:      while_break___8: /* CIL Label */ ;
        -:13779:      }
    #####:13780:      p += 2;
    #####:13781:      goto while_break___7;
        -:13782:    }
        -:13783:    while_break___7: /* CIL Label */ ;
        -:13784:    }
    #####:13785:    p += j;
    #####:13786:    if (j > 0) {
    #####:13787:      goto while_continue___0;
        -:13788:    }
    #####:13789:    if ((unsigned int )((re_opcode_t )*p) != 15U) {
    #####:13790:      if ((unsigned int )((re_opcode_t )*p) != 21U) {
    #####:13791:        goto while_continue___0;
        -:13792:      }
    #####:13793:    }
    #####:13794:    p ++;
        -:13795:    {
    #####:13796:    while (1) {
        -:13797:      while_continue___9: /* CIL Label */ ;
        -:13798:      {
    #####:13799:      while (1) {
        -:13800:        while_continue___10: /* CIL Label */ ;
    #####:13801:        j = (int )*p & 255;
    #####:13802:        j += (int )((signed char )*(p + 1)) << 8;
    #####:13803:        goto while_break___10;
        -:13804:      }
        -:13805:      while_break___10: /* CIL Label */ ;
        -:13806:      }
    #####:13807:      p += 2;
    #####:13808:      goto while_break___9;
        -:13809:    }
        -:13810:    while_break___9: /* CIL Label */ ;
        -:13811:    }
    #####:13812:    p += j;
    #####:13813:    if (! (fail_stack.avail == 0U)) {
    #####:13814:      if ((unsigned long )(fail_stack.stack + (fail_stack.avail - 1U))->pointer == (unsigned long )p) {
    #####:13815:        (fail_stack.avail) --;
    #####:13816:      }
    #####:13817:    }
    #####:13818:    goto while_continue___0;
        -:13819:    handle_on_failure_jump: 
        -:13820:    case_15: /* CIL Label */ 
        -:13821:    case_16: /* CIL Label */ 
        -:13822:    {
    #####:13823:    while (1) {
        -:13824:      while_continue___11: /* CIL Label */ ;
        -:13825:      {
    #####:13826:      while (1) {
        -:13827:        while_continue___12: /* CIL Label */ ;
    #####:13828:        j = (int )*p & 255;
    #####:13829:        j += (int )((signed char )*(p + 1)) << 8;
    #####:13830:        goto while_break___12;
        -:13831:      }
        -:13832:      while_break___12: /* CIL Label */ ;
        -:13833:      }
    #####:13834:      p += 2;
    #####:13835:      goto while_break___11;
        -:13836:    }
        -:13837:    while_break___11: /* CIL Label */ ;
        -:13838:    }
    #####:13839:    if ((unsigned long )(p + j) < (unsigned long )pend) {
    #####:13840:      if (fail_stack.avail == fail_stack.size) {
    #####:13841:        if (fail_stack.size > (unsigned int )(re_max_failures * 19)) {
    #####:13842:          tmp___12 = 0;
    #####:13843:        } else {
        -:13844:          {
    #####:13845:          tmp___9 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
    #####:13846:          destination = (char *)tmp___9;
    #####:13847:          tmp___10 = memcpy((void * __restrict  )destination, (void const   * __restrict  )fail_stack.stack,
    #####:13848:                            (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
    #####:13849:          fail_stack.stack = (fail_stack_elt_t *)tmp___10;
        -:13850:          }
    #####:13851:          if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:13852:            tmp___11 = 0;
    #####:13853:          } else {
    #####:13854:            fail_stack.size <<= 1;
    #####:13855:            tmp___11 = 1;
        -:13856:          }
    #####:13857:          tmp___12 = tmp___11;
        -:13858:        }
    #####:13859:        if (tmp___12) {
    #####:13860:          tmp___7 = fail_stack.avail;
    #####:13861:          (fail_stack.avail) ++;
    #####:13862:          (fail_stack.stack + tmp___7)->pointer = p + j;
    #####:13863:          tmp___8 = 1;
    #####:13864:        } else {
    #####:13865:          tmp___8 = 0;
        -:13866:        }
    #####:13867:      } else {
    #####:13868:        tmp___7 = fail_stack.avail;
    #####:13869:        (fail_stack.avail) ++;
    #####:13870:        (fail_stack.stack + tmp___7)->pointer = p + j;
    #####:13871:        tmp___8 = 1;
        -:13872:      }
    #####:13873:      if (! tmp___8) {
    #####:13874:        return (-2);
        -:13875:      }
    #####:13876:    } else {
    #####:13877:      bufp->can_be_null = 1U;
        -:13878:    }
    #####:13879:    if (succeed_n_p) {
        -:13880:      {
    #####:13881:      while (1) {
        -:13882:        while_continue___13: /* CIL Label */ ;
        -:13883:        {
    #####:13884:        while (1) {
        -:13885:          while_continue___14: /* CIL Label */ ;
    #####:13886:          k = (int )*p & 255;
    #####:13887:          k += (int )((signed char )*(p + 1)) << 8;
    #####:13888:          goto while_break___14;
        -:13889:        }
        -:13890:        while_break___14: /* CIL Label */ ;
        -:13891:        }
    #####:13892:        p += 2;
    #####:13893:        goto while_break___13;
        -:13894:      }
        -:13895:      while_break___13: /* CIL Label */ ;
        -:13896:      }
    #####:13897:      succeed_n_p = (boolean )0;
    #####:13898:    }
    #####:13899:    goto while_continue___0;
        -:13900:    case_21: /* CIL Label */ 
    #####:13901:    p += 2;
        -:13902:    {
    #####:13903:    while (1) {
        -:13904:      while_continue___15: /* CIL Label */ ;
        -:13905:      {
    #####:13906:      while (1) {
        -:13907:        while_continue___16: /* CIL Label */ ;
    #####:13908:        k = (int )*p & 255;
    #####:13909:        k += (int )((signed char )*(p + 1)) << 8;
    #####:13910:        goto while_break___16;
        -:13911:      }
        -:13912:      while_break___16: /* CIL Label */ ;
        -:13913:      }
    #####:13914:      p += 2;
    #####:13915:      goto while_break___15;
        -:13916:    }
        -:13917:    while_break___15: /* CIL Label */ ;
        -:13918:    }
    #####:13919:    if (k == 0) {
    #####:13920:      p -= 4;
    #####:13921:      succeed_n_p = (boolean )1;
    #####:13922:      goto handle_on_failure_jump;
        -:13923:    }
    #####:13924:    goto while_continue___0;
        -:13925:    case_23: /* CIL Label */ 
    #####:13926:    p += 4;
    #####:13927:    goto while_continue___0;
        -:13928:    case_6: /* CIL Label */ 
        -:13929:    case_7: /* CIL Label */ 
    #####:13930:    p += 2;
    #####:13931:    goto while_continue___0;
        -:13932:    switch_default: /* CIL Label */ 
        -:13933:    {
    #####:13934:    abort();
        -:13935:    }
        -:13936:    switch_break: /* CIL Label */ ;
        -:13937:    }
    #####:13938:    path_can_be_null = (boolean )0;
    #####:13939:    p = pend;
        -:13940:  }
        -:13941:  while_break___0: /* CIL Label */ ;
        -:13942:  }
    #####:13943:  bufp->can_be_null |= (unsigned int )path_can_be_null;
        -:13944:  done: ;
    #####:13945:  return (0);
        -:13946:}
    #####:13947:}
    #####:13948:void re_set_registers(struct re_pattern_buffer *bufp , struct re_registers *regs___0 ,
        -:13949:                      unsigned int num_regs , regoff_t *starts , regoff_t *ends ) 
        -:13950:{ 
        -:13951:  regoff_t *tmp ;
        -:13952:
        -:13953:  {
    #####:13954:  if (num_regs) {
    #####:13955:    bufp->regs_allocated = 1U;
    #####:13956:    regs___0->num_regs = num_regs;
    #####:13957:    regs___0->start = starts;
    #####:13958:    regs___0->end = ends;
    #####:13959:  } else {
    #####:13960:    bufp->regs_allocated = 0U;
    #####:13961:    regs___0->num_regs = 0U;
    #####:13962:    tmp = (regoff_t *)0;
    #####:13963:    regs___0->end = tmp;
    #####:13964:    regs___0->start = tmp;
        -:13965:  }
    #####:13966:  return;
        -:13967:}
        -:13968:}
    #####:13969:int re_search(struct re_pattern_buffer *bufp , char const   *string , int size , int startpos ,
        -:13970:              int range , struct re_registers *regs___0 ) 
        -:13971:{ 
        -:13972:  int tmp ;
        -:13973:
        -:13974:  {
        -:13975:  {
    #####:13976:  tmp = re_search_2(bufp, (char const   *)((void *)0), 0, string, size, startpos,
    #####:13977:                    range, regs___0, size);
        -:13978:  }
    #####:13979:  return (tmp);
        -:13980:}
        -:13981:}
    #####:13982:int re_search_2(struct re_pattern_buffer *bufp , char const   *string1 , int size1 ,
        -:13983:                char const   *string2 , int size2 , int startpos , int range , struct re_registers *regs___0 ,
        -:13984:                int stop ) 
        -:13985:{ 
        -:13986:  int val ;
        -:13987:  register char *fastmap ;
        -:13988:  register char *translate ;
        -:13989:  int total_size ;
        -:13990:  int endpos ;
        -:13991:  int tmp ;
        -:13992:  register char const   *d ;
        -:13993:  register int lim ;
        -:13994:  int irange ;
        -:13995:  char const   *tmp___0 ;
        -:13996:  char const   *tmp___1 ;
        -:13997:  char const   *tmp___2 ;
        -:13998:  register char c ;
        -:13999:  int tmp___3 ;
        -:14000:  int tmp___4 ;
        -:14001:
        -:14002:  {
    #####:14003:  fastmap = bufp->fastmap;
    #####:14004:  translate = bufp->translate;
    #####:14005:  total_size = size1 + size2;
    #####:14006:  endpos = startpos + range;
    #####:14007:  if (startpos < 0) {
    #####:14008:    return (-1);
        -:14009:  } else { //Added block
    #####:14010:  if (startpos > total_size) {
    #####:14011:    return (-1);
        -:14012:  }
        -:14013:  }
    #####:14014:  if (endpos < 0) {
    #####:14015:    range = 0 - startpos;
    #####:14016:  } else { //Added block
    #####:14017:  if (endpos > total_size) {
    #####:14018:    range = total_size - startpos;
    #####:14019:  }
        -:14020:  }
    #####:14021:  if (bufp->used > 0UL) {
    #####:14022:    if (range > 0) {
    #####:14023:      if ((unsigned int )((re_opcode_t )*(bufp->buffer + 0)) == 11U) {
    #####:14024:        goto _L;
        -:14025:      } else { //Added block
    #####:14026:      if ((unsigned int )((re_opcode_t )*(bufp->buffer + 0)) == 9U) {
    #####:14027:        if (! bufp->newline_anchor) {
        -:14028:          _L: 
    #####:14029:          if (startpos > 0) {
    #####:14030:            return (-1);
        -:14031:          } else {
    #####:14032:            range = 1;
        -:14033:          }
    #####:14034:        }
    #####:14035:      }
        -:14036:      }
    #####:14037:    }
    #####:14038:  }
    #####:14039:  if (fastmap) {
    #####:14040:    if (! bufp->fastmap_accurate) {
        -:14041:      {
    #####:14042:      tmp = re_compile_fastmap(bufp);
        -:14043:      }
    #####:14044:      if (tmp == -2) {
    #####:14045:        return (-2);
        -:14046:      }
    #####:14047:    }
    #####:14048:  }
        -:14049:  {
    #####:14050:  while (1) {
        -:14051:    while_continue: /* CIL Label */ ;
    #####:14052:    if (fastmap) {
    #####:14053:      if (startpos < total_size) {
    #####:14054:        if (! bufp->can_be_null) {
    #####:14055:          if (range > 0) {
    #####:14056:            lim = 0;
    #####:14057:            irange = range;
    #####:14058:            if (startpos < size1) {
    #####:14059:              if (startpos + range >= size1) {
    #####:14060:                lim = range - (size1 - startpos);
    #####:14061:              }
    #####:14062:            }
    #####:14063:            if (startpos >= size1) {
    #####:14064:              tmp___0 = string2 - size1;
    #####:14065:            } else {
    #####:14066:              tmp___0 = string1;
        -:14067:            }
    #####:14068:            d = tmp___0 + startpos;
    #####:14069:            if (translate) {
        -:14070:              {
    #####:14071:              while (1) {
        -:14072:                while_continue___0: /* CIL Label */ ;
    #####:14073:                if (range > lim) {
    #####:14074:                  tmp___1 = d;
    #####:14075:                  d ++;
    #####:14076:                  if (*(fastmap + (int )((unsigned char )*(translate + (int )((unsigned char )*tmp___1))))) {
    #####:14077:                    goto while_break___0;
        -:14078:                  }
    #####:14079:                } else {
    #####:14080:                  goto while_break___0;
        -:14081:                }
    #####:14082:                range --;
        -:14083:              }
        -:14084:              while_break___0: /* CIL Label */ ;
        -:14085:              }
    #####:14086:            } else {
        -:14087:              {
    #####:14088:              while (1) {
        -:14089:                while_continue___1: /* CIL Label */ ;
    #####:14090:                if (range > lim) {
    #####:14091:                  tmp___2 = d;
    #####:14092:                  d ++;
    #####:14093:                  if (*(fastmap + (int )((unsigned char )*tmp___2))) {
    #####:14094:                    goto while_break___1;
        -:14095:                  }
    #####:14096:                } else {
    #####:14097:                  goto while_break___1;
        -:14098:                }
    #####:14099:                range --;
        -:14100:              }
        -:14101:              while_break___1: /* CIL Label */ ;
        -:14102:              }
        -:14103:            }
    #####:14104:            startpos += irange - range;
    #####:14105:          } else {
    #####:14106:            if (size1 == 0) {
    #####:14107:              tmp___3 = (int )((int const   )*(string2 + (startpos - size1)));
    #####:14108:            } else { //Added block
    #####:14109:            if (startpos >= size1) {
    #####:14110:              tmp___3 = (int )((int const   )*(string2 + (startpos - size1)));
    #####:14111:            } else {
    #####:14112:              tmp___3 = (int )((int const   )*(string1 + startpos));
        -:14113:            }
        -:14114:            }
    #####:14115:            c = (char )tmp___3;
    #####:14116:            if (translate) {
    #####:14117:              tmp___4 = (int )*(translate + (int )((unsigned char )c));
    #####:14118:            } else {
    #####:14119:              tmp___4 = (int )c;
        -:14120:            }
    #####:14121:            if (! *(fastmap + (int )((unsigned char )tmp___4))) {
    #####:14122:              goto advance;
        -:14123:            }
        -:14124:          }
    #####:14125:        }
    #####:14126:      }
    #####:14127:    }
    #####:14128:    if (range >= 0) {
    #####:14129:      if (startpos == total_size) {
    #####:14130:        if (fastmap) {
    #####:14131:          if (! bufp->can_be_null) {
    #####:14132:            return (-1);
        -:14133:          }
    #####:14134:        }
    #####:14135:      }
    #####:14136:    }
        -:14137:    {
    #####:14138:    val = re_match_2_internal(bufp, string1, size1, string2, size2, startpos, regs___0,
    #####:14139:                              stop);
        -:14140:    }
    #####:14141:    if (val >= 0) {
    #####:14142:      return (startpos);
        -:14143:    }
    #####:14144:    if (val == -2) {
    #####:14145:      return (-2);
        -:14146:    }
        -:14147:    advance: 
    #####:14148:    if (! range) {
    #####:14149:      goto while_break;
        -:14150:    } else { //Added block
    #####:14151:    if (range > 0) {
    #####:14152:      range --;
    #####:14153:      startpos ++;
    #####:14154:    } else {
    #####:14155:      range ++;
    #####:14156:      startpos --;
        -:14157:    }
        -:14158:    }
        -:14159:  }
        -:14160:  while_break: /* CIL Label */ ;
        -:14161:  }
    #####:14162:  return (-1);
        -:14163:}
    #####:14164:}
    #####:14165:int re_match(struct re_pattern_buffer *bufp , char const   *string , int size , int pos ,
        -:14166:             struct re_registers *regs___0 ) 
        -:14167:{ 
        -:14168:  int result ;
        -:14169:  int tmp ;
        -:14170:
        -:14171:  {
        -:14172:  {
    #####:14173:  tmp = re_match_2_internal(bufp, (char const   *)((void *)0), 0, string, size, pos,
    #####:14174:                            regs___0, size);
    #####:14175:  result = tmp;
        -:14176:  }
    #####:14177:  return (result);
        -:14178:}
        -:14179:}
        -:14180:static boolean group_match_null_string_p(unsigned char **p , unsigned char *end ,
        -:14181:                                         register_info_type *reg_info ) ;
        -:14182:static boolean alt_match_null_string_p(unsigned char *p , unsigned char *end , register_info_type *reg_info ) ;
        -:14183:static boolean common_op_match_null_string_p(unsigned char **p , unsigned char *end ,
        -:14184:                                             register_info_type *reg_info ) ;
        -:14185:static int bcmp_translate(char const   *s1 , char const   *s2 , int len , char *translate ) ;
    #####:14186:int re_match_2(struct re_pattern_buffer *bufp , char const   *string1 , int size1 ,
        -:14187:               char const   *string2 , int size2 , int pos , struct re_registers *regs___0 ,
        -:14188:               int stop ) 
        -:14189:{ 
        -:14190:  int result ;
        -:14191:  int tmp ;
        -:14192:
        -:14193:  {
        -:14194:  {
    #####:14195:  tmp = re_match_2_internal(bufp, string1, size1, string2, size2, pos, regs___0, stop);
    #####:14196:  result = tmp;
        -:14197:  }
    #####:14198:  return (result);
        -:14199:}
        -:14200:}
    #####:14201:static int re_match_2_internal(struct re_pattern_buffer *bufp , char const   *string1 ,
        -:14202:                               int size1 , char const   *string2 , int size2 , int pos ,
        -:14203:                               struct re_registers *regs___0 , int stop ) 
        -:14204:{ 
        -:14205:  int mcnt ;
        -:14206:  unsigned char *p1 ;
        -:14207:  char const   *end1 ;
        -:14208:  char const   *end2 ;
        -:14209:  char const   *end_match_1 ;
        -:14210:  char const   *end_match_2 ;
        -:14211:  char const   *d ;
        -:14212:  char const   *dend ;
        -:14213:  unsigned char *p ;
        -:14214:  register unsigned char *pend ;
        -:14215:  unsigned char *just_past_start_mem ;
        -:14216:  char *translate ;
        -:14217:  fail_stack_type fail_stack ;
        -:14218:  size_t num_regs ;
        -:14219:  active_reg_t lowest_active_reg ;
        -:14220:  active_reg_t highest_active_reg ;
        -:14221:  char const   **regstart ;
        -:14222:  char const   **regend ;
        -:14223:  char const   **old_regstart ;
        -:14224:  char const   **old_regend ;
        -:14225:  register_info_type *reg_info ;
        -:14226:  unsigned int best_regs_set ;
        -:14227:  char const   **best_regstart ;
        -:14228:  char const   **best_regend ;
        -:14229:  char const   *match_end ;
        -:14230:  int set_regs_matched_done ;
        -:14231:  char const   **reg_dummy ;
        -:14232:  register_info_type *reg_info_dummy ;
        -:14233:  void *tmp ;
        -:14234:  void *tmp___0 ;
        -:14235:  void *tmp___1 ;
        -:14236:  void *tmp___2 ;
        -:14237:  void *tmp___3 ;
        -:14238:  void *tmp___4 ;
        -:14239:  void *tmp___5 ;
        -:14240:  void *tmp___6 ;
        -:14241:  void *tmp___7 ;
        -:14242:  void *tmp___8 ;
        -:14243:  char const   *tmp___9 ;
        -:14244:  char const   *tmp___10 ;
        -:14245:  char const   *tmp___11 ;
        -:14246:  boolean same_str_p ;
        -:14247:  int tmp___12 ;
        -:14248:  boolean best_match_p ;
        -:14249:  char *tmp___13 ;
        -:14250:  char *tmp___14 ;
        -:14251:  void *tmp___15 ;
        -:14252:  void *tmp___16 ;
        -:14253:  regoff_t tmp___17 ;
        -:14254:  regoff_t tmp___18 ;
        -:14255:  regoff_t tmp___19 ;
        -:14256:  size_t tmp___20 ;
        -:14257:  regoff_t tmp___21 ;
        -:14258:  char const   *tmp___22 ;
        -:14259:  unsigned char *tmp___23 ;
        -:14260:  unsigned char *tmp___24 ;
        -:14261:  char const   *tmp___25 ;
        -:14262:  unsigned char *tmp___26 ;
        -:14263:  char const   *tmp___27 ;
        -:14264:  unsigned char *tmp___28 ;
        -:14265:  active_reg_t r ;
        -:14266:  unsigned int tmp___29 ;
        -:14267:  int tmp___30 ;
        -:14268:  int tmp___31 ;
        -:14269:  active_reg_t r___0 ;
        -:14270:  unsigned int tmp___32 ;
        -:14271:  register unsigned char c ;
        -:14272:  boolean not ;
        -:14273:  active_reg_t r___1 ;
        -:14274:  unsigned int tmp___33 ;
        -:14275:  boolean tmp___34 ;
        -:14276:  char const   *tmp___35 ;
        -:14277:  char const   *tmp___36 ;
        -:14278:  unsigned char r___2 ;
        -:14279:  boolean is_a_jump_n ;
        -:14280:  unsigned char *tmp___37 ;
        -:14281:  unsigned int r___3 ;
        -:14282:  char *destination ;
        -:14283:  active_reg_t this_reg ;
        -:14284:  void *tmp___38 ;
        -:14285:  void *tmp___39 ;
        -:14286:  int tmp___40 ;
        -:14287:  int tmp___41 ;
        -:14288:  unsigned int tmp___42 ;
        -:14289:  unsigned int tmp___43 ;
        -:14290:  unsigned int tmp___44 ;
        -:14291:  unsigned int tmp___45 ;
        -:14292:  unsigned int tmp___46 ;
        -:14293:  unsigned int tmp___47 ;
        -:14294:  unsigned int tmp___48 ;
        -:14295:  register char const   *d2 ;
        -:14296:  register char const   *dend2 ;
        -:14297:  int regno ;
        -:14298:  unsigned char *tmp___49 ;
        -:14299:  int tmp___52 ;
        -:14300:  int tmp___53 ;
        -:14301:  int tmp___54 ;
        -:14302:  int tmp___55 ;
        -:14303:  int tmp___56 ;
        -:14304:  active_reg_t r___4 ;
        -:14305:  unsigned int tmp___57 ;
        -:14306:  char const   *tmp___58 ;
        -:14307:  int tmp___59 ;
        -:14308:  char const   *tmp___60 ;
        -:14309:  char *destination___0 ;
        -:14310:  active_reg_t this_reg___0 ;
        -:14311:  void *tmp___61 ;
        -:14312:  void *tmp___62 ;
        -:14313:  int tmp___63 ;
        -:14314:  int tmp___64 ;
        -:14315:  unsigned int tmp___65 ;
        -:14316:  unsigned int tmp___66 ;
        -:14317:  unsigned int tmp___67 ;
        -:14318:  unsigned int tmp___68 ;
        -:14319:  unsigned int tmp___69 ;
        -:14320:  unsigned int tmp___70 ;
        -:14321:  unsigned int tmp___71 ;
        -:14322:  char *destination___1 ;
        -:14323:  active_reg_t this_reg___1 ;
        -:14324:  void *tmp___72 ;
        -:14325:  void *tmp___73 ;
        -:14326:  int tmp___74 ;
        -:14327:  int tmp___75 ;
        -:14328:  unsigned int tmp___76 ;
        -:14329:  unsigned int tmp___77 ;
        -:14330:  unsigned int tmp___78 ;
        -:14331:  unsigned int tmp___79 ;
        -:14332:  unsigned int tmp___80 ;
        -:14333:  unsigned int tmp___81 ;
        -:14334:  unsigned int tmp___82 ;
        -:14335:  register unsigned char *p2 ;
        -:14336:  register unsigned char c___0 ;
        -:14337:  int tmp___83 ;
        -:14338:  int not___0 ;
        -:14339:  int idx ;
        -:14340:  int idx___0 ;
        -:14341:  active_reg_t dummy_low_reg ;
        -:14342:  active_reg_t dummy_high_reg ;
        -:14343:  unsigned char *pdummy ;
        -:14344:  char const   *sdummy ;
        -:14345:  active_reg_t this_reg___2 ;
        -:14346:  unsigned char const   *string_temp ;
        -:14347:  char *destination___2 ;
        -:14348:  active_reg_t this_reg___3 ;
        -:14349:  void *tmp___84 ;
        -:14350:  void *tmp___85 ;
        -:14351:  int tmp___86 ;
        -:14352:  int tmp___87 ;
        -:14353:  unsigned int tmp___88 ;
        -:14354:  unsigned int tmp___89 ;
        -:14355:  unsigned int tmp___90 ;
        -:14356:  unsigned int tmp___91 ;
        -:14357:  unsigned int tmp___92 ;
        -:14358:  unsigned int tmp___93 ;
        -:14359:  unsigned int tmp___94 ;
        -:14360:  char *destination___3 ;
        -:14361:  active_reg_t this_reg___4 ;
        -:14362:  void *tmp___95 ;
        -:14363:  void *tmp___96 ;
        -:14364:  int tmp___97 ;
        -:14365:  int tmp___98 ;
        -:14366:  unsigned int tmp___99 ;
        -:14367:  unsigned int tmp___100 ;
        -:14368:  unsigned int tmp___101 ;
        -:14369:  unsigned int tmp___102 ;
        -:14370:  unsigned int tmp___103 ;
        -:14371:  unsigned int tmp___104 ;
        -:14372:  unsigned int tmp___105 ;
        -:14373:  boolean prevchar ;
        -:14374:  boolean thischar ;
        -:14375:  char const   *tmp___106 ;
        -:14376:  int tmp___107 ;
        -:14377:  int tmp___108 ;
        -:14378:  int tmp___109 ;
        -:14379:  int tmp___110 ;
        -:14380:  boolean prevchar___0 ;
        -:14381:  boolean thischar___0 ;
        -:14382:  char const   *tmp___111 ;
        -:14383:  int tmp___112 ;
        -:14384:  int tmp___113 ;
        -:14385:  int tmp___114 ;
        -:14386:  int tmp___115 ;
        -:14387:  int tmp___116 ;
        -:14388:  int tmp___117 ;
        -:14389:  char const   *tmp___118 ;
        -:14390:  int tmp___119 ;
        -:14391:  int tmp___120 ;
        -:14392:  char const   *tmp___121 ;
        -:14393:  int tmp___122 ;
        -:14394:  int tmp___123 ;
        -:14395:  int tmp___124 ;
        -:14396:  int tmp___125 ;
        -:14397:  int tmp___126 ;
        -:14398:  int tmp___127 ;
        -:14399:  active_reg_t r___5 ;
        -:14400:  unsigned int tmp___128 ;
        -:14401:  int tmp___129 ;
        -:14402:  int tmp___130 ;
        -:14403:  active_reg_t r___6 ;
        -:14404:  unsigned int tmp___131 ;
        -:14405:  active_reg_t this_reg___5 ;
        -:14406:  unsigned char const   *string_temp___0 ;
        -:14407:  boolean is_a_jump_n___0 ;
        -:14408:
        -:14409:  {
    #####:14410:  p = bufp->buffer;
    #####:14411:  pend = p + bufp->used;
    #####:14412:  just_past_start_mem = (unsigned char *)0;
    #####:14413:  translate = bufp->translate;
    #####:14414:  num_regs = bufp->re_nsub + 1UL;
    #####:14415:  lowest_active_reg = (active_reg_t )((1 << 8) + 1);
    #####:14416:  highest_active_reg = (active_reg_t )(1 << 8);
    #####:14417:  best_regs_set = 0U;
    #####:14418:  match_end = (char const   *)((void *)0);
    #####:14419:  set_regs_matched_done = 0;
        -:14420:  {
    #####:14421:  while (1) {
        -:14422:    while_continue: /* CIL Label */ ;
        -:14423:    {
    #####:14424:    tmp = __builtin_alloca(5UL * sizeof(fail_stack_elt_t ));
    #####:14425:    fail_stack.stack = (fail_stack_elt_t *)tmp;
        -:14426:    }
    #####:14427:    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:14428:      return (-2);
        -:14429:    }
    #####:14430:    fail_stack.size = 5U;
    #####:14431:    fail_stack.avail = 0U;
    #####:14432:    goto while_break;
        -:14433:  }
        -:14434:  while_break: /* CIL Label */ ;
        -:14435:  }
    #####:14436:  if (bufp->re_nsub) {
        -:14437:    {
    #####:14438:    tmp___0 = __builtin_alloca(num_regs * sizeof(char const   *));
    #####:14439:    regstart = (char const   **)tmp___0;
    #####:14440:    tmp___1 = __builtin_alloca(num_regs * sizeof(char const   *));
    #####:14441:    regend = (char const   **)tmp___1;
    #####:14442:    tmp___2 = __builtin_alloca(num_regs * sizeof(char const   *));
    #####:14443:    old_regstart = (char const   **)tmp___2;
    #####:14444:    tmp___3 = __builtin_alloca(num_regs * sizeof(char const   *));
    #####:14445:    old_regend = (char const   **)tmp___3;
    #####:14446:    tmp___4 = __builtin_alloca(num_regs * sizeof(char const   *));
    #####:14447:    best_regstart = (char const   **)tmp___4;
    #####:14448:    tmp___5 = __builtin_alloca(num_regs * sizeof(char const   *));
    #####:14449:    best_regend = (char const   **)tmp___5;
    #####:14450:    tmp___6 = __builtin_alloca(num_regs * sizeof(register_info_type ));
    #####:14451:    reg_info = (register_info_type *)tmp___6;
    #####:14452:    tmp___7 = __builtin_alloca(num_regs * sizeof(char const   *));
    #####:14453:    reg_dummy = (char const   **)tmp___7;
    #####:14454:    tmp___8 = __builtin_alloca(num_regs * sizeof(register_info_type ));
    #####:14455:    reg_info_dummy = (register_info_type *)tmp___8;
        -:14456:    }
    #####:14457:    if (regstart) {
    #####:14458:      if (regend) {
    #####:14459:        if (old_regstart) {
    #####:14460:          if (old_regend) {
    #####:14461:            if (reg_info) {
    #####:14462:              if (best_regstart) {
    #####:14463:                if (best_regend) {
    #####:14464:                  if (reg_dummy) {
    #####:14465:                    if (! reg_info_dummy) {
    #####:14466:                      goto _L___6;
        -:14467:                    }
    #####:14468:                  } else {
    #####:14469:                    goto _L___6;
        -:14470:                  }
    #####:14471:                } else {
    #####:14472:                  goto _L___6;
        -:14473:                }
    #####:14474:              } else {
    #####:14475:                goto _L___6;
        -:14476:              }
    #####:14477:            } else {
    #####:14478:              goto _L___6;
        -:14479:            }
    #####:14480:          } else {
    #####:14481:            goto _L___6;
        -:14482:          }
    #####:14483:        } else {
    #####:14484:          goto _L___6;
        -:14485:        }
    #####:14486:      } else {
    #####:14487:        goto _L___6;
        -:14488:      }
    #####:14489:    } else {
        -:14490:      _L___6: 
        -:14491:      {
    #####:14492:      while (1) {
        -:14493:        while_continue___0: /* CIL Label */ ;
    #####:14494:        regstart = (char const   **)((void *)0);
    #####:14495:        regend = (char const   **)((void *)0);
    #####:14496:        old_regstart = (char const   **)((void *)0);
    #####:14497:        old_regend = (char const   **)((void *)0);
    #####:14498:        best_regstart = (char const   **)((void *)0);
    #####:14499:        best_regend = (char const   **)((void *)0);
    #####:14500:        reg_info = (register_info_type *)((void *)0);
    #####:14501:        reg_dummy = (char const   **)((void *)0);
    #####:14502:        reg_info_dummy = (register_info_type *)((void *)0);
    #####:14503:        goto while_break___0;
        -:14504:      }
        -:14505:      while_break___0: /* CIL Label */ ;
        -:14506:      }
    #####:14507:      return (-2);
        -:14508:    }
    #####:14509:  } else {
    #####:14510:    reg_dummy = (char const   **)((void *)0);
    #####:14511:    best_regend = reg_dummy;
    #####:14512:    best_regstart = best_regend;
    #####:14513:    old_regend = best_regstart;
    #####:14514:    old_regstart = old_regend;
    #####:14515:    regend = old_regstart;
    #####:14516:    regstart = regend;
    #####:14517:    reg_info_dummy = (register_info_type *)((void *)0);
    #####:14518:    reg_info = reg_info_dummy;
        -:14519:  }
    #####:14520:  if (pos < 0) {
    #####:14521:    goto _L___7;
        -:14522:  } else { //Added block
    #####:14523:  if (pos > size1 + size2) {
        -:14524:    _L___7: 
        -:14525:    {
    #####:14526:    while (1) {
        -:14527:      while_continue___1: /* CIL Label */ ;
    #####:14528:      regstart = (char const   **)((void *)0);
    #####:14529:      regend = (char const   **)((void *)0);
    #####:14530:      old_regstart = (char const   **)((void *)0);
    #####:14531:      old_regend = (char const   **)((void *)0);
    #####:14532:      best_regstart = (char const   **)((void *)0);
    #####:14533:      best_regend = (char const   **)((void *)0);
    #####:14534:      reg_info = (register_info_type *)((void *)0);
    #####:14535:      reg_dummy = (char const   **)((void *)0);
    #####:14536:      reg_info_dummy = (register_info_type *)((void *)0);
    #####:14537:      goto while_break___1;
        -:14538:    }
        -:14539:    while_break___1: /* CIL Label */ ;
        -:14540:    }
    #####:14541:    return (-1);
        -:14542:  }
        -:14543:  }
    #####:14544:  mcnt = 1;
        -:14545:  {
    #####:14546:  while (1) {
        -:14547:    while_continue___2: /* CIL Label */ ;
    #####:14548:    if (! ((size_t )((unsigned int )mcnt) < num_regs)) {
    #####:14549:      goto while_break___2;
        -:14550:    }
    #####:14551:    tmp___11 = (char const   *)(& reg_unset_dummy);
    #####:14552:    *(old_regend + mcnt) = tmp___11;
    #####:14553:    tmp___10 = tmp___11;
    #####:14554:    *(old_regstart + mcnt) = tmp___10;
    #####:14555:    tmp___9 = tmp___10;
    #####:14556:    *(regend + mcnt) = tmp___9;
    #####:14557:    *(regstart + mcnt) = tmp___9;
    #####:14558:    (reg_info + mcnt)->bits.match_null_string_p = 3U;
    #####:14559:    (reg_info + mcnt)->bits.is_active = 0U;
    #####:14560:    (reg_info + mcnt)->bits.matched_something = 0U;
    #####:14561:    (reg_info + mcnt)->bits.ever_matched_something = 0U;
    #####:14562:    mcnt ++;
        -:14563:  }
        -:14564:  while_break___2: /* CIL Label */ ;
        -:14565:  }
    #####:14566:  if (size2 == 0) {
    #####:14567:    if ((unsigned long )string1 != (unsigned long )((void *)0)) {
    #####:14568:      string2 = string1;
    #####:14569:      size2 = size1;
    #####:14570:      string1 = (char const   *)0;
    #####:14571:      size1 = 0;
    #####:14572:    }
    #####:14573:  }
    #####:14574:  end1 = string1 + size1;
    #####:14575:  end2 = string2 + size2;
    #####:14576:  if (stop <= size1) {
    #####:14577:    end_match_1 = string1 + stop;
    #####:14578:    end_match_2 = string2;
    #####:14579:  } else {
    #####:14580:    end_match_1 = end1;
    #####:14581:    end_match_2 = (string2 + stop) - size1;
        -:14582:  }
    #####:14583:  if (size1 > 0) {
    #####:14584:    if (pos <= size1) {
    #####:14585:      d = string1 + pos;
    #####:14586:      dend = end_match_1;
    #####:14587:    } else {
    #####:14588:      d = (string2 + pos) - size1;
    #####:14589:      dend = end_match_2;
        -:14590:    }
    #####:14591:  } else {
    #####:14592:    d = (string2 + pos) - size1;
    #####:14593:    dend = end_match_2;
        -:14594:  }
        -:14595:  {
    #####:14596:  while (1) {
        -:14597:    while_continue___3: /* CIL Label */ ;
    #####:14598:    if ((unsigned long )p == (unsigned long )pend) {
    #####:14599:      if ((unsigned long )d != (unsigned long )end_match_2) {
    #####:14600:        if (size1) {
    #####:14601:          if ((unsigned long )string1 <= (unsigned long )match_end) {
    #####:14602:            if ((unsigned long )match_end <= (unsigned long )(string1 + size1)) {
    #####:14603:              tmp___12 = 1;
    #####:14604:            } else {
    #####:14605:              tmp___12 = 0;
        -:14606:            }
    #####:14607:          } else {
    #####:14608:            tmp___12 = 0;
        -:14609:          }
    #####:14610:        } else {
    #####:14611:          tmp___12 = 0;
        -:14612:        }
    #####:14613:        same_str_p = (boolean )(tmp___12 == ((unsigned long )dend == (unsigned long )end_match_1));
    #####:14614:        if (same_str_p) {
    #####:14615:          best_match_p = (boolean )((unsigned long )d > (unsigned long )match_end);
    #####:14616:        } else {
    #####:14617:          best_match_p = (boolean )(! ((unsigned long )dend == (unsigned long )end_match_1));
        -:14618:        }
    #####:14619:        if (! (fail_stack.avail == 0U)) {
    #####:14620:          if (! best_regs_set) {
    #####:14621:            goto _L___8;
        -:14622:          } else { //Added block
    #####:14623:          if (best_match_p) {
        -:14624:            _L___8: 
    #####:14625:            best_regs_set = 1U;
    #####:14626:            match_end = d;
    #####:14627:            mcnt = 1;
        -:14628:            {
    #####:14629:            while (1) {
        -:14630:              while_continue___4: /* CIL Label */ ;
    #####:14631:              if (! ((size_t )((unsigned int )mcnt) < num_regs)) {
    #####:14632:                goto while_break___4;
        -:14633:              }
    #####:14634:              *(best_regstart + mcnt) = *(regstart + mcnt);
    #####:14635:              *(best_regend + mcnt) = *(regend + mcnt);
    #####:14636:              mcnt ++;
        -:14637:            }
        -:14638:            while_break___4: /* CIL Label */ ;
        -:14639:            }
    #####:14640:          }
        -:14641:          }
    #####:14642:          goto fail;
        -:14643:        } else { //Added block
    #####:14644:        if (best_regs_set) {
    #####:14645:          if (! best_match_p) {
        -:14646:            restore_best_regs: 
    #####:14647:            d = match_end;
    #####:14648:            if ((unsigned long )d >= (unsigned long )string1) {
    #####:14649:              if ((unsigned long )d <= (unsigned long )end1) {
    #####:14650:                dend = end_match_1;
    #####:14651:              } else {
    #####:14652:                dend = end_match_2;
        -:14653:              }
    #####:14654:            } else {
    #####:14655:              dend = end_match_2;
        -:14656:            }
    #####:14657:            mcnt = 1;
        -:14658:            {
    #####:14659:            while (1) {
        -:14660:              while_continue___5: /* CIL Label */ ;
    #####:14661:              if (! ((size_t )((unsigned int )mcnt) < num_regs)) {
    #####:14662:                goto while_break___5;
        -:14663:              }
    #####:14664:              *(regstart + mcnt) = *(best_regstart + mcnt);
    #####:14665:              *(regend + mcnt) = *(best_regend + mcnt);
    #####:14666:              mcnt ++;
        -:14667:            }
        -:14668:            while_break___5: /* CIL Label */ ;
        -:14669:            }
    #####:14670:          }
    #####:14671:        }
        -:14672:        }
    #####:14673:      }
        -:14674:      succeed_label: ;
    #####:14675:      if (regs___0) {
    #####:14676:        if (! bufp->no_sub) {
    #####:14677:          if (bufp->regs_allocated == 0U) {
    #####:14678:            if (30UL > num_regs + 1UL) {
    #####:14679:              regs___0->num_regs = 30U;
    #####:14680:            } else {
    #####:14681:              regs___0->num_regs = (unsigned int )(num_regs + 1UL);
        -:14682:            }
        -:14683:            {
    #####:14684:            tmp___13 = xmalloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
    #####:14685:            regs___0->start = (regoff_t *)tmp___13;
    #####:14686:            tmp___14 = xmalloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
    #####:14687:            regs___0->end = (regoff_t *)tmp___14;
        -:14688:            }
    #####:14689:            if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
    #####:14690:              goto _L___9;
        -:14691:            } else { //Added block
    #####:14692:            if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
        -:14693:              _L___9: 
        -:14694:              {
    #####:14695:              while (1) {
        -:14696:                while_continue___6: /* CIL Label */ ;
    #####:14697:                regstart = (char const   **)((void *)0);
    #####:14698:                regend = (char const   **)((void *)0);
    #####:14699:                old_regstart = (char const   **)((void *)0);
    #####:14700:                old_regend = (char const   **)((void *)0);
    #####:14701:                best_regstart = (char const   **)((void *)0);
    #####:14702:                best_regend = (char const   **)((void *)0);
    #####:14703:                reg_info = (register_info_type *)((void *)0);
    #####:14704:                reg_dummy = (char const   **)((void *)0);
    #####:14705:                reg_info_dummy = (register_info_type *)((void *)0);
    #####:14706:                goto while_break___6;
        -:14707:              }
        -:14708:              while_break___6: /* CIL Label */ ;
        -:14709:              }
    #####:14710:              return (-2);
        -:14711:            }
        -:14712:            }
    #####:14713:            bufp->regs_allocated = 1U;
    #####:14714:          } else { //Added block
    #####:14715:          if (bufp->regs_allocated == 1U) {
    #####:14716:            if ((size_t )regs___0->num_regs < num_regs + 1UL) {
        -:14717:              {
    #####:14718:              regs___0->num_regs = (unsigned int )(num_regs + 1UL);
    #####:14719:              tmp___15 = realloc((void *)regs___0->start, (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
    #####:14720:              regs___0->start = (regoff_t *)tmp___15;
    #####:14721:              tmp___16 = realloc((void *)regs___0->end, (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
    #####:14722:              regs___0->end = (regoff_t *)tmp___16;
        -:14723:              }
    #####:14724:              if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
    #####:14725:                goto _L___10;
        -:14726:              } else { //Added block
    #####:14727:              if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
        -:14728:                _L___10: 
        -:14729:                {
    #####:14730:                while (1) {
        -:14731:                  while_continue___7: /* CIL Label */ ;
    #####:14732:                  regstart = (char const   **)((void *)0);
    #####:14733:                  regend = (char const   **)((void *)0);
    #####:14734:                  old_regstart = (char const   **)((void *)0);
    #####:14735:                  old_regend = (char const   **)((void *)0);
    #####:14736:                  best_regstart = (char const   **)((void *)0);
    #####:14737:                  best_regend = (char const   **)((void *)0);
    #####:14738:                  reg_info = (register_info_type *)((void *)0);
    #####:14739:                  reg_dummy = (char const   **)((void *)0);
    #####:14740:                  reg_info_dummy = (register_info_type *)((void *)0);
    #####:14741:                  goto while_break___7;
        -:14742:                }
        -:14743:                while_break___7: /* CIL Label */ ;
        -:14744:                }
    #####:14745:                return (-2);
        -:14746:              }
        -:14747:              }
    #####:14748:            }
    #####:14749:          }
        -:14750:          }
    #####:14751:          if (regs___0->num_regs > 0U) {
    #####:14752:            *(regs___0->start + 0) = pos;
    #####:14753:            if ((unsigned long )dend == (unsigned long )end_match_1) {
    #####:14754:              *(regs___0->end + 0) = (regoff_t )(d - string1);
    #####:14755:            } else {
    #####:14756:              *(regs___0->end + 0) = (regoff_t )((d - string2) + (long )size1);
        -:14757:            }
    #####:14758:          }
    #####:14759:          mcnt = 1;
        -:14760:          {
    #####:14761:          while (1) {
        -:14762:            while_continue___8: /* CIL Label */ ;
    #####:14763:            if (num_regs < (size_t )regs___0->num_regs) {
    #####:14764:              tmp___20 = num_regs;
    #####:14765:            } else {
    #####:14766:              tmp___20 = (size_t )regs___0->num_regs;
        -:14767:            }
    #####:14768:            if (! ((size_t )((unsigned int )mcnt) < tmp___20)) {
    #####:14769:              goto while_break___8;
        -:14770:            }
    #####:14771:            if ((unsigned long )*(regstart + mcnt) == (unsigned long )(& reg_unset_dummy)) {
    #####:14772:              tmp___17 = -1;
    #####:14773:              *(regs___0->end + mcnt) = tmp___17;
    #####:14774:              *(regs___0->start + mcnt) = tmp___17;
    #####:14775:            } else { //Added block
    #####:14776:            if ((unsigned long )*(regend + mcnt) == (unsigned long )(& reg_unset_dummy)) {
    #####:14777:              tmp___17 = -1;
    #####:14778:              *(regs___0->end + mcnt) = tmp___17;
    #####:14779:              *(regs___0->start + mcnt) = tmp___17;
    #####:14780:            } else {
    #####:14781:              if (size1) {
    #####:14782:                if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
    #####:14783:                  if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
    #####:14784:                    tmp___18 = (regoff_t )(*(regstart + mcnt) - string1);
    #####:14785:                  } else {
    #####:14786:                    tmp___18 = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
        -:14787:                  }
    #####:14788:                } else {
    #####:14789:                  tmp___18 = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
        -:14790:                }
    #####:14791:              } else {
    #####:14792:                tmp___18 = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
        -:14793:              }
    #####:14794:              *(regs___0->start + mcnt) = tmp___18;
    #####:14795:              if (size1) {
    #####:14796:                if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
    #####:14797:                  if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
    #####:14798:                    tmp___19 = (regoff_t )(*(regend + mcnt) - string1);
    #####:14799:                  } else {
    #####:14800:                    tmp___19 = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
        -:14801:                  }
    #####:14802:                } else {
    #####:14803:                  tmp___19 = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
        -:14804:                }
    #####:14805:              } else {
    #####:14806:                tmp___19 = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
        -:14807:              }
    #####:14808:              *(regs___0->end + mcnt) = tmp___19;
        -:14809:            }
        -:14810:            }
    #####:14811:            mcnt ++;
        -:14812:          }
        -:14813:          while_break___8: /* CIL Label */ ;
        -:14814:          }
    #####:14815:          mcnt = (int )num_regs;
        -:14816:          {
    #####:14817:          while (1) {
        -:14818:            while_continue___9: /* CIL Label */ ;
    #####:14819:            if (! ((unsigned int )mcnt < regs___0->num_regs)) {
    #####:14820:              goto while_break___9;
        -:14821:            }
    #####:14822:            tmp___21 = -1;
    #####:14823:            *(regs___0->end + mcnt) = tmp___21;
    #####:14824:            *(regs___0->start + mcnt) = tmp___21;
    #####:14825:            mcnt ++;
        -:14826:          }
        -:14827:          while_break___9: /* CIL Label */ ;
        -:14828:          }
    #####:14829:        }
    #####:14830:      }
    #####:14831:      if ((unsigned long )dend == (unsigned long )end_match_1) {
    #####:14832:        tmp___22 = string1;
    #####:14833:      } else {
    #####:14834:        tmp___22 = string2 - size1;
        -:14835:      }
    #####:14836:      mcnt = (int )((d - pos) - tmp___22);
        -:14837:      {
    #####:14838:      while (1) {
        -:14839:        while_continue___10: /* CIL Label */ ;
    #####:14840:        regstart = (char const   **)((void *)0);
    #####:14841:        regend = (char const   **)((void *)0);
    #####:14842:        old_regstart = (char const   **)((void *)0);
    #####:14843:        old_regend = (char const   **)((void *)0);
    #####:14844:        best_regstart = (char const   **)((void *)0);
    #####:14845:        best_regend = (char const   **)((void *)0);
    #####:14846:        reg_info = (register_info_type *)((void *)0);
    #####:14847:        reg_dummy = (char const   **)((void *)0);
    #####:14848:        reg_info_dummy = (register_info_type *)((void *)0);
    #####:14849:        goto while_break___10;
        -:14850:      }
        -:14851:      while_break___10: /* CIL Label */ ;
        -:14852:      }
    #####:14853:      return (mcnt);
        -:14854:    }
    #####:14855:    tmp___23 = p;
    #####:14856:    p ++;
        -:14857:    {
    #####:14858:    if ((unsigned int )((re_opcode_t )*tmp___23) == 0U) {
    #####:14859:      goto case_0;
        -:14860:    }
    #####:14861:    if ((unsigned int )((re_opcode_t )*tmp___23) == 1U) {
    #####:14862:      goto case_1;
        -:14863:    }
    #####:14864:    if ((unsigned int )((re_opcode_t )*tmp___23) == 2U) {
    #####:14865:      goto case_2;
        -:14866:    }
    #####:14867:    if ((unsigned int )((re_opcode_t )*tmp___23) == 3U) {
    #####:14868:      goto case_3;
        -:14869:    }
    #####:14870:    if ((unsigned int )((re_opcode_t )*tmp___23) == 4U) {
    #####:14871:      goto case_4;
        -:14872:    }
    #####:14873:    if ((unsigned int )((re_opcode_t )*tmp___23) == 5U) {
    #####:14874:      goto case_4;
        -:14875:    }
    #####:14876:    if ((unsigned int )((re_opcode_t )*tmp___23) == 6U) {
    #####:14877:      goto case_6;
        -:14878:    }
    #####:14879:    if ((unsigned int )((re_opcode_t )*tmp___23) == 7U) {
    #####:14880:      goto case_7;
        -:14881:    }
    #####:14882:    if ((unsigned int )((re_opcode_t )*tmp___23) == 8U) {
    #####:14883:      goto case_8;
        -:14884:    }
    #####:14885:    if ((unsigned int )((re_opcode_t )*tmp___23) == 9U) {
    #####:14886:      goto case_9;
        -:14887:    }
    #####:14888:    if ((unsigned int )((re_opcode_t )*tmp___23) == 10U) {
    #####:14889:      goto case_10;
        -:14890:    }
    #####:14891:    if ((unsigned int )((re_opcode_t )*tmp___23) == 11U) {
    #####:14892:      goto case_11;
        -:14893:    }
    #####:14894:    if ((unsigned int )((re_opcode_t )*tmp___23) == 12U) {
    #####:14895:      goto case_12;
        -:14896:    }
    #####:14897:    if ((unsigned int )((re_opcode_t )*tmp___23) == 16U) {
    #####:14898:      goto case_16;
        -:14899:    }
    #####:14900:    if ((unsigned int )((re_opcode_t )*tmp___23) == 15U) {
    #####:14901:      goto on_failure;
        -:14902:    }
    #####:14903:    if ((unsigned int )((re_opcode_t )*tmp___23) == 18U) {
    #####:14904:      goto case_18___0;
        -:14905:    }
    #####:14906:    if ((unsigned int )((re_opcode_t )*tmp___23) == 17U) {
    #####:14907:      goto case_17___0;
        -:14908:    }
    #####:14909:    if ((unsigned int )((re_opcode_t )*tmp___23) == 13U) {
    #####:14910:      goto case_13___0;
        -:14911:    }
    #####:14912:    if ((unsigned int )((re_opcode_t )*tmp___23) == 14U) {
    #####:14913:      goto case_14;
        -:14914:    }
    #####:14915:    if ((unsigned int )((re_opcode_t )*tmp___23) == 19U) {
    #####:14916:      goto case_19___0;
        -:14917:    }
    #####:14918:    if ((unsigned int )((re_opcode_t )*tmp___23) == 20U) {
    #####:14919:      goto case_20;
        -:14920:    }
    #####:14921:    if ((unsigned int )((re_opcode_t )*tmp___23) == 21U) {
    #####:14922:      goto case_21;
        -:14923:    }
    #####:14924:    if ((unsigned int )((re_opcode_t )*tmp___23) == 22U) {
    #####:14925:      goto case_22___0;
        -:14926:    }
    #####:14927:    if ((unsigned int )((re_opcode_t )*tmp___23) == 23U) {
    #####:14928:      goto case_23;
        -:14929:    }
    #####:14930:    if ((unsigned int )((re_opcode_t )*tmp___23) == 28U) {
    #####:14931:      goto case_28;
        -:14932:    }
    #####:14933:    if ((unsigned int )((re_opcode_t )*tmp___23) == 29U) {
    #####:14934:      goto case_29;
        -:14935:    }
    #####:14936:    if ((unsigned int )((re_opcode_t )*tmp___23) == 26U) {
    #####:14937:      goto case_26;
        -:14938:    }
    #####:14939:    if ((unsigned int )((re_opcode_t )*tmp___23) == 27U) {
    #####:14940:      goto case_27;
        -:14941:    }
    #####:14942:    if ((unsigned int )((re_opcode_t )*tmp___23) == 24U) {
    #####:14943:      goto case_24;
        -:14944:    }
    #####:14945:    if ((unsigned int )((re_opcode_t )*tmp___23) == 25U) {
    #####:14946:      goto case_25;
        -:14947:    }
    #####:14948:    goto switch_default___0;
        -:14949:    case_0: /* CIL Label */ ;
    #####:14950:    goto switch_break;
        -:14951:    case_1: /* CIL Label */ ;
    #####:14952:    goto succeed_label;
        -:14953:    case_2: /* CIL Label */ 
    #####:14954:    tmp___24 = p;
    #####:14955:    p ++;
    #####:14956:    mcnt = (int )*tmp___24;
    #####:14957:    if (translate) {
        -:14958:      {
    #####:14959:      while (1) {
        -:14960:        while_continue___11: /* CIL Label */ ;
        -:14961:        {
    #####:14962:        while (1) {
        -:14963:          while_continue___12: /* CIL Label */ ;
    #####:14964:          if (! ((unsigned long )d == (unsigned long )dend)) {
    #####:14965:            goto while_break___12;
        -:14966:          }
    #####:14967:          if ((unsigned long )dend == (unsigned long )end_match_2) {
    #####:14968:            goto fail;
        -:14969:          }
    #####:14970:          d = string2;
    #####:14971:          dend = end_match_2;
        -:14972:        }
        -:14973:        while_break___12: /* CIL Label */ ;
        -:14974:        }
    #####:14975:        tmp___25 = d;
    #####:14976:        d ++;
    #####:14977:        tmp___26 = p;
    #####:14978:        p ++;
    #####:14979:        if ((int )((unsigned char )*(translate + (int )((unsigned char )*tmp___25))) != (int )*tmp___26) {
    #####:14980:          goto fail;
        -:14981:        }
    #####:14982:        mcnt --;
    #####:14983:        if (! mcnt) {
    #####:14984:          goto while_break___11;
        -:14985:        }
        -:14986:      }
        -:14987:      while_break___11: /* CIL Label */ ;
        -:14988:      }
    #####:14989:    } else {
        -:14990:      {
    #####:14991:      while (1) {
        -:14992:        while_continue___13: /* CIL Label */ ;
        -:14993:        {
    #####:14994:        while (1) {
        -:14995:          while_continue___14: /* CIL Label */ ;
    #####:14996:          if (! ((unsigned long )d == (unsigned long )dend)) {
    #####:14997:            goto while_break___14;
        -:14998:          }
    #####:14999:          if ((unsigned long )dend == (unsigned long )end_match_2) {
    #####:15000:            goto fail;
        -:15001:          }
    #####:15002:          d = string2;
    #####:15003:          dend = end_match_2;
        -:15004:        }
        -:15005:        while_break___14: /* CIL Label */ ;
        -:15006:        }
    #####:15007:        tmp___27 = d;
    #####:15008:        d ++;
    #####:15009:        tmp___28 = p;
    #####:15010:        p ++;
    #####:15011:        if ((int const   )*tmp___27 != (int const   )((char )*tmp___28)) {
    #####:15012:          goto fail;
        -:15013:        }
    #####:15014:        mcnt --;
    #####:15015:        if (! mcnt) {
    #####:15016:          goto while_break___13;
        -:15017:        }
        -:15018:      }
        -:15019:      while_break___13: /* CIL Label */ ;
        -:15020:      }
        -:15021:    }
        -:15022:    {
    #####:15023:    while (1) {
        -:15024:      while_continue___15: /* CIL Label */ ;
    #####:15025:      if (! set_regs_matched_done) {
    #####:15026:        set_regs_matched_done = 1;
    #####:15027:        r = lowest_active_reg;
        -:15028:        {
    #####:15029:        while (1) {
        -:15030:          while_continue___16: /* CIL Label */ ;
    #####:15031:          if (! (r <= highest_active_reg)) {
    #####:15032:            goto while_break___16;
        -:15033:          }
    #####:15034:          tmp___29 = 1U;
    #####:15035:          (reg_info + r)->bits.ever_matched_something = tmp___29;
    #####:15036:          (reg_info + r)->bits.matched_something = tmp___29;
    #####:15037:          r ++;
        -:15038:        }
        -:15039:        while_break___16: /* CIL Label */ ;
        -:15040:        }
    #####:15041:      }
    #####:15042:      goto while_break___15;
        -:15043:    }
        -:15044:    while_break___15: /* CIL Label */ ;
        -:15045:    }
    #####:15046:    goto switch_break;
        -:15047:    case_3: /* CIL Label */ ;
        -:15048:    {
    #####:15049:    while (1) {
        -:15050:      while_continue___17: /* CIL Label */ ;
    #####:15051:      if (! ((unsigned long )d == (unsigned long )dend)) {
    #####:15052:        goto while_break___17;
        -:15053:      }
    #####:15054:      if ((unsigned long )dend == (unsigned long )end_match_2) {
    #####:15055:        goto fail;
        -:15056:      }
    #####:15057:      d = string2;
    #####:15058:      dend = end_match_2;
        -:15059:    }
        -:15060:    while_break___17: /* CIL Label */ ;
        -:15061:    }
    #####:15062:    if (! (bufp->syntax & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
    #####:15063:      if (translate) {
    #####:15064:        tmp___30 = (int )*(translate + (int )((unsigned char )*d));
    #####:15065:      } else {
    #####:15066:        tmp___30 = (int )*d;
        -:15067:      }
    #####:15068:      if (tmp___30 == 10) {
    #####:15069:        goto fail;
        -:15070:      } else {
    #####:15071:        goto _L___11;
        -:15072:      }
    #####:15073:    } else { //Added block
        -:15074:    _L___11: 
    #####:15075:    if (bufp->syntax & (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
    #####:15076:      if (translate) {
    #####:15077:        tmp___31 = (int )*(translate + (int )((unsigned char )*d));
    #####:15078:      } else {
    #####:15079:        tmp___31 = (int )*d;
        -:15080:      }
    #####:15081:      if (tmp___31 == 0) {
    #####:15082:        goto fail;
        -:15083:      }
    #####:15084:    }
        -:15085:    }
        -:15086:    {
    #####:15087:    while (1) {
        -:15088:      while_continue___18: /* CIL Label */ ;
    #####:15089:      if (! set_regs_matched_done) {
    #####:15090:        set_regs_matched_done = 1;
    #####:15091:        r___0 = lowest_active_reg;
        -:15092:        {
    #####:15093:        while (1) {
        -:15094:          while_continue___19: /* CIL Label */ ;
    #####:15095:          if (! (r___0 <= highest_active_reg)) {
    #####:15096:            goto while_break___19;
        -:15097:          }
    #####:15098:          tmp___32 = 1U;
    #####:15099:          (reg_info + r___0)->bits.ever_matched_something = tmp___32;
    #####:15100:          (reg_info + r___0)->bits.matched_something = tmp___32;
    #####:15101:          r___0 ++;
        -:15102:        }
        -:15103:        while_break___19: /* CIL Label */ ;
        -:15104:        }
    #####:15105:      }
    #####:15106:      goto while_break___18;
        -:15107:    }
        -:15108:    while_break___18: /* CIL Label */ ;
        -:15109:    }
    #####:15110:    d ++;
    #####:15111:    goto switch_break;
        -:15112:    case_4: /* CIL Label */ 
        -:15113:    case_5: /* CIL Label */ 
    #####:15114:    not = (boolean )((unsigned int )((re_opcode_t )*(p - 1)) == 5U);
        -:15115:    {
    #####:15116:    while (1) {
        -:15117:      while_continue___20: /* CIL Label */ ;
    #####:15118:      if (! ((unsigned long )d == (unsigned long )dend)) {
    #####:15119:        goto while_break___20;
        -:15120:      }
    #####:15121:      if ((unsigned long )dend == (unsigned long )end_match_2) {
    #####:15122:        goto fail;
        -:15123:      }
    #####:15124:      d = string2;
    #####:15125:      dend = end_match_2;
        -:15126:    }
        -:15127:    while_break___20: /* CIL Label */ ;
        -:15128:    }
    #####:15129:    if (translate) {
    #####:15130:      c = (unsigned char )*(translate + (int )((unsigned char )*d));
    #####:15131:    } else {
    #####:15132:      c = (unsigned char )*d;
        -:15133:    }
    #####:15134:    if ((unsigned int )c < (unsigned int )((int )*p * 8)) {
    #####:15135:      if ((int )*(p + (1 + (int )c / 8)) & (1 << (int )c % 8)) {
    #####:15136:        not = (boolean )(! not);
    #####:15137:      }
    #####:15138:    }
    #####:15139:    p += 1 + (int )*p;
    #####:15140:    if (! not) {
    #####:15141:      goto fail;
        -:15142:    }
        -:15143:    {
    #####:15144:    while (1) {
        -:15145:      while_continue___21: /* CIL Label */ ;
    #####:15146:      if (! set_regs_matched_done) {
    #####:15147:        set_regs_matched_done = 1;
    #####:15148:        r___1 = lowest_active_reg;
        -:15149:        {
    #####:15150:        while (1) {
        -:15151:          while_continue___22: /* CIL Label */ ;
    #####:15152:          if (! (r___1 <= highest_active_reg)) {
    #####:15153:            goto while_break___22;
        -:15154:          }
    #####:15155:          tmp___33 = 1U;
    #####:15156:          (reg_info + r___1)->bits.ever_matched_something = tmp___33;
    #####:15157:          (reg_info + r___1)->bits.matched_something = tmp___33;
    #####:15158:          r___1 ++;
        -:15159:        }
        -:15160:        while_break___22: /* CIL Label */ ;
        -:15161:        }
    #####:15162:      }
    #####:15163:      goto while_break___21;
        -:15164:    }
        -:15165:    while_break___21: /* CIL Label */ ;
        -:15166:    }
    #####:15167:    d ++;
    #####:15168:    goto switch_break;
        -:15169:    case_6: /* CIL Label */ 
    #####:15170:    p1 = p;
    #####:15171:    if ((reg_info + (int )*p)->bits.match_null_string_p == 3U) {
        -:15172:      {
    #####:15173:      tmp___34 = group_match_null_string_p(& p1, pend, reg_info);
    #####:15174:      (reg_info + (int )*p)->bits.match_null_string_p = (unsigned int )tmp___34;
        -:15175:      }
    #####:15176:    }
    #####:15177:    if ((reg_info + (int )*p)->bits.match_null_string_p) {
    #####:15178:      if ((unsigned long )*(regstart + (int )*p) == (unsigned long )(& reg_unset_dummy)) {
    #####:15179:        tmp___35 = d;
    #####:15180:      } else {
    #####:15181:        tmp___35 = *(regstart + (int )*p);
        -:15182:      }
    #####:15183:      *(old_regstart + (int )*p) = tmp___35;
    #####:15184:    } else {
    #####:15185:      *(old_regstart + (int )*p) = *(regstart + (int )*p);
        -:15186:    }
    #####:15187:    *(regstart + (int )*p) = d;
    #####:15188:    (reg_info + (int )*p)->bits.is_active = 1U;
    #####:15189:    (reg_info + (int )*p)->bits.matched_something = 0U;
    #####:15190:    set_regs_matched_done = 0;
    #####:15191:    highest_active_reg = (active_reg_t )*p;
    #####:15192:    if (lowest_active_reg == (active_reg_t )((1 << 8) + 1)) {
    #####:15193:      lowest_active_reg = (active_reg_t )*p;
    #####:15194:    }
    #####:15195:    p += 2;
    #####:15196:    just_past_start_mem = p;
    #####:15197:    goto switch_break;
        -:15198:    case_7: /* CIL Label */ ;
    #####:15199:    if ((reg_info + (int )*p)->bits.match_null_string_p) {
    #####:15200:      if ((unsigned long )*(regend + (int )*p) == (unsigned long )(& reg_unset_dummy)) {
    #####:15201:        tmp___36 = d;
    #####:15202:      } else {
    #####:15203:        tmp___36 = *(regend + (int )*p);
        -:15204:      }
    #####:15205:      *(old_regend + (int )*p) = tmp___36;
    #####:15206:    } else {
    #####:15207:      *(old_regend + (int )*p) = *(regend + (int )*p);
        -:15208:    }
    #####:15209:    *(regend + (int )*p) = d;
    #####:15210:    (reg_info + (int )*p)->bits.is_active = 0U;
    #####:15211:    set_regs_matched_done = 0;
    #####:15212:    if (lowest_active_reg == highest_active_reg) {
    #####:15213:      lowest_active_reg = (active_reg_t )((1 << 8) + 1);
    #####:15214:      highest_active_reg = (active_reg_t )(1 << 8);
    #####:15215:    } else {
    #####:15216:      r___2 = (unsigned char )((int )*p - 1);
        -:15217:      {
    #####:15218:      while (1) {
        -:15219:        while_continue___23: /* CIL Label */ ;
    #####:15220:        if ((int )r___2 > 0) {
    #####:15221:          if (! (! (reg_info + (int )r___2)->bits.is_active)) {
    #####:15222:            goto while_break___23;
        -:15223:          }
    #####:15224:        } else {
    #####:15225:          goto while_break___23;
        -:15226:        }
    #####:15227:        r___2 = (unsigned char )((int )r___2 - 1);
        -:15228:      }
        -:15229:      while_break___23: /* CIL Label */ ;
        -:15230:      }
    #####:15231:      if ((int )r___2 == 0) {
    #####:15232:        lowest_active_reg = (active_reg_t )((1 << 8) + 1);
    #####:15233:        highest_active_reg = (active_reg_t )(1 << 8);
    #####:15234:      } else {
    #####:15235:        highest_active_reg = (active_reg_t )r___2;
        -:15236:      }
        -:15237:    }
    #####:15238:    if (! (reg_info + (int )*p)->bits.matched_something) {
    #####:15239:      goto _L___12;
        -:15240:    } else { //Added block
    #####:15241:    if ((unsigned long )just_past_start_mem == (unsigned long )(p - 1)) {
        -:15242:      _L___12: 
    #####:15243:      if ((unsigned long )(p + 2) < (unsigned long )pend) {
    #####:15244:        is_a_jump_n = (boolean )0;
    #####:15245:        p1 = p + 2;
    #####:15246:        mcnt = 0;
    #####:15247:        tmp___37 = p1;
    #####:15248:        p1 ++;
        -:15249:        {
    #####:15250:        if ((unsigned int )((re_opcode_t )*tmp___37) == 22U) {
    #####:15251:          goto case_22;
        -:15252:        }
    #####:15253:        if ((unsigned int )((re_opcode_t )*tmp___37) == 17U) {
    #####:15254:          goto case_17;
        -:15255:        }
    #####:15256:        if ((unsigned int )((re_opcode_t )*tmp___37) == 18U) {
    #####:15257:          goto case_17;
        -:15258:        }
    #####:15259:        if ((unsigned int )((re_opcode_t )*tmp___37) == 13U) {
    #####:15260:          goto case_17;
        -:15261:        }
    #####:15262:        if ((unsigned int )((re_opcode_t )*tmp___37) == 19U) {
    #####:15263:          goto case_17;
        -:15264:        }
    #####:15265:        goto switch_default;
        -:15266:        case_22: /* CIL Label */ 
    #####:15267:        is_a_jump_n = (boolean )1;
        -:15268:        case_17: /* CIL Label */ 
        -:15269:        case_18: /* CIL Label */ 
        -:15270:        case_13: /* CIL Label */ 
        -:15271:        case_19: /* CIL Label */ 
        -:15272:        {
    #####:15273:        while (1) {
        -:15274:          while_continue___24: /* CIL Label */ ;
        -:15275:          {
    #####:15276:          while (1) {
        -:15277:            while_continue___25: /* CIL Label */ ;
    #####:15278:            mcnt = (int )*p1 & 255;
    #####:15279:            mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:15280:            goto while_break___25;
        -:15281:          }
        -:15282:          while_break___25: /* CIL Label */ ;
        -:15283:          }
    #####:15284:          p1 += 2;
    #####:15285:          goto while_break___24;
        -:15286:        }
        -:15287:        while_break___24: /* CIL Label */ ;
        -:15288:        }
    #####:15289:        if (is_a_jump_n) {
    #####:15290:          p1 += 2;
    #####:15291:        }
    #####:15292:        goto switch_break___0;
        -:15293:        switch_default: /* CIL Label */ ;
        -:15294:        switch_break___0: /* CIL Label */ ;
        -:15295:        }
    #####:15296:        p1 += mcnt;
    #####:15297:        if (mcnt < 0) {
    #####:15298:          if ((unsigned int )((re_opcode_t )*p1) == 15U) {
    #####:15299:            if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 6U) {
    #####:15300:              if ((int )*(p1 + 4) == (int )*p) {
    #####:15301:                if ((reg_info + (int )*p)->bits.ever_matched_something) {
    #####:15302:                  (reg_info + (int )*p)->bits.ever_matched_something = 0U;
    #####:15303:                  r___3 = (unsigned int )*p;
        -:15304:                  {
    #####:15305:                  while (1) {
        -:15306:                    while_continue___26: /* CIL Label */ ;
    #####:15307:                    if (! (r___3 < (unsigned int )*p + (unsigned int )*(p + 1))) {
    #####:15308:                      goto while_break___26;
        -:15309:                    }
    #####:15310:                    *(regstart + r___3) = *(old_regstart + r___3);
    #####:15311:                    if ((unsigned long )*(old_regend + r___3) >= (unsigned long )*(regstart + r___3)) {
    #####:15312:                      *(regend + r___3) = *(old_regend + r___3);
    #####:15313:                    }
    #####:15314:                    r___3 ++;
        -:15315:                  }
        -:15316:                  while_break___26: /* CIL Label */ ;
        -:15317:                  }
    #####:15318:                }
    #####:15319:                p1 ++;
        -:15320:                {
    #####:15321:                while (1) {
        -:15322:                  while_continue___27: /* CIL Label */ ;
        -:15323:                  {
    #####:15324:                  while (1) {
        -:15325:                    while_continue___28: /* CIL Label */ ;
    #####:15326:                    mcnt = (int )*p1 & 255;
    #####:15327:                    mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:15328:                    goto while_break___28;
        -:15329:                  }
        -:15330:                  while_break___28: /* CIL Label */ ;
        -:15331:                  }
    #####:15332:                  p1 += 2;
    #####:15333:                  goto while_break___27;
        -:15334:                }
        -:15335:                while_break___27: /* CIL Label */ ;
        -:15336:                }
        -:15337:                {
    #####:15338:                while (1) {
        -:15339:                  while_continue___29: /* CIL Label */ ;
        -:15340:                  {
    #####:15341:                  while (1) {
        -:15342:                    while_continue___30: /* CIL Label */ ;
    #####:15343:                    if (! ((active_reg_t )(fail_stack.size - fail_stack.avail) < ((highest_active_reg - lowest_active_reg) + 1UL) * 3UL + 4UL)) {
    #####:15344:                      goto while_break___30;
        -:15345:                    }
    #####:15346:                    if (fail_stack.size > (unsigned int )(re_max_failures * 19)) {
    #####:15347:                      tmp___41 = 0;
    #####:15348:                    } else {
        -:15349:                      {
    #####:15350:                      tmp___38 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
    #####:15351:                      destination = (char *)tmp___38;
    #####:15352:                      tmp___39 = memcpy((void * __restrict  )destination, (void const   * __restrict  )fail_stack.stack,
    #####:15353:                                        (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
    #####:15354:                      fail_stack.stack = (fail_stack_elt_t *)tmp___39;
        -:15355:                      }
    #####:15356:                      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:15357:                        tmp___40 = 0;
    #####:15358:                      } else {
    #####:15359:                        fail_stack.size <<= 1;
    #####:15360:                        tmp___40 = 1;
        -:15361:                      }
    #####:15362:                      tmp___41 = tmp___40;
        -:15363:                    }
    #####:15364:                    if (! tmp___41) {
    #####:15365:                      return (-2);
        -:15366:                    }
        -:15367:                  }
        -:15368:                  while_break___30: /* CIL Label */ ;
        -:15369:                  }
    #####:15370:                  this_reg = lowest_active_reg;
        -:15371:                  {
    #####:15372:                  while (1) {
        -:15373:                    while_continue___31: /* CIL Label */ ;
    #####:15374:                    if (! (this_reg <= highest_active_reg)) {
    #####:15375:                      goto while_break___31;
        -:15376:                    }
    #####:15377:                    tmp___42 = fail_stack.avail;
    #####:15378:                    (fail_stack.avail) ++;
    #####:15379:                    (fail_stack.stack + tmp___42)->pointer = (unsigned char *)*(regstart + this_reg);
    #####:15380:                    tmp___43 = fail_stack.avail;
    #####:15381:                    (fail_stack.avail) ++;
    #####:15382:                    (fail_stack.stack + tmp___43)->pointer = (unsigned char *)*(regend + this_reg);
    #####:15383:                    tmp___44 = fail_stack.avail;
    #####:15384:                    (fail_stack.avail) ++;
    #####:15385:                    *(fail_stack.stack + tmp___44) = (reg_info + this_reg)->word;
    #####:15386:                    this_reg ++;
        -:15387:                  }
        -:15388:                  while_break___31: /* CIL Label */ ;
        -:15389:                  }
    #####:15390:                  tmp___45 = fail_stack.avail;
    #####:15391:                  (fail_stack.avail) ++;
    #####:15392:                  (fail_stack.stack + tmp___45)->integer = (int )lowest_active_reg;
    #####:15393:                  tmp___46 = fail_stack.avail;
    #####:15394:                  (fail_stack.avail) ++;
    #####:15395:                  (fail_stack.stack + tmp___46)->integer = (int )highest_active_reg;
    #####:15396:                  tmp___47 = fail_stack.avail;
    #####:15397:                  (fail_stack.avail) ++;
    #####:15398:                  (fail_stack.stack + tmp___47)->pointer = p1 + mcnt;
    #####:15399:                  tmp___48 = fail_stack.avail;
    #####:15400:                  (fail_stack.avail) ++;
    #####:15401:                  (fail_stack.stack + tmp___48)->pointer = (unsigned char *)d;
    #####:15402:                  goto while_break___29;
        -:15403:                }
        -:15404:                while_break___29: /* CIL Label */ ;
        -:15405:                }
    #####:15406:                goto fail;
        -:15407:              }
    #####:15408:            }
    #####:15409:          }
    #####:15410:        }
    #####:15411:      }
    #####:15412:    }
        -:15413:    }
    #####:15414:    p += 2;
    #####:15415:    goto switch_break;
        -:15416:    case_8: /* CIL Label */ 
    #####:15417:    tmp___49 = p;
    #####:15418:    p ++;
    #####:15419:    regno = (int )*tmp___49;
    #####:15420:    if ((unsigned long )*(regstart + regno) == (unsigned long )(& reg_unset_dummy)) {
    #####:15421:      goto fail;
        -:15422:    } else { //Added block
    #####:15423:    if ((unsigned long )*(regend + regno) == (unsigned long )(& reg_unset_dummy)) {
    #####:15424:      goto fail;
        -:15425:    }
        -:15426:    }
    #####:15427:    d2 = *(regstart + regno);
    #####:15428:    if (size1) {
    #####:15429:      if ((unsigned long )string1 <= (unsigned long )*(regstart + regno)) {
    #####:15430:        if ((unsigned long )*(regstart + regno) <= (unsigned long )(string1 + size1)) {
    #####:15431:          tmp___52 = 1;
    #####:15432:        } else {
    #####:15433:          tmp___52 = 0;
        -:15434:        }
    #####:15435:      } else {
    #####:15436:        tmp___52 = 0;
        -:15437:      }
    #####:15438:    } else {
    #####:15439:      tmp___52 = 0;
        -:15440:    }
    #####:15441:    if (size1) {
    #####:15442:      if ((unsigned long )string1 <= (unsigned long )*(regend + regno)) {
    #####:15443:        if ((unsigned long )*(regend + regno) <= (unsigned long )(string1 + size1)) {
    #####:15444:          tmp___53 = 1;
    #####:15445:        } else {
    #####:15446:          tmp___53 = 0;
        -:15447:        }
    #####:15448:      } else {
    #####:15449:        tmp___53 = 0;
        -:15450:      }
    #####:15451:    } else {
    #####:15452:      tmp___53 = 0;
        -:15453:    }
    #####:15454:    if (tmp___52 == tmp___53) {
    #####:15455:      dend2 = *(regend + regno);
    #####:15456:    } else {
    #####:15457:      dend2 = end_match_1;
        -:15458:    }
        -:15459:    {
    #####:15460:    while (1) {
        -:15461:      while_continue___32: /* CIL Label */ ;
        -:15462:      {
    #####:15463:      while (1) {
        -:15464:        while_continue___33: /* CIL Label */ ;
    #####:15465:        if (! ((unsigned long )d2 == (unsigned long )dend2)) {
    #####:15466:          goto while_break___33;
        -:15467:        }
    #####:15468:        if ((unsigned long )dend2 == (unsigned long )end_match_2) {
    #####:15469:          goto while_break___33;
        -:15470:        }
    #####:15471:        if ((unsigned long )dend2 == (unsigned long )*(regend + regno)) {
    #####:15472:          goto while_break___33;
        -:15473:        }
    #####:15474:        d2 = string2;
    #####:15475:        dend2 = *(regend + regno);
        -:15476:      }
        -:15477:      while_break___33: /* CIL Label */ ;
        -:15478:      }
    #####:15479:      if ((unsigned long )d2 == (unsigned long )dend2) {
    #####:15480:        goto while_break___32;
        -:15481:      }
        -:15482:      {
    #####:15483:      while (1) {
        -:15484:        while_continue___34: /* CIL Label */ ;
    #####:15485:        if (! ((unsigned long )d == (unsigned long )dend)) {
    #####:15486:          goto while_break___34;
        -:15487:        }
    #####:15488:        if ((unsigned long )dend == (unsigned long )end_match_2) {
    #####:15489:          goto fail;
        -:15490:        }
    #####:15491:        d = string2;
    #####:15492:        dend = end_match_2;
        -:15493:      }
        -:15494:      while_break___34: /* CIL Label */ ;
        -:15495:      }
    #####:15496:      mcnt = (int )(dend - d);
    #####:15497:      if ((long )mcnt > dend2 - d2) {
    #####:15498:        mcnt = (int )(dend2 - d2);
    #####:15499:      }
    #####:15500:      if (translate) {
        -:15501:        {
    #####:15502:        tmp___54 = bcmp_translate(d, d2, mcnt, translate);
    #####:15503:        tmp___56 = tmp___54;
        -:15504:        }
    #####:15505:      } else {
        -:15506:        {
    #####:15507:        tmp___55 = memcmp((void const   *)d, (void const   *)d2, (size_t )mcnt);
    #####:15508:        tmp___56 = tmp___55;
        -:15509:        }
        -:15510:      }
    #####:15511:      if (tmp___56) {
    #####:15512:        goto fail;
        -:15513:      }
    #####:15514:      d += mcnt;
    #####:15515:      d2 += mcnt;
        -:15516:      {
    #####:15517:      while (1) {
        -:15518:        while_continue___35: /* CIL Label */ ;
    #####:15519:        if (! set_regs_matched_done) {
    #####:15520:          set_regs_matched_done = 1;
    #####:15521:          r___4 = lowest_active_reg;
        -:15522:          {
    #####:15523:          while (1) {
        -:15524:            while_continue___36: /* CIL Label */ ;
    #####:15525:            if (! (r___4 <= highest_active_reg)) {
    #####:15526:              goto while_break___36;
        -:15527:            }
    #####:15528:            tmp___57 = 1U;
    #####:15529:            (reg_info + r___4)->bits.ever_matched_something = tmp___57;
    #####:15530:            (reg_info + r___4)->bits.matched_something = tmp___57;
    #####:15531:            r___4 ++;
        -:15532:          }
        -:15533:          while_break___36: /* CIL Label */ ;
        -:15534:          }
    #####:15535:        }
    #####:15536:        goto while_break___35;
        -:15537:      }
        -:15538:      while_break___35: /* CIL Label */ ;
        -:15539:      }
        -:15540:    }
        -:15541:    while_break___32: /* CIL Label */ ;
        -:15542:    }
    #####:15543:    goto switch_break;
        -:15544:    case_9: /* CIL Label */ ;
    #####:15545:    if (size1) {
    #####:15546:      tmp___58 = string1;
    #####:15547:    } else {
    #####:15548:      tmp___58 = string2;
        -:15549:    }
    #####:15550:    if ((unsigned long )d == (unsigned long )tmp___58) {
    #####:15551:      goto _L___13;
        -:15552:    } else { //Added block
    #####:15553:    if (! size2) {
        -:15554:      _L___13: 
    #####:15555:      if (! bufp->not_bol) {
    #####:15556:        goto switch_break;
        -:15557:      }
    #####:15558:    } else { //Added block
    #####:15559:    if ((int const   )*(d + -1) == 10) {
    #####:15560:      if (bufp->newline_anchor) {
    #####:15561:        goto switch_break;
        -:15562:      }
    #####:15563:    }
        -:15564:    }
        -:15565:    }
    #####:15566:    goto fail;
        -:15567:    case_10: /* CIL Label */ ;
    #####:15568:    if ((unsigned long )d == (unsigned long )end2) {
    #####:15569:      if (! bufp->not_eol) {
    #####:15570:        goto switch_break;
        -:15571:      }
    #####:15572:    } else {
    #####:15573:      if ((unsigned long )d == (unsigned long )end1) {
    #####:15574:        tmp___59 = (int )((int const   )*string2);
    #####:15575:      } else {
    #####:15576:        tmp___59 = (int )((int const   )*d);
        -:15577:      }
    #####:15578:      if (tmp___59 == 10) {
    #####:15579:        if (bufp->newline_anchor) {
    #####:15580:          goto switch_break;
        -:15581:        }
    #####:15582:      }
        -:15583:    }
    #####:15584:    goto fail;
        -:15585:    case_11: /* CIL Label */ ;
    #####:15586:    if (size1) {
    #####:15587:      tmp___60 = string1;
    #####:15588:    } else {
    #####:15589:      tmp___60 = string2;
        -:15590:    }
    #####:15591:    if ((unsigned long )d == (unsigned long )tmp___60) {
    #####:15592:      goto switch_break;
        -:15593:    } else { //Added block
    #####:15594:    if (! size2) {
    #####:15595:      goto switch_break;
        -:15596:    }
        -:15597:    }
    #####:15598:    goto fail;
        -:15599:    case_12: /* CIL Label */ ;
    #####:15600:    if ((unsigned long )d == (unsigned long )end2) {
    #####:15601:      goto switch_break;
        -:15602:    }
    #####:15603:    goto fail;
        -:15604:    case_16: /* CIL Label */ ;
        -:15605:    {
    #####:15606:    while (1) {
        -:15607:      while_continue___37: /* CIL Label */ ;
        -:15608:      {
    #####:15609:      while (1) {
        -:15610:        while_continue___38: /* CIL Label */ ;
    #####:15611:        mcnt = (int )*p & 255;
    #####:15612:        mcnt += (int )((signed char )*(p + 1)) << 8;
    #####:15613:        goto while_break___38;
        -:15614:      }
        -:15615:      while_break___38: /* CIL Label */ ;
        -:15616:      }
    #####:15617:      p += 2;
    #####:15618:      goto while_break___37;
        -:15619:    }
        -:15620:    while_break___37: /* CIL Label */ ;
        -:15621:    }
        -:15622:    {
    #####:15623:    while (1) {
        -:15624:      while_continue___39: /* CIL Label */ ;
        -:15625:      {
    #####:15626:      while (1) {
        -:15627:        while_continue___40: /* CIL Label */ ;
    #####:15628:        if (! ((active_reg_t )(fail_stack.size - fail_stack.avail) < ((highest_active_reg - lowest_active_reg) + 1UL) * 3UL + 4UL)) {
    #####:15629:          goto while_break___40;
        -:15630:        }
    #####:15631:        if (fail_stack.size > (unsigned int )(re_max_failures * 19)) {
    #####:15632:          tmp___64 = 0;
    #####:15633:        } else {
        -:15634:          {
    #####:15635:          tmp___61 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
    #####:15636:          destination___0 = (char *)tmp___61;
    #####:15637:          tmp___62 = memcpy((void * __restrict  )destination___0, (void const   * __restrict  )fail_stack.stack,
    #####:15638:                            (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
    #####:15639:          fail_stack.stack = (fail_stack_elt_t *)tmp___62;
        -:15640:          }
    #####:15641:          if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:15642:            tmp___63 = 0;
    #####:15643:          } else {
    #####:15644:            fail_stack.size <<= 1;
    #####:15645:            tmp___63 = 1;
        -:15646:          }
    #####:15647:          tmp___64 = tmp___63;
        -:15648:        }
    #####:15649:        if (! tmp___64) {
    #####:15650:          return (-2);
        -:15651:        }
        -:15652:      }
        -:15653:      while_break___40: /* CIL Label */ ;
        -:15654:      }
    #####:15655:      this_reg___0 = lowest_active_reg;
        -:15656:      {
    #####:15657:      while (1) {
        -:15658:        while_continue___41: /* CIL Label */ ;
    #####:15659:        if (! (this_reg___0 <= highest_active_reg)) {
    #####:15660:          goto while_break___41;
        -:15661:        }
    #####:15662:        tmp___65 = fail_stack.avail;
    #####:15663:        (fail_stack.avail) ++;
    #####:15664:        (fail_stack.stack + tmp___65)->pointer = (unsigned char *)*(regstart + this_reg___0);
    #####:15665:        tmp___66 = fail_stack.avail;
    #####:15666:        (fail_stack.avail) ++;
    #####:15667:        (fail_stack.stack + tmp___66)->pointer = (unsigned char *)*(regend + this_reg___0);
    #####:15668:        tmp___67 = fail_stack.avail;
    #####:15669:        (fail_stack.avail) ++;
    #####:15670:        *(fail_stack.stack + tmp___67) = (reg_info + this_reg___0)->word;
    #####:15671:        this_reg___0 ++;
        -:15672:      }
        -:15673:      while_break___41: /* CIL Label */ ;
        -:15674:      }
    #####:15675:      tmp___68 = fail_stack.avail;
    #####:15676:      (fail_stack.avail) ++;
    #####:15677:      (fail_stack.stack + tmp___68)->integer = (int )lowest_active_reg;
    #####:15678:      tmp___69 = fail_stack.avail;
    #####:15679:      (fail_stack.avail) ++;
    #####:15680:      (fail_stack.stack + tmp___69)->integer = (int )highest_active_reg;
    #####:15681:      tmp___70 = fail_stack.avail;
    #####:15682:      (fail_stack.avail) ++;
    #####:15683:      (fail_stack.stack + tmp___70)->pointer = p + mcnt;
    #####:15684:      tmp___71 = fail_stack.avail;
    #####:15685:      (fail_stack.avail) ++;
    #####:15686:      (fail_stack.stack + tmp___71)->pointer = (unsigned char *)((void *)0);
    #####:15687:      goto while_break___39;
        -:15688:    }
        -:15689:    while_break___39: /* CIL Label */ ;
        -:15690:    }
    #####:15691:    goto switch_break;
        -:15692:    on_failure: 
        -:15693:    case_15: /* CIL Label */ ;
        -:15694:    {
    #####:15695:    while (1) {
        -:15696:      while_continue___42: /* CIL Label */ ;
        -:15697:      {
    #####:15698:      while (1) {
        -:15699:        while_continue___43: /* CIL Label */ ;
    #####:15700:        mcnt = (int )*p & 255;
    #####:15701:        mcnt += (int )((signed char )*(p + 1)) << 8;
    #####:15702:        goto while_break___43;
        -:15703:      }
        -:15704:      while_break___43: /* CIL Label */ ;
        -:15705:      }
    #####:15706:      p += 2;
    #####:15707:      goto while_break___42;
        -:15708:    }
        -:15709:    while_break___42: /* CIL Label */ ;
        -:15710:    }
    #####:15711:    p1 = p;
        -:15712:    {
    #####:15713:    while (1) {
        -:15714:      while_continue___44: /* CIL Label */ ;
    #####:15715:      if ((unsigned long )p1 < (unsigned long )pend) {
    #####:15716:        if (! ((unsigned int )((re_opcode_t )*p1) == 0U)) {
    #####:15717:          goto while_break___44;
        -:15718:        }
    #####:15719:      } else {
    #####:15720:        goto while_break___44;
        -:15721:      }
    #####:15722:      p1 ++;
        -:15723:    }
        -:15724:    while_break___44: /* CIL Label */ ;
        -:15725:    }
    #####:15726:    if ((unsigned long )p1 < (unsigned long )pend) {
    #####:15727:      if ((unsigned int )((re_opcode_t )*p1) == 6U) {
    #####:15728:        highest_active_reg = (active_reg_t )((int )*(p1 + 1) + (int )*(p1 + 2));
    #####:15729:        if (lowest_active_reg == (active_reg_t )((1 << 8) + 1)) {
    #####:15730:          lowest_active_reg = (active_reg_t )*(p1 + 1);
    #####:15731:        }
    #####:15732:      }
    #####:15733:    }
        -:15734:    {
    #####:15735:    while (1) {
        -:15736:      while_continue___45: /* CIL Label */ ;
        -:15737:      {
    #####:15738:      while (1) {
        -:15739:        while_continue___46: /* CIL Label */ ;
    #####:15740:        if (! ((active_reg_t )(fail_stack.size - fail_stack.avail) < ((highest_active_reg - lowest_active_reg) + 1UL) * 3UL + 4UL)) {
    #####:15741:          goto while_break___46;
        -:15742:        }
    #####:15743:        if (fail_stack.size > (unsigned int )(re_max_failures * 19)) {
    #####:15744:          tmp___75 = 0;
    #####:15745:        } else {
        -:15746:          {
    #####:15747:          tmp___72 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
    #####:15748:          destination___1 = (char *)tmp___72;
    #####:15749:          tmp___73 = memcpy((void * __restrict  )destination___1, (void const   * __restrict  )fail_stack.stack,
    #####:15750:                            (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
    #####:15751:          fail_stack.stack = (fail_stack_elt_t *)tmp___73;
        -:15752:          }
    #####:15753:          if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:15754:            tmp___74 = 0;
    #####:15755:          } else {
    #####:15756:            fail_stack.size <<= 1;
    #####:15757:            tmp___74 = 1;
        -:15758:          }
    #####:15759:          tmp___75 = tmp___74;
        -:15760:        }
    #####:15761:        if (! tmp___75) {
    #####:15762:          return (-2);
        -:15763:        }
        -:15764:      }
        -:15765:      while_break___46: /* CIL Label */ ;
        -:15766:      }
    #####:15767:      this_reg___1 = lowest_active_reg;
        -:15768:      {
    #####:15769:      while (1) {
        -:15770:        while_continue___47: /* CIL Label */ ;
    #####:15771:        if (! (this_reg___1 <= highest_active_reg)) {
    #####:15772:          goto while_break___47;
        -:15773:        }
    #####:15774:        tmp___76 = fail_stack.avail;
    #####:15775:        (fail_stack.avail) ++;
    #####:15776:        (fail_stack.stack + tmp___76)->pointer = (unsigned char *)*(regstart + this_reg___1);
    #####:15777:        tmp___77 = fail_stack.avail;
    #####:15778:        (fail_stack.avail) ++;
    #####:15779:        (fail_stack.stack + tmp___77)->pointer = (unsigned char *)*(regend + this_reg___1);
    #####:15780:        tmp___78 = fail_stack.avail;
    #####:15781:        (fail_stack.avail) ++;
    #####:15782:        *(fail_stack.stack + tmp___78) = (reg_info + this_reg___1)->word;
    #####:15783:        this_reg___1 ++;
        -:15784:      }
        -:15785:      while_break___47: /* CIL Label */ ;
        -:15786:      }
    #####:15787:      tmp___79 = fail_stack.avail;
    #####:15788:      (fail_stack.avail) ++;
    #####:15789:      (fail_stack.stack + tmp___79)->integer = (int )lowest_active_reg;
    #####:15790:      tmp___80 = fail_stack.avail;
    #####:15791:      (fail_stack.avail) ++;
    #####:15792:      (fail_stack.stack + tmp___80)->integer = (int )highest_active_reg;
    #####:15793:      tmp___81 = fail_stack.avail;
    #####:15794:      (fail_stack.avail) ++;
    #####:15795:      (fail_stack.stack + tmp___81)->pointer = p + mcnt;
    #####:15796:      tmp___82 = fail_stack.avail;
    #####:15797:      (fail_stack.avail) ++;
    #####:15798:      (fail_stack.stack + tmp___82)->pointer = (unsigned char *)d;
    #####:15799:      goto while_break___45;
        -:15800:    }
        -:15801:    while_break___45: /* CIL Label */ ;
        -:15802:    }
    #####:15803:    goto switch_break;
        -:15804:    case_18___0: /* CIL Label */ 
        -:15805:    {
    #####:15806:    while (1) {
        -:15807:      while_continue___48: /* CIL Label */ ;
        -:15808:      {
    #####:15809:      while (1) {
        -:15810:        while_continue___49: /* CIL Label */ ;
    #####:15811:        mcnt = (int )*p & 255;
    #####:15812:        mcnt += (int )((signed char )*(p + 1)) << 8;
    #####:15813:        goto while_break___49;
        -:15814:      }
        -:15815:      while_break___49: /* CIL Label */ ;
        -:15816:      }
    #####:15817:      p += 2;
    #####:15818:      goto while_break___48;
        -:15819:    }
        -:15820:    while_break___48: /* CIL Label */ ;
        -:15821:    }
    #####:15822:    p2 = p;
        -:15823:    {
    #####:15824:    while (1) {
        -:15825:      while_continue___50: /* CIL Label */ ;
    #####:15826:      if ((unsigned long )(p2 + 2) < (unsigned long )pend) {
    #####:15827:        if ((unsigned int )((re_opcode_t )*p2) == 7U) {
    #####:15828:          p2 += 3;
    #####:15829:        } else { //Added block
    #####:15830:        if ((unsigned int )((re_opcode_t )*p2) == 6U) {
    #####:15831:          p2 += 3;
    #####:15832:        } else {
    #####:15833:          goto _L___14;
        -:15834:        }
        -:15835:        }
    #####:15836:      } else { //Added block
        -:15837:      _L___14: 
    #####:15838:      if ((unsigned long )(p2 + 6) < (unsigned long )pend) {
    #####:15839:        if ((unsigned int )((re_opcode_t )*p2) == 19U) {
    #####:15840:          p2 += 6;
    #####:15841:        } else {
    #####:15842:          goto while_break___50;
        -:15843:        }
    #####:15844:      } else {
    #####:15845:        goto while_break___50;
        -:15846:      }
        -:15847:      }
        -:15848:    }
        -:15849:    while_break___50: /* CIL Label */ ;
        -:15850:    }
    #####:15851:    p1 = p + mcnt;
    #####:15852:    if ((unsigned long )p2 == (unsigned long )pend) {
    #####:15853:      *(p + -3) = (unsigned char)17;
    #####:15854:    } else { //Added block
    #####:15855:    if ((unsigned int )((re_opcode_t )*p2) == 2U) {
    #####:15856:      goto _L___18;
        -:15857:    } else { //Added block
    #####:15858:    if (bufp->newline_anchor) {
    #####:15859:      if ((unsigned int )((re_opcode_t )*p2) == 10U) {
        -:15860:        _L___18: 
    #####:15861:        if ((int )*p2 == 10) {
    #####:15862:          tmp___83 = '\n';
    #####:15863:        } else {
    #####:15864:          tmp___83 = (int )*(p2 + 2);
        -:15865:        }
    #####:15866:        c___0 = (unsigned char )tmp___83;
    #####:15867:        if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 2U) {
    #####:15868:          if ((int )*(p1 + 5) != (int )c___0) {
    #####:15869:            *(p + -3) = (unsigned char)17;
    #####:15870:          } else {
    #####:15871:            goto _L___16;
        -:15872:          }
    #####:15873:        } else { //Added block
        -:15874:        _L___16: 
    #####:15875:        if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
    #####:15876:          goto _L___15;
        -:15877:        } else { //Added block
    #####:15878:        if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
        -:15879:          _L___15: 
    #####:15880:          not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 5U;
    #####:15881:          if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
    #####:15882:            if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
    #####:15883:              not___0 = ! not___0;
    #####:15884:            }
    #####:15885:          }
    #####:15886:          if (! not___0) {
    #####:15887:            *(p + -3) = (unsigned char)17;
    #####:15888:          }
    #####:15889:        }
        -:15890:        }
        -:15891:        }
    #####:15892:      } else {
    #####:15893:        goto _L___19;
        -:15894:      }
    #####:15895:    } else { //Added block
        -:15896:    _L___19: 
    #####:15897:    if ((unsigned int )((re_opcode_t )*p2) == 4U) {
    #####:15898:      if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 2U) {
    #####:15899:        if ((int )*(p2 + 1) * 8 > (int )*(p1 + 5)) {
    #####:15900:          if ((int )*(p2 + (2 + (int )*(p1 + 5) / 8)) & (1 << (int )*(p1 + 5) % 8)) {
    #####:15901:            goto _L___17;
        -:15902:          } else {
    #####:15903:            *(p + -3) = (unsigned char)17;
        -:15904:          }
    #####:15905:        } else {
    #####:15906:          *(p + -3) = (unsigned char)17;
        -:15907:        }
    #####:15908:      } else { //Added block
        -:15909:      _L___17: 
    #####:15910:      if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
    #####:15911:        idx = 0;
        -:15912:        {
    #####:15913:        while (1) {
        -:15914:          while_continue___51: /* CIL Label */ ;
    #####:15915:          if (! (idx < (int )*(p2 + 1))) {
    #####:15916:            goto while_break___51;
        -:15917:          }
    #####:15918:          if (! ((int )*(p2 + (2 + idx)) == 0)) {
    #####:15919:            if (idx < (int )*(p1 + 4)) {
    #####:15920:              if (! (((int )*(p2 + (2 + idx)) & ~ ((int )*(p1 + (5 + idx)))) == 0)) {
    #####:15921:                goto while_break___51;
        -:15922:              }
    #####:15923:            } else {
    #####:15924:              goto while_break___51;
        -:15925:            }
    #####:15926:          }
    #####:15927:          idx ++;
        -:15928:        }
        -:15929:        while_break___51: /* CIL Label */ ;
        -:15930:        }
    #####:15931:        if (idx == (int )*(p2 + 1)) {
    #####:15932:          *(p + -3) = (unsigned char)17;
    #####:15933:        }
    #####:15934:      } else { //Added block
    #####:15935:      if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
    #####:15936:        idx___0 = 0;
        -:15937:        {
    #####:15938:        while (1) {
        -:15939:          while_continue___52: /* CIL Label */ ;
    #####:15940:          if (idx___0 < (int )*(p2 + 1)) {
    #####:15941:            if (! (idx___0 < (int )*(p1 + 4))) {
    #####:15942:              goto while_break___52;
        -:15943:            }
    #####:15944:          } else {
    #####:15945:            goto while_break___52;
        -:15946:          }
    #####:15947:          if (((int )*(p2 + (2 + idx___0)) & (int )*(p1 + (5 + idx___0))) != 0) {
    #####:15948:            goto while_break___52;
        -:15949:          }
    #####:15950:          idx___0 ++;
        -:15951:        }
        -:15952:        while_break___52: /* CIL Label */ ;
        -:15953:        }
    #####:15954:        if (idx___0 == (int )*(p2 + 1)) {
    #####:15955:          *(p + -3) = (unsigned char)17;
    #####:15956:        } else { //Added block
    #####:15957:        if (idx___0 == (int )*(p1 + 4)) {
    #####:15958:          *(p + -3) = (unsigned char)17;
    #####:15959:        }
        -:15960:        }
    #####:15961:      }
        -:15962:      }
        -:15963:      }
    #####:15964:    }
        -:15965:    }
        -:15966:    }
        -:15967:    }
    #####:15968:    p -= 2;
    #####:15969:    if ((unsigned int )((re_opcode_t )*(p + -1)) != 17U) {
    #####:15970:      *(p + -1) = (unsigned char)13;
    #####:15971:      goto unconditional_jump;
        -:15972:    }
        -:15973:    case_17___0: /* CIL Label */ 
    #####:15974:    (fail_stack.avail) --;
    #####:15975:    string_temp = (unsigned char const   *)(fail_stack.stack + fail_stack.avail)->pointer;
    #####:15976:    if ((unsigned long )string_temp != (unsigned long )((void *)0)) {
    #####:15977:      sdummy = (char const   *)string_temp;
    #####:15978:    }
    #####:15979:    (fail_stack.avail) --;
    #####:15980:    pdummy = (fail_stack.stack + fail_stack.avail)->pointer;
    #####:15981:    (fail_stack.avail) --;
    #####:15982:    dummy_high_reg = (active_reg_t )(fail_stack.stack + fail_stack.avail)->integer;
    #####:15983:    (fail_stack.avail) --;
    #####:15984:    dummy_low_reg = (active_reg_t )(fail_stack.stack + fail_stack.avail)->integer;
    #####:15985:    this_reg___2 = dummy_high_reg;
        -:15986:    {
    #####:15987:    while (1) {
        -:15988:      while_continue___53: /* CIL Label */ ;
    #####:15989:      if (! (this_reg___2 >= dummy_low_reg)) {
    #####:15990:        goto while_break___53;
        -:15991:      }
    #####:15992:      (fail_stack.avail) --;
    #####:15993:      (reg_info_dummy + this_reg___2)->word = *(fail_stack.stack + fail_stack.avail);
    #####:15994:      (fail_stack.avail) --;
    #####:15995:      *(reg_dummy + this_reg___2) = (char const   *)(fail_stack.stack + fail_stack.avail)->pointer;
    #####:15996:      (fail_stack.avail) --;
    #####:15997:      *(reg_dummy + this_reg___2) = (char const   *)(fail_stack.stack + fail_stack.avail)->pointer;
    #####:15998:      this_reg___2 --;
        -:15999:    }
        -:16000:    while_break___53: /* CIL Label */ ;
        -:16001:    }
    #####:16002:    set_regs_matched_done = 0;
        -:16003:    unconditional_jump: ;
        -:16004:    case_13___0: /* CIL Label */ 
        -:16005:    {
    #####:16006:    while (1) {
        -:16007:      while_continue___54: /* CIL Label */ ;
        -:16008:      {
    #####:16009:      while (1) {
        -:16010:        while_continue___55: /* CIL Label */ ;
    #####:16011:        mcnt = (int )*p & 255;
    #####:16012:        mcnt += (int )((signed char )*(p + 1)) << 8;
    #####:16013:        goto while_break___55;
        -:16014:      }
        -:16015:      while_break___55: /* CIL Label */ ;
        -:16016:      }
    #####:16017:      p += 2;
    #####:16018:      goto while_break___54;
        -:16019:    }
        -:16020:    while_break___54: /* CIL Label */ ;
        -:16021:    }
    #####:16022:    p += mcnt;
    #####:16023:    goto switch_break;
        -:16024:    case_14: /* CIL Label */ ;
    #####:16025:    goto unconditional_jump;
        -:16026:    case_19___0: /* CIL Label */ ;
        -:16027:    {
    #####:16028:    while (1) {
        -:16029:      while_continue___56: /* CIL Label */ ;
        -:16030:      {
    #####:16031:      while (1) {
        -:16032:        while_continue___57: /* CIL Label */ ;
    #####:16033:        if (! ((active_reg_t )(fail_stack.size - fail_stack.avail) < ((highest_active_reg - lowest_active_reg) + 1UL) * 3UL + 4UL)) {
    #####:16034:          goto while_break___57;
        -:16035:        }
    #####:16036:        if (fail_stack.size > (unsigned int )(re_max_failures * 19)) {
    #####:16037:          tmp___87 = 0;
    #####:16038:        } else {
        -:16039:          {
    #####:16040:          tmp___84 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
    #####:16041:          destination___2 = (char *)tmp___84;
    #####:16042:          tmp___85 = memcpy((void * __restrict  )destination___2, (void const   * __restrict  )fail_stack.stack,
    #####:16043:                            (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
    #####:16044:          fail_stack.stack = (fail_stack_elt_t *)tmp___85;
        -:16045:          }
    #####:16046:          if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:16047:            tmp___86 = 0;
    #####:16048:          } else {
    #####:16049:            fail_stack.size <<= 1;
    #####:16050:            tmp___86 = 1;
        -:16051:          }
    #####:16052:          tmp___87 = tmp___86;
        -:16053:        }
    #####:16054:        if (! tmp___87) {
    #####:16055:          return (-2);
        -:16056:        }
        -:16057:      }
        -:16058:      while_break___57: /* CIL Label */ ;
        -:16059:      }
    #####:16060:      this_reg___3 = lowest_active_reg;
        -:16061:      {
    #####:16062:      while (1) {
        -:16063:        while_continue___58: /* CIL Label */ ;
    #####:16064:        if (! (this_reg___3 <= highest_active_reg)) {
    #####:16065:          goto while_break___58;
        -:16066:        }
    #####:16067:        tmp___88 = fail_stack.avail;
    #####:16068:        (fail_stack.avail) ++;
    #####:16069:        (fail_stack.stack + tmp___88)->pointer = (unsigned char *)*(regstart + this_reg___3);
    #####:16070:        tmp___89 = fail_stack.avail;
    #####:16071:        (fail_stack.avail) ++;
    #####:16072:        (fail_stack.stack + tmp___89)->pointer = (unsigned char *)*(regend + this_reg___3);
    #####:16073:        tmp___90 = fail_stack.avail;
    #####:16074:        (fail_stack.avail) ++;
    #####:16075:        *(fail_stack.stack + tmp___90) = (reg_info + this_reg___3)->word;
    #####:16076:        this_reg___3 ++;
        -:16077:      }
        -:16078:      while_break___58: /* CIL Label */ ;
        -:16079:      }
    #####:16080:      tmp___91 = fail_stack.avail;
    #####:16081:      (fail_stack.avail) ++;
    #####:16082:      (fail_stack.stack + tmp___91)->integer = (int )lowest_active_reg;
    #####:16083:      tmp___92 = fail_stack.avail;
    #####:16084:      (fail_stack.avail) ++;
    #####:16085:      (fail_stack.stack + tmp___92)->integer = (int )highest_active_reg;
    #####:16086:      tmp___93 = fail_stack.avail;
    #####:16087:      (fail_stack.avail) ++;
    #####:16088:      (fail_stack.stack + tmp___93)->pointer = (unsigned char *)((void *)0);
    #####:16089:      tmp___94 = fail_stack.avail;
    #####:16090:      (fail_stack.avail) ++;
    #####:16091:      (fail_stack.stack + tmp___94)->pointer = (unsigned char *)((void *)0);
    #####:16092:      goto while_break___56;
        -:16093:    }
        -:16094:    while_break___56: /* CIL Label */ ;
        -:16095:    }
    #####:16096:    goto unconditional_jump;
        -:16097:    case_20: /* CIL Label */ ;
        -:16098:    {
    #####:16099:    while (1) {
        -:16100:      while_continue___59: /* CIL Label */ ;
        -:16101:      {
    #####:16102:      while (1) {
        -:16103:        while_continue___60: /* CIL Label */ ;
    #####:16104:        if (! ((active_reg_t )(fail_stack.size - fail_stack.avail) < ((highest_active_reg - lowest_active_reg) + 1UL) * 3UL + 4UL)) {
    #####:16105:          goto while_break___60;
        -:16106:        }
    #####:16107:        if (fail_stack.size > (unsigned int )(re_max_failures * 19)) {
    #####:16108:          tmp___98 = 0;
    #####:16109:        } else {
        -:16110:          {
    #####:16111:          tmp___95 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
    #####:16112:          destination___3 = (char *)tmp___95;
    #####:16113:          tmp___96 = memcpy((void * __restrict  )destination___3, (void const   * __restrict  )fail_stack.stack,
    #####:16114:                            (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
    #####:16115:          fail_stack.stack = (fail_stack_elt_t *)tmp___96;
        -:16116:          }
    #####:16117:          if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
    #####:16118:            tmp___97 = 0;
    #####:16119:          } else {
    #####:16120:            fail_stack.size <<= 1;
    #####:16121:            tmp___97 = 1;
        -:16122:          }
    #####:16123:          tmp___98 = tmp___97;
        -:16124:        }
    #####:16125:        if (! tmp___98) {
    #####:16126:          return (-2);
        -:16127:        }
        -:16128:      }
        -:16129:      while_break___60: /* CIL Label */ ;
        -:16130:      }
    #####:16131:      this_reg___4 = lowest_active_reg;
        -:16132:      {
    #####:16133:      while (1) {
        -:16134:        while_continue___61: /* CIL Label */ ;
    #####:16135:        if (! (this_reg___4 <= highest_active_reg)) {
    #####:16136:          goto while_break___61;
        -:16137:        }
    #####:16138:        tmp___99 = fail_stack.avail;
    #####:16139:        (fail_stack.avail) ++;
    #####:16140:        (fail_stack.stack + tmp___99)->pointer = (unsigned char *)*(regstart + this_reg___4);
    #####:16141:        tmp___100 = fail_stack.avail;
    #####:16142:        (fail_stack.avail) ++;
    #####:16143:        (fail_stack.stack + tmp___100)->pointer = (unsigned char *)*(regend + this_reg___4);
    #####:16144:        tmp___101 = fail_stack.avail;
    #####:16145:        (fail_stack.avail) ++;
    #####:16146:        *(fail_stack.stack + tmp___101) = (reg_info + this_reg___4)->word;
    #####:16147:        this_reg___4 ++;
        -:16148:      }
        -:16149:      while_break___61: /* CIL Label */ ;
        -:16150:      }
    #####:16151:      tmp___102 = fail_stack.avail;
    #####:16152:      (fail_stack.avail) ++;
    #####:16153:      (fail_stack.stack + tmp___102)->integer = (int )lowest_active_reg;
    #####:16154:      tmp___103 = fail_stack.avail;
    #####:16155:      (fail_stack.avail) ++;
    #####:16156:      (fail_stack.stack + tmp___103)->integer = (int )highest_active_reg;
    #####:16157:      tmp___104 = fail_stack.avail;
    #####:16158:      (fail_stack.avail) ++;
    #####:16159:      (fail_stack.stack + tmp___104)->pointer = (unsigned char *)((void *)0);
    #####:16160:      tmp___105 = fail_stack.avail;
    #####:16161:      (fail_stack.avail) ++;
    #####:16162:      (fail_stack.stack + tmp___105)->pointer = (unsigned char *)((void *)0);
    #####:16163:      goto while_break___59;
        -:16164:    }
        -:16165:    while_break___59: /* CIL Label */ ;
        -:16166:    }
    #####:16167:    goto switch_break;
        -:16168:    case_21: /* CIL Label */ 
        -:16169:    {
    #####:16170:    while (1) {
        -:16171:      while_continue___62: /* CIL Label */ ;
    #####:16172:      mcnt = (int )*(p + 2) & 255;
    #####:16173:      mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
    #####:16174:      goto while_break___62;
        -:16175:    }
        -:16176:    while_break___62: /* CIL Label */ ;
        -:16177:    }
    #####:16178:    if (mcnt > 0) {
    #####:16179:      mcnt --;
    #####:16180:      p += 2;
        -:16181:      {
    #####:16182:      while (1) {
        -:16183:        while_continue___63: /* CIL Label */ ;
        -:16184:        {
    #####:16185:        while (1) {
        -:16186:          while_continue___64: /* CIL Label */ ;
    #####:16187:          *(p + 0) = (unsigned char )(mcnt & 255);
    #####:16188:          *(p + 1) = (unsigned char )(mcnt >> 8);
    #####:16189:          goto while_break___64;
        -:16190:        }
        -:16191:        while_break___64: /* CIL Label */ ;
        -:16192:        }
    #####:16193:        p += 2;
    #####:16194:        goto while_break___63;
        -:16195:      }
        -:16196:      while_break___63: /* CIL Label */ ;
        -:16197:      }
    #####:16198:    } else { //Added block
    #####:16199:    if (mcnt == 0) {
    #####:16200:      *(p + 2) = (unsigned char)0;
    #####:16201:      *(p + 3) = (unsigned char)0;
    #####:16202:      goto on_failure;
        -:16203:    }
        -:16204:    }
    #####:16205:    goto switch_break;
        -:16206:    case_22___0: /* CIL Label */ 
        -:16207:    {
    #####:16208:    while (1) {
        -:16209:      while_continue___65: /* CIL Label */ ;
    #####:16210:      mcnt = (int )*(p + 2) & 255;
    #####:16211:      mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
    #####:16212:      goto while_break___65;
        -:16213:    }
        -:16214:    while_break___65: /* CIL Label */ ;
        -:16215:    }
    #####:16216:    if (mcnt) {
    #####:16217:      mcnt --;
        -:16218:      {
    #####:16219:      while (1) {
        -:16220:        while_continue___66: /* CIL Label */ ;
    #####:16221:        *((p + 2) + 0) = (unsigned char )(mcnt & 255);
    #####:16222:        *((p + 2) + 1) = (unsigned char )(mcnt >> 8);
    #####:16223:        goto while_break___66;
        -:16224:      }
        -:16225:      while_break___66: /* CIL Label */ ;
        -:16226:      }
    #####:16227:      goto unconditional_jump;
        -:16228:    } else {
    #####:16229:      p += 4;
        -:16230:    }
    #####:16231:    goto switch_break;
        -:16232:    case_23: /* CIL Label */ 
        -:16233:    {
    #####:16234:    while (1) {
        -:16235:      while_continue___67: /* CIL Label */ ;
        -:16236:      {
    #####:16237:      while (1) {
        -:16238:        while_continue___68: /* CIL Label */ ;
    #####:16239:        mcnt = (int )*p & 255;
    #####:16240:        mcnt += (int )((signed char )*(p + 1)) << 8;
    #####:16241:        goto while_break___68;
        -:16242:      }
        -:16243:      while_break___68: /* CIL Label */ ;
        -:16244:      }
    #####:16245:      p += 2;
    #####:16246:      goto while_break___67;
        -:16247:    }
        -:16248:    while_break___67: /* CIL Label */ ;
        -:16249:    }
    #####:16250:    p1 = p + mcnt;
        -:16251:    {
    #####:16252:    while (1) {
        -:16253:      while_continue___69: /* CIL Label */ ;
        -:16254:      {
    #####:16255:      while (1) {
        -:16256:        while_continue___70: /* CIL Label */ ;
    #####:16257:        mcnt = (int )*p & 255;
    #####:16258:        mcnt += (int )((signed char )*(p + 1)) << 8;
    #####:16259:        goto while_break___70;
        -:16260:      }
        -:16261:      while_break___70: /* CIL Label */ ;
        -:16262:      }
    #####:16263:      p += 2;
    #####:16264:      goto while_break___69;
        -:16265:    }
        -:16266:    while_break___69: /* CIL Label */ ;
        -:16267:    }
        -:16268:    {
    #####:16269:    while (1) {
        -:16270:      while_continue___71: /* CIL Label */ ;
    #####:16271:      *(p1 + 0) = (unsigned char )(mcnt & 255);
    #####:16272:      *(p1 + 1) = (unsigned char )(mcnt >> 8);
    #####:16273:      goto while_break___71;
        -:16274:    }
        -:16275:    while_break___71: /* CIL Label */ ;
        -:16276:    }
    #####:16277:    goto switch_break;
        -:16278:    case_28: /* CIL Label */ 
    #####:16279:    if (size1) {
    #####:16280:      tmp___106 = string1;
    #####:16281:    } else {
    #####:16282:      tmp___106 = string2;
        -:16283:    }
    #####:16284:    if ((unsigned long )d == (unsigned long )tmp___106) {
    #####:16285:      goto switch_break;
        -:16286:    } else { //Added block
    #####:16287:    if (! size2) {
    #####:16288:      goto switch_break;
        -:16289:    } else { //Added block
    #####:16290:    if ((unsigned long )d == (unsigned long )end2) {
    #####:16291:      goto switch_break;
        -:16292:    }
        -:16293:    }
        -:16294:    }
    #####:16295:    if ((unsigned long )(d - 1) == (unsigned long )end1) {
    #####:16296:      tmp___108 = (int )((int const   )*string2);
    #####:16297:    } else {
    #####:16298:      if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
    #####:16299:        tmp___107 = (int )((int const   )*(end1 - 1));
    #####:16300:      } else {
    #####:16301:        tmp___107 = (int )((int const   )*(d - 1));
        -:16302:      }
    #####:16303:      tmp___108 = tmp___107;
        -:16304:    }
    #####:16305:    prevchar = (boolean )((int )re_syntax_table[tmp___108 & 255] == 1);
    #####:16306:    if ((unsigned long )d == (unsigned long )end1) {
    #####:16307:      tmp___110 = (int )((int const   )*string2);
    #####:16308:    } else {
    #####:16309:      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
    #####:16310:        tmp___109 = (int )((int const   )*(end1 - 1));
    #####:16311:      } else {
    #####:16312:        tmp___109 = (int )((int const   )*d);
        -:16313:      }
    #####:16314:      tmp___110 = tmp___109;
        -:16315:    }
    #####:16316:    thischar = (boolean )((int )re_syntax_table[tmp___110 & 255] == 1);
    #####:16317:    if ((int )prevchar != (int )thischar) {
    #####:16318:      goto switch_break;
        -:16319:    }
    #####:16320:    goto fail;
        -:16321:    case_29: /* CIL Label */ 
    #####:16322:    if (size1) {
    #####:16323:      tmp___111 = string1;
    #####:16324:    } else {
    #####:16325:      tmp___111 = string2;
        -:16326:    }
    #####:16327:    if ((unsigned long )d == (unsigned long )tmp___111) {
    #####:16328:      goto fail;
        -:16329:    } else { //Added block
    #####:16330:    if (! size2) {
    #####:16331:      goto fail;
        -:16332:    } else { //Added block
    #####:16333:    if ((unsigned long )d == (unsigned long )end2) {
    #####:16334:      goto fail;
        -:16335:    }
        -:16336:    }
        -:16337:    }
    #####:16338:    if ((unsigned long )(d - 1) == (unsigned long )end1) {
    #####:16339:      tmp___113 = (int )((int const   )*string2);
    #####:16340:    } else {
    #####:16341:      if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
    #####:16342:        tmp___112 = (int )((int const   )*(end1 - 1));
    #####:16343:      } else {
    #####:16344:        tmp___112 = (int )((int const   )*(d - 1));
        -:16345:      }
    #####:16346:      tmp___113 = tmp___112;
        -:16347:    }
    #####:16348:    prevchar___0 = (boolean )((int )re_syntax_table[tmp___113 & 255] == 1);
    #####:16349:    if ((unsigned long )d == (unsigned long )end1) {
    #####:16350:      tmp___115 = (int )((int const   )*string2);
    #####:16351:    } else {
    #####:16352:      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
    #####:16353:        tmp___114 = (int )((int const   )*(end1 - 1));
    #####:16354:      } else {
    #####:16355:        tmp___114 = (int )((int const   )*d);
        -:16356:      }
    #####:16357:      tmp___115 = tmp___114;
        -:16358:    }
    #####:16359:    thischar___0 = (boolean )((int )re_syntax_table[tmp___115 & 255] == 1);
    #####:16360:    if ((int )prevchar___0 != (int )thischar___0) {
    #####:16361:      goto fail;
        -:16362:    }
    #####:16363:    goto switch_break;
        -:16364:    case_26: /* CIL Label */ ;
    #####:16365:    if ((unsigned long )d == (unsigned long )end1) {
    #####:16366:      tmp___117 = (int )((int const   )*string2);
    #####:16367:    } else {
    #####:16368:      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
    #####:16369:        tmp___116 = (int )((int const   )*(end1 - 1));
    #####:16370:      } else {
    #####:16371:        tmp___116 = (int )((int const   )*d);
        -:16372:      }
    #####:16373:      tmp___117 = tmp___116;
        -:16374:    }
    #####:16375:    if ((int )re_syntax_table[tmp___117 & 255] == 1) {
    #####:16376:      if (size1) {
    #####:16377:        tmp___118 = string1;
    #####:16378:      } else {
    #####:16379:        tmp___118 = string2;
        -:16380:      }
    #####:16381:      if ((unsigned long )d == (unsigned long )tmp___118) {
    #####:16382:        goto switch_break;
        -:16383:      } else { //Added block
    #####:16384:      if (! size2) {
    #####:16385:        goto switch_break;
        -:16386:      } else {
    #####:16387:        if ((unsigned long )(d - 1) == (unsigned long )end1) {
    #####:16388:          tmp___120 = (int )((int const   )*string2);
    #####:16389:        } else {
    #####:16390:          if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
    #####:16391:            tmp___119 = (int )((int const   )*(end1 - 1));
    #####:16392:          } else {
    #####:16393:            tmp___119 = (int )((int const   )*(d - 1));
        -:16394:          }
    #####:16395:          tmp___120 = tmp___119;
        -:16396:        }
    #####:16397:        if (! ((int )re_syntax_table[tmp___120 & 255] == 1)) {
    #####:16398:          goto switch_break;
        -:16399:        }
        -:16400:      }
        -:16401:      }
    #####:16402:    }
    #####:16403:    goto fail;
        -:16404:    case_27: /* CIL Label */ ;
    #####:16405:    if (size1) {
    #####:16406:      tmp___121 = string1;
    #####:16407:    } else {
    #####:16408:      tmp___121 = string2;
        -:16409:    }
    #####:16410:    if (! ((unsigned long )d == (unsigned long )tmp___121)) {
    #####:16411:      if (! (! size2)) {
    #####:16412:        if ((unsigned long )(d - 1) == (unsigned long )end1) {
    #####:16413:          tmp___123 = (int )((int const   )*string2);
    #####:16414:        } else {
    #####:16415:          if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
    #####:16416:            tmp___122 = (int )((int const   )*(end1 - 1));
    #####:16417:          } else {
    #####:16418:            tmp___122 = (int )((int const   )*(d - 1));
        -:16419:          }
    #####:16420:          tmp___123 = tmp___122;
        -:16421:        }
    #####:16422:        if ((int )re_syntax_table[tmp___123 & 255] == 1) {
    #####:16423:          if ((unsigned long )d == (unsigned long )end1) {
    #####:16424:            tmp___125 = (int )((int const   )*string2);
    #####:16425:          } else {
    #####:16426:            if ((unsigned long )d == (unsigned long )(string2 - 1)) {
    #####:16427:              tmp___124 = (int )((int const   )*(end1 - 1));
    #####:16428:            } else {
    #####:16429:              tmp___124 = (int )((int const   )*d);
        -:16430:            }
    #####:16431:            tmp___125 = tmp___124;
        -:16432:          }
    #####:16433:          if ((int )re_syntax_table[tmp___125 & 255] == 1) {
    #####:16434:            if ((unsigned long )d == (unsigned long )end2) {
    #####:16435:              goto switch_break;
        -:16436:            }
    #####:16437:          } else {
    #####:16438:            goto switch_break;
        -:16439:          }
    #####:16440:        }
    #####:16441:      }
    #####:16442:    }
    #####:16443:    goto fail;
        -:16444:    case_24: /* CIL Label */ ;
        -:16445:    {
    #####:16446:    while (1) {
        -:16447:      while_continue___72: /* CIL Label */ ;
    #####:16448:      if (! ((unsigned long )d == (unsigned long )dend)) {
    #####:16449:        goto while_break___72;
        -:16450:      }
    #####:16451:      if ((unsigned long )dend == (unsigned long )end_match_2) {
    #####:16452:        goto fail;
        -:16453:      }
    #####:16454:      d = string2;
    #####:16455:      dend = end_match_2;
        -:16456:    }
        -:16457:    while_break___72: /* CIL Label */ ;
        -:16458:    }
    #####:16459:    if ((unsigned long )d == (unsigned long )end1) {
    #####:16460:      tmp___127 = (int )((int const   )*string2);
    #####:16461:    } else {
    #####:16462:      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
    #####:16463:        tmp___126 = (int )((int const   )*(end1 - 1));
    #####:16464:      } else {
    #####:16465:        tmp___126 = (int )((int const   )*d);
        -:16466:      }
    #####:16467:      tmp___127 = tmp___126;
        -:16468:    }
    #####:16469:    if (! ((int )re_syntax_table[tmp___127 & 255] == 1)) {
    #####:16470:      goto fail;
        -:16471:    }
        -:16472:    {
    #####:16473:    while (1) {
        -:16474:      while_continue___73: /* CIL Label */ ;
    #####:16475:      if (! set_regs_matched_done) {
    #####:16476:        set_regs_matched_done = 1;
    #####:16477:        r___5 = lowest_active_reg;
        -:16478:        {
    #####:16479:        while (1) {
        -:16480:          while_continue___74: /* CIL Label */ ;
    #####:16481:          if (! (r___5 <= highest_active_reg)) {
    #####:16482:            goto while_break___74;
        -:16483:          }
    #####:16484:          tmp___128 = 1U;
    #####:16485:          (reg_info + r___5)->bits.ever_matched_something = tmp___128;
    #####:16486:          (reg_info + r___5)->bits.matched_something = tmp___128;
    #####:16487:          r___5 ++;
        -:16488:        }
        -:16489:        while_break___74: /* CIL Label */ ;
        -:16490:        }
    #####:16491:      }
    #####:16492:      goto while_break___73;
        -:16493:    }
        -:16494:    while_break___73: /* CIL Label */ ;
        -:16495:    }
    #####:16496:    d ++;
    #####:16497:    goto switch_break;
        -:16498:    case_25: /* CIL Label */ ;
        -:16499:    {
    #####:16500:    while (1) {
        -:16501:      while_continue___75: /* CIL Label */ ;
    #####:16502:      if (! ((unsigned long )d == (unsigned long )dend)) {
    #####:16503:        goto while_break___75;
        -:16504:      }
    #####:16505:      if ((unsigned long )dend == (unsigned long )end_match_2) {
    #####:16506:        goto fail;
        -:16507:      }
    #####:16508:      d = string2;
    #####:16509:      dend = end_match_2;
        -:16510:    }
        -:16511:    while_break___75: /* CIL Label */ ;
        -:16512:    }
    #####:16513:    if ((unsigned long )d == (unsigned long )end1) {
    #####:16514:      tmp___130 = (int )((int const   )*string2);
    #####:16515:    } else {
    #####:16516:      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
    #####:16517:        tmp___129 = (int )((int const   )*(end1 - 1));
    #####:16518:      } else {
    #####:16519:        tmp___129 = (int )((int const   )*d);
        -:16520:      }
    #####:16521:      tmp___130 = tmp___129;
        -:16522:    }
    #####:16523:    if ((int )re_syntax_table[tmp___130 & 255] == 1) {
    #####:16524:      goto fail;
        -:16525:    }
        -:16526:    {
    #####:16527:    while (1) {
        -:16528:      while_continue___76: /* CIL Label */ ;
    #####:16529:      if (! set_regs_matched_done) {
    #####:16530:        set_regs_matched_done = 1;
    #####:16531:        r___6 = lowest_active_reg;
        -:16532:        {
    #####:16533:        while (1) {
        -:16534:          while_continue___77: /* CIL Label */ ;
    #####:16535:          if (! (r___6 <= highest_active_reg)) {
    #####:16536:            goto while_break___77;
        -:16537:          }
    #####:16538:          tmp___131 = 1U;
    #####:16539:          (reg_info + r___6)->bits.ever_matched_something = tmp___131;
    #####:16540:          (reg_info + r___6)->bits.matched_something = tmp___131;
    #####:16541:          r___6 ++;
        -:16542:        }
        -:16543:        while_break___77: /* CIL Label */ ;
        -:16544:        }
    #####:16545:      }
    #####:16546:      goto while_break___76;
        -:16547:    }
        -:16548:    while_break___76: /* CIL Label */ ;
        -:16549:    }
    #####:16550:    d ++;
    #####:16551:    goto switch_break;
        -:16552:    switch_default___0: /* CIL Label */ 
        -:16553:    {
    #####:16554:    abort();
        -:16555:    }
        -:16556:    switch_break: /* CIL Label */ ;
        -:16557:    }
    #####:16558:    goto __Cont;
        -:16559:    fail: 
    #####:16560:    if (! (fail_stack.avail == 0U)) {
    #####:16561:      (fail_stack.avail) --;
    #####:16562:      string_temp___0 = (unsigned char const   *)(fail_stack.stack + fail_stack.avail)->pointer;
    #####:16563:      if ((unsigned long )string_temp___0 != (unsigned long )((void *)0)) {
    #####:16564:        d = (char const   *)string_temp___0;
    #####:16565:      }
    #####:16566:      (fail_stack.avail) --;
    #####:16567:      p = (fail_stack.stack + fail_stack.avail)->pointer;
    #####:16568:      (fail_stack.avail) --;
    #####:16569:      highest_active_reg = (active_reg_t )(fail_stack.stack + fail_stack.avail)->integer;
    #####:16570:      (fail_stack.avail) --;
    #####:16571:      lowest_active_reg = (active_reg_t )(fail_stack.stack + fail_stack.avail)->integer;
    #####:16572:      this_reg___5 = highest_active_reg;
        -:16573:      {
    #####:16574:      while (1) {
        -:16575:        while_continue___78: /* CIL Label */ ;
    #####:16576:        if (! (this_reg___5 >= lowest_active_reg)) {
    #####:16577:          goto while_break___78;
        -:16578:        }
    #####:16579:        (fail_stack.avail) --;
    #####:16580:        (reg_info + this_reg___5)->word = *(fail_stack.stack + fail_stack.avail);
    #####:16581:        (fail_stack.avail) --;
    #####:16582:        *(regend + this_reg___5) = (char const   *)(fail_stack.stack + fail_stack.avail)->pointer;
    #####:16583:        (fail_stack.avail) --;
    #####:16584:        *(regstart + this_reg___5) = (char const   *)(fail_stack.stack + fail_stack.avail)->pointer;
    #####:16585:        this_reg___5 --;
        -:16586:      }
        -:16587:      while_break___78: /* CIL Label */ ;
        -:16588:      }
    #####:16589:      set_regs_matched_done = 0;
    #####:16590:      if (! p) {
    #####:16591:        goto fail;
        -:16592:      }
    #####:16593:      if ((unsigned long )p < (unsigned long )pend) {
    #####:16594:        is_a_jump_n___0 = (boolean )0;
        -:16595:        {
    #####:16596:        if ((unsigned int )((re_opcode_t )*p) == 22U) {
    #####:16597:          goto case_22___1;
        -:16598:        }
    #####:16599:        if ((unsigned int )((re_opcode_t )*p) == 18U) {
    #####:16600:          goto case_18___1;
        -:16601:        }
    #####:16602:        if ((unsigned int )((re_opcode_t )*p) == 17U) {
    #####:16603:          goto case_18___1;
        -:16604:        }
    #####:16605:        if ((unsigned int )((re_opcode_t )*p) == 13U) {
    #####:16606:          goto case_18___1;
        -:16607:        }
    #####:16608:        goto switch_default___1;
        -:16609:        case_22___1: /* CIL Label */ 
    #####:16610:        is_a_jump_n___0 = (boolean )1;
        -:16611:        case_18___1: /* CIL Label */ 
        -:16612:        case_17___1: /* CIL Label */ 
        -:16613:        case_13___1: /* CIL Label */ 
    #####:16614:        p1 = p + 1;
        -:16615:        {
    #####:16616:        while (1) {
        -:16617:          while_continue___79: /* CIL Label */ ;
        -:16618:          {
    #####:16619:          while (1) {
        -:16620:            while_continue___80: /* CIL Label */ ;
    #####:16621:            mcnt = (int )*p1 & 255;
    #####:16622:            mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:16623:            goto while_break___80;
        -:16624:          }
        -:16625:          while_break___80: /* CIL Label */ ;
        -:16626:          }
    #####:16627:          p1 += 2;
    #####:16628:          goto while_break___79;
        -:16629:        }
        -:16630:        while_break___79: /* CIL Label */ ;
        -:16631:        }
    #####:16632:        p1 += mcnt;
    #####:16633:        if (is_a_jump_n___0) {
    #####:16634:          if ((unsigned int )((re_opcode_t )*p1) == 21U) {
    #####:16635:            goto fail;
        -:16636:          } else {
    #####:16637:            goto _L___20;
        -:16638:          }
    #####:16639:        } else { //Added block
        -:16640:        _L___20: 
    #####:16641:        if (! is_a_jump_n___0) {
    #####:16642:          if ((unsigned int )((re_opcode_t )*p1) == 15U) {
    #####:16643:            goto fail;
        -:16644:          }
    #####:16645:        }
        -:16646:        }
    #####:16647:        goto switch_break___1;
        -:16648:        switch_default___1: /* CIL Label */ ;
        -:16649:        switch_break___1: /* CIL Label */ ;
        -:16650:        }
    #####:16651:      }
    #####:16652:      if ((unsigned long )d >= (unsigned long )string1) {
    #####:16653:        if ((unsigned long )d <= (unsigned long )end1) {
    #####:16654:          dend = end_match_1;
    #####:16655:        }
    #####:16656:      }
    #####:16657:    } else {
    #####:16658:      goto while_break___3;
        -:16659:    }
        -:16660:    __Cont: ;
        -:16661:  }
        -:16662:  while_break___3: /* CIL Label */ ;
        -:16663:  }
    #####:16664:  if (best_regs_set) {
    #####:16665:    goto restore_best_regs;
        -:16666:  }
        -:16667:  {
    #####:16668:  while (1) {
        -:16669:    while_continue___81: /* CIL Label */ ;
    #####:16670:    regstart = (char const   **)((void *)0);
    #####:16671:    regend = (char const   **)((void *)0);
    #####:16672:    old_regstart = (char const   **)((void *)0);
    #####:16673:    old_regend = (char const   **)((void *)0);
    #####:16674:    best_regstart = (char const   **)((void *)0);
    #####:16675:    best_regend = (char const   **)((void *)0);
    #####:16676:    reg_info = (register_info_type *)((void *)0);
    #####:16677:    reg_dummy = (char const   **)((void *)0);
    #####:16678:    reg_info_dummy = (register_info_type *)((void *)0);
    #####:16679:    goto while_break___81;
        -:16680:  }
        -:16681:  while_break___81: /* CIL Label */ ;
        -:16682:  }
    #####:16683:  return (-1);
        -:16684:}
    #####:16685:}
    #####:16686:static boolean group_match_null_string_p(unsigned char **p , unsigned char *end ,
        -:16687:                                         register_info_type *reg_info ) 
        -:16688:{ 
        -:16689:  int mcnt ;
        -:16690:  unsigned char *p1 ;
        -:16691:  boolean tmp ;
        -:16692:  boolean tmp___0 ;
        -:16693:  boolean tmp___1 ;
        -:16694:
        -:16695:  {
    #####:16696:  p1 = *p + 2;
        -:16697:  {
    #####:16698:  while (1) {
        -:16699:    while_continue: /* CIL Label */ ;
    #####:16700:    if (! ((unsigned long )p1 < (unsigned long )end)) {
    #####:16701:      goto while_break;
        -:16702:    }
        -:16703:    {
    #####:16704:    if ((unsigned int )((re_opcode_t )*p1) == 15U) {
    #####:16705:      goto case_15;
        -:16706:    }
    #####:16707:    if ((unsigned int )((re_opcode_t )*p1) == 7U) {
    #####:16708:      goto case_7;
        -:16709:    }
    #####:16710:    goto switch_default;
        -:16711:    case_15: /* CIL Label */ 
    #####:16712:    p1 ++;
        -:16713:    {
    #####:16714:    while (1) {
        -:16715:      while_continue___0: /* CIL Label */ ;
        -:16716:      {
    #####:16717:      while (1) {
        -:16718:        while_continue___1: /* CIL Label */ ;
    #####:16719:        mcnt = (int )*p1 & 255;
    #####:16720:        mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:16721:        goto while_break___1;
        -:16722:      }
        -:16723:      while_break___1: /* CIL Label */ ;
        -:16724:      }
    #####:16725:      p1 += 2;
    #####:16726:      goto while_break___0;
        -:16727:    }
        -:16728:    while_break___0: /* CIL Label */ ;
        -:16729:    }
    #####:16730:    if (mcnt >= 0) {
        -:16731:      {
    #####:16732:      while (1) {
        -:16733:        while_continue___2: /* CIL Label */ ;
    #####:16734:        if (! ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) == 14U)) {
    #####:16735:          goto while_break___2;
        -:16736:        }
        -:16737:        {
    #####:16738:        tmp = alt_match_null_string_p(p1, (p1 + mcnt) - 3, reg_info);
        -:16739:        }
    #####:16740:        if (! tmp) {
    #####:16741:          return ((boolean )0);
        -:16742:        }
    #####:16743:        p1 += mcnt;
    #####:16744:        if ((unsigned int )((re_opcode_t )*p1) != 15U) {
    #####:16745:          goto while_break___2;
        -:16746:        }
    #####:16747:        p1 ++;
        -:16748:        {
    #####:16749:        while (1) {
        -:16750:          while_continue___3: /* CIL Label */ ;
        -:16751:          {
    #####:16752:          while (1) {
        -:16753:            while_continue___4: /* CIL Label */ ;
    #####:16754:            mcnt = (int )*p1 & 255;
    #####:16755:            mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:16756:            goto while_break___4;
        -:16757:          }
        -:16758:          while_break___4: /* CIL Label */ ;
        -:16759:          }
    #####:16760:          p1 += 2;
    #####:16761:          goto while_break___3;
        -:16762:        }
        -:16763:        while_break___3: /* CIL Label */ ;
        -:16764:        }
    #####:16765:        if ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) != 14U) {
    #####:16766:          p1 -= 3;
    #####:16767:          goto while_break___2;
        -:16768:        }
        -:16769:      }
        -:16770:      while_break___2: /* CIL Label */ ;
        -:16771:      }
        -:16772:      {
    #####:16773:      while (1) {
        -:16774:        while_continue___5: /* CIL Label */ ;
    #####:16775:        mcnt = (int )*(p1 - 2) & 255;
    #####:16776:        mcnt += (int )((signed char )*((p1 - 2) + 1)) << 8;
    #####:16777:        goto while_break___5;
        -:16778:      }
        -:16779:      while_break___5: /* CIL Label */ ;
        -:16780:      }
        -:16781:      {
    #####:16782:      tmp___0 = alt_match_null_string_p(p1, p1 + mcnt, reg_info);
        -:16783:      }
    #####:16784:      if (! tmp___0) {
    #####:16785:        return ((boolean )0);
        -:16786:      }
    #####:16787:      p1 += mcnt;
    #####:16788:    }
    #####:16789:    goto switch_break;
        -:16790:    case_7: /* CIL Label */ 
    #####:16791:    *p = p1 + 2;
    #####:16792:    return ((boolean )1);
        -:16793:    switch_default: /* CIL Label */ 
        -:16794:    {
    #####:16795:    tmp___1 = common_op_match_null_string_p(& p1, end, reg_info);
        -:16796:    }
    #####:16797:    if (! tmp___1) {
    #####:16798:      return ((boolean )0);
        -:16799:    }
        -:16800:    switch_break: /* CIL Label */ ;
        -:16801:    }
        -:16802:  }
        -:16803:  while_break: /* CIL Label */ ;
        -:16804:  }
    #####:16805:  return ((boolean )0);
        -:16806:}
    #####:16807:}
    #####:16808:static boolean alt_match_null_string_p(unsigned char *p , unsigned char *end , register_info_type *reg_info ) 
        -:16809:{ 
        -:16810:  int mcnt ;
        -:16811:  unsigned char *p1 ;
        -:16812:  boolean tmp ;
        -:16813:
        -:16814:  {
    #####:16815:  p1 = p;
        -:16816:  {
    #####:16817:  while (1) {
        -:16818:    while_continue: /* CIL Label */ ;
    #####:16819:    if (! ((unsigned long )p1 < (unsigned long )end)) {
    #####:16820:      goto while_break;
        -:16821:    }
        -:16822:    {
    #####:16823:    if ((unsigned int )((re_opcode_t )*p1) == 15U) {
    #####:16824:      goto case_15;
        -:16825:    }
    #####:16826:    goto switch_default;
        -:16827:    case_15: /* CIL Label */ 
    #####:16828:    p1 ++;
        -:16829:    {
    #####:16830:    while (1) {
        -:16831:      while_continue___0: /* CIL Label */ ;
        -:16832:      {
    #####:16833:      while (1) {
        -:16834:        while_continue___1: /* CIL Label */ ;
    #####:16835:        mcnt = (int )*p1 & 255;
    #####:16836:        mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:16837:        goto while_break___1;
        -:16838:      }
        -:16839:      while_break___1: /* CIL Label */ ;
        -:16840:      }
    #####:16841:      p1 += 2;
    #####:16842:      goto while_break___0;
        -:16843:    }
        -:16844:    while_break___0: /* CIL Label */ ;
        -:16845:    }
    #####:16846:    p1 += mcnt;
    #####:16847:    goto switch_break;
        -:16848:    switch_default: /* CIL Label */ 
        -:16849:    {
    #####:16850:    tmp = common_op_match_null_string_p(& p1, end, reg_info);
        -:16851:    }
    #####:16852:    if (! tmp) {
    #####:16853:      return ((boolean )0);
        -:16854:    }
        -:16855:    switch_break: /* CIL Label */ ;
        -:16856:    }
        -:16857:  }
        -:16858:  while_break: /* CIL Label */ ;
        -:16859:  }
    #####:16860:  return ((boolean )1);
        -:16861:}
    #####:16862:}
    #####:16863:static boolean common_op_match_null_string_p(unsigned char **p , unsigned char *end ,
        -:16864:                                             register_info_type *reg_info ) 
        -:16865:{ 
        -:16866:  int mcnt ;
        -:16867:  boolean ret ;
        -:16868:  int reg_no ;
        -:16869:  unsigned char *p1 ;
        -:16870:  unsigned char *tmp ;
        -:16871:
        -:16872:  {
    #####:16873:  p1 = *p;
    #####:16874:  tmp = p1;
    #####:16875:  p1 ++;
        -:16876:  {
    #####:16877:  if ((unsigned int )((re_opcode_t )*tmp) == 0U) {
    #####:16878:    goto case_0;
        -:16879:  }
    #####:16880:  if ((unsigned int )((re_opcode_t )*tmp) == 9U) {
    #####:16881:    goto case_0;
        -:16882:  }
    #####:16883:  if ((unsigned int )((re_opcode_t )*tmp) == 10U) {
    #####:16884:    goto case_0;
        -:16885:  }
    #####:16886:  if ((unsigned int )((re_opcode_t )*tmp) == 11U) {
    #####:16887:    goto case_0;
        -:16888:  }
    #####:16889:  if ((unsigned int )((re_opcode_t )*tmp) == 12U) {
    #####:16890:    goto case_0;
        -:16891:  }
    #####:16892:  if ((unsigned int )((re_opcode_t )*tmp) == 26U) {
    #####:16893:    goto case_0;
        -:16894:  }
    #####:16895:  if ((unsigned int )((re_opcode_t )*tmp) == 27U) {
    #####:16896:    goto case_0;
        -:16897:  }
    #####:16898:  if ((unsigned int )((re_opcode_t )*tmp) == 28U) {
    #####:16899:    goto case_0;
        -:16900:  }
    #####:16901:  if ((unsigned int )((re_opcode_t )*tmp) == 29U) {
    #####:16902:    goto case_0;
        -:16903:  }
    #####:16904:  if ((unsigned int )((re_opcode_t )*tmp) == 6U) {
    #####:16905:    goto case_6;
        -:16906:  }
    #####:16907:  if ((unsigned int )((re_opcode_t )*tmp) == 13U) {
    #####:16908:    goto case_13;
        -:16909:  }
    #####:16910:  if ((unsigned int )((re_opcode_t )*tmp) == 21U) {
    #####:16911:    goto case_21;
        -:16912:  }
    #####:16913:  if ((unsigned int )((re_opcode_t )*tmp) == 8U) {
    #####:16914:    goto case_8;
        -:16915:  }
    #####:16916:  if ((unsigned int )((re_opcode_t )*tmp) == 23U) {
    #####:16917:    goto case_23;
        -:16918:  }
    #####:16919:  goto switch_default;
        -:16920:  case_0: /* CIL Label */ 
        -:16921:  case_9: /* CIL Label */ 
        -:16922:  case_10: /* CIL Label */ 
        -:16923:  case_11: /* CIL Label */ 
        -:16924:  case_12: /* CIL Label */ 
        -:16925:  case_26: /* CIL Label */ 
        -:16926:  case_27: /* CIL Label */ 
        -:16927:  case_28: /* CIL Label */ 
        -:16928:  case_29: /* CIL Label */ 
    #####:16929:  goto switch_break;
        -:16930:  case_6: /* CIL Label */ 
        -:16931:  {
    #####:16932:  reg_no = (int )*p1;
    #####:16933:  ret = group_match_null_string_p(& p1, end, reg_info);
        -:16934:  }
    #####:16935:  if ((reg_info + reg_no)->bits.match_null_string_p == 3U) {
    #####:16936:    (reg_info + reg_no)->bits.match_null_string_p = (unsigned int )ret;
    #####:16937:  }
    #####:16938:  if (! ret) {
    #####:16939:    return ((boolean )0);
        -:16940:  }
    #####:16941:  goto switch_break;
        -:16942:  case_13: /* CIL Label */ 
        -:16943:  {
    #####:16944:  while (1) {
        -:16945:    while_continue: /* CIL Label */ ;
        -:16946:    {
    #####:16947:    while (1) {
        -:16948:      while_continue___0: /* CIL Label */ ;
    #####:16949:      mcnt = (int )*p1 & 255;
    #####:16950:      mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:16951:      goto while_break___0;
        -:16952:    }
        -:16953:    while_break___0: /* CIL Label */ ;
        -:16954:    }
    #####:16955:    p1 += 2;
    #####:16956:    goto while_break;
        -:16957:  }
        -:16958:  while_break: /* CIL Label */ ;
        -:16959:  }
    #####:16960:  if (mcnt >= 0) {
    #####:16961:    p1 += mcnt;
    #####:16962:  } else {
    #####:16963:    return ((boolean )0);
        -:16964:  }
    #####:16965:  goto switch_break;
        -:16966:  case_21: /* CIL Label */ 
    #####:16967:  p1 += 2;
        -:16968:  {
    #####:16969:  while (1) {
        -:16970:    while_continue___1: /* CIL Label */ ;
        -:16971:    {
    #####:16972:    while (1) {
        -:16973:      while_continue___2: /* CIL Label */ ;
    #####:16974:      mcnt = (int )*p1 & 255;
    #####:16975:      mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:16976:      goto while_break___2;
        -:16977:    }
        -:16978:    while_break___2: /* CIL Label */ ;
        -:16979:    }
    #####:16980:    p1 += 2;
    #####:16981:    goto while_break___1;
        -:16982:  }
        -:16983:  while_break___1: /* CIL Label */ ;
        -:16984:  }
    #####:16985:  if (mcnt == 0) {
    #####:16986:    p1 -= 4;
        -:16987:    {
    #####:16988:    while (1) {
        -:16989:      while_continue___3: /* CIL Label */ ;
        -:16990:      {
    #####:16991:      while (1) {
        -:16992:        while_continue___4: /* CIL Label */ ;
    #####:16993:        mcnt = (int )*p1 & 255;
    #####:16994:        mcnt += (int )((signed char )*(p1 + 1)) << 8;
    #####:16995:        goto while_break___4;
        -:16996:      }
        -:16997:      while_break___4: /* CIL Label */ ;
        -:16998:      }
    #####:16999:      p1 += 2;
    #####:17000:      goto while_break___3;
        -:17001:    }
        -:17002:    while_break___3: /* CIL Label */ ;
        -:17003:    }
    #####:17004:    p1 += mcnt;
    #####:17005:  } else {
    #####:17006:    return ((boolean )0);
        -:17007:  }
    #####:17008:  goto switch_break;
        -:17009:  case_8: /* CIL Label */ 
    #####:17010:  if (! (reg_info + (int )*p1)->bits.match_null_string_p) {
    #####:17011:    return ((boolean )0);
        -:17012:  }
    #####:17013:  goto switch_break;
        -:17014:  case_23: /* CIL Label */ 
    #####:17015:  p1 += 4;
        -:17016:  switch_default: /* CIL Label */ 
    #####:17017:  return ((boolean )0);
        -:17018:  switch_break: /* CIL Label */ ;
        -:17019:  }
    #####:17020:  *p = p1;
    #####:17021:  return ((boolean )1);
        -:17022:}
    #####:17023:}
    #####:17024:static int bcmp_translate(char const   *s1 , char const   *s2 , int len , char *translate ) 
        -:17025:{ 
        -:17026:  register unsigned char const   *p1 ;
        -:17027:  register unsigned char const   *p2 ;
        -:17028:  unsigned char const   *tmp ;
        -:17029:  unsigned char const   *tmp___0 ;
        -:17030:
        -:17031:  {
    #####:17032:  p1 = (unsigned char const   *)s1;
    #####:17033:  p2 = (unsigned char const   *)s2;
        -:17034:  {
    #####:17035:  while (1) {
        -:17036:    while_continue: /* CIL Label */ ;
    #####:17037:    if (! len) {
    #####:17038:      goto while_break;
        -:17039:    }
    #####:17040:    tmp = p1;
    #####:17041:    p1 ++;
    #####:17042:    tmp___0 = p2;
    #####:17043:    p2 ++;
    #####:17044:    if ((int )*(translate + (int const   )*tmp) != (int )*(translate + (int const   )*tmp___0)) {
    #####:17045:      return (1);
        -:17046:    }
    #####:17047:    len --;
        -:17048:  }
        -:17049:  while_break: /* CIL Label */ ;
        -:17050:  }
    #####:17051:  return (0);
        -:17052:}
    #####:17053:}
        1:17054:char const   *re_compile_pattern(char const   *pattern , size_t length , struct re_pattern_buffer *bufp ) 
        -:17055:{ 
        -:17056:  reg_errcode_t ret ;
        -:17057:  char *tmp ;
        -:17058:
        -:17059:  {
        -:17060:  {
        1:17061:  bufp->regs_allocated = 0U;
        1:17062:  bufp->no_sub = 0U;
        1:17063:  bufp->newline_anchor = 1U;
        1:17064:  ret = regex_compile(pattern, length, re_syntax_options, bufp);
        -:17065:  }
        1:17066:  if (! ret) {
        1:17067:    return ((char const   *)((void *)0));
        -:17068:  }
        -:17069:  {
    #####:17070:  tmp = gettext(re_error_msgid + re_error_msgid_idx[(int )ret]);
        -:17071:  }
    #####:17072:  return ((char const   *)tmp);
        -:17073:}
        1:17074:}
    #####:17075:int regcomp(regex_t *preg , char const   *pattern , int cflags ) 
        -:17076:{ 
        -:17077:  reg_errcode_t ret ;
        -:17078:  reg_syntax_t syntax ;
        -:17079:  unsigned long tmp ;
        -:17080:  char *tmp___0 ;
        -:17081:  unsigned int i ;
        -:17082:  char *tmp___1 ;
        -:17083:  __int32_t const   **tmp___3 ;
        -:17084:  unsigned short const   **tmp___4 ;
        -:17085:  size_t tmp___5 ;
        -:17086:  int tmp___6 ;
        -:17087:
        -:17088:  {
    #####:17089:  if (cflags & 1) {
    #####:17090:    tmp = (((((((((((1UL << 1) << 1) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((1UL << 1) << 1) << 1)) | ((((1UL << 1) << 1) << 1) << 1)) | ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
    #####:17091:  } else {
    #####:17092:    tmp = ((((((1UL << 1) << 1) | ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (1UL << 1);
        -:17093:  }
        -:17094:  {
    #####:17095:  syntax = tmp;
    #####:17096:  preg->buffer = (unsigned char *)0;
    #####:17097:  preg->allocated = 0UL;
    #####:17098:  preg->used = 0UL;
    #####:17099:  tmp___0 = xmalloc((size_t )(1 << 8));
    #####:17100:  preg->fastmap = tmp___0;
        -:17101:  }
    #####:17102:  if (cflags & (1 << 1)) {
        -:17103:    {
    #####:17104:    tmp___1 = xmalloc(256UL * sizeof(*((char *)0)));
    #####:17105:    preg->translate = tmp___1;
        -:17106:    }
    #####:17107:    if ((unsigned long )preg->translate == (unsigned long )((void *)0)) {
    #####:17108:      return (12);
        -:17109:    }
    #####:17110:    i = 0U;
        -:17111:    {
    #####:17112:    while (1) {
        -:17113:      while_continue: /* CIL Label */ ;
    #####:17114:      if (! (i < 256U)) {
    #####:17115:        goto while_break;
        -:17116:      }
        -:17117:      {
    #####:17118:      tmp___4 = __ctype_b_loc();
        -:17119:      }
    #####:17120:      if ((int const   )*(*tmp___4 + (int )i) & 256) {
        -:17121:        {
    #####:17122:        tmp___3 = __ctype_tolower_loc();
    #####:17123:        *(preg->translate + i) = (char )((int )*(*tmp___3 + (int )i));
        -:17124:        }
    #####:17125:      } else {
    #####:17126:        *(preg->translate + i) = (char )i;
        -:17127:      }
    #####:17128:      i ++;
        -:17129:    }
        -:17130:    while_break: /* CIL Label */ ;
        -:17131:    }
    #####:17132:  } else {
    #####:17133:    preg->translate = (char *)((void *)0);
        -:17134:  }
    #####:17135:  if (cflags & ((1 << 1) << 1)) {
    #####:17136:    syntax &= ~ ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1);
    #####:17137:    syntax |= (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1;
    #####:17138:    preg->newline_anchor = 1U;
    #####:17139:  } else {
    #####:17140:    preg->newline_anchor = 0U;
        -:17141:  }
        -:17142:  {
    #####:17143:  preg->no_sub = (unsigned int )(! (! (cflags & (((1 << 1) << 1) << 1))));
    #####:17144:  tmp___5 = strlen(pattern);
    #####:17145:  ret = regex_compile(pattern, tmp___5, syntax, preg);
        -:17146:  }
    #####:17147:  if ((unsigned int )ret == 16U) {
    #####:17148:    ret = (reg_errcode_t )8;
    #####:17149:  }
    #####:17150:  if ((unsigned int )ret == 0U) {
    #####:17151:    if (preg->fastmap) {
        -:17152:      {
    #####:17153:      tmp___6 = re_compile_fastmap(preg);
        -:17154:      }
    #####:17155:      if (tmp___6 == -2) {
        -:17156:        {
    #####:17157:        free((void *)preg->fastmap);
    #####:17158:        preg->fastmap = (char *)((void *)0);
        -:17159:        }
    #####:17160:      }
    #####:17161:    }
    #####:17162:  }
    #####:17163:  return ((int )ret);
        -:17164:}
    #####:17165:}
    #####:17166:int regexec(regex_t const   *preg , char const   *string , size_t nmatch , regmatch_t *pmatch ,
        -:17167:            int eflags ) 
        -:17168:{ 
        -:17169:  int ret ;
        -:17170:  struct re_registers regs___0 ;
        -:17171:  regex_t private_preg ;
        -:17172:  int len ;
        -:17173:  size_t tmp ;
        -:17174:  boolean want_reg_info ;
        -:17175:  int tmp___0 ;
        -:17176:  char *tmp___1 ;
        -:17177:  struct re_registers *tmp___2 ;
        -:17178:  unsigned int r ;
        -:17179:  int tmp___3 ;
        -:17180:
        -:17181:  {
        -:17182:  {
    #####:17183:  tmp = strlen(string);
    #####:17184:  len = (int )tmp;
        -:17185:  }
    #####:17186:  if (! preg->no_sub) {
    #####:17187:    if (nmatch > 0UL) {
    #####:17188:      tmp___0 = 1;
    #####:17189:    } else {
    #####:17190:      tmp___0 = 0;
        -:17191:    }
    #####:17192:  } else {
    #####:17193:    tmp___0 = 0;
        -:17194:  }
    #####:17195:  want_reg_info = (boolean )tmp___0;
    #####:17196:  private_preg = (regex_t )*preg;
    #####:17197:  private_preg.not_bol = (unsigned int )(! (! (eflags & 1)));
    #####:17198:  private_preg.not_eol = (unsigned int )(! (! (eflags & (1 << 1))));
    #####:17199:  private_preg.regs_allocated = 2U;
    #####:17200:  if (want_reg_info) {
        -:17201:    {
    #####:17202:    regs___0.num_regs = (unsigned int )nmatch;
    #####:17203:    tmp___1 = xmalloc((nmatch * 2UL) * sizeof(regoff_t ));
    #####:17204:    regs___0.start = (regoff_t *)tmp___1;
        -:17205:    }
    #####:17206:    if ((unsigned long )regs___0.start == (unsigned long )((void *)0)) {
    #####:17207:      return (1);
        -:17208:    }
    #####:17209:    regs___0.end = regs___0.start + nmatch;
    #####:17210:  }
    #####:17211:  if (want_reg_info) {
    #####:17212:    tmp___2 = & regs___0;
    #####:17213:  } else {
    #####:17214:    tmp___2 = (struct re_registers *)0;
        -:17215:  }
        -:17216:  {
    #####:17217:  ret = re_search(& private_preg, string, len, 0, len, tmp___2);
        -:17218:  }
    #####:17219:  if (want_reg_info) {
    #####:17220:    if (ret >= 0) {
    #####:17221:      r = 0U;
        -:17222:      {
    #####:17223:      while (1) {
        -:17224:        while_continue: /* CIL Label */ ;
    #####:17225:        if (! ((size_t )r < nmatch)) {
    #####:17226:          goto while_break;
        -:17227:        }
    #####:17228:        (pmatch + r)->rm_so = *(regs___0.start + r);
    #####:17229:        (pmatch + r)->rm_eo = *(regs___0.end + r);
    #####:17230:        r ++;
        -:17231:      }
        -:17232:      while_break: /* CIL Label */ ;
        -:17233:      }
    #####:17234:    }
        -:17235:    {
    #####:17236:    free((void *)regs___0.start);
        -:17237:    }
    #####:17238:  }
    #####:17239:  if (ret >= 0) {
    #####:17240:    tmp___3 = 0;
    #####:17241:  } else {
    #####:17242:    tmp___3 = 1;
        -:17243:  }
    #####:17244:  return (tmp___3);
        -:17245:}
    #####:17246:}
    #####:17247:size_t regerror(int errcode , regex_t const   *preg , char *errbuf , size_t errbuf_size ) 
        -:17248:{ 
        -:17249:  char const   *msg ;
        -:17250:  size_t msg_size ;
        -:17251:  char *tmp ;
        -:17252:  size_t tmp___0 ;
        -:17253:
        -:17254:  {
    #####:17255:  if (errcode < 0) {
        -:17256:    {
    #####:17257:    abort();
        -:17258:    }
        -:17259:  } else { //Added block
    #####:17260:  if (errcode >= (int )(sizeof(re_error_msgid_idx) / sizeof(re_error_msgid_idx[0]))) {
        -:17261:    {
    #####:17262:    abort();
        -:17263:    }
        -:17264:  }
        -:17265:  }
        -:17266:  {
    #####:17267:  tmp = gettext(re_error_msgid + re_error_msgid_idx[errcode]);
    #####:17268:  msg = (char const   *)tmp;
    #####:17269:  tmp___0 = strlen(msg);
    #####:17270:  msg_size = tmp___0 + 1UL;
        -:17271:  }
    #####:17272:  if (errbuf_size != 0UL) {
    #####:17273:    if (msg_size > errbuf_size) {
        -:17274:      {
    #####:17275:      memcpy((void * __restrict  )errbuf, (void const   * __restrict  )msg, errbuf_size - 1UL);
    #####:17276:      *(errbuf + (errbuf_size - 1UL)) = (char)0;
        -:17277:      }
    #####:17278:    } else {
        -:17279:      {
    #####:17280:      memcpy((void * __restrict  )errbuf, (void const   * __restrict  )msg, msg_size);
        -:17281:      }
        -:17282:    }
    #####:17283:  }
    #####:17284:  return (msg_size);
        -:17285:}
        -:17286:}
    #####:17287:void regfree(regex_t *preg ) 
        -:17288:{ 
        -:17289:
        -:17290:
        -:17291:  {
    #####:17292:  if ((unsigned long )preg->buffer != (unsigned long )((void *)0)) {
        -:17293:    {
    #####:17294:    free((void *)preg->buffer);
        -:17295:    }
    #####:17296:  }
    #####:17297:  preg->buffer = (unsigned char *)((void *)0);
    #####:17298:  preg->allocated = 0UL;
    #####:17299:  preg->used = 0UL;
    #####:17300:  if ((unsigned long )preg->fastmap != (unsigned long )((void *)0)) {
        -:17301:    {
    #####:17302:    free((void *)preg->fastmap);
        -:17303:    }
    #####:17304:  }
    #####:17305:  preg->fastmap = (char *)((void *)0);
    #####:17306:  preg->fastmap_accurate = 0U;
    #####:17307:  if ((unsigned long )preg->translate != (unsigned long )((void *)0)) {
        -:17308:    {
    #####:17309:    free((void *)preg->translate);
        -:17310:    }
    #####:17311:  }
    #####:17312:  preg->translate = (char *)((void *)0);
    #####:17313:  return;
        -:17314:}
        -:17315:}
